|| ?module? StateMonad


StateMonad.anon_30 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_29 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_31 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_28 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_9 b_0 bs_1 = StateMonad.anon_28 (_predefined._Cons b_0 bs_1)
StateMonad.anon_48 ma_0 b_1 state_2 = let _x_1_0 = ma_0 state_2 in StateMonad.anon_9 b_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_10 f_0 as_1 b_2 = StateMonad.anon_48 (StateMonad.mapl f_0 as_1) b_2
StateMonad.anon_47 ma_0 f_1 as_2 state_3 = let _x_1_0 = ma_0 state_3 in StateMonad.anon_10 f_1 as_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.mapl f_0 !_x_1 = case _x_1 (_predefined._Nil -> StateMonad.anon_29 _predefined._Nil) (_predefined._Cons a_1_0 as_1_1 -> StateMonad.anon_47 (f_0 a_1_0) f_0 as_1_1) 
StateMonad.anon_33 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_32 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_11 !op_0 a_1 b_2 = op_0 a_1 b_2
StateMonad.anon_49 ma_0 !op_1 a_2 state_3 = let _x_1_0 = ma_0 state_3 in StateMonad.anon_11 op_1 a_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.mfoldr op_0 e_1 !_x_2 = case _x_2 (_predefined._Nil -> StateMonad.anon_32 e_1) (_predefined._Cons a_1_0 as_1_1 -> StateMonad.anon_49 (StateMonad.mfoldr op_0 e_1 as_1_1) op_0 a_1_0) 
StateMonad.runState state_0 !f_1 = f_1 state_0
StateMonad.anon_36 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_35 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_37 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_34 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_12 y_0 ys_1 = StateMonad.anon_34 (_predefined._Cons y_0 ys_1)
StateMonad.anon_51 ma_0 y_1 state_2 = let _x_1_0 = ma_0 state_2 in StateMonad.anon_12 y_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_13 xs_0 y_1 = StateMonad.anon_51 (StateMonad.sequence xs_0) y_1
StateMonad.anon_50 ma_0 xs_1 state_2 = let _x_1_0 = ma_0 state_2 in StateMonad.anon_13 xs_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.sequence !_x_0 = case _x_0 (_predefined._Nil -> StateMonad.anon_35 _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> StateMonad.anon_50 x_1_0 xs_1_1) 
StateMonad.anon_39 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_38 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_14 f_0 a_1 = StateMonad.anon_38 (f_0 a_1)
StateMonad.anon_52 ma_0 f_1 state_2 = let _x_1_0 = ma_0 state_2 in StateMonad.anon_14 f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.mmap f_0 ma_1 = StateMonad.anon_52 ma_1 f_0
StateMonad.anon_41 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_43 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_42 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_44 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_40 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.anon_15 a_0 as_1 = StateMonad.anon_40 (_predefined._Cons a_0 as_1)
StateMonad.anon_55 ma_0 a_1 state_2 = let _x_1_0 = ma_0 state_2 in StateMonad.anon_15 a_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_16 cond_0 action_1 a_2 = StateMonad.anon_55 (StateMonad.mWhile cond_0 action_1) a_2
StateMonad.anon_54 ma_0 cond_1 action_2 state_3 = let _x_1_0 = ma_0 state_3 in StateMonad.anon_16 cond_1 action_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.anon_17 cond_0 action_1 !bool_2::B = case bool_2 (True -> StateMonad.anon_54 action_1 cond_0 action_1) (False -> StateMonad.anon_43 _predefined._Nil) 
StateMonad.anon_53 !ma_0 cond_1 action_2 state_3 = let _x_1_0 = ma_0 state_3 in StateMonad.anon_17 cond_1 action_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
StateMonad.mWhile cond_0 action_1 = StateMonad.anon_53 cond_0 cond_0 action_1
StateMonad.nothing = StateMonad.nothing
StateMonad.anon_46 x_0 state_1 = _Tuple2 x_0 state_1
StateMonad.onlyIf !_x_0::B monad_1 = case _x_0 (True -> monad_1) (False -> StateMonad.anon_46 StateMonad.nothing) 
<{StateMonad.TD;StateM}> _x_0::B = _predefined._Nil


|| Converted Records
