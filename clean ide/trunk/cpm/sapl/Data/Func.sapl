|| ?module? Data.Func


<{Data.Func.$}> !f_0 !x_1 = f_0 x_1
Data.Func.app !f_0 !x_1 = f_0 x_1
Data.Func.seqSt !f_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons x_1_0 xs_1_1 -> Data.Func.seqSt f_0 xs_1_1 (f_0 x_1_0 st_2)) 
Data.Func.mapSt !f_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> <{_Tuple2!3}> _predefined._Nil st_2) (_predefined._Cons x_1_0 xs_1_1 -> let !_x_2_0 = f_0 x_1_0 st_2, !_x_2_1 = Data.Func.mapSt f_0 xs_1_1 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (_predefined._Cons (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) 
Data.Func.fix !f_0 = let x_1_0 = f_0 x_1_0 in x_1_0
Data.Func.anon_6 !f_0 g_1 x_2 y_3 = f_0 (g_1 x_2) (g_1 y_3)
Data.Func.on f_0 g_1 = Data.Func.anon_6 f_0 g_1


|| Converted Records
