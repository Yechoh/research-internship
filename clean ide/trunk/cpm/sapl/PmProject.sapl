|| ?module? PmProject


<{PmProject.<>_150}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
PmProject.PR_GetRootModuleName !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 _x_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case _x_1_2 (<{_predefined._!Nil!}> -> "") (<{_predefined._!Cons!}> _x_2_0 rest_2_1 -> case _x_2_0 (PmProject._InfListItem mn_3_0 info_3_1 src_3_2 abc_3_3 -> mn_3_0) ) ) 
PmProject.PR_GetTarget !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> target_1_9) 
PmProject.GetModulenames_100 !full_0::B def_1::B !_x_2 = case _x_2 (PmProject._InfListItem mn_1_0 _x_1_1 src_1_2 abc_1_3 -> case _x_1_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 mod_edit_options_2_2 abcLink_2_3 -> case (case full_0 (True -> def_1) (False -> False) ) (True -> StdPathname.MakeFullPathname dir_2_0 (PmPath.MakeDefPathname mn_1_0)) (False -> case full_0 (True -> StdPathname.MakeFullPathname dir_2_0 (PmPath.MakeImpPathname mn_1_0)) (False -> mn_1_0) ) ) ) 
PmProject.PR_GetModulenames !full_0::B !def_1::B !project_2 = case project_2 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> _Tuple2 (UtilStrictLists.MapR (PmProject.GetModulenames_100 full_0 def_1) inflist_1_2) project_2) 
PmProject.FindInList !key_0 !_x_1 = case _x_1 (<{_predefined._!Nil!}> -> Data.Maybe.Nothing) (<{_predefined._!Cons!}> itm_1_0 rest_1_1 -> case itm_1_0 (PmProject._InfListItem mn_2_0 info_2_1 src_2_2 abc_2_3 -> case (StdBool.not (<{StdString.==_2}> mn_2_0 key_0)) (True -> PmProject.FindInList key_0 rest_1_1) (False -> Data.Maybe.Just itm_1_0) ) ) 
PmProject.PR_GetModuleInfo !mn_0 !_x_1 = case _x_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let item_2_0 = PmProject.FindInList mn_0 inflist_1_2 in case (Data.Maybe.isNothing item_2_0) (True -> Data.Maybe.Nothing) (False -> Data.Maybe.Just (select (Data.Maybe.fromJust item_2_0)::PmProject._InfListItem 1)) ) 
PmProject.defaultModInfo_110 = let defaultEditWdOptions_1_0 = PmTypes._EditWdOptions (PmTypes._EditOptions UtilNewlinesFile.NewlineConventionDos) PmTypes.NoWindowPosAndSize in PmTypes._ModInfo "" PmCompilerOptions.DefaultCompilerOptions (PmTypes._ModEditOptions defaultEditWdOptions_1_0 defaultEditWdOptions_1_0 False False) (PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>)
PmProject.SubstituteModuleInfoPaths !applicationDir_0 !projectDir_1 !info_2 = update info_2::PmTypes._ModInfo [0:PmPath.symPath applicationDir_0 projectDir_1 (select info_2::PmTypes._ModInfo 0)]
PmProject.getModule_109 applicationDir_0 project_1 project_dir_2 name_3 = let info_1_0 = PmProject.PR_GetModuleInfo name_3 project_1 in PmTypes._ModInfoAndName (PmProject.SubstituteModuleInfoPaths applicationDir_0 project_dir_2 (<{PmProject._if;643;18_213}> (Data.Maybe.isJust info_1_0) info_1_0)) name_3
<{PmProject._if;643;18_213}> !_x_0::B info_1 = case _x_0 (True -> Data.Maybe.fromJust info_1) (_ -> PmProject.defaultModInfo_110)
PmProject.PR_GetLinkOptions !project_0 = select project_0::PmProject._Project 6
PmProject.SubstituteLinkOptionsPaths !applicationDir_0 !projectDir_1 !linkOptions_2 = case linkOptions_2 (PmTypes._LinkOptions extraObjectModules_1_0 libraries_1_1 method_1_2 generate_relocations_1_3 generate_symbol_table_1_4 generate_link_map_1_5 link_resources_1_6 resource_source_1_7 generate_dll_1_8 dll_export_list_name_1_9 -> update linkOptions_2::PmTypes._LinkOptions [0:PmPath.symPaths applicationDir_0 projectDir_1 extraObjectModules_1_0,1:PmPath.symPaths applicationDir_0 projectDir_1 libraries_1_1]) 
PmProject.PR_GetPaths !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> prjpaths_1_7) 
PmProject.PR_GetStaticLibsInfo !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> staticLib_1_8) 
PmProject.SubstituteStaticLibPaths !applicationDir_0 !projectDir_1 !staticLibs_2 = case staticLibs_2 (PmTypes._StaticLibInfo sLibs_1_0 sDcls_1_1 sDeps_1_2 -> update staticLibs_2::PmTypes._StaticLibInfo [0:PmPath.symPaths applicationDir_0 projectDir_1 sLibs_1_0]) 
PmProject.PR_GetCodeGenOptions !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> codegenopt_1_3) 
PmProject.PR_GetApplicationOptions !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> applicationopt_1_5) 
PmProject.PR_GetExecPath !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> execpath_1_13) 
PmProject.exepath_108 !applicationDir_0 !project_1 !project_dir_2 = PmPath.symPath applicationDir_0 project_dir_2 (PmProject.PR_GetExecPath project_1)
<{PmProject.<>_195}>::B !x_0 !y_1 = StdBool.not (<{StdString.==_2}> x_0 y_1)
PmProject.GetProject !applicationDir_0 !project_1 = let project_dir_1_0 = select project_1::PmProject._Project 12, mainModuleName_1_1 = PmProject.PR_GetRootModuleName project_1 in PmFiles._ProjectGlobalOptions (PmProject.PR_GetCodeGenOptions project_1) (PmProject.PR_GetApplicationOptions project_1) (PmProject.SubstituteLinkOptionsPaths applicationDir_0 project_dir_1_0 (PmProject.PR_GetLinkOptions project_1)) (PmPath.symPaths applicationDir_0 project_dir_1_0 (PmProject.PR_GetPaths project_1)) (UtilStrictLists.Map (PmProject.getModule_109 applicationDir_0 project_1 project_dir_1_0) (UtilStrictLists.Filter (<{PmProject.<>_195}> mainModuleName_1_1) (select (PmProject.PR_GetModulenames False False project_1)::_Tuple2 0))) (PmProject.getModule_109 applicationDir_0 project_1 project_dir_1_0 mainModuleName_1_1) (PmProject.SubstituteStaticLibPaths applicationDir_0 project_dir_1_0 (PmProject.PR_GetStaticLibsInfo project_1)) (PmProject.PR_GetTarget project_1) (PmProject.exepath_108 applicationDir_0 project_1 project_dir_1_0) (select project_1::PmProject._Project 10) (select project_1::PmProject._Project 11) (select project_1::PmProject._Project 14) (<{PmProject._c;611;19_214}> (select project_1::PmProject._Project 15) applicationDir_0 project_dir_1_0)
<{PmProject._c;611;19_214}> !_x_0 applicationDir_1 project_dir_2 = case _x_0 (Data.Maybe.Just post_link_1_0 -> Data.Maybe.Just (PmPath.symPath applicationDir_1 project_dir_2 post_link_1_0)) (Data.Maybe.Nothing -> Data.Maybe.Nothing) 
<{PmProject.cu;834;37_118}> !_vone_0 !<{_v+_1}> !_vList_2 c_l_i_3 !g_l_4 = <{PmProject.g_c1;834;52_215}> g_l_4 _vone_0 <{_v+_1}> _vList_2 c_l_i_3
<{PmProject.g_c1;834;52_215}> !g_l_0 _vone_1 <{_v+_2}> _vList_3 c_l_i_4 = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_118}> _vone_1 <{_v+_2}> _vList_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_4 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_4)
<{PmProject.cu;834;37_117}> !_vArray_0 !_vList_1 c_a_2 c_i_3::I !g_l_4 = <{PmProject.g_c1;834;52_216}> g_l_4 _vArray_0 _vList_1 c_a_2 c_i_3
<{PmProject.g_c1;834;52_216}> !g_l_0 _vArray_1 _vList_2 c_a_3 c_i_4::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_117}> _vArray_1 _vList_2 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 project_path_1_0) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_t_1_1) (_ -> c_a_3)
PmProject.find_path_128::I !dir_0 !i_1::I !project_paths_2 = case (<{StdInt.<_17}> i_1 (_SystemArray.size_44 project_paths_2)) (True -> case (<{StdString.==_2}> (_SystemArray.select_43 project_paths_2 i_1) dir_0) (True -> i_1) (False -> PmProject.find_path_128 dir_0 (<{StdInt.+_6}> i_1 1) project_paths_2) ) (False -> -1) 
PmProject.collect_project_modules_127 !_x_0 !project_modules_1 !project_paths_2 = case _x_0 (<{_predefined._!Cons!}> mod_1_0 mods_1_1 -> case mod_1_0 (PmTypes._ModInfoAndName info_2_0 name_2_1 -> case info_2_0 (PmTypes._ModInfo dir_3_0 compilerOptions_3_1 mod_edit_options_3_2 abcLink_3_3 -> let path_index_4_0::I = PmProject.find_path_128 dir_3_0 0 project_paths_2 in case (StdBool.not (<{StdInt.<_17}> path_index_4_0 0)) (True -> let _x_6_0 = _SystemArray.uselect_6 project_modules_1 path_index_4_0 in PmProject.collect_project_modules_127 mods_1_1 (_SystemArray.update_5 (select _x_6_0::_Tuple2 1) path_index_4_0 (<{_predefined._!Cons!}> mod_1_0 (select _x_6_0::_Tuple2 0))) project_paths_2) (False -> let _x_6_0 = PmProject.collect_project_modules_127 mods_1_1 project_modules_1 project_paths_2 in <{_Tuple2!3}> (select _x_6_0::_Tuple2 0) (<{_predefined._!Cons!}> mod_1_0 (select _x_6_0::_Tuple2 1))) ) ) ) (<{_predefined._!Nil!}> -> <{_Tuple2!3}> project_modules_1 <{_predefined._!Nil!}>) 
PmProject.pair_119 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> case (<{StdString.<_3}> (select x2_2_0::PmTypes._ModInfoAndName 1) (select x1_1_0::PmTypes._ModInfoAndName 1)) (True -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_119 _vList_0 xs_2_1)) (False -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_119 _vList_0 xs_2_1)) ) ) (_ -> _SystemStrictLists._cons_3 _x_1 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_3 _SystemStrictLists._decons_4)))
PmProject.merge_122 !_x_0 !y_1 = case _x_0 (<{_predefined._|Nil}> -> y_1) (<{_predefined._|Cons}> x_1_0 xs_1_1 -> case y_1 (<{_predefined._|Nil}> -> _x_0) (<{_predefined._|Cons}> y_2_0 ys_2_1 -> case (<{StdString.<_3}> (select y_2_0::PmTypes._ModInfoAndName 1) (select x_1_0::PmTypes._ModInfoAndName 1)) (True -> _SystemStrictLists._cons_9 y_2_0 (PmProject.merge_122 _x_0 ys_2_1)) (False -> _SystemStrictLists._cons_9 x_1_0 (PmProject.merge_122 xs_1_1 y_1)) ) ) 
PmProject.merge_stage_121 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> xs1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> xs2_2_0 xxs_2_1 -> select _vList_0::<{_SystemStrictLists.List;}> 0 (PmProject.merge_122 xs1_1_0 xs2_2_0) (PmProject.merge_stage_121 _vList_0 xxs_2_1)) ) (_ -> _x_1)
PmProject.msort_120 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> PmProject.msort_120 _vList_0 (PmProject.merge_stage_121 _vList_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 xs_2_1)))) ) (_ -> _x_1)
PmProject.pair_196 !_x_0 = case _x_0 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> case (<{StdString.<_3}> (select x2_2_0::PmTypes._ModInfoAndName 1) (select x1_1_0::PmTypes._ModInfoAndName 1)) (True -> _predefined._Cons (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_196 xs_2_1)) (False -> _predefined._Cons (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_196 xs_2_1)) ) ) (_ -> _SystemStrictLists._cons_3 _x_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_3 _SystemStrictLists._decons_4)))
PmProject.merge_stage_198 !_x_0 = case _x_0 (<{_predefined._|Cons}> xs1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> xs2_2_0 xxs_2_1 -> _SystemStrictLists._cons_3 (PmProject.merge_122 xs1_1_0 xs2_2_0) (PmProject.merge_stage_198 xxs_2_1)) ) (_ -> _x_0)
PmProject.msort_197 !_x_0 = case _x_0 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> PmProject.msort_197 (PmProject.merge_stage_198 (_SystemStrictLists._cons_3 x1_1_0 (_SystemStrictLists._cons_3 x2_2_0 xs_2_1)))) ) (_ -> _x_0)
PmProject.sort_by_name_130 !l_0 = StdOverloadedList.Hd_100 (PmProject.msort_197 (PmProject.pair_196 l_0))
PmProject.pair_123 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> case (<{StdString.==_2}> (select (select x2_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x1_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> case (<{StdString.<_3}> (select x2_2_0::PmTypes._ModInfoAndName 1) (select x1_1_0::PmTypes._ModInfoAndName 1)) (True -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_123 _vList_0 xs_2_1)) (False -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_123 _vList_0 xs_2_1)) ) (False -> case (<{StdString.<_3}> (select (select x2_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x1_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_123 _vList_0 xs_2_1)) (False -> _predefined._Cons (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 (_SystemStrictLists._nil _vList_0))) (PmProject.pair_123 _vList_0 xs_2_1)) ) ) ) (_ -> _SystemStrictLists._cons_3 _x_1 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_3 _SystemStrictLists._decons_4)))
PmProject.merge_126 !_x_0 !y_1 = case _x_0 (<{_predefined._|Nil}> -> y_1) (<{_predefined._|Cons}> x_1_0 xs_1_1 -> case y_1 (<{_predefined._|Nil}> -> _x_0) (<{_predefined._|Cons}> y_2_0 ys_2_1 -> case (<{StdString.==_2}> (select (select y_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> case (<{StdString.<_3}> (select y_2_0::PmTypes._ModInfoAndName 1) (select x_1_0::PmTypes._ModInfoAndName 1)) (True -> _SystemStrictLists._cons_9 y_2_0 (PmProject.merge_126 _x_0 ys_2_1)) (False -> _SystemStrictLists._cons_9 x_1_0 (PmProject.merge_126 xs_1_1 y_1)) ) (False -> case (<{StdString.<_3}> (select (select y_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> _SystemStrictLists._cons_9 y_2_0 (PmProject.merge_126 _x_0 ys_2_1)) (False -> _SystemStrictLists._cons_9 x_1_0 (PmProject.merge_126 xs_1_1 y_1)) ) ) ) 
PmProject.merge_stage_125 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> xs1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> xs2_2_0 xxs_2_1 -> select _vList_0::<{_SystemStrictLists.List;}> 0 (PmProject.merge_126 xs1_1_0 xs2_2_0) (PmProject.merge_stage_125 _vList_0 xxs_2_1)) ) (_ -> _x_1)
PmProject.msort_124 !_vList_0 !_x_1 = case _x_1 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> PmProject.msort_124 _vList_0 (PmProject.merge_stage_125 _vList_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x1_1_0 (select _vList_0::<{_SystemStrictLists.List;}> 0 x2_2_0 xs_2_1)))) ) (_ -> _x_1)
PmProject.pair_199 !_x_0 = case _x_0 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> case (<{StdString.==_2}> (select (select x2_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x1_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> case (<{StdString.<_3}> (select x2_2_0::PmTypes._ModInfoAndName 1) (select x1_1_0::PmTypes._ModInfoAndName 1)) (True -> _predefined._Cons (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_199 xs_2_1)) (False -> _predefined._Cons (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_199 xs_2_1)) ) (False -> case (<{StdString.<_3}> (select (select x2_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select (select x1_1_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0)) (True -> _predefined._Cons (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_199 xs_2_1)) (False -> _predefined._Cons (_SystemStrictLists._cons_9 x1_1_0 (_SystemStrictLists._cons_9 x2_2_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10)))) (PmProject.pair_199 xs_2_1)) ) ) ) (_ -> _SystemStrictLists._cons_3 _x_0 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_3 _SystemStrictLists._decons_4)))
PmProject.merge_stage_201 !_x_0 = case _x_0 (<{_predefined._|Cons}> xs1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> xs2_2_0 xxs_2_1 -> _SystemStrictLists._cons_3 (PmProject.merge_126 xs1_1_0 xs2_2_0) (PmProject.merge_stage_201 xxs_2_1)) ) (_ -> _x_0)
PmProject.msort_200 !_x_0 = case _x_0 (<{_predefined._|Cons}> x1_1_0 _x_1_1 -> case _x_1_1 (<{_predefined._|Cons}> x2_2_0 xs_2_1 -> PmProject.msort_200 (PmProject.merge_stage_201 (_SystemStrictLists._cons_3 x1_1_0 (_SystemStrictLists._cons_3 x2_2_0 xs_2_1)))) ) (_ -> _x_0)
PmProject.sort_by_dir_and_name_131 !l_0 = StdOverloadedList.Hd_100 (PmProject.msort_200 (PmProject.pair_199 l_0))
PmProject.append_project_modules_129 !i_0::I !project_modules_1 other_modules_2 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_4 project_modules_1)) (True -> <{StdOverloadedList.++|_83}> (PmProject.sort_by_name_130 (_SystemArray.select_3 project_modules_1 i_0)) (PmProject.append_project_modules_129 (<{StdInt.+_6}> i_0 1) project_modules_1 other_modules_2)) (False -> PmProject.sort_by_dir_and_name_131 other_modules_2) 
<{PmProject.cu;834;37_202}>::I !<{_v+_0}> !_vList_1 c_l_i_2::I !g_l_3 = <{PmProject.g_c1;834;52_217}> g_l_3 <{_v+_0}> _vList_1 c_l_i_2
<{PmProject.g_c1;834;52_217}>::I !g_l_0 <{_v+_1}> _vList_2 c_l_i_3::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_202}> <{_v+_1}> _vList_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_3 StdInt.one_11) g_t_1_1) (_ -> c_l_i_3)
<{PmProject.cu;834;37_203}> !_vList_0 !c_a_1 c_i_2::I !g_l_3 = <{PmProject.g_c1;834;52_218}> g_l_3 _vList_0 c_a_1 c_i_2
<{PmProject.g_c1;834;52_218}> !g_l_0 _vList_1 !c_a_2 c_i_3::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_203}> _vList_1 (_SystemArray.update_45 c_a_2 c_i_3 project_path_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{PmProject.cu;834;37_204}>::I !_vList_0 !c_l_i_1::I !g_l_2 = <{PmProject.g_c1;834;52_219}> g_l_2 _vList_0 c_l_i_1
<{PmProject.g_c1;834;52_219}>::I !g_l_0 _vList_1 !c_l_i_2::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_204}> _vList_1 (<{StdInt.+_6}> c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{PmProject.cu;834;37_205}> !c_a_0 c_i_1::I !g_l_2 = <{PmProject.g_c1;834;52_220}> g_l_2 c_a_0 c_i_1
<{PmProject.g_c1;834;52_220}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_205}> (_SystemArray.update_45 c_a_1 c_i_2 project_path_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{PmProject.cu;834;37_206}>::I !c_l_i_0::I !g_l_1 = <{PmProject.g_c1;834;52_221}> g_l_1 c_l_i_0
<{PmProject.g_c1;834;52_221}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (<{_predefined._|Cons}> project_path_1_0 g_t_1_1 -> <{PmProject.cu;834;37_206}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
PmProject.sort_modules !projectGO_0 = case projectGO_0 (PmFiles._ProjectGlobalOptions pg_codegen_1_0 pg_application_1_1 pg_link_1_2 pg_projectPaths_1_3 pg_otherModules_1_4 pg_mainModule_1_5 pg_staticLib_1_6 pg_target_1_7 pg_execpath_1_8 pg_dynamic_1_9 pg_root_directory_1_10 pg_precompile_1_11 pg_postlink_1_12 -> let project_paths_2_0 = <{PmProject.cu;834;37_205}> (_SystemArray._createArray_40 (<{PmProject.cu;834;37_206}> 0 pg_projectPaths_1_3)) 0 pg_projectPaths_1_3, _x_2_1 = PmProject.collect_project_modules_127 pg_otherModules_1_4 (_SystemArray.createArray_1 (_SystemArray.size_44 project_paths_2_0) <{_predefined._!Nil!}>) project_paths_2_0 in update projectGO_0::PmFiles._ProjectGlobalOptions [4:PmProject.append_project_modules_129 0 (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1)]) 
PmProject.SaveProjectFileOnly_115 !_vFileSystem_0 projectPath_1 project_2 applicationDir_3 files_4 = let _x_1_0 = select _vFileSystem_0::<{StdFile.FileSystem;}> 1 projectPath_1 1 files_4 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> _Tuple2 False (select _x_1_0::_Tuple3 2)) (False -> let !projectGO_3_0 = PmProject.GetProject applicationDir_3 project_2, !_x_3_1 = select _vFileSystem_0::<{StdFile.FileSystem;}> 0 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.project_table (PmProject.sort_modules projectGO_3_0)) (select _x_1_0::_Tuple3 1)) (select _x_1_0::_Tuple3 2) in _Tuple2 (select _x_3_1::_Tuple2 0) (select _x_3_1::_Tuple2 1)) 
PmProject.SaveProjectAndPropsFile_114 !_vFileSystem_0 projectPath_1 project_2 applicationDir_3 files_4 = let _x_1_0 = select _vFileSystem_0::<{StdFile.FileSystem;}> 1 projectPath_1 1 files_4 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> _Tuple2 False (select _x_1_0::_Tuple3 2)) (False -> let prp_path_3_0 = <{StdString.+++_11}> (<{StdPathname.RemoveSuffix`}> projectPath_1) ".prp", files_3_1 = select _x_1_0::_Tuple3 2, _x_3_2 = select _vFileSystem_0::<{StdFile.FileSystem;}> 1 prp_path_3_0 1 files_3_1 in case (StdBool.not (select _x_3_2::_Tuple3 0)) (True -> _Tuple2 False (select (select _vFileSystem_0::<{StdFile.FileSystem;}> 0 (select _x_1_0::_Tuple3 1) (select _x_3_2::_Tuple3 2))::_Tuple2 1)) (False -> let !projectGO_5_0 = PmProject.GetProject applicationDir_3 project_2, !_x_5_1 = select _vFileSystem_0::<{StdFile.FileSystem;}> 0 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.project_table projectGO_5_3) (select _x_1_0::_Tuple3 1)) (select _x_3_2::_Tuple3 2), !_x_5_2 = select _vFileSystem_0::<{StdFile.FileSystem;}> 0 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.edit_options_table projectGO_5_3) (select _x_3_2::_Tuple3 1)) (select _x_5_1::_Tuple2 1), projectGO_5_3 = PmProject.sort_modules projectGO_5_0 in _Tuple2 (PmProject._f222_222 (select _x_5_1::_Tuple2 0) _x_5_2) (select _x_5_2::_Tuple2 1)) ) 
PmProject._f222_222::B !_x_0::B _x_1 = case _x_0 (True -> select _x_1::_Tuple2 0) (_ -> False)
PmProject.SaveProjectAndPropsFile_207 !projectPath_0 project_1 applicationDir_2 !files_3 = let _x_1_0 = StdFile.fopen_27 projectPath_0 1 files_3 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> _Tuple2 False (select _x_1_0::_Tuple3 2)) (False -> let prp_path_3_0 = <{StdString.+++_11}> (<{StdPathname.RemoveSuffix`}> projectPath_0) ".prp", files_3_1 = select _x_1_0::_Tuple3 2, _x_3_2 = StdFile.fopen_27 prp_path_3_0 1 files_3_1 in case (StdBool.not (select _x_3_2::_Tuple3 0)) (True -> _Tuple2 False (select (StdFile.fclose_26 (select _x_1_0::_Tuple3 1) (select _x_3_2::_Tuple3 2))::_Tuple2 1)) (False -> let !projectGO_5_0 = PmProject.GetProject applicationDir_2 project_1, !_x_5_1 = StdFile.fclose_26 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.project_table projectGO_5_3) (select _x_1_0::_Tuple3 1)) (select _x_3_2::_Tuple3 2), !_x_5_2 = StdFile.fclose_26 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.edit_options_table projectGO_5_3) (select _x_3_2::_Tuple3 1)) (select _x_5_1::_Tuple2 1), projectGO_5_3 = PmProject.sort_modules projectGO_5_0 in _Tuple2 (PmProject._f223_223 (select _x_5_1::_Tuple2 0) _x_5_2) (select _x_5_2::_Tuple2 1)) ) 
PmProject._f223_223::B !_x_0::B _x_1 = case _x_0 (True -> select _x_1::_Tuple2 0) (_ -> False)
PmProject.SaveProjectFile !projectPath_0 !project_1 !applicationDir_2 !files_3 = PmProject.SaveProjectAndPropsFile_207 projectPath_0 project_1 applicationDir_2 files_3
PmProject.DefStaticLibInfo = PmTypes._StaticLibInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}> <{_predefined._!Nil!}>
PmProject.PR_InitProject = PmProject._Project True True <{_predefined._!Nil!}> PmTypes.DefCodeGenOptions True PmTypes.DefApplicationOptions PmTypes.DefaultLinkOptions <{_predefined._!Nil!}> PmProject.DefStaticLibInfo "" PmFiles.EmptyDynamicInfo "." "" "" Data.Maybe.Nothing Data.Maybe.Nothing
PmProject.add_edit_options_of_other_module_134 !m_0 !_x_1 = case m_0 (PmTypes._ModInfoAndName info_1_0 name_1_1 -> case _x_1 (<{_predefined._!Cons!}> mod_2_0 mods_2_1 -> case (case (<{StdString.==_2}> (select mod_2_0::PmTypes._ModInfoAndName 1) name_1_1) (True -> <{StdString.==_2}> (select (select mod_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select info_1_0::PmTypes._ModInfo 0)) (False -> False) ) (True -> <{_predefined._!Cons!}> (update mod_2_0::PmTypes._ModInfoAndName [0:update (select mod_2_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo [2:select info_1_0::PmTypes._ModInfo 2]]) mods_2_1) (False -> <{_predefined._!Cons!}> mod_2_0 (PmProject.add_edit_options_of_other_module_134 m_0 mods_2_1)) ) ) (_ -> case _x_1 (<{_predefined._!Nil!}> -> <{_predefined._!Cons!}> m_0 <{_predefined._!Nil!}>) )
PmProject.add_edit_options_of_other_modules_133 !_x_0 !_x_1 = case _x_0 (<{_predefined._!Cons!}> m_1_0 mods_edit_options_1_1 -> case m_1_0 (PmTypes._ModInfoAndName info_2_0 name_2_1 -> case _x_1 (<{_predefined._!Cons!}> mod_3_0 mods_3_1 -> case (case (<{StdString.==_2}> (select mod_3_0::PmTypes._ModInfoAndName 1) name_2_1) (True -> <{StdString.==_2}> (select (select mod_3_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0) (select info_2_0::PmTypes._ModInfo 0)) (False -> False) ) (True -> <{_predefined._!Cons!}> (update mod_3_0::PmTypes._ModInfoAndName [0:update (select mod_3_0::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo [2:select info_2_0::PmTypes._ModInfo 2]]) (PmProject.add_edit_options_of_other_modules_133 mods_edit_options_1_1 mods_3_1)) (False -> PmProject.add_edit_options_of_other_modules_133 mods_edit_options_1_1 (<{_predefined._!Cons!}> mod_3_0 (PmProject.add_edit_options_of_other_module_134 m_1_0 mods_3_1))) ) ) ) (_ -> case _x_1 (<{_predefined._!Nil!}> -> _x_0) (_ -> case _x_0 (<{_predefined._!Nil!}> -> _x_1) ))
PmProject.add_edit_options !_x_0 !projectGO_1 = case _x_0 (PmFiles._ProjectGlobalOptions pg_codegen_1_0 pg_application_1_1 pg_link_1_2 pg_projectPaths_1_3 pg_otherModules_1_4 pg_mainModule_1_5 pg_staticLib_1_6 pg_target_1_7 pg_execpath_1_8 pg_dynamic_1_9 pg_root_directory_1_10 pg_precompile_1_11 pg_postlink_1_12 -> let !edit_options_2_0 = select (select pg_mainModule_1_5::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 2, s1_2_1 = select projectGO_1::PmFiles._ProjectGlobalOptions 5 in update projectGO_1::PmFiles._ProjectGlobalOptions [4:PmProject.add_edit_options_of_other_modules_133 pg_otherModules_1_4 (select projectGO_1::PmFiles._ProjectGlobalOptions 4),5:update s1_2_1::PmTypes._ModInfoAndName [0:update (select s1_2_1::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo [2:edit_options_2_0]]]) 
PmProject.add_edit_options_from_prp_file !prp_path_0 !projectGO_1 !empty_projectGO_2 !files_3 = let _x_1_0 = StdFile.fopen_27 prp_path_0 3 files_3 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> projectGO_1 (select _x_1_0::_Tuple3 2)) (False -> let prp_file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = UtilOptions.ReadVersion prp_file_3_0 in case (<{StdInt.==_16}> (_SystemArray.size_20 (select _x_3_1::_Tuple2 0)) 0) (True -> <{_Tuple2!3}> projectGO_1 (select _x_1_0::_Tuple3 2)) (False -> let !edit_projectGO_5_0 = UtilOptions.GetOptions PmFiles.ProjectTable (select _x_5_2::_Tuple2 0) empty_projectGO_2, prp_file_5_1 = select _x_3_1::_Tuple2 1, _x_5_2 = UtilOptions.ReadOptionsFile prp_file_5_1, prp_file_5_3 = select _x_5_2::_Tuple2 1, files_5_4 = select _x_1_0::_Tuple3 2, _x_5_5 = StdFile.fclose_26 prp_file_5_3 files_5_4 in case (StdBool.not (select _x_5_5::_Tuple2 0)) (True -> <{_Tuple2!3}> projectGO_1 (select _x_5_5::_Tuple2 1)) (False -> <{_Tuple2!3}> (PmProject.add_edit_options edit_projectGO_5_0 projectGO_1) (select _x_5_5::_Tuple2 1)) ) ) 
PmProject.anon_132 !p_0 = update p_0::PmFiles._ProjectGlobalOptions [7:"StdEnv"]
PmProject.make_project_dir !n_dots_0::I !project_directory_1 = case (<{StdInt.<_17}> 1 n_dots_0) (True -> let parent_of_project_directory_2_0 = StdPathname.RemoveFilename project_directory_1 in case (case (<{StdInt.==_16}> (_SystemArray.size_20 parent_of_project_directory_2_0) (_SystemArray.size_20 project_directory_1)) (True -> True) (False -> <{StdInt.==_16}> (_SystemArray.size_20 parent_of_project_directory_2_0) 0) ) (True -> project_directory_1) (False -> PmProject.make_project_dir (<{StdInt.-_7}> n_dots_0 1) parent_of_project_directory_2_0) ) (False -> project_directory_1) 
PmProject.ExpandLinkOptionsPaths !applicationDir_0 !projectDir_1 !linkOptions_2 = case linkOptions_2 (PmTypes._LinkOptions extraObjectModules_1_0 libraries_1_1 method_1_2 generate_relocations_1_3 generate_symbol_table_1_4 generate_link_map_1_5 link_resources_1_6 resource_source_1_7 generate_dll_1_8 dll_export_list_name_1_9 -> update linkOptions_2::PmTypes._LinkOptions [0:PmPath.fulPaths applicationDir_0 projectDir_1 extraObjectModules_1_0,1:PmPath.fulPaths applicationDir_0 projectDir_1 libraries_1_1]) 
PmProject.ExpandModuleInfoPaths !applicationDir_0 !projectDir_1 !module_2 = case module_2 (PmTypes._ModInfo dir_1_0 compilerOptions_1_1 mod_edit_options_1_2 abcLink_1_3 -> update module_2::PmTypes._ModInfo [0:PmPath.fulPath applicationDir_0 projectDir_1 dir_1_0]) 
PmProject.PR_AddRootModule !cg_0 !ao_1 !prjs_2 !linkOptions_3 !mn_4 !info_5 = case info_5 (PmTypes._ModInfo dir_1_0 compilerOptions_1_1 mod_edit_options_1_2 abcLink_1_3 -> update PmProject.PR_InitProject::PmProject._Project [0:False,1:True,2:<{_predefined._!Cons!}> (PmProject._InfListItem mn_4 info_5 True True) <{_predefined._!Nil!}>,3:cg_0,4:True,5:ao_1,6:linkOptions_3,7:prjs_2,8:PmProject.DefStaticLibInfo,9:"",13:""]) 
PmProject.PR_AddModule !mn_0 !info_1 !project_2 = case info_1 (PmTypes._ModInfo dir_1_0 compilerOptions_1_1 mod_edit_options_1_2 abcLink_1_3 -> case project_2 (PmProject._Project saved_2_0 exec_2_1 inflist_2_2 codegenopt_2_3 code_gen_options_unchanged_2_4 applicationopt_2_5 linkOptions_2_6 prjpaths_2_7 staticLib_2_8 target_2_9 dynamic_info_2_10 relative_root_directory_2_11 root_directory_2_12 execpath_2_13 prec_2_14 posl_2_15 -> case inflist_2_2 (<{_predefined._!Cons!}> root_3_0 rest_3_1 -> update project_2::PmProject._Project [2:<{_predefined._!Cons!}> root_3_0 (<{_predefined._!Cons!}> (PmProject._InfListItem mn_0 info_1 True True) rest_3_1)]) (<{_predefined._!Nil!}> -> update project_2::PmProject._Project [2:<{_predefined._!Cons!}> (PmProject._InfListItem mn_0 info_1 True True) <{_predefined._!Nil!}>]) ) ) 
PmProject.addModules_107 applicationDir_0 !_x_1 project_dir_2 !project_3 = case _x_1 (<{_predefined._!Nil!}> -> project_3) (<{_predefined._!Cons!}> _x_1_0 t_1_1 -> case _x_1_0 (PmTypes._ModInfoAndName info_2_0 name_2_1 -> PmProject.addModules_107 applicationDir_0 t_1_1 project_dir_2 (PmProject.PR_AddModule name_2_1 (PmProject.ExpandModuleInfoPaths applicationDir_0 project_dir_2 info_2_0) project_3)) ) 
PmProject.ExpandStaticLibPaths !applicationDir_0 !projectDir_1 !staticLibs_2 = case staticLibs_2 (PmTypes._StaticLibInfo sLibs_1_0 sDcls_1_1 sDeps_1_2 -> update staticLibs_2::PmTypes._StaticLibInfo [0:PmPath.fulPaths applicationDir_0 projectDir_1 sLibs_1_0]) 
PmProject.PR_SetStaticLibsInfo !staticLib_0 !project_1 = update project_1::PmProject._Project [8:staticLib_0]
PmProject.PR_SetTarget !target_0 !project_1 = case (<{StdString.==_2}> target_0 (select project_1::PmProject._Project 9)) (True -> project_1) (False -> update project_1::PmProject._Project [0:False,1:False,9:target_0]) 
PmProject.PR_SetExecPath !pth_0 !prj_1 = update prj_1::PmProject._Project [13:pth_0]
PmProject.SetProject !applicationDir_0 !project_file_dir_1 !_x_2 = case _x_2 (PmFiles._ProjectGlobalOptions pg_codegen_1_0 pg_application_1_1 pg_link_1_2 pg_projectPaths_1_3 pg_otherModules_1_4 _x_1_5 pg_staticLib_1_6 pg_target_1_7 pg_execpath_1_8 pg_dynamic_1_9 pg_root_directory_1_10 pg_precompile_1_11 pg_postlink_1_12 -> case _x_1_5 (PmTypes._ModInfoAndName info_2_0 name_2_1 -> let project_dir_3_0 = PmProject.make_project_dir (_SystemArray.size_20 pg_root_directory_1_10) project_file_dir_1 in update (PmProject.PR_SetExecPath (PmPath.fulPath applicationDir_0 project_dir_3_0 pg_execpath_1_8) (PmProject.PR_SetTarget pg_target_1_7 (PmProject.PR_SetStaticLibsInfo (PmProject.ExpandStaticLibPaths applicationDir_0 project_dir_3_0 pg_staticLib_1_6) (PmProject.addModules_107 applicationDir_0 pg_otherModules_1_4 project_dir_3_0 (PmProject.PR_AddRootModule pg_codegen_1_0 pg_application_1_1 (PmPath.fulPaths applicationDir_0 project_dir_3_0 pg_projectPaths_1_3) (PmProject.ExpandLinkOptionsPaths applicationDir_0 project_dir_3_0 pg_link_1_2) name_2_1 (PmProject.ExpandModuleInfoPaths applicationDir_0 project_dir_3_0 info_2_0))))))::PmProject._Project [10:pg_dynamic_1_9,11:pg_root_directory_1_10,12:project_dir_3_0,14:pg_precompile_1_11,15:<{PmProject._c;597;23_224}> pg_postlink_1_12 applicationDir_0 project_dir_3_0]) ) 
<{PmProject._c;597;23_224}> !pg_postlink_0 applicationDir_1 project_dir_2 = case pg_postlink_0 (Data.Maybe.Just post_link_1_0 -> Data.Maybe.Just (PmPath.fulPath applicationDir_1 project_dir_2 post_link_1_0)) (Data.Maybe.Nothing -> Data.Maybe.Nothing) 
PmProject.PR_GetRootPathName !p_0 = case p_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> <{_Tuple2!3}> "" p_0) (<{_predefined._!Cons!}> _x_2_0 rest_2_1 -> case _x_2_0 (PmProject._InfListItem mn_3_0 _x_3_1 src_3_2 abc_3_3 -> case _x_3_1 (PmTypes._ModInfo dir_4_0 compilerOptions_4_1 mod_edit_options_4_2 abcLink_4_3 -> case (<{StdInt.==_16}> (_SystemArray.size_20 dir_4_0) 0) (True -> <{_Tuple2!3}> "" p_0) (False -> <{_Tuple2!3}> (StdPathname.MakeFullPathname dir_4_0 (PmPath.MakeImpPathname mn_3_0)) p_0) ) ) ) ) 
PmProject.ReadProjectFile !projectPath_0 !applicationDir_1 !files_2 = let _x_1_0 = StdFile.fopen_27 projectPath_0 3 files_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (_Tuple3 PmProject.PR_InitProject False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> (StdPathname.RemovePath projectPath_0) "\" could not be opened."))) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = UtilOptions.ReadVersion file_3_0, version_3_2 = select _x_3_1::_Tuple2 0 in case (<{StdString.==_2}> version_3_2 "") (True -> <{_Tuple2!3}> (_Tuple3 PmProject.PR_InitProject False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> (StdPathname.RemovePath projectPath_0) "\" is an old project and could not be opened."))) (select (StdFile.fclose_26 (select _x_3_1::_Tuple2 1) (select _x_1_0::_Tuple3 2))::_Tuple2 1)) (False -> let !_x_5_0 = UtilOptions.ReadOptionsFile (select _x_3_1::_Tuple2 1), !empty_projectGO_5_1 = PmProject.GetProject applicationDir_1 PmProject.PR_InitProject, !projectGO_5_2 = UtilOptions.GetOptions PmFiles.ProjectTable (select _x_5_0::_Tuple2 0) empty_projectGO_5_1, !_x_5_3 = PmProject.add_edit_options_from_prp_file (<{StdString.+++_11}> (<{StdPathname.RemoveSuffix`}> projectPath_0) ".prp") projectGO_5_2 empty_projectGO_5_1 (select _x_1_0::_Tuple3 2), !projectGO_5_4 = <{PmProject._if;937;36_225}> (<{StdString.==_2}> version_3_2 "1.3") (select _x_5_3::_Tuple2 0), !unexpanded_exec_path_5_5 = select projectGO_5_4::PmFiles._ProjectGlobalOptions 8, !project_5_6 = PmProject.SetProject applicationDir_1 (StdPathname.RemoveFilename projectPath_0) projectGO_5_4, !execpath_5_7 = PmProject.PR_GetExecPath project_5_6, !_x_5_8 = PmProject.PR_GetRootPathName project_5_6, !project_5_9 = PmProject.PR_SetExecPath (<{PmProject._if;945;51_226}> (<{StdInt.==_16}> (_SystemArray.size_20 unexpanded_exec_path_5_5) 0) _x_5_8 execpath_5_7) (select _x_5_8::_Tuple2 1), !_x_5_10 = StdFile.fclose_26 (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1) in case (StdBool.not (select _x_5_10::_Tuple2 0)) (True -> <{_Tuple2!3}> (_Tuple3 project_5_9 True (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> (StdPathname.RemovePath projectPath_0) "\" could not be closed."))) (select _x_5_10::_Tuple2 1)) (False -> <{_Tuple2!3}> (_Tuple3 project_5_9 True "") (select _x_5_10::_Tuple2 1)) ) ) 
<{PmProject._if;945;51_226}> !_x_0::B _x_1 execpath_2 = case _x_0 (True -> PmPath.MakeExecPathname (select _x_1::_Tuple2 0)) (_ -> execpath_2)
<{PmProject._if;937;36_225}> !_x_0::B = case _x_0 (True -> PmProject.anon_132) (_ -> StdFunc.id)
<{PmProject.c;828;54_116}> !<{_v==_0}> !_vList_1 !_vList_2 main_module_dir_path_3 !g_l_4 = <{PmProject.g_c1;828;58_227}> g_l_4 <{_v==_0}> main_module_dir_path_3 _vList_1 _vList_2
<{PmProject.g_c1;828;58_227}> !g_l_0 <{_v==_1}> main_module_dir_path_2 _vList_3 _vList_4 = case g_l_0 (<{_predefined._|Cons}> p_1_0 g_t_1_1 -> case (StdBool.not (select <{_v==_1}>::<{StdOverloaded.==;}> 0 p_1_0 main_module_dir_path_2)) (True -> select _vList_3::<{_SystemStrictLists.List;}> 0 p_1_0 (<{PmProject.c;828;54_116}> <{_v==_1}> _vList_3 _vList_4 main_module_dir_path_2 g_t_1_1)) (False -> <{PmProject.c;828;54_116}> <{_v==_1}> _vList_3 _vList_4 main_module_dir_path_2 g_t_1_1) ) (_ -> _SystemStrictLists._nil _vList_3)
<{PmProject.c;828;54_208}> !_vList_0 !_vList_1 main_module_dir_path_2 !g_l_3 = <{PmProject.g_c1;828;58_228}> g_l_3 main_module_dir_path_2 _vList_0 _vList_1
<{PmProject.g_c1;828;58_228}> !g_l_0 main_module_dir_path_1 _vList_2 _vList_3 = case g_l_0 (<{_predefined._|Cons}> p_1_0 g_t_1_1 -> case (StdBool.not (<{StdString.==_2}> p_1_0 main_module_dir_path_1)) (True -> select _vList_2::<{_SystemStrictLists.List;}> 0 p_1_0 (<{PmProject.c;828;54_208}> _vList_2 _vList_3 main_module_dir_path_1 g_t_1_1)) (False -> <{PmProject.c;828;54_208}> _vList_2 _vList_3 main_module_dir_path_1 g_t_1_1) ) (_ -> _SystemStrictLists._nil _vList_2)
<{PmProject.c;828;54_209}> !_vList_0 main_module_dir_path_1 !g_l_2 = <{PmProject.g_c1;828;58_229}> g_l_2 main_module_dir_path_1 _vList_0
<{PmProject.g_c1;828;58_229}> !g_l_0 main_module_dir_path_1 _vList_2 = case g_l_0 (<{_predefined._|Cons}> p_1_0 g_t_1_1 -> case (StdBool.not (<{StdString.==_2}> p_1_0 main_module_dir_path_1)) (True -> _SystemStrictLists._cons_9 p_1_0 (<{PmProject.c;828;54_209}> _vList_2 main_module_dir_path_1 g_t_1_1)) (False -> <{PmProject.c;828;54_209}> _vList_2 main_module_dir_path_1 g_t_1_1) ) (_ -> _SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10))
<{PmProject.c;828;54_210}> main_module_dir_path_0 !g_l_1 = <{PmProject.g_c1;828;58_230}> g_l_1 main_module_dir_path_0
<{PmProject.g_c1;828;58_230}> !g_l_0 main_module_dir_path_1 = case g_l_0 (<{_predefined._|Cons}> p_1_0 g_t_1_1 -> case (StdBool.not (<{StdString.==_2}> p_1_0 main_module_dir_path_1)) (True -> _SystemStrictLists._cons_9 p_1_0 (<{PmProject.c;828;54_210}> main_module_dir_path_1 g_t_1_1)) (False -> <{PmProject.c;828;54_210}> main_module_dir_path_1 g_t_1_1) ) (_ -> _SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_9 _SystemStrictLists._decons_10))
PmProject.save_project_template_file !projectPath_0 !project_1 !applicationDir_2 !files_3 = let _x_1_0 = StdFile.fopen_27 projectPath_0 1 files_3 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> False (select _x_1_0::_Tuple3 2)) (False -> let !projectGO_3_0 = PmProject.GetProject applicationDir_2 project_1, !main_module_dir_path_3_1 = select (select (select projectGO_3_0::PmFiles._ProjectGlobalOptions 5)::PmTypes._ModInfoAndName 0)::PmTypes._ModInfo 0 in StdFile.fclose_26 (UtilOptions.WriteOptionsFile "1.4" (UtilOptions.PutOptions PmFiles.project_template_table (update projectGO_3_0::PmFiles._ProjectGlobalOptions [3:<{PmProject.c;828;54_210}> main_module_dir_path_3_1 (select projectGO_3_0::PmFiles._ProjectGlobalOptions 3)])) (select _x_1_0::_Tuple3 1)) (select _x_1_0::_Tuple3 2)) 
PmProject.read_project_template_file !template_file_path_0 !applicationDir_1 !files_2 = let _x_1_0 = StdFile.fopen_27 template_file_path_0 3 files_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (_Tuple3 False PmProject.PR_InitProject (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> (StdPathname.RemovePath template_file_path_0) "\" could not be opened."))) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = UtilOptions.ReadVersion file_3_0 in case (<{StdInt.==_16}> (_SystemArray.size_20 (select _x_3_1::_Tuple2 0)) 0) (True -> <{_Tuple2!3}> (_Tuple3 False PmProject.PR_InitProject (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> (StdPathname.RemovePath template_file_path_0) "\" is not a project template and could not be opened."))) (select (StdFile.fclose_26 (select _x_3_1::_Tuple2 1) (select _x_1_0::_Tuple3 2))::_Tuple2 1)) (False -> let file_5_0 = select _x_3_1::_Tuple2 1, _x_5_1 = UtilOptions.ReadOptionsFile file_5_0, file_5_2 = select _x_5_1::_Tuple2 1, files_5_3 = select _x_1_0::_Tuple3 2, _x_5_4 = StdFile.fclose_26 file_5_2 files_5_3 in case (StdBool.not (select _x_5_4::_Tuple2 0)) (True -> <{_Tuple2!3}> (_Tuple3 False PmProject.PR_InitProject (<{StdString.+++_11}> "Could not read the file \"" (<{StdString.+++_11}> (StdPathname.RemovePath template_file_path_0) "\"."))) (select _x_5_4::_Tuple2 1)) (False -> <{_Tuple2!3}> (_Tuple3 True (PmProject.SetProject applicationDir_1 (StdPathname.RemoveFilename template_file_path_0) (UtilOptions.GetOptions PmFiles.project_template_table (select _x_5_1::_Tuple2 0) (PmProject.GetProject applicationDir_1 PmProject.PR_InitProject))) "") (select _x_5_4::_Tuple2 1)) ) ) 
PmProject.change_root_directory_of_project !relative_root_dir_0 !root_dir_1 !project_2 = update project_2::PmProject._Project [11:relative_root_dir_0,12:root_dir_1]
PmProject.getDynamicInfo !prj_0 = case prj_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> _Tuple2 dynamic_info_1_10 prj_0) 
PmProject.setDynamicInfo !inf_0 !prj_1 = update prj_1::PmProject._Project [10:inf_0]
PmProject.PR_ProjectSet::B !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> False) (_ -> True)) 
PmProject.PR_NewProject !main_module_file_name_0 !eo_1 !compilerOptions_2 !cgo_3 !ao_4 !prjpaths_5 !linkOptions_6 = let modname_1_0 = PmPath.GetModuleName main_module_file_name_0, dirname_1_1 = StdPathname.RemoveFilename main_module_file_name_0 in update PmProject.PR_InitProject::PmProject._Project [0:False,1:False,2:<{_predefined._!Cons!}> (PmProject._InfListItem modname_1_0 (PmTypes._ModInfo "{Project}" compilerOptions_2 (PmTypes._ModEditOptions eo_1 eo_1 False True) (PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>)) True True) <{_predefined._!Nil!}>,3:cgo_3,4:True,5:ao_4,6:linkOptions_6,7:<{PmProject._if;121;23_231}> (UtilStrictLists.StringOccurs dirname_1_1 prjpaths_5) prjpaths_5 dirname_1_1,8:PmProject.DefStaticLibInfo,9:"StdEnv",12:dirname_1_1,13:<{StdString.+++_11}> "{Project}" (<{StdString.+++_11}> "\\" (<{StdString.+++_11}> modname_1_0 ".exe"))]
<{PmProject._if;121;23_231}> !_x_0::B !prjpaths_1 dirname_2 = case _x_0 (True -> prjpaths_1) (_ -> <{_predefined._!Cons!}> dirname_2 prjpaths_1)
PmProject.module_occurs::B !s_0 !_x_1 = case _x_1 (<{_predefined._!Cons}> x_1_0 xs_1_1 -> case (<{StdString.==_2}> (select x_1_0::PmTypes._ModuleDirAndName 1) s_0) (True -> True) (False -> PmProject.module_occurs s_0 xs_1_1) ) (<{_predefined._!Nil}> -> False) 
PmProject.member_89::B rootmn_0 !used_1 !_x_2 = case _x_2 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> case (PmProject.module_occurs mn_1_0 used_1) (True -> StdBool.not (<{StdString.==_2}> rootmn_0 mn_1_0)) (False -> False) ) 
PmProject.RemoveUnusedModules_90 rootmn_0 used_1 !list_2 = UtilStrictLists.FilterR (PmProject.member_89 rootmn_0 used_1) list_2
PmProject.PR_SetBuilt !used_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> project_1) (<{_predefined._!Cons!}> root_2_0 rest_2_1 -> let !len_3_0::I = UtilStrictLists.LLength rest_2_1, rootmn_3_1 = select root_2_0::PmProject._InfListItem 0, rest_3_2 = PmProject.RemoveUnusedModules_90 rootmn_3_1 used_0 rest_2_1 in update project_1::PmProject._Project [0:PmProject._f232_232 saved_1_0 len_3_0 rest_3_2,2:<{_predefined._!Cons!}> root_2_0 rest_3_2]) ) 
PmProject._f232_232::B !saved_0::B len_1::I rest_2 = case saved_0 (True -> <{StdInt.==_16}> len_1 (UtilStrictLists.LLength rest_2)) (_ -> False)
PmProject.PR_ClearDependencies !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> update project_0::PmProject._Project [0:False,2:<{_predefined._!Nil!}>]) (<{_predefined._!Cons!}> root_2_0 rest_2_1 -> update project_0::PmProject._Project [0:False,2:<{_predefined._!Cons!}> (update root_2_0::PmProject._InfListItem [1:update (select root_2_0::PmProject._InfListItem 1)::PmTypes._ModInfo [3:PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>]]) <{_predefined._!Nil!}>]) ) 
PmProject.PR_SetRoot !root_0 !eo_1 !co_2 !project_3 = case project_3 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> project_3) (_ -> let dirname_2_0 = StdPathname.RemoveFilename root_0 in update project_3::PmProject._Project [0:False,1:False,2:<{_predefined._!Cons!}> (PmProject._InfListItem (PmPath.GetModuleName root_0) (PmTypes._ModInfo dirname_2_0 co_2 (PmTypes._ModEditOptions eo_1 eo_1 False True) (PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>)) True True) <{_predefined._!Nil!}>,7:<{PmProject._if;216;31_233}> (UtilStrictLists.StringOccurs dirname_2_0 prjpaths_1_7) prjpaths_1_7 dirname_2_0])) 
<{PmProject._if;216;31_233}> !_x_0::B !prjpaths_1 dirname_2 = case _x_0 (True -> prjpaths_1) (_ -> <{_predefined._!Cons!}> dirname_2 prjpaths_1)
PmProject.PR_SetRelativeRootDir !pth_0 !prj_1 = update prj_1::PmProject._Project [11:pth_0]
PmProject.setcompiled_94 !itm_0 = case itm_0 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> <{_Tuple2!3}> (update itm_0::PmProject._InfListItem [2:True]) True) 
PmProject.UpdateList2_106 !key_0 update_1 !_x_2 !acc_3 = case _x_2 (<{_predefined._!Nil!}> -> <{_Tuple2!3}> (UtilStrictLists.Reverse2 acc_3 <{_predefined._!Nil!}>) True) (<{_predefined._!Cons!}> first_1_0 rest_1_1 -> case first_1_0 (PmProject._InfListItem mn_2_0 info_2_1 src_2_2 abc_2_3 -> case (StdBool.not (<{StdString.==_2}> mn_2_0 key_0)) (True -> PmProject.UpdateList2_106 key_0 update_1 rest_1_1 (<{_predefined._!Cons!}> first_1_0 acc_3)) (False -> let _x_4_0 = update_1 first_1_0 in <{_Tuple2!3}> (UtilStrictLists.Reverse2 acc_3 (<{_predefined._!Cons!}> (select _x_4_0::_Tuple2 0) rest_1_1)) (select _x_4_0::_Tuple2 1)) ) ) 
PmProject.UpdateList !key_0 update_1 !list_2 = PmProject.UpdateList2_106 key_0 update_1 list_2 <{_predefined._!Nil!}>
PmProject.PR_SetCompiled !modname_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> update project_1::PmProject._Project [2:select (PmProject.UpdateList modname_0 PmProject.setcompiled_94 inflist_1_2)::_Tuple2 0]) 
PmProject.setcode_95 !itm_0 = case itm_0 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> <{_Tuple2!3}> (update itm_0::PmProject._InfListItem [3:True]) True) 
PmProject.PR_SetCodeGenerated !modname_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> update project_1::PmProject._Project [2:select (PmProject.UpdateList modname_0 PmProject.setcode_95 inflist_1_2)::_Tuple2 0]) 
PmProject.PR_SetSysCodeGenerated !project_0 = update project_0::PmProject._Project [4:True]
PmProject.PR_SetLinked !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> update project_0::PmProject._Project [1:True]) 
PmProject.PR_SetSaved !project_0 = update project_0::PmProject._Project [0:True]
PmProject.setcode_97 !itm_0 = case itm_0 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> <{_Tuple2!3}> (update itm_0::PmProject._InfListItem [3:False]) True) 
<{PmProject.infl`__96}> !inflist_0 !cg_unchanged_1::B = case cg_unchanged_1 (True -> <{_Tuple2!3}> inflist_0 True) (False -> UtilStrictLists.P_MapR PmProject.setcode_97 inflist_0) 
PmProject.PR_SetCodeGenOptions !options_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let cg_unchanged_2_0::B = <{PmTypes.==_16}> options_0 codegenopt_1_3 in update project_1::PmProject._Project [0:PmProject._f234_234 saved_1_0 cg_unchanged_2_0,2:select (<{PmProject.infl`__96}> inflist_1_2 cg_unchanged_2_0)::_Tuple2 0,3:options_0,4:PmProject._f235_235 code_gen_options_unchanged_1_4 cg_unchanged_2_0]) 
PmProject._f235_235::B !code_gen_options_unchanged_0::B cg_unchanged_1::B = case code_gen_options_unchanged_0 (True -> cg_unchanged_1) (_ -> False)
PmProject._f234_234::B !saved_0::B cg_unchanged_1::B = case saved_0 (True -> cg_unchanged_1) (_ -> False)
PmProject.eqAppOpts::B !ao1_0 !ao2_1 = case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 0) (select ao2_1::PmTypes._ApplicationOptions 0)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 1) (select ao2_1::PmTypes._ApplicationOptions 1)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 2) (select ao2_1::PmTypes._ApplicationOptions 2)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 3) (select ao2_1::PmTypes._ApplicationOptions 3)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 4) (select ao2_1::PmTypes._ApplicationOptions 4)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 5) (select ao2_1::PmTypes._ApplicationOptions 5)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 6) (select ao2_1::PmTypes._ApplicationOptions 6)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 7) (select ao2_1::PmTypes._ApplicationOptions 7)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 8) (select ao2_1::PmTypes._ApplicationOptions 8)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 9) (select ao2_1::PmTypes._ApplicationOptions 9)) (True -> case (<{PmTypes.==_17}> (select ao1_0::PmTypes._ApplicationOptions 10) (select ao2_1::PmTypes._ApplicationOptions 10)) (True -> case (<{StdString.==_2}> (select ao1_0::PmTypes._ApplicationOptions 11) (select ao2_1::PmTypes._ApplicationOptions 11)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 12) (select ao2_1::PmTypes._ApplicationOptions 12)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 13) (select ao2_1::PmTypes._ApplicationOptions 13)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 14) (select ao2_1::PmTypes._ApplicationOptions 14)) (True -> case (<{StdInt.==_16}> (select ao1_0::PmTypes._ApplicationOptions 15) (select ao2_1::PmTypes._ApplicationOptions 15)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 16) (select ao2_1::PmTypes._ApplicationOptions 16)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 17) (select ao2_1::PmTypes._ApplicationOptions 17)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 18) (select ao2_1::PmTypes._ApplicationOptions 18)) (True -> case (<{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 19) (select ao2_1::PmTypes._ApplicationOptions 19)) (True -> <{StdBool.==_3}> (select ao1_0::PmTypes._ApplicationOptions 20) (select ao2_1::PmTypes._ApplicationOptions 20)) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) 
PmProject.PR_SetApplicationOptions !options_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let unchanged_2_0::B = PmProject.eqAppOpts options_0 applicationopt_1_5 in update project_1::PmProject._Project [0:PmProject._f236_236 saved_1_0 unchanged_2_0,1:PmProject._f237_237 exec_1_1 unchanged_2_0,5:options_0]) 
PmProject._f237_237::B !exec_0::B unchanged_1::B = case exec_0 (True -> unchanged_1) (_ -> False)
PmProject._f236_236::B !saved_0::B unchanged_1::B = case saved_0 (True -> unchanged_1) (_ -> False)
PmProject.prjpaths1_98 dir_0 new_1 prjpaths_2 !def_3::B = case def_3 (True -> prjpaths_2) (False -> case (UtilStrictLists.StringOccurs dir_0 new_1) (True -> new_1) (False -> <{_predefined._!Cons!}> dir_0 new_1) ) 
PmProject.SetDcl_and_Icl_and_ABCModified_99 dir_0 new_1 prjpaths_2 def_3::B !defs_4 !itm_5 = case itm_5 (PmProject._InfListItem mn_1_0 minfo_1_1 src_1_2 abc_1_3 -> case minfo_1_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 mod_edit_options_2_2 abcLink_2_3 -> case (case (UtilStrictLists.StringOccurs dir_2_0 defs_4) (True -> True) (False -> UtilStrictLists.StringOccurs dir_2_0 (PmProject.prjpaths1_98 dir_0 new_1 prjpaths_2 def_3)) ) (True -> <{_Tuple2!3}> (update itm_5::PmProject._InfListItem [2:False]) True) (False -> <{_Tuple2!3}> (update itm_5::PmProject._InfListItem [1:update minfo_1_1::PmTypes._ModInfo [0:""],2:False]) False) ) ) 
PmProject.PR_SetPaths !def_0::B !defs_1 !new_2 !project_3 = case project_3 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> project_3) (<{_predefined._!Cons!}> root_2_0 rest_2_1 -> case root_2_0 (PmProject._InfListItem mn_3_0 info_3_1 src_3_2 abc_3_3 -> case info_3_1 (PmTypes._ModInfo dir_4_0 compilerOptions_4_1 mod_edit_options_4_2 abcLink_4_3 -> case def_0 (True -> let _x_6_0 = UtilStrictLists.P_MapR (PmProject.SetDcl_and_Icl_and_ABCModified_99 dir_4_0 new_2 prjpaths_1_7 def_0 defs_1) inflist_1_2 in update project_3::PmProject._Project [0:PmProject._f238_238 saved_1_0 _x_6_0,2:select _x_6_0::_Tuple2 0]) (False -> let _x_6_0 = UtilStrictLists.P_MapR (PmProject.SetDcl_and_Icl_and_ABCModified_99 dir_4_0 new_2 prjpaths_1_7 def_0 defs_1) inflist_1_2 in update project_3::PmProject._Project [0:PmProject._f239_239 saved_1_0 prjpaths_1_7 dir_4_0 new_2 def_0 _x_6_0,2:select _x_6_0::_Tuple2 0,7:PmProject.prjpaths1_98 dir_4_0 new_2 prjpaths_1_7 def_0]) ) ) ) ) 
PmProject._f239_239::B !saved_0::B prjpaths_1 dir_2 new_3 def_4::B _x_5 = case saved_0 (True -> case (UtilStrictLists.EQStrings (UtilStrictLists.SortStrings prjpaths_1) (UtilStrictLists.SortStrings (PmProject.prjpaths1_98 dir_2 new_3 prjpaths_1 def_4))) (True -> select _x_5::_Tuple2 1) (False -> False) ) (_ -> False)
PmProject._f238_238::B !saved_0::B _x_1 = case saved_0 (True -> select _x_1::_Tuple2 1) (_ -> False)
PmProject.PR_GetRootModuleDir !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 _x_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case _x_1_2 (<{_predefined._!Nil!}> -> "") (<{_predefined._!Cons!}> _x_2_0 rest_2_1 -> case _x_2_0 (PmProject._InfListItem mn_3_0 _x_3_1 src_3_2 abc_3_3 -> case _x_3_1 (PmTypes._ModInfo dir_4_0 compilerOptions_4_1 mod_edit_options_4_2 abcLink_4_3 -> case (<{StdInt.==_16}> (_SystemArray.size_20 dir_4_0) 0) (True -> "") (False -> dir_4_0) ) ) ) ) 
PmProject.PR_GetRootModuleDirAndName !p_0 = case p_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> <{_Tuple2!3}> (PmTypes._ModuleDirAndName "" "") p_0) (<{_predefined._!Cons!}> _x_2_0 rest_2_1 -> case _x_2_0 (PmProject._InfListItem mn_3_0 _x_3_1 src_3_2 abc_3_3 -> case _x_3_1 (PmTypes._ModInfo dir_4_0 compilerOptions_4_1 mod_edit_options_4_2 abcLink_4_3 -> case (<{StdInt.==_16}> (_SystemArray.size_20 dir_4_0) 0) (True -> <{_Tuple2!3}> (PmTypes._ModuleDirAndName "" "") p_0) (False -> <{_Tuple2!3}> (PmTypes._ModuleDirAndName dir_4_0 mn_3_0) p_0) ) ) ) ) 
PmProject.PR_GetRootDir !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> root_directory_1_12) 
PmProject.PR_GetRelativeRootDir !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> relative_root_directory_1_11) 
PmProject.get_dir_and_module_names_r_101 !_vList_0 !_x_1 r_2 = case _x_1 (<{_predefined._!Cons!}> _x_1_0 inflist_1_1 -> case _x_1_0 (PmProject._InfListItem mn_2_0 _x_2_1 src_2_2 abc_2_3 -> case _x_2_1 (PmTypes._ModInfo dir_3_0 compilerOptions_3_1 mod_edit_options_3_2 abcLink_3_3 -> PmProject.get_dir_and_module_names_r_101 _vList_0 inflist_1_1 (select _vList_0::<{_SystemStrictLists.List;}> 0 (PmTypes._ModuleDirAndName dir_3_0 mn_2_0) r_2)) ) ) (<{_predefined._!Nil!}> -> r_2) 
PmProject.get_dir_and_module_names_r_211 !_x_0 r_1 = case _x_0 (<{_predefined._!Cons!}> _x_1_0 inflist_1_1 -> case _x_1_0 (PmProject._InfListItem mn_2_0 _x_2_1 src_2_2 abc_2_3 -> case _x_2_1 (PmTypes._ModInfo dir_3_0 compilerOptions_3_1 mod_edit_options_3_2 abcLink_3_3 -> PmProject.get_dir_and_module_names_r_211 inflist_1_1 (_SystemStrictLists._cons_5 (PmTypes._ModuleDirAndName dir_3_0 mn_2_0) r_1)) ) ) (<{_predefined._!Nil!}> -> r_1) 
PmProject.PR_GetDirAndModulenames !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> _Tuple2 (PmProject.get_dir_and_module_names_r_211 inflist_1_2 (_SystemStrictLists._nil (<{_SystemStrictLists.List;}> _SystemStrictLists._cons_5 _SystemStrictLists._decons_6))) project_0) 
PmProject.GetModulenames_102 !_x_0 = case _x_0 (PmProject._InfListItem mn_1_0 _x_1_1 src_1_2 abc_1_3 -> case _x_1_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 _x_2_2 abcLink_2_3 -> case _x_2_2 (PmTypes._ModEditOptions defeo_3_0 impeo_3_1 defopen_3_2 impopen_3_3 -> case (case defopen_3_2 (True -> impopen_3_3) (False -> False) ) (True -> <{_predefined._!Cons!}> (PmPath.ModuleDirAndNameToDefPathname (PmTypes._ModuleDirAndName dir_2_0 mn_1_0)) (<{_predefined._!Cons!}> (PmPath.ModuleDirAndNameToImpPathname (PmTypes._ModuleDirAndName dir_2_0 mn_1_0)) <{_predefined._!Nil!}>)) (False -> case defopen_3_2 (True -> <{_predefined._!Cons!}> (PmPath.ModuleDirAndNameToDefPathname (PmTypes._ModuleDirAndName dir_2_0 mn_1_0)) <{_predefined._!Nil!}>) (False -> case impopen_3_3 (True -> <{_predefined._!Cons!}> (PmPath.ModuleDirAndNameToImpPathname (PmTypes._ModuleDirAndName dir_2_0 mn_1_0)) <{_predefined._!Nil!}>) (False -> <{_predefined._!Nil!}>) ) ) ) ) ) 
PmProject.PR_GetOpenModulenames !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> UtilStrictLists.FlattenList (UtilStrictLists.MapR PmProject.GetModulenames_102 inflist_1_2)) 
PmProject.GetModulenames_103 !_x_0 = case _x_0 (PmProject._InfListItem mn_1_0 _x_1_1 src_1_2 abc_1_3 -> case _x_1_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 mod_edit_options_2_2 abcLink_2_3 -> <{_Tuple2!2}> (_Tuple4 (PmPath.MakeDefPathname mn_1_0) dir_2_0 (PmPath.MakeImpPathname mn_1_0) dir_2_0) True) ) 
PmProject.PR_GetModuleStuff !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> select (UtilStrictLists.P_MapR PmProject.GetModulenames_103 inflist_1_2)::_Tuple2 0) 
PmProject.PR_SrcUpToDate::B !modname_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let item_2_0 = PmProject.FindInList modname_0 inflist_1_2 in case (Data.Maybe.isNothing item_2_0) (True -> False) (False -> select (Data.Maybe.fromJust item_2_0)::PmProject._InfListItem 2) ) 
PmProject.PR_ABCUpToDate::B !modname_0 !project_1 = case project_1 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let item_2_0 = PmProject.FindInList modname_0 inflist_1_2 in case (Data.Maybe.isNothing item_2_0) (True -> False) (False -> select (Data.Maybe.fromJust item_2_0)::PmProject._InfListItem 3) ) 
PmProject.PR_SysUptoDate::B !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> code_gen_options_unchanged_1_4) 
PmProject.PR_ExecUpToDate::B !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> exec_1_1) 
PmProject.PR_Saved::B !_x_0 = case _x_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> saved_1_0) 
PmProject.eqCO::B !co1_0 !co2_1 = case (<{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 1) (select co2_1::PmCompilerOptions._CompilerOptions 1)) (True -> case (<{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 0) (select co2_1::PmCompilerOptions._CompilerOptions 0)) (True -> case (<{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 2) (select co2_1::PmCompilerOptions._CompilerOptions 2)) (True -> case (<{PmCompilerOptions.==_1}> (select co1_0::PmCompilerOptions._CompilerOptions 3) (select co2_1::PmCompilerOptions._CompilerOptions 3)) (True -> case (<{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 5) (select co2_1::PmCompilerOptions._CompilerOptions 5)) (True -> case (<{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 6) (select co2_1::PmCompilerOptions._CompilerOptions 6)) (True -> <{StdBool.==_3}> (select co1_0::PmCompilerOptions._CompilerOptions 7) (select co2_1::PmCompilerOptions._CompilerOptions 7)) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) 
PmProject.eqInfo::B !info1_0 !info2_1 = case info1_0 (PmTypes._ModInfo dir_1_0 compilerOptions_1_1 mod_edit_options1_1_2 abcLink_1_3 -> case info2_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 mod_edit_options2_2_2 abcLink_2_3 -> case (<{PmTypes.==_15}> (select (select mod_edit_options1_1_2::PmTypes._ModEditOptions 0)::PmTypes._EditWdOptions 0) (select (select mod_edit_options2_2_2::PmTypes._ModEditOptions 0)::PmTypes._EditWdOptions 0)) (True -> case (<{PmTypes.==_15}> (select (select mod_edit_options1_1_2::PmTypes._ModEditOptions 1)::PmTypes._EditWdOptions 0) (select (select mod_edit_options2_2_2::PmTypes._ModEditOptions 1)::PmTypes._EditWdOptions 0)) (True -> case (PmProject.eqCO (select info1_0::PmTypes._ModInfo 1) (select info2_1::PmTypes._ModInfo 1)) (True -> case (<{PmTypes.==_14}> (select (select mod_edit_options1_1_2::PmTypes._ModEditOptions 0)::PmTypes._EditWdOptions 1) (select (select mod_edit_options2_2_2::PmTypes._ModEditOptions 0)::PmTypes._EditWdOptions 1)) (True -> case (<{PmTypes.==_14}> (select (select mod_edit_options1_1_2::PmTypes._ModEditOptions 1)::PmTypes._EditWdOptions 1) (select (select mod_edit_options2_2_2::PmTypes._ModEditOptions 1)::PmTypes._EditWdOptions 1)) (True -> case (<{StdBool.==_3}> (select mod_edit_options1_1_2::PmTypes._ModEditOptions 2) (select mod_edit_options2_2_2::PmTypes._ModEditOptions 2)) (True -> <{StdBool.==_3}> (select mod_edit_options1_1_2::PmTypes._ModEditOptions 3) (select mod_edit_options2_2_2::PmTypes._ModEditOptions 3)) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) ) 
<{PmProject.update`_104}> update_0 !itm_1 = case itm_1 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> let <{info`_2_0}> = update_0 info_1_1 in _Tuple2 (update itm_1::PmProject._InfListItem [1:<{info`_2_0}>]) (PmProject.eqInfo info_1_1 <{info`_2_0}>)) 
PmProject.PR_UpdateModule !mn_0 !update_1 !project_2 = case project_2 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> let _x_2_0 = PmProject.UpdateList mn_0 (<{PmProject.update`_104}> update_1) inflist_1_2 in update project_2::PmProject._Project [0:PmProject._f240_240 saved_1_0 _x_2_0,2:select _x_2_0::_Tuple2 0]) 
PmProject._f240_240::B !saved_0::B _x_1 = case saved_0 (True -> select _x_1::_Tuple2 1) (_ -> False)
<{PmProject.c;558;39_105}> update_0 !g_l_1 = <{PmProject.g_c1;558;44_241}> g_l_1 update_0
<{PmProject.g_c1;558;44_241}> !g_l_0 update_1 = case g_l_0 (_predefined._Cons m_1_0 g_t_1_1 -> _predefined._Cons (PmProject.PR_UpdateModule m_1_0 update_1) (<{PmProject.c;558;39_105}> update_1 g_t_1_1)) (_ -> _predefined._Nil)
PmProject.PR_UpdateModules !mn_0 !update_1 !project_2 = StdFunc.seq (<{PmProject.c;558;39_105}> update_1 mn_0) project_2
PmProject.eqLinkOpts::B !lo1_0 !lo2_1 = case (<{PmTypes.==_13}> (select lo1_0::PmTypes._LinkOptions 2) (select lo2_1::PmTypes._LinkOptions 2)) (True -> case (<{StdBool.==_3}> (select lo1_0::PmTypes._LinkOptions 3) (select lo2_1::PmTypes._LinkOptions 3)) (True -> case (<{StdBool.==_3}> (select lo1_0::PmTypes._LinkOptions 4) (select lo2_1::PmTypes._LinkOptions 4)) (True -> case (<{StdBool.==_3}> (select lo1_0::PmTypes._LinkOptions 5) (select lo2_1::PmTypes._LinkOptions 5)) (True -> case (<{StdBool.==_3}> (select lo1_0::PmTypes._LinkOptions 6) (select lo2_1::PmTypes._LinkOptions 6)) (True -> case (case (select lo1_0::PmTypes._LinkOptions 6) (True -> <{StdString.==_2}> (select lo1_0::PmTypes._LinkOptions 7) (select lo2_1::PmTypes._LinkOptions 7)) (False -> True) ) (True -> case (UtilStrictLists.EQStrings (UtilStrictLists.SortStrings (select lo1_0::PmTypes._LinkOptions 0)) (UtilStrictLists.SortStrings (select lo2_1::PmTypes._LinkOptions 0))) (True -> case (UtilStrictLists.EQStrings (UtilStrictLists.SortStrings (select lo1_0::PmTypes._LinkOptions 1)) (UtilStrictLists.SortStrings (select lo2_1::PmTypes._LinkOptions 1))) (True -> case (<{StdBool.==_3}> (select lo1_0::PmTypes._LinkOptions 8) (select lo2_1::PmTypes._LinkOptions 8)) (True -> <{StdString.==_2}> (select lo1_0::PmTypes._LinkOptions 9) (select lo2_1::PmTypes._LinkOptions 9)) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) 
PmProject.PR_SetLinkOptions !project_0 !linkOptions_1 = case (PmProject.eqLinkOpts linkOptions_1 (select project_0::PmProject._Project 6)) (True -> update project_0::PmProject._Project [0:False,6:linkOptions_1]) (False -> update project_0::PmProject._Project [0:False,1:False,6:linkOptions_1]) 
PmProject.TryInsertImporter_91 compilerOptions_0 importerdir_1 !importermn_2 !_x_3 !list_4 = case _x_3 (<{_predefined._!Nil!}> -> let default_edit_options_2_0 = PmTypes._EditWdOptions (PmTypes._EditOptions UtilNewlinesFile.NewlineConventionDos) PmTypes.NoWindowPosAndSize in <{_predefined._!Cons!}> (PmProject._InfListItem importermn_2 (PmTypes._ModInfo importerdir_1 compilerOptions_0 (PmTypes._ModEditOptions default_edit_options_2_0 default_edit_options_2_0 False False) (PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>)) True True) list_4) (<{_predefined._!Cons!}> _x_1_0 rest_1_1 -> case _x_1_0 (PmProject._InfListItem mn_2_0 info_2_1 src_2_2 abc_2_3 -> case (StdBool.not (<{StdString.==_2}> importermn_2 mn_2_0)) (True -> PmProject.TryInsertImporter_91 compilerOptions_0 importerdir_1 importermn_2 rest_1_1 list_4) (False -> list_4) ) ) 
PmProject.TryInsertInList_93 compilerOptions_0 !importermn_1 !importerdir_2 !_x_3 = case _x_3 (<{_predefined._!Nil!}> -> <{_predefined._!Nil!}>) (<{_predefined._!Cons!}> root_1_0 rest_1_1 -> case root_1_0 (PmProject._InfListItem mn_2_0 info_2_1 src_2_2 abc_2_3 -> case (<{StdString.==_2}> importermn_1 mn_2_0) (True -> <{_predefined._!Cons!}> (update root_1_0::PmProject._InfListItem [1:update info_2_1::PmTypes._ModInfo [0:importerdir_2]]) rest_1_1) (False -> <{_predefined._!Cons!}> root_1_0 (PmProject.TryInsertImporter_91 compilerOptions_0 importerdir_2 importermn_1 rest_1_1 rest_1_1)) ) ) 
PmProject.update_92 dep_libraries_0 dep_objects_1 compilerOptions_2 mod_dir_3 !infList_4 = case infList_4 (PmProject._InfListItem mn_1_0 info_1_1 src_1_2 abc_1_3 -> let s1_2_0 = select infList_4::PmProject._InfListItem 1 in _Tuple2 (update infList_4::PmProject._InfListItem [1:update s1_2_0::PmTypes._ModInfo [0:mod_dir_3,1:compilerOptions_2,3:update (select s1_2_0::PmTypes._ModInfo 3)::PmTypes._ABCLinkInfo [0:dep_objects_1,1:dep_libraries_0]]]) True) 
PmProject.PR_AddABCInfo !mdn_0 !dep_objects_1 !dep_libraries_2 !compilerOptions_3 !project_4 = case project_4 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> case inflist_1_2 (<{_predefined._!Nil!}> -> project_4) (_ -> case mdn_0 (PmTypes._ModuleDirAndName mod_dir_2_0 mod_name_2_1 -> update project_4::PmProject._Project [0:False,2:select (PmProject.UpdateList mod_name_2_1 (PmProject.update_92 dep_libraries_2 dep_objects_1 compilerOptions_3 mod_dir_2_0) (PmProject.TryInsertInList_93 compilerOptions_3 mod_name_2_1 mod_dir_2_0 inflist_1_2))::_Tuple2 0]) )) 
PmProject.foldl_151 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> PmProject.foldl_151 op_0 (op_0 r_1 a_1_0) x_1_1) 
PmProject.anon_111 !_x_0 = case _x_0 (PmProject._InfListItem mn_1_0 _x_1_1 src_1_2 abc_1_3 -> case _x_1_1 (PmTypes._ModInfo dir_2_0 compilerOptions_2_1 mod_edit_options_2_2 abcLink_2_3 -> abcLink_2_3) ) 
PmProject.mergeTwoRecords_112 !_x_0 !_x_1 = case _x_0 (PmTypes._ABCLinkInfo linkObjFileNames1_1_0 linkLibraryNames1_1_1 -> case _x_1 (PmTypes._ABCLinkInfo linkObjFileNames2_2_0 linkLibraryNames2_2_1 -> PmTypes._ABCLinkInfo (UtilStrictLists.UnionStringList linkObjFileNames2_2_0 linkObjFileNames1_1_0) (UtilStrictLists.UnionStringList linkLibraryNames2_2_1 linkLibraryNames1_1_1)) ) 
PmProject.foldl_212 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> PmProject.foldl_212 (PmProject.mergeTwoRecords_112 r_0 a_1_0) x_1_1) 
PmProject.PR_GetABCLinkInfo !project_0 = case project_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> PmProject.foldl_212 (PmTypes._ABCLinkInfo <{_predefined._!Nil!}> <{_predefined._!Nil!}>) (StdList.map PmProject.anon_111 (UtilStrictLists.StrictListToList inflist_1_2))) 
PmProject.SL_Add !pathname_0 !sl_1 = update sl_1::PmTypes._StaticLibInfo [0:UtilStrictLists.Append (select sl_1::PmTypes._StaticLibInfo 0) pathname_0]
<{PmProject.c;767;9_113}> ap_0 pp_1 !g_l_2 = <{PmProject.g_c1;767;14_242}> g_l_2 ap_0 pp_1
<{PmProject.g_c1;767;14_242}> !g_l_0 ap_1 pp_2 = case g_l_0 (_predefined._Cons s_1_0 g_t_1_1 -> _predefined._Cons (UtilStrictLists.RemoveStringFromList (PmPath.fulPath ap_1 pp_2 s_1_0)) (<{PmProject.c;767;9_113}> ap_1 pp_2 g_t_1_1)) (_ -> _predefined._Nil)
PmProject.SL_Rem !pathsel_0 !ap_1 !pp_2 !sl_3 = update sl_3::PmTypes._StaticLibInfo [0:StdFunc.seq (<{PmProject.c;767;9_113}> ap_1 pp_2 pathsel_0) (select sl_3::PmTypes._StaticLibInfo 0)]
PmProject.SL_Libs !sl_0 = case sl_0 (PmTypes._StaticLibInfo sLibs_1_0 sDcls_1_1 sDeps_1_2 -> sLibs_1_0) 
PmProject.SL_Dcls !sl_0 = case sl_0 (PmTypes._StaticLibInfo sLibs_1_0 sDcls_1_1 sDeps_1_2 -> sDcls_1_1) 
PmProject.SL_Deps !sl_0 = case sl_0 (PmTypes._StaticLibInfo sLibs_1_0 sDcls_1_1 sDeps_1_2 -> sDeps_1_2) 
PmProject.SL_SetLibs !lp_0 !sl_1 = update sl_1::PmTypes._StaticLibInfo [0:lp_0]
PmProject.SL_SetDcls !lp_0 !sl_1 = update sl_1::PmTypes._StaticLibInfo [1:lp_0]
PmProject.SL_SetDeps !lp_0 !sl_1 = update sl_1::PmTypes._StaticLibInfo [2:lp_0]
PmProject.PR_SetPrecompile !prec_0 !prj_1 = update prj_1::PmProject._Project [14:prec_0]
PmProject.PR_GetPrecompile !prj_0 = case prj_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> <{_Tuple2!3}> prec_1_14 prj_0) 
PmProject.PR_SetPostlink !posl_0 !prj_1 = update prj_1::PmProject._Project [15:posl_0]
PmProject.PR_GetPostlink !prj_0 = case prj_0 (PmProject._Project saved_1_0 exec_1_1 inflist_1_2 codegenopt_1_3 code_gen_options_unchanged_1_4 applicationopt_1_5 linkOptions_1_6 prjpaths_1_7 staticLib_1_8 target_1_9 dynamic_info_1_10 relative_root_directory_1_11 root_directory_1_12 execpath_1_13 prec_1_14 posl_1_15 -> <{_Tuple2!3}> posl_1_15 prj_0) 
<{PmProject.TD;Def_and_Imp}> _x_0::B = _predefined._Nil
<{PmProject.TD;Project}> _x_0::B = _predefined._Nil
<{PmProject.TD;WindowOpen_and_Closed}> _x_0::B = _predefined._Nil
<{PmProject.TD;Modification}> _x_0::B = _predefined._Nil
<{PmProject.TD;InfList}> _x_0::B = _predefined._Nil
<{PmProject.TD;InfListItem}> _x_0::B = _predefined._Nil
<{PmProject.TD;InfUpdate}> _x_0::B = _predefined._Nil


|| Converted Records
:: PmProject._Project = {!PmProject.saved::B, !PmProject.exec::B, !PmProject.inflist, !PmProject.codegenopt, !PmProject.code_gen_options_unchanged::B, !PmProject.applicationopt, !PmProject.linkOptions, !PmProject.prjpaths, !PmProject.staticLibInfo, !PmProject.target, !PmProject.dynamic_info, !PmProject.relative_root_directory, !PmProject.root_directory, !PmProject.execpath, !PmProject.prec, !PmProject.posl}

:: PmProject._InfListItem = {!PmProject.mn, !PmProject.info, !PmProject.src::B, !PmProject.abc::B}

:: <{PmProject.gEq_s;}> = {!PmProject.gEq_s}

:: <{PmProject.gEq_ss;}> = {!PmProject.gEq_ss}

:: <{PmProject.gEq_sss;}> = {!PmProject.gEq_sss}

:: <{PmProject.gEq_ssss;}> = {!PmProject.gEq_ssss}

:: <{PmProject.gEq_sssss;}> = {!PmProject.gEq_sssss}

:: <{PmProject.gEq_ssssss;}> = {!PmProject.gEq_ssssss}

:: <{PmProject.gEq_sssssss;}> = {!PmProject.gEq_sssssss}

:: <{PmProject.gEq_ssssssss;}> = {!PmProject.gEq_ssssssss}

:: <{PmProject.gEq_sssssssss;}> = {!PmProject.gEq_sssssssss}

:: <{PmProject.bimap_s;}> = {PmProject.bimap_s}

:: <{PmProject.bimap_ss;}> = {PmProject.bimap_ss}

:: <{PmProject.bimap_sss;}> = {PmProject.bimap_sss}

