|| ?module? StdIOCommon


StdIOCommon.enabled::B !_x_0 = case _x_0 (StdIOCommon.Able -> True) (_ -> False)
StdIOCommon.marked::B !_x_0 = case _x_0 (StdIOCommon.Mark -> True) (_ -> False)
StdIOCommon.getKeyboardStateKeyState !_x_0 = case _x_0 (StdIOCommon.CharKey _x_1_0 kstate_1_1 -> kstate_1_1) (StdIOCommon.SpecialKey _x_1_0 kstate_1_1 _x_1_2 -> kstate_1_1) (StdIOCommon.KeyLost -> StdIOCommon.KeyUp) 
StdIOCommon.getKeyboardStateKey !_x_0 = case _x_0 (StdIOCommon.CharKey char_1_0 _x_1_1 -> Data.Maybe.Just (StdIOCommon.IsCharKey char_1_0)) (StdIOCommon.SpecialKey key_1_0 _x_1_1 _x_1_2 -> Data.Maybe.Just (StdIOCommon.IsSpecialKey key_1_0)) (StdIOCommon.KeyLost -> Data.Maybe.Nothing) 
StdIOCommon.getMouseStatePos !_x_0 = case _x_0 (StdIOCommon.MouseMove pos_1_0 _x_1_1 -> pos_1_0) (StdIOCommon.MouseDown pos_1_0 _x_1_1 _x_1_2 -> pos_1_0) (StdIOCommon.MouseDrag pos_1_0 _x_1_1 -> pos_1_0) (StdIOCommon.MouseUp pos_1_0 _x_1_1 -> pos_1_0) (StdIOCommon.MouseLost -> StdIOBasic.zero_21) 
StdIOCommon.getMouseStateModifiers !_x_0 = case _x_0 (StdIOCommon.MouseMove _x_1_0 mods_1_1 -> mods_1_1) (StdIOCommon.MouseDown _x_1_0 mods_1_1 _x_1_2 -> mods_1_1) (StdIOCommon.MouseDrag _x_1_0 mods_1_1 -> mods_1_1) (StdIOCommon.MouseUp _x_1_0 mods_1_1 -> mods_1_1) (StdIOCommon.MouseLost -> StdIOCommon._Modifiers False False False False False) 
StdIOCommon.getMouseStateButtonState !_x_0 = case _x_0 (StdIOCommon.MouseMove _x_1_0 _x_1_1 -> StdIOCommon.ButtonStillUp) (StdIOCommon.MouseDown _x_1_0 _x_1_1 nr_1_2 -> case (<{StdInt.==_16}> nr_1_2 1) (True -> StdIOCommon.ButtonDown) (False -> case (<{StdInt.==_16}> nr_1_2 2) (True -> StdIOCommon.ButtonDoubleDown) (False -> StdIOCommon.ButtonTripleDown) ) ) (StdIOCommon.MouseDrag _x_1_0 _x_1_1 -> StdIOCommon.ButtonStillDown) (StdIOCommon.MouseUp _x_1_0 _x_1_1 -> StdIOCommon.ButtonUp) (StdIOCommon.MouseLost -> StdIOCommon.ButtonUp) 
StdIOCommon.rectangleToUpdateState !frame_0 = StdIOCommon._UpdateState frame_0 frame_0 (_predefined._Cons frame_0 _predefined._Nil)
StdIOCommon.viewDomainRange = StdIOBasic._Rectangle (StdIOBasic._Point2 (<{StdInt.-_7}> 0 (<{StdInt.^_12}> 2 30)) (<{StdInt.-_7}> 0 (<{StdInt.^_12}> 2 30))) (StdIOBasic._Point2 (<{StdInt.^_12}> 2 30) (<{StdInt.^_12}> 2 30))
StdIOCommon.viewFrameRange = StdIOBasic._Rectangle (StdIOBasic._Point2 (<{StdInt.-_7}> 1 (<{StdInt.^_12}> 2 31)) (<{StdInt.-_7}> 1 (<{StdInt.^_12}> 2 31))) (StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.^_12}> 2 31) 1) (<{StdInt.-_7}> (<{StdInt.^_12}> 2 31) 1))
<{StdIOCommon.==_35}>::B !_x_0 !direction_1 = case _x_0 (StdIOCommon.Horizontal -> <{StdIOCommon._c;408;35_139}> direction_1) (StdIOCommon.Vertical -> <{StdIOCommon._c;411;35_140}> direction_1) 
<{StdIOCommon._c;411;35_140}>::B !direction_0 = case direction_0 (StdIOCommon.Vertical -> True) (_ -> False)
<{StdIOCommon._c;408;35_139}>::B !direction_0 = case direction_0 (StdIOCommon.Horizontal -> True) (_ -> False)
<{StdIOCommon.stdScrollFunction`_87}>::I !direction_0 !d_1::I !viewFrame_2 !_x_3 !move_4 = case _x_3 (StdIOCommon._SliderState sliderMin_1_0 sliderMax_1_1 x_1_2 -> <{StdIOCommon._c;554;11_143}> move_4 x_1_2 d_1 direction_0 viewFrame_2) 
<{StdIOCommon._c;554;11_143}>::I !move_0 x_1::I !d_2::I direction_3 viewFrame_4 = case move_0 (StdIOCommon.SliderIncSmall -> <{StdInt.+_6}> x_1 (StdInt.abs_13 d_2)) (StdIOCommon.SliderDecSmall -> <{StdInt.-_7}> x_1 (StdInt.abs_13 d_2)) (StdIOCommon.SliderIncLarge -> let d_2_0::I = StdInt.abs_13 d_2 in <{StdInt.+_6}> x_1 (<{StdInt.*_9}> (<{StdInt./_10}> (<{StdIOCommon._if;553;27_141}> (<{StdIOCommon.==_35}> direction_3 StdIOCommon.Horizontal) viewFrame_4) d_2_0) d_2_0)) (StdIOCommon.SliderDecLarge -> let d_2_0::I = StdInt.abs_13 d_2 in <{StdInt.-_7}> x_1 (<{StdInt.*_9}> (<{StdInt./_10}> (<{StdIOCommon._if;553;27_142}> (<{StdIOCommon.==_35}> direction_3 StdIOCommon.Horizontal) viewFrame_4) d_2_0) d_2_0)) (StdIOCommon.SliderThumb x_1_0 -> let d_2_0::I = StdInt.abs_13 d_2 in <{StdInt.*_9}> (<{StdInt./_10}> x_1_0 d_2_0) d_2_0) 
<{StdIOCommon._if;553;27_142}>::I !_x_0::B !viewFrame_1 = case _x_0 (True -> select (StdIOBasic.rectangleSize viewFrame_1)::StdIOBasic._Size 0) (_ -> select (StdIOBasic.rectangleSize viewFrame_1)::StdIOBasic._Size 1)
<{StdIOCommon._if;553;27_141}>::I !_x_0::B !viewFrame_1 = case _x_0 (True -> select (StdIOBasic.rectangleSize viewFrame_1)::StdIOBasic._Size 0) (_ -> select (StdIOBasic.rectangleSize viewFrame_1)::StdIOBasic._Size 1)
StdIOCommon.stdScrollFunction !direction_0 !d_1::I = <{StdIOCommon.stdScrollFunction`_87}> direction_0 d_1
StdIOCommon.stdUnfillNewFrameLook _x_0 !_x_1 !picture_2 = case _x_1 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> StdPicture.unfill_103 newFrame_1_1 picture_2) 
StdIOCommon.stdUnfillUpdAreaLook _x_0 !_x_1 !picture_2 = case _x_1 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> commondef.stateMap2 StdPicture.unfill_103 updArea_1_2 picture_2) 
StdIOCommon.curlify !x_0 = <{StdString.+++_11}> "{" (<{StdString.+++_11}> x_0 "}")
StdIOCommon.brackify !x_0 = <{StdString.+++_11}> "(" (<{StdString.+++_11}> x_0 ")")
StdIOCommon.squarify !x_0 = <{StdString.+++_11}> "[" (<{StdString.+++_11}> x_0 "]")
StdIOCommon.recordFieldtoString !_vtoString_0 !_x_1 = case _x_1 (_Tuple2 field_1_0 value_1_1 -> <{StdString.+++_11}> field_1_0 (<{StdString.+++_11}> "=" (select _vtoString_0::<{StdOverloaded.toString;}> 0 value_1_1))) 
<{StdIOCommon.itemsList`_88}> separator_0 !_x_1 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> <{StdString.+++_11}> separator_0 (<{StdString.+++_11}> x_1_0 (<{StdIOCommon.itemsList`_88}> separator_0 xs_1_1))) (_ -> "")
StdIOCommon.itemsList !separator_0 !_x_1 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> <{StdString.+++_11}> x_1_0 (<{StdIOCommon.itemsList`_88}> separator_0 xs_1_1)) (_ -> "")
<{StdIOCommon.==_13}>::B !_x_0 !select_1 = case _x_0 (StdIOCommon.Able -> StdIOCommon.enabled select_1) (StdIOCommon.Unable -> StdBool.not (StdIOCommon.enabled select_1)) 
<{StdIOCommon.==_14}>::B !_x_0 !mark_1 = case _x_0 (StdIOCommon.Mark -> StdIOCommon.marked mark_1) (StdIOCommon.NoMark -> StdBool.not (StdIOCommon.marked mark_1)) 
<{StdIOCommon.~_15}> !_x_0 = case _x_0 (StdIOCommon.Able -> StdIOCommon.Unable) (StdIOCommon.Unable -> StdIOCommon.Able) 
<{StdIOCommon.~_16}> !_x_0 = case _x_0 (StdIOCommon.Mark -> StdIOCommon.NoMark) (_ -> StdIOCommon.Mark)
StdIOCommon.toString_17 !_x_0 = case _x_0 (StdIOCommon.Able -> "Able") (StdIOCommon.Unable -> "Unable") 
StdIOCommon.toString_18 !_x_0 = case _x_0 (StdIOCommon.Mark -> "Mark") (StdIOCommon.NoMark -> "NoMark") 
<{StdIOCommon.==_20}>::B !_x_0 !key_1 = case _x_0 (StdIOCommon.KeyUp -> <{StdIOCommon._c;87;35_144}> key_1) (StdIOCommon.KeyDown repeat_1_0 -> <{StdIOCommon._c;90;35_145}> key_1 repeat_1_0) 
<{StdIOCommon._c;90;35_145}>::B !key_0 repeat_1::B = case key_0 (StdIOCommon.KeyDown repeat`_1_0 -> <{StdBool.==_3}> repeat_1 <{repeat`_1_0}>) (_ -> False)
<{StdIOCommon._c;87;35_144}>::B !key_0 = case key_0 (StdIOCommon.KeyUp -> True) (_ -> False)
<{StdIOCommon.==_30}>::B !m1_0 !m2_1 = case (<{StdBool.==_3}> (select m1_0::StdIOCommon._Modifiers 0) (select m2_1::StdIOCommon._Modifiers 0)) (True -> case (<{StdBool.==_3}> (select m1_0::StdIOCommon._Modifiers 1) (select m2_1::StdIOCommon._Modifiers 1)) (True -> case (<{StdBool.==_3}> (select m1_0::StdIOCommon._Modifiers 2) (select m2_1::StdIOCommon._Modifiers 2)) (True -> case (<{StdBool.==_3}> (select m1_0::StdIOCommon._Modifiers 3) (select m2_1::StdIOCommon._Modifiers 3)) (True -> <{StdBool.==_3}> (select m1_0::StdIOCommon._Modifiers 4) (select m2_1::StdIOCommon._Modifiers 4)) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) 
<{StdIOCommon.==_19}>::B !_x_0 !keySt_1 = case _x_0 (StdIOCommon.CharKey char_1_0 key_1_1 -> <{StdIOCommon._c;77;47_146}> keySt_1 char_1_0 key_1_1) (StdIOCommon.SpecialKey spec_1_0 key_1_1 mods_1_2 -> <{StdIOCommon._c;80;47_147}> keySt_1 spec_1_0 key_1_1 mods_1_2) (StdIOCommon.KeyLost -> <{StdIOCommon._c;83;47_148}> keySt_1) 
<{StdIOCommon._c;83;47_148}>::B !keySt_0 = case keySt_0 (StdIOCommon.KeyLost -> True) (_ -> False)
<{StdIOCommon._c;80;47_147}>::B !keySt_0 spec_1 key_2 mods_3 = case keySt_0 (StdIOCommon.SpecialKey spec`_1_0 key`_1_1 mods`_1_2 -> case (<{oskey.==_32}> spec_1 <{spec`_1_0}>) (True -> case (<{StdIOCommon.==_20}> key_2 <{key`_1_1}>) (True -> <{StdIOCommon.==_30}> mods_3 <{mods`_1_2}>) (False -> False) ) (False -> False) ) (_ -> False)
<{StdIOCommon._c;77;47_146}>::B !keySt_0 char_1::C key_2 = case keySt_0 (StdIOCommon.CharKey char`_1_0 key`_1_1 -> case (<{StdChar.==_18}> char_1 <{char`_1_0}>) (True -> <{StdIOCommon.==_20}> key_2 <{key`_1_1}>) (False -> False) ) (_ -> False)
StdIOCommon.toString_22 !_x_0 = case _x_0 (StdIOCommon.KeyDown isRepeat_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "KeyDown " (StdBool.fromBool_6 isRepeat_1_0))) (StdIOCommon.KeyUp -> "KeyUp") 
StdIOCommon.toString_31 !_x_0 = case _x_0 (StdIOCommon._Modifiers shiftDown_1_0 optionDown_1_1 commandDown_1_2 controlDown_1_3 altDown_1_4 -> StdIOCommon.curlify (StdIOCommon.itemsList "," (StdList.flatten (_predefined._Cons (<{StdIOCommon._if;278;45_149}> shiftDown_1_0) (_predefined._Cons (<{StdIOCommon._if;279;45_150}> optionDown_1_1) (_predefined._Cons (<{StdIOCommon._if;280;45_151}> commandDown_1_2) (_predefined._Cons (<{StdIOCommon._if;281;45_152}> controlDown_1_3) (_predefined._Cons (<{StdIOCommon._if;282;45_153}> altDown_1_4) _predefined._Nil)))))))) 
<{StdIOCommon._if;282;45_153}> !altDown_0::B = case altDown_0 (True -> _predefined._Cons "altDown" _predefined._Nil) (_ -> _predefined._Nil)
<{StdIOCommon._if;281;45_152}> !controlDown_0::B = case controlDown_0 (True -> _predefined._Cons "controlDown" _predefined._Nil) (_ -> _predefined._Nil)
<{StdIOCommon._if;280;45_151}> !commandDown_0::B = case commandDown_0 (True -> _predefined._Cons "commandDown" _predefined._Nil) (_ -> _predefined._Nil)
<{StdIOCommon._if;279;45_150}> !optionDown_0::B = case optionDown_0 (True -> _predefined._Cons "optionDown" _predefined._Nil) (_ -> _predefined._Nil)
<{StdIOCommon._if;278;45_149}> !shiftDown_0::B = case shiftDown_0 (True -> _predefined._Cons "shiftDown" _predefined._Nil) (_ -> _predefined._Nil)
StdIOCommon.toString_21 !_x_0 = case _x_0 (StdIOCommon.CharKey char_1_0 keystate_1_1 -> StdIOCommon.brackify (<{StdString.+++_11}> "CharKey " (<{StdString.+++_11}> (StdString.toString_6 char_1_0) (<{StdString.+++_11}> " " (<{StdString.+++_11}> (StdIOCommon.brackify (<{StdString.+++_11}> "ASCII: " (StdString.toString_5 (StdInt.toInt_20 char_1_0)))) (<{StdString.+++_11}> " " (StdIOCommon.toString_22 keystate_1_1))))))) (StdIOCommon.SpecialKey special_1_0 keystate_1_1 modifiers_1_2 -> StdIOCommon.brackify (<{StdString.+++_11}> "SpecialKey " (StdIOCommon.itemsList " " (_predefined._Cons (oskey.toString_33 special_1_0) (_predefined._Cons (StdIOCommon.toString_22 keystate_1_1) (_predefined._Cons (StdIOCommon.toString_31 modifiers_1_2) _predefined._Nil)))))) (StdIOCommon.KeyLost -> "KeyLost") 
<{StdIOCommon.==_23}>::B !_x_0 !mouseSt_1 = case _x_0 (StdIOCommon.MouseMove pos_1_0 mods_1_1 -> <{StdIOCommon._c;148;47_154}> mouseSt_1 pos_1_0 mods_1_1) (StdIOCommon.MouseDown pos_1_0 mods_1_1 nr_1_2 -> <{StdIOCommon._c;151;47_155}> mouseSt_1 pos_1_0 mods_1_1 nr_1_2) (StdIOCommon.MouseDrag pos_1_0 mods_1_1 -> <{StdIOCommon._c;154;47_156}> mouseSt_1 pos_1_0 mods_1_1) (StdIOCommon.MouseUp pos_1_0 mods_1_1 -> <{StdIOCommon._c;157;47_157}> mouseSt_1 pos_1_0 mods_1_1) (StdIOCommon.MouseLost -> <{StdIOCommon._c;160;47_158}> mouseSt_1) 
<{StdIOCommon._c;160;47_158}>::B !mouseSt_0 = case mouseSt_0 (StdIOCommon.MouseLost -> True) (_ -> False)
<{StdIOCommon._c;157;47_157}>::B !mouseSt_0 pos_1 mods_2 = case mouseSt_0 (StdIOCommon.MouseUp pos`_1_0 mods`_1_1 -> case (<{StdIOBasic.==_18}> pos_1 <{pos`_1_0}>) (True -> <{StdIOCommon.==_30}> mods_2 <{mods`_1_1}>) (False -> False) ) (_ -> False)
<{StdIOCommon._c;154;47_156}>::B !mouseSt_0 pos_1 mods_2 = case mouseSt_0 (StdIOCommon.MouseDrag pos`_1_0 mods`_1_1 -> case (<{StdIOBasic.==_18}> pos_1 <{pos`_1_0}>) (True -> <{StdIOCommon.==_30}> mods_2 <{mods`_1_1}>) (False -> False) ) (_ -> False)
<{StdIOCommon._c;151;47_155}>::B !mouseSt_0 pos_1 mods_2 nr_3::I = case mouseSt_0 (StdIOCommon.MouseDown pos`_1_0 mods`_1_1 nr`_1_2 -> case (<{StdIOBasic.==_18}> pos_1 <{pos`_1_0}>) (True -> case (<{StdIOCommon.==_30}> mods_2 <{mods`_1_1}>) (True -> <{StdInt.==_16}> nr_3 <{nr`_1_2}>) (False -> False) ) (False -> False) ) (_ -> False)
<{StdIOCommon._c;148;47_154}>::B !mouseSt_0 pos_1 mods_2 = case mouseSt_0 (StdIOCommon.MouseMove pos`_1_0 mods`_1_1 -> case (<{StdIOBasic.==_18}> pos_1 <{pos`_1_0}>) (True -> <{StdIOCommon.==_30}> mods_2 <{mods`_1_1}>) (False -> False) ) (_ -> False)
<{StdIOCommon.==_24}>::B !_x_0 !button_1 = case _x_0 (StdIOCommon.ButtonStillUp -> <{StdIOCommon._c;164;39_159}> button_1) (StdIOCommon.ButtonDown -> <{StdIOCommon._c;167;39_160}> button_1) (StdIOCommon.ButtonDoubleDown -> <{StdIOCommon._c;170;39_161}> button_1) (StdIOCommon.ButtonTripleDown -> <{StdIOCommon._c;173;39_162}> button_1) (StdIOCommon.ButtonStillDown -> <{StdIOCommon._c;176;39_163}> button_1) (StdIOCommon.ButtonUp -> <{StdIOCommon._c;179;39_164}> button_1) 
<{StdIOCommon._c;179;39_164}>::B !button_0 = case button_0 (StdIOCommon.ButtonUp -> True) (_ -> False)
<{StdIOCommon._c;176;39_163}>::B !button_0 = case button_0 (StdIOCommon.ButtonStillDown -> True) (_ -> False)
<{StdIOCommon._c;173;39_162}>::B !button_0 = case button_0 (StdIOCommon.ButtonTripleDown -> True) (_ -> False)
<{StdIOCommon._c;170;39_161}>::B !button_0 = case button_0 (StdIOCommon.ButtonDoubleDown -> True) (_ -> False)
<{StdIOCommon._c;167;39_160}>::B !button_0 = case button_0 (StdIOCommon.ButtonDown -> True) (_ -> False)
<{StdIOCommon._c;164;39_159}>::B !button_0 = case button_0 (StdIOCommon.ButtonStillUp -> True) (_ -> False)
StdIOCommon.toString_25 !_x_0 = case _x_0 (StdIOCommon.MouseMove pos_1_0 modifiers_1_1 -> StdIOCommon.brackify (<{StdString.+++_11}> "MouseMove " (StdIOCommon.itemsList " " (_predefined._Cons (StdIOBasic.toString_24 pos_1_0) (_predefined._Cons (StdIOCommon.toString_31 modifiers_1_1) _predefined._Nil))))) (StdIOCommon.MouseDown pos_1_0 modifiers_1_1 nr_1_2 -> StdIOCommon.brackify (<{StdString.+++_11}> "MouseDown " (StdIOCommon.itemsList " " (_predefined._Cons (StdIOBasic.toString_24 pos_1_0) (_predefined._Cons (StdIOCommon.toString_31 modifiers_1_1) (_predefined._Cons (StdString.toString_5 nr_1_2) _predefined._Nil)))))) (StdIOCommon.MouseDrag pos_1_0 modifiers_1_1 -> StdIOCommon.brackify (<{StdString.+++_11}> "MouseDrag " (StdIOCommon.itemsList " " (_predefined._Cons (StdIOBasic.toString_24 pos_1_0) (_predefined._Cons (StdIOCommon.toString_31 modifiers_1_1) _predefined._Nil))))) (StdIOCommon.MouseUp pos_1_0 modifiers_1_1 -> StdIOCommon.brackify (<{StdString.+++_11}> "MouseUp " (StdIOCommon.itemsList " " (_predefined._Cons (StdIOBasic.toString_24 pos_1_0) (_predefined._Cons (StdIOCommon.toString_31 modifiers_1_1) _predefined._Nil))))) (StdIOCommon.MouseLost -> "MouseLost") 
StdIOCommon.toString_26 !_x_0 = case _x_0 (StdIOCommon.ButtonStillUp -> "ButtonStillUp") (StdIOCommon.ButtonDown -> "ButtonDown") (StdIOCommon.ButtonDoubleDown -> "ButtonDoubleDown") (StdIOCommon.ButtonTripleDown -> "ButtonTripleDown") (StdIOCommon.ButtonStillDown -> "ButtonStillDown") (StdIOCommon.ButtonUp -> "ButtonUp") 
<{StdIOCommon.==_27}>::B !s1_0 !s2_1 = case (<{StdInt.==_16}> (select s1_0::StdIOCommon._SliderState 0) (select s2_1::StdIOCommon._SliderState 0)) (True -> case (<{StdInt.==_16}> (select s1_0::StdIOCommon._SliderState 1) (select s2_1::StdIOCommon._SliderState 1)) (True -> <{StdInt.==_16}> (select s1_0::StdIOCommon._SliderState 2) (select s2_1::StdIOCommon._SliderState 2)) (False -> False) ) (False -> False) 
StdIOCommon.recordFieldtoString_138 !_x_0 = case _x_0 (_Tuple2 field_1_0 value_1_1 -> <{StdString.+++_11}> field_1_0 (<{StdString.+++_11}> "=" (StdString.toString_5 value_1_1))) 
StdIOCommon.toString_28 !_x_0 = case _x_0 (StdIOCommon._SliderState sliderMin_1_0 sliderMax_1_1 sliderThumb_1_2 -> StdIOCommon.curlify (StdIOCommon.itemsList "," (StdList.map StdIOCommon.recordFieldtoString_138 (StdList.zip2 (_predefined._Cons "sliderMin" (_predefined._Cons "sliderThumb" (_predefined._Cons "sliderMax" _predefined._Nil))) (_predefined._Cons sliderMin_1_0 (_predefined._Cons sliderThumb_1_2 (_predefined._Cons sliderMax_1_1 _predefined._Nil))))))) 
StdIOCommon.toString_29 !_x_0 = case _x_0 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> StdIOCommon.curlify (StdIOCommon.itemsList "," (_predefined._Cons (<{StdString.+++_11}> "oldFrame=" (StdIOBasic.toString_27 oldFrame_1_0)) (_predefined._Cons (<{StdString.+++_11}> "newFrame=" (StdIOBasic.toString_27 newFrame_1_1)) (_predefined._Cons (<{StdString.+++_11}> "updArea=" (StdIOCommon.squarify (StdIOCommon.itemsList "," (StdList.map StdIOBasic.toString_27 updArea_1_2)))) _predefined._Nil))))) 
StdIOCommon.zero_32 = StdIOCommon.NoOffset
<{StdIOCommon.==_33}>::B !_x_0 !itemLoc_1 = case _x_0 (StdIOCommon.Fix -> <{StdIOCommon._c;334;39_165}> itemLoc_1) (StdIOCommon.LeftTop -> <{StdIOCommon._c;337;39_166}> itemLoc_1) (StdIOCommon.RightTop -> <{StdIOCommon._c;340;39_167}> itemLoc_1) (StdIOCommon.LeftBottom -> <{StdIOCommon._c;343;39_168}> itemLoc_1) (StdIOCommon.RightBottom -> <{StdIOCommon._c;346;39_169}> itemLoc_1) (StdIOCommon.Left -> <{StdIOCommon._c;349;39_170}> itemLoc_1) (StdIOCommon.Center -> <{StdIOCommon._c;352;39_171}> itemLoc_1) (StdIOCommon.Right -> <{StdIOCommon._c;355;39_172}> itemLoc_1) (StdIOCommon.LeftOf id1_1_0 -> <{StdIOCommon._c;358;39_173}> itemLoc_1 id1_1_0) (StdIOCommon.RightTo id1_1_0 -> <{StdIOCommon._c;361;39_174}> itemLoc_1 id1_1_0) (StdIOCommon.Above id1_1_0 -> <{StdIOCommon._c;364;39_175}> itemLoc_1 id1_1_0) (StdIOCommon.Below id1_1_0 -> <{StdIOCommon._c;367;39_176}> itemLoc_1 id1_1_0) (StdIOCommon.LeftOfPrev -> <{StdIOCommon._c;370;39_177}> itemLoc_1) (StdIOCommon.RightToPrev -> <{StdIOCommon._c;373;39_178}> itemLoc_1) (StdIOCommon.AbovePrev -> <{StdIOCommon._c;376;39_179}> itemLoc_1) (StdIOCommon.BelowPrev -> <{StdIOCommon._c;379;39_180}> itemLoc_1) 
<{StdIOCommon._c;379;39_180}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.BelowPrev -> True) (_ -> False)
<{StdIOCommon._c;376;39_179}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.AbovePrev -> True) (_ -> False)
<{StdIOCommon._c;373;39_178}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.RightToPrev -> True) (_ -> False)
<{StdIOCommon._c;370;39_177}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.LeftOfPrev -> True) (_ -> False)
<{StdIOCommon._c;367;39_176}>::B !itemLoc_0 id1_1 = case itemLoc_0 (StdIOCommon.Below id2_1_0 -> <{id.==_27}> id1_1 id2_1_0) (_ -> False)
<{StdIOCommon._c;364;39_175}>::B !itemLoc_0 id1_1 = case itemLoc_0 (StdIOCommon.Above id2_1_0 -> <{id.==_27}> id1_1 id2_1_0) (_ -> False)
<{StdIOCommon._c;361;39_174}>::B !itemLoc_0 id1_1 = case itemLoc_0 (StdIOCommon.RightTo id2_1_0 -> <{id.==_27}> id1_1 id2_1_0) (_ -> False)
<{StdIOCommon._c;358;39_173}>::B !itemLoc_0 id1_1 = case itemLoc_0 (StdIOCommon.LeftOf id2_1_0 -> <{id.==_27}> id1_1 id2_1_0) (_ -> False)
<{StdIOCommon._c;355;39_172}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.Right -> True) (_ -> False)
<{StdIOCommon._c;352;39_171}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.Center -> True) (_ -> False)
<{StdIOCommon._c;349;39_170}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.Left -> True) (_ -> False)
<{StdIOCommon._c;346;39_169}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.RightBottom -> True) (_ -> False)
<{StdIOCommon._c;343;39_168}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.LeftBottom -> True) (_ -> False)
<{StdIOCommon._c;340;39_167}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.RightTop -> True) (_ -> False)
<{StdIOCommon._c;337;39_166}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.LeftTop -> True) (_ -> False)
<{StdIOCommon._c;334;39_165}>::B !itemLoc_0 = case itemLoc_0 (StdIOCommon.Fix -> True) (_ -> False)
StdIOCommon.toString_34 !_x_0 = case _x_0 (StdIOCommon.Fix -> "Fix") (StdIOCommon.LeftTop -> "LeftTop") (StdIOCommon.RightTop -> "RightTop") (StdIOCommon.LeftBottom -> "LeftBottom") (StdIOCommon.RightBottom -> "RightBottom") (StdIOCommon.Left -> "Left") (StdIOCommon.Center -> "Center") (StdIOCommon.Right -> "Right") (StdIOCommon.LeftOf id_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "LeftOf " (id.toString_30 id_1_0))) (StdIOCommon.RightTo id_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "RightTo " (id.toString_30 id_1_0))) (StdIOCommon.Above id_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "Above " (id.toString_30 id_1_0))) (StdIOCommon.Below id_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "Below " (id.toString_30 id_1_0))) (StdIOCommon.LeftOfPrev -> "LeftOfPrev") (StdIOCommon.RightToPrev -> "RightToPrev") (StdIOCommon.AbovePrev -> "AbovePrev") (StdIOCommon.BelowPrev -> "BelowPrev") 
StdIOCommon.toString_36 !_x_0 = case _x_0 (StdIOCommon.Horizontal -> "Horizontal") (StdIOCommon.Vertical -> "Vertical") 
<{StdIOCommon.==_37}>::B !_x_0 !cursor_1 = case _x_0 (StdIOCommon.StandardCursor -> <{StdIOCommon._c;431;35_181}> cursor_1) (StdIOCommon.BusyCursor -> <{StdIOCommon._c;434;35_182}> cursor_1) (StdIOCommon.IBeamCursor -> <{StdIOCommon._c;437;35_183}> cursor_1) (StdIOCommon.CrossCursor -> <{StdIOCommon._c;440;35_184}> cursor_1) (StdIOCommon.FatCrossCursor -> <{StdIOCommon._c;443;35_185}> cursor_1) (StdIOCommon.ArrowCursor -> <{StdIOCommon._c;446;35_186}> cursor_1) (StdIOCommon.HiddenCursor -> <{StdIOCommon._c;449;35_187}> cursor_1) 
<{StdIOCommon._c;449;35_187}>::B !cursor_0 = case cursor_0 (StdIOCommon.HiddenCursor -> True) (_ -> False)
<{StdIOCommon._c;446;35_186}>::B !cursor_0 = case cursor_0 (StdIOCommon.ArrowCursor -> True) (_ -> False)
<{StdIOCommon._c;443;35_185}>::B !cursor_0 = case cursor_0 (StdIOCommon.FatCrossCursor -> True) (_ -> False)
<{StdIOCommon._c;440;35_184}>::B !cursor_0 = case cursor_0 (StdIOCommon.CrossCursor -> True) (_ -> False)
<{StdIOCommon._c;437;35_183}>::B !cursor_0 = case cursor_0 (StdIOCommon.IBeamCursor -> True) (_ -> False)
<{StdIOCommon._c;434;35_182}>::B !cursor_0 = case cursor_0 (StdIOCommon.BusyCursor -> True) (_ -> False)
<{StdIOCommon._c;431;35_181}>::B !cursor_0 = case cursor_0 (StdIOCommon.StandardCursor -> True) (_ -> False)
StdIOCommon.toString_38 !_x_0 = case _x_0 (StdIOCommon.StandardCursor -> "StandardCursor") (StdIOCommon.BusyCursor -> "BusyCursor") (StdIOCommon.IBeamCursor -> "IBeamCursor") (StdIOCommon.CrossCursor -> "CrossCursor") (StdIOCommon.FatCrossCursor -> "FatCrossCursor") (StdIOCommon.ArrowCursor -> "ArrowCursor") (StdIOCommon.HiddenCursor -> "HiddenCursor") 
<{StdIOCommon.==_39}>::B !_x_0 !xdi_1 = case _x_0 (StdIOCommon.NDI -> <{StdIOCommon._c;470;23_188}> xdi_1) (StdIOCommon.SDI -> <{StdIOCommon._c;473;23_189}> xdi_1) (StdIOCommon.MDI -> <{StdIOCommon._c;476;23_190}> xdi_1) 
<{StdIOCommon._c;476;23_190}>::B !xdi_0 = case xdi_0 (StdIOCommon.MDI -> True) (_ -> False)
<{StdIOCommon._c;473;23_189}>::B !xdi_0 = case xdi_0 (StdIOCommon.SDI -> True) (_ -> False)
<{StdIOCommon._c;470;23_188}>::B !xdi_0 = case xdi_0 (StdIOCommon.NDI -> True) (_ -> False)
StdIOCommon.toString_40 !_x_0 = case _x_0 (StdIOCommon.NDI -> "NDI") (StdIOCommon.SDI -> "SDI") (StdIOCommon.MDI -> "MDI") 
StdIOCommon.toString_41 !_x_0 = case _x_0 (StdIOCommon.SliderIncSmall -> "SliderIncSmall") (StdIOCommon.SliderDecSmall -> "SliderDecSmall") (StdIOCommon.SliderIncLarge -> "SliderIncLarge") (StdIOCommon.SliderDecLarge -> "SliderDecLarge") (StdIOCommon.SliderThumb x_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "SliderThumb " (StdString.toString_5 x_1_0))) 
<{StdIOCommon.==_42}>::B !_x_0 !error_1 = case _x_0 (StdIOCommon.NoError -> <{StdIOCommon._c;587;39_191}> error_1) (StdIOCommon.ErrorViolateDI -> <{StdIOCommon._c;590;39_192}> error_1) (StdIOCommon.ErrorIdsInUse -> <{StdIOCommon._c;593;39_193}> error_1) (StdIOCommon.ErrorUnknownObject -> <{StdIOCommon._c;596;39_194}> error_1) (StdIOCommon.ErrorNotifierOpen -> <{StdIOCommon._c;600;39_195}> error_1) (StdIOCommon.OtherError e1_1_0 -> <{StdIOCommon._c;604;39_196}> error_1 e1_1_0) 
<{StdIOCommon._c;604;39_196}>::B !error_0 e1_1 = case error_0 (StdIOCommon.OtherError e2_1_0 -> <{StdString.==_2}> e1_1 e2_1_0) (_ -> False)
<{StdIOCommon._c;600;39_195}>::B !error_0 = case error_0 (StdIOCommon.ErrorNotifierOpen -> True) (_ -> False)
<{StdIOCommon._c;596;39_194}>::B !error_0 = case error_0 (StdIOCommon.ErrorUnknownObject -> True) (_ -> False)
<{StdIOCommon._c;593;39_193}>::B !error_0 = case error_0 (StdIOCommon.ErrorIdsInUse -> True) (_ -> False)
<{StdIOCommon._c;590;39_192}>::B !error_0 = case error_0 (StdIOCommon.ErrorViolateDI -> True) (_ -> False)
<{StdIOCommon._c;587;39_191}>::B !error_0 = case error_0 (StdIOCommon.NoError -> True) (_ -> False)
StdIOCommon.toString_43 !_x_0 = case _x_0 (StdIOCommon.NoError -> "NoError") (StdIOCommon.ErrorViolateDI -> "ErrorViolateDI") (StdIOCommon.ErrorIdsInUse -> "ErrorIdsInUse") (StdIOCommon.ErrorUnknownObject -> "ErrorUnknownObject") (StdIOCommon.ErrorNotifierOpen -> "ErrorNotifierOpen") (StdIOCommon.OtherError s_1_0 -> StdIOCommon.brackify (<{StdString.+++_11}> "OtherError " (StdString.toString_9 s_1_0))) 
<{StdIOCommon.TD;SelectState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;MarkState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;KeyboardState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;KeyState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;IsRepeatKey}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;Key}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;KeyboardStateFilter}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;MouseState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ButtonState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;MouseStateFilter}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;SliderState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;UpdateState}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ViewDomain}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ViewFrame}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;UpdateArea}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;Modifiers}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ItemPos}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ItemLoc}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ItemOffset}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;Alignment}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ParentIndex}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;OffsetFun}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;Direction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;CursorShape}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;DocumentInterface}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ProcessAttribute}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ProcessWindowResizeFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ProcessOpenFilesFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ToolbarItem}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ModifiersFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;MouseFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;KeyboardFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;SliderAction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;SliderMove}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ScrollFunction}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;Look}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;ErrorReport}> _x_0::B = _predefined._Nil
<{StdIOCommon.TD;OkBool}> _x_0::B = _predefined._Nil

:: StdIOCommon.SelectState = StdIOCommon.Able | StdIOCommon.Unable
:: StdIOCommon.MarkState = StdIOCommon.Mark | StdIOCommon.NoMark
:: StdIOCommon.KeyboardState = StdIOCommon.CharKey a1::C a2 | StdIOCommon.SpecialKey a1 a2 a3 | StdIOCommon.KeyLost
:: StdIOCommon.KeyState = StdIOCommon.KeyDown a1 | StdIOCommon.KeyUp
:: StdIOCommon.Key = StdIOCommon.IsCharKey a1::C | StdIOCommon.IsSpecialKey a1
:: StdIOCommon.MouseState = StdIOCommon.MouseMove a1 a2 | StdIOCommon.MouseDown a1 a2 a3::I | StdIOCommon.MouseDrag a1 a2 | StdIOCommon.MouseUp a1 a2 | StdIOCommon.MouseLost
:: StdIOCommon.ButtonState = StdIOCommon.ButtonStillUp | StdIOCommon.ButtonDown | StdIOCommon.ButtonDoubleDown | StdIOCommon.ButtonTripleDown | StdIOCommon.ButtonStillDown | StdIOCommon.ButtonUp
:: StdIOCommon.ItemLoc = StdIOCommon.Fix | StdIOCommon.LeftTop | StdIOCommon.RightTop | StdIOCommon.LeftBottom | StdIOCommon.RightBottom | StdIOCommon.Left | StdIOCommon.Center | StdIOCommon.Right | StdIOCommon.LeftOf a1 | StdIOCommon.RightTo a1 | StdIOCommon.Above a1 | StdIOCommon.Below a1 | StdIOCommon.LeftOfPrev | StdIOCommon.RightToPrev | StdIOCommon.AbovePrev | StdIOCommon.BelowPrev
:: StdIOCommon.ItemOffset = StdIOCommon.NoOffset | StdIOCommon.OffsetVector a1 | StdIOCommon.OffsetAlign a1 | StdIOCommon.OffsetFun a1 a2
:: StdIOCommon.Alignment = StdIOCommon.AlignLeft | StdIOCommon.AlignRight | StdIOCommon.AlignCenter | StdIOCommon.AlignTop | StdIOCommon.AlignBottom
:: StdIOCommon.Direction = StdIOCommon.Horizontal | StdIOCommon.Vertical
:: StdIOCommon.CursorShape = StdIOCommon.StandardCursor | StdIOCommon.BusyCursor | StdIOCommon.IBeamCursor | StdIOCommon.CrossCursor | StdIOCommon.FatCrossCursor | StdIOCommon.ArrowCursor | StdIOCommon.HiddenCursor
:: StdIOCommon.DocumentInterface = StdIOCommon.NDI | StdIOCommon.SDI | StdIOCommon.MDI
:: StdIOCommon.ProcessAttribute = StdIOCommon.ProcessActivate a1 | StdIOCommon.ProcessDeactivate a1 | StdIOCommon.ProcessClose a1 | StdIOCommon.ProcessOpenFiles a1 | StdIOCommon.ProcessClipboardChanged a1 | StdIOCommon.ProcessWindowPos a1 | StdIOCommon.ProcessWindowSize a1 | StdIOCommon.ProcessWindowResize a1 | StdIOCommon.ProcessToolbar a1 | StdIOCommon.ProcessNoWindowMenu
:: StdIOCommon.ToolbarItem = StdIOCommon.ToolbarItem a1 a2 a3 | StdIOCommon.ToolbarSeparator
:: StdIOCommon.SliderMove = StdIOCommon.SliderIncSmall | StdIOCommon.SliderDecSmall | StdIOCommon.SliderIncLarge | StdIOCommon.SliderDecLarge | StdIOCommon.SliderThumb a1::I
:: StdIOCommon.ErrorReport = StdIOCommon.NoError | StdIOCommon.ErrorViolateDI | StdIOCommon.ErrorIdsInUse | StdIOCommon.ErrorUnknownObject | StdIOCommon.ErrorNotifierOpen | StdIOCommon.OtherError !a1

|| Converted Records
:: StdIOCommon._SliderState = {!StdIOCommon.sliderMin::I, !StdIOCommon.sliderMax::I, !StdIOCommon.sliderThumb::I}

:: StdIOCommon._UpdateState = {!StdIOCommon.oldFrame, !StdIOCommon.newFrame, !StdIOCommon.updArea}

:: StdIOCommon._Modifiers = {!StdIOCommon.shiftDown::B, !StdIOCommon.optionDown::B, !StdIOCommon.commandDown::B, !StdIOCommon.controlDown::B, !StdIOCommon.altDown::B}

:: <{StdIOCommon.gEq_s;}> = {!StdIOCommon.gEq_s}

:: <{StdIOCommon.gEq_ss;}> = {!StdIOCommon.gEq_ss}

:: <{StdIOCommon.gEq_sss;}> = {!StdIOCommon.gEq_sss}

:: <{StdIOCommon.gEq_ssss;}> = {!StdIOCommon.gEq_ssss}

:: <{StdIOCommon.gEq_sssss;}> = {!StdIOCommon.gEq_sssss}

:: <{StdIOCommon.gEq_ssssss;}> = {!StdIOCommon.gEq_ssssss}

:: <{StdIOCommon.gEq_sssssss;}> = {!StdIOCommon.gEq_sssssss}

:: <{StdIOCommon.gEq_ssssssss;}> = {!StdIOCommon.gEq_ssssssss}

:: <{StdIOCommon.gEq_sssssssss;}> = {!StdIOCommon.gEq_sssssssss}

:: <{StdIOCommon.bimap_s;}> = {StdIOCommon.bimap_s}

:: <{StdIOCommon.bimap_ss;}> = {StdIOCommon.bimap_ss}

:: <{StdIOCommon.bimap_sss;}> = {StdIOCommon.bimap_sss}

