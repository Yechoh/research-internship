|| ?module? Parser


Parser.anon_26 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_25 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_82 !f_0 x_1 = f_0 (StdList.fromString_78 x_1)
Parser.anon_83 !_x_0 g_1 x_2 = Text.Parsers.ZParsers.ParsersAccessories.ds _x_0 (g_1 x_2)
Parser.anon_84 g_0 x_1 = Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) (g_0 x_1)
Parser.anon_85 f_0 x_1 = Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) (Parser.anon_82 f_0 x_1)
Parser.spstrtok = Parser.anon_85 (Text.Parsers.ZParsers.ParsersAccessories.tokenH (<{StdOverloaded.==;}> <{StdChar.==_18}>) (<{StdOverloaded.toChar;}> StdChar.toChar_20))
Parser.anon_23 !_vtoString_0 pModuleAction_1 mn_2 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> pModuleAction_1 (AbsSyn.Module (select _vtoString_0::<{StdOverloaded.toString;}> 0 mn_2))
Parser.anon_24 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_86::B !g_0 x_1 = StdBool.not (g_0 x_1)
Parser.anon_87::B !x_0::C = StdBool.not (Text.Parsers.ZParsers.ParsersAccessories.space_18 x_0)
Parser.pNotSpace = Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) (<{Text.Parsers.ZParsers.ParsersDerived.<+>}> (Text.Parsers.ZParsers.ParsersKernel.satisfy Parser.anon_87))
Parser.pHelpYield c_0 = <{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "help") (StdFunc.const c_0)) (Text.Parsers.ZParsers.ParsersKernel.yield c_0)
Parser.anon_88 pModuleAction_0 mn_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> pModuleAction_0 (AbsSyn.Module (StdList.toString_79 mn_1))
Parser.pModule = <{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "module") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Parser.pNotSpace (Parser.anon_88 (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "create") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "application") (StdFunc.const AbsSyn.ApplicationModule)) (Text.Parsers.ZParsers.ParsersKernel.yield AbsSyn.LibraryModule)))) AbsSyn.CreateModule) (Parser.pHelpYield AbsSyn.ModuleHelp)))) (Text.Parsers.ZParsers.ParsersKernel.yield (AbsSyn.Module "" AbsSyn.ModuleHelp))))
Parser.anon_30 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_29 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_28 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_16 !_vtoString_0 pProjectAction_1 pn_2 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> pProjectAction_1 (AbsSyn.Project (select _vtoString_0::<{StdOverloaded.toString;}> 0 pn_2))
Parser.anon_27 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_22 !_x_0 = case _x_0 (_Tuple2 s_1_0 d_1_1 -> <{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok s_1_0) (StdFunc.const d_1_1)) 
Parser.pConstCtr xs_0 = Text.Parsers.ZParsers.ParsersAccessories.choice (StdList.map Parser.anon_22 xs_0)
Parser.anon_21 dirOpts_0 i_1::I = <{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.pConstCtr dirOpts_0) (AbsSyn.MovePathAction i_1)
Parser.anon_89 !f_0 x_1 = f_0 (StdList.toString_79 x_1)
Parser.pPathAction = <{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "add") (StdFunc.const Parser.pNotSpace)) (Parser.anon_89 AbsSyn.AddPathAction)) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "remove") (StdFunc.const (Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) Text.Parsers.ZParsers.ParsersAccessories.number))) AbsSyn.RemovePathAction)) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "list") (StdFunc.const AbsSyn.ListPathsAction))) (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "move") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) Text.Parsers.ZParsers.ParsersAccessories.number) (Parser.anon_21 (_predefined._Cons (_Tuple2 "up" AbsSyn.MovePathUp) (_predefined._Cons (_Tuple2 "down" AbsSyn.MovePathDown) (_predefined._Cons (_Tuple2 "top" AbsSyn.MovePathTop) (_predefined._Cons (_Tuple2 "bottom" AbsSyn.MovePathBottom) _predefined._Nil)))))))) (Parser.pHelpYield AbsSyn.PathHelp))) AbsSyn.ProjectPath
Parser.pIDEEnvs = <{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "--envs") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (<{Text.Parsers.ZParsers.ParsersDerived.<?>}> (Text.Parsers.ZParsers.ParsersAccessories.ds (<{Text.Parsers.ZParsers.ParsersAccessories.space;}> Text.Parsers.ZParsers.ParsersAccessories.space_18) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '=')) StdFunc.id '=') (StdFunc.const Parser.pNotSpace)))) StdList.toString_79) (Text.Parsers.ZParsers.ParsersKernel.yield "IDEEnvs")
Parser.anon_17 f_0::B = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Parser.pIDEEnvs (AbsSyn.BuildProject f_0)
Parser.pForce = <{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "--force") (StdFunc.const True)) (Text.Parsers.ZParsers.ParsersKernel.yield False)
Parser.pBuildOpts = <{Text.Parsers.ZParsers.ParsersKernel.<&>}> Parser.pForce Parser.anon_17
Parser.anon_93 pProjectAction_0 pn_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> pProjectAction_0 (AbsSyn.Project (StdList.toString_79 pn_1))
Parser.anon_92 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_91 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_90 !f_0 x_1 = f_0 (StdList.toString_79 x_1)
Parser.pProject = <{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "project") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Parser.pNotSpace (Parser.anon_93 (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "create") (StdFunc.const AbsSyn.CreateProject)) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "show") (StdFunc.const AbsSyn.ShowProject))) (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "build") (StdFunc.const Parser.pBuildOpts))) (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "path") (StdFunc.const Parser.pPathAction))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "root") (StdFunc.const Parser.pNotSpace)) (Parser.anon_90 AbsSyn.SetRelativeRoot))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "target") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_91 AbsSyn.SetTarget))) (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "exec") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_92 AbsSyn.SetExec)) (Parser.pHelpYield AbsSyn.ProjectHelp))))) (Text.Parsers.ZParsers.ParsersKernel.yield (AbsSyn.Project "" AbsSyn.ProjectHelp))))
Parser.pMake = <{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "make") (StdFunc.const AbsSyn.CpmMake)
Parser.anon_15 !_vtoString_0 pn_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Parser.pBuildOpts (AbsSyn.Project (select _vtoString_0::<{StdOverloaded.toString;}> 0 pn_1))
Parser.anon_94 pn_0 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Parser.pBuildOpts (AbsSyn.Project (StdList.toString_79 pn_0))
Parser.pCpm = <{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> Parser.pMake Parser.pProject) Parser.pModule) (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Parser.pNotSpace Parser.anon_94)) (Text.Parsers.ZParsers.ParsersKernel.yield AbsSyn.CpmHelp)
Parser.startParse input_0 = <{Parser._c;151;3_106}> (Text.Parsers.ZParsers.ParsersKernel.parse Parser.pCpm input_0 "line" "character")
<{Parser._c;151;3_106}> !_x_0 = case _x_0 (Text.Parsers.ZParsers.ParsersKernel.Succ _x_1_0 -> case _x_1_0 (_predefined._Cons x_2_0 _x_2_1 -> x_2_0) ) (_ -> AbsSyn.CpmHelp)
Parser.pHelp c_0 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "help") (StdFunc.const c_0)
Parser.anon_38 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_37 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_36 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_35 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_34 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_33 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_95 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_20 !_vtoString_0 en_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_95 (AbsSyn.SetEnvironmentCodeGen (select _vtoString_0::<{StdOverloaded.toString;}> 0 en_1)))
Parser.anon_32 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_96 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_19 !_vtoString_0 en_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_96 (AbsSyn.SetEnvironmentCompiler (select _vtoString_0::<{StdOverloaded.toString;}> 0 en_1)))
Parser.anon_31 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Parser.anon_97 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_18 !_vtoString_0 en_1 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_97 (AbsSyn.RenameEnvironment (select _vtoString_0::<{StdOverloaded.toString;}> 0 en_1)))
Parser.anon_105 en_0 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_95 (AbsSyn.SetEnvironmentCodeGen (StdString.toString_9 en_0)))
Parser.anon_104 en_0 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_96 (AbsSyn.SetEnvironmentCompiler (StdString.toString_9 en_0)))
Parser.anon_103 en_0 = <{Text.Parsers.ZParsers.ParsersDerived.<@}> Text.Parsers.ZParsers.ParsersAccessories.identifier (Parser.anon_97 (AbsSyn.RenameEnvironment (StdString.toString_9 en_0)))
Parser.anon_102 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_101 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_100 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_99 !f_0 x_1 = f_0 (StdString.toString_9 x_1)
Parser.anon_98 !f_0 x_1 = f_0 (StdList.toString_79 x_1)
Parser.pEnvironment = <{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "environment") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (Parser.spstrtok "list") (StdFunc.const AbsSyn.ListEnvironments)) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "import") (StdFunc.const Parser.pNotSpace)) (Parser.anon_98 AbsSyn.ImportEnvironment))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "create") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_99 AbsSyn.CreateEnvironment))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "remove") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_100 AbsSyn.RemoveEnvironment))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "show") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_101 AbsSyn.ShowEnvironment))) (<{Text.Parsers.ZParsers.ParsersDerived.<@}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "export") (StdFunc.const Text.Parsers.ZParsers.ParsersAccessories.identifier)) (Parser.anon_102 AbsSyn.ExportEnvironment))) (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "rename") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Text.Parsers.ZParsers.ParsersAccessories.identifier Parser.anon_103)))) (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "setcompiler") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Text.Parsers.ZParsers.ParsersAccessories.identifier Parser.anon_104)))) (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> (Parser.spstrtok "setcodegen") (StdFunc.const (<{Text.Parsers.ZParsers.ParsersKernel.<&>}> Text.Parsers.ZParsers.ParsersAccessories.identifier Parser.anon_105))) (Parser.pHelpYield AbsSyn.EnvironmentHelp))))) AbsSyn.Environment


|| Converted Records
:: <{Parser.gEq_s;}> = {!Parser.gEq_s}

:: <{Parser.gEq_ss;}> = {!Parser.gEq_ss}

:: <{Parser.gEq_sss;}> = {!Parser.gEq_sss}

:: <{Parser.gEq_ssss;}> = {!Parser.gEq_ssss}

:: <{Parser.gEq_sssss;}> = {!Parser.gEq_sssss}

:: <{Parser.gEq_ssssss;}> = {!Parser.gEq_ssssss}

:: <{Parser.gEq_sssssss;}> = {!Parser.gEq_sssssss}

:: <{Parser.gEq_ssssssss;}> = {!Parser.gEq_ssssssss}

:: <{Parser.gEq_sssssssss;}> = {!Parser.gEq_sssssssss}

:: <{Parser.bimap_s;}> = {Parser.bimap_s}

:: <{Parser.bimap_ss;}> = {Parser.bimap_ss}

:: <{Parser.bimap_sss;}> = {Parser.bimap_sss}

