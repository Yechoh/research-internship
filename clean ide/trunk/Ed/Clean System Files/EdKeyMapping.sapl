|| ?module? EdKeyMapping


EdKeyMapping.allKeys = _predefined._Cons oskey.leftKey (_predefined._Cons oskey.rightKey (_predefined._Cons oskey.upKey (_predefined._Cons oskey.downKey (_predefined._Cons oskey.pgUpKey (_predefined._Cons oskey.pgDownKey (_predefined._Cons oskey.deleteKey (_predefined._Cons oskey.backSpaceKey (_predefined._Cons oskey.beginKey (_predefined._Cons oskey.endKey (_predefined._Cons oskey.f1Key (_predefined._Cons oskey.f2Key (_predefined._Cons oskey.f3Key (_predefined._Cons oskey.f4Key (_predefined._Cons oskey.f5Key (_predefined._Cons oskey.f6Key (_predefined._Cons oskey.f7Key (_predefined._Cons oskey.f8Key (_predefined._Cons oskey.f9Key (_predefined._Cons oskey.f10Key (_predefined._Cons oskey.f11Key (_predefined._Cons oskey.f12Key (_predefined._Cons oskey.f13Key (_predefined._Cons oskey.f14Key (_predefined._Cons oskey.f15Key _predefined._Nil))))))))))))))))))))))))
EdKeyMapping.anon_18 _x_0 !_x_1 = case _x_1 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> StdPicture.draw_97 newFrame_1_1) 
EdKeyMapping.box_29 = EdKeyMapping.anon_18
EdKeyMapping.getCheckbox_31::B !id_0 !wstate_1 = let _x_1_0 = StdControl.getCheckControlSelection id_0 wstate_1 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> StdMisc.abort "EdKeyMapping[getCheckbox]: wrong id") (False -> let cs_3_0 = select _x_1_0::_Tuple2 1 in case (Data.Maybe.isNothing cs_3_0) (True -> StdMisc.abort "EdKeyMapping[getCheckbox]: strange error") (False -> StdBool.not (StdList.isEmpty (Data.Maybe.fromJust cs_3_0))) ) 
EdKeyMapping.getPopUp_32::I !id_0 !wstate_1 = let _x_1_0 = StdControl.getPopUpControlSelection id_0 wstate_1 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> StdMisc.abort "EdKeyMapping[getPopUp]: wrong id") (False -> let cs_3_0 = select _x_1_0::_Tuple2 1 in case (Data.Maybe.isNothing cs_3_0) (True -> StdMisc.abort "EdKeyMapping[getPopUp]: strange error") (False -> <{StdInt.-_7}> (Data.Maybe.fromJust cs_3_0) StdInt.one_11) ) 
EdKeyMapping.getKeyCode_33 key_0 alt_1 ctrl_2 shift_3 wstate_4 = EdKeyMapping.KeyCode (<{StdInt.+_6}> (<{StdInt.+_6}> (<{EdKeyMapping._if;421;20_107}> (EdKeyMapping.getCheckbox_31 shift_3 wstate_4)) (<{EdKeyMapping._if;421;41_108}> (EdKeyMapping.getCheckbox_31 ctrl_2 wstate_4))) (<{EdKeyMapping._if;421;60_109}> (EdKeyMapping.getCheckbox_31 alt_1 wstate_4))) (<{StdList.!!}> EdKeyMapping.allKeys (EdKeyMapping.getPopUp_32 key_0 wstate_4))
<{EdKeyMapping._if;421;60_109}>::I !_x_0::B = case _x_0 (True -> 4) (_ -> 0)
<{EdKeyMapping._if;421;41_108}>::I !_x_0::B = case _x_0 (True -> 2) (_ -> 0)
<{EdKeyMapping._if;421;20_107}>::I !_x_0::B = case _x_0 (True -> 1) (_ -> 0)
<{EdKeyMapping.==_5}>::B !_x_0 !_x_1 = case _x_0 (EdKeyMapping.KeyCode myModifiers_1_0 specialKey_1_1 -> case _x_1 (EdKeyMapping.KeyCode myModifiers`_2_0 specialKey`_2_1 -> case (<{StdInt.==_16}> myModifiers_1_0 <{myModifiers`_2_0}>) (True -> <{oskey.==_32}> specialKey_1_1 <{specialKey`_2_1}>) (False -> False) ) ) 
EdKeyMapping.updateMappedTo_27 key_0 alt_1 ctrl_2 shift_3 mappedTo_4 !dialog_5 !_x_6 = case _x_6 (_Tuple2 dialogState_1_0 pstate_1_1 -> case dialogState_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> let _x_3_0 = StdPSt.accPIO (StdControl.getWindow dialog_5) pstate_1_1, wstate_3_1 = select _x_3_0::_Tuple2 0 in case (Data.Maybe.isNothing wstate_3_1) (True -> _Tuple2 dialogState_1_0 (select _x_3_0::_Tuple2 1)) (False -> let wstate_5_0 = Data.Maybe.fromJust wstate_3_1, keyCode_5_1 = EdKeyMapping.getKeyCode_33 key_0 alt_1 ctrl_2 shift_3 wstate_5_0, actions_5_2 = Table.tableLookup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdKeyMapping.==_5}>)) keyCode_5_1 keyMapping_2_0 in _Tuple2 dialogState_1_0 (StdPSt.appPIO (StdControl.setControlTexts (_predefined._Cons (_Tuple2 mappedTo_4 (<{EdKeyMapping._if;359;35_110}> (StdList.isEmpty actions_5_2) actions_5_2)) _predefined._Nil)) (select _x_3_0::_Tuple2 1))) ) ) 
<{EdKeyMapping._if;359;35_110}> !_x_0::B actions_1 = case _x_0 (True -> "<nothing>") (_ -> EdActionType.toString_1 (StdList.hd actions_1))
EdKeyMapping.keyControl_22 dialog_0 shift_1 ctrl_2 alt_3 key_4 mappedTo_5 maxActionWidth_6::I lineHeight_7 sizeAttr_8 = StdControlDef.CompoundControl (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Key:" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.CheckControl (_predefined._Cons (_Tuple4 "Shift +" Data.Maybe.Nothing StdIOCommon.NoMark (EdKeyMapping.updateMappedTo_27 key_4 alt_3 ctrl_2 shift_1 mappedTo_5 dialog_0)) _predefined._Nil) (StdControlDef.Columns 1) (_predefined._Cons (StdControlDef.ControlId shift_1) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.CheckControl (_predefined._Cons (_Tuple4 "Ctrl +" Data.Maybe.Nothing StdIOCommon.NoMark (EdKeyMapping.updateMappedTo_27 key_4 alt_3 ctrl_2 shift_1 mappedTo_5 dialog_0)) _predefined._Nil) (StdControlDef.Columns 1) (_predefined._Cons (StdControlDef.ControlId ctrl_2) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.CheckControl (_predefined._Cons (_Tuple4 "Alt +" Data.Maybe.Nothing StdIOCommon.NoMark (EdKeyMapping.updateMappedTo_27 key_4 alt_3 ctrl_2 shift_1 mappedTo_5 dialog_0)) _predefined._Nil) (StdControlDef.Columns 1) (_predefined._Cons (StdControlDef.ControlId alt_3) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.PopUpControl (StdList.zip2 (StdList.map oskey.toString_33 EdKeyMapping.allKeys) (StdList.repeat (EdKeyMapping.updateMappedTo_27 key_4 alt_3 ctrl_2 shift_1 mappedTo_5 dialog_0))) 1 (_predefined._Cons (StdControlDef.ControlId key_4) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Currently mapped to:" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (StdControlDef.TextControl "" (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.PixelWidth maxActionWidth_6)) (_predefined._Cons (StdControlDef.ControlId mappedTo_5) _predefined._Nil))))))))) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlLook True EdKeyMapping.box_29) sizeAttr_8))
EdKeyMapping.toString_6 !_x_0 = case _x_0 (EdKeyMapping.KeyCode myModifiers_1_0 key_1_1 -> <{StdString.+++_11}> (<{EdKeyMapping._if;34;10_111}> (StdBool.not (<{StdInt.==_16}> (StdInt.bitand myModifiers_1_0 1) 0))) (<{StdString.+++_11}> (<{EdKeyMapping._if;35;10_112}> (StdBool.not (<{StdInt.==_16}> (StdInt.bitand myModifiers_1_0 2) 0))) (<{StdString.+++_11}> (<{EdKeyMapping._if;36;10_113}> (StdBool.not (<{StdInt.==_16}> (StdInt.bitand myModifiers_1_0 4) 0))) (oskey.toString_33 key_1_1)))) 
<{EdKeyMapping._if;36;10_113}> !_x_0::B = case _x_0 (True -> "Alt+") (_ -> "")
<{EdKeyMapping._if;35;10_112}> !_x_0::B = case _x_0 (True -> "Ctrl+") (_ -> "")
<{EdKeyMapping._if;34;10_111}> !_x_0::B = case _x_0 (True -> "Shift+") (_ -> "")
EdKeyMapping.updateMappedFrom_28 listBox_0 action_1 !dialog_2 !_x_3 = case _x_3 (_Tuple2 dialogState_1_0 pstate_1_1 -> case dialogState_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> let _x_3_0 = StdPSt.accPIO (StdControl.getWindow dialog_2) pstate_1_1, wstate_3_1 = select _x_3_0::_Tuple2 0 in case (Data.Maybe.isNothing wstate_3_1) (True -> _Tuple2 dialogState_1_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_5_0 = StdListBox.getListBoxItems listBox_0 (select _x_3_0::_Tuple2 1) in _Tuple2 dialogState_1_0 (StdListBox.openListBoxItems listBox_0 0 (StdList.map EdKeyMapping.toString_6 (Table.tableLookup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) (<{StdList.!!}> EdActionType.allActions (EdKeyMapping.getPopUp_32 action_1 (Data.Maybe.fromJust wstate_3_1))) (Table.tableInvert (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) keyMapping_2_0))) (StdListBox.closeListBoxItems listBox_0 (_SystemEnum._from_to_6 1 (StdList.length_47 (select (select _x_5_0::_Tuple2 0)::_Tuple2 1))) (select _x_5_0::_Tuple2 1)))) ) ) 
EdKeyMapping.actionControl_21 listBox_0 dialog_1 action_2 listBox_3 sizeAttr_4 = StdControlDef.CompoundControl (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Action:" (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Mapped from:")) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.PopUpControl (StdList.zip2 (StdList.map EdActionType.toString_1 EdActionType.allActions) (StdList.repeat (EdKeyMapping.updateMappedFrom_28 listBox_0 action_2 dialog_1))) 1 (_predefined._Cons (StdControlDef.ControlId action_2) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Mapped from:" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) listBox_3))) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlLook True EdKeyMapping.box_29) sizeAttr_4))
EdKeyMapping.dialogContents_25 listBox_0 action_1 dialog_2 shift_3 ctrl_4 alt_5 key_6 mappedTo_7 buttonsControl_8 maxWidth_9::I keySize_10 actionSize_11 maxActionWidth_12::I lineHeight_13 listBox_14 = <{StdIOBasic.:+:}> (EdKeyMapping.keyControl_22 dialog_2 shift_3 ctrl_4 alt_5 key_6 mappedTo_7 maxActionWidth_12 lineHeight_13 (_predefined._Cons (StdControlDef.ControlViewSize (update keySize_10::StdIOBasic._Size [0:maxWidth_9])) _predefined._Nil)) (<{StdIOBasic.:+:}> (EdKeyMapping.actionControl_21 listBox_0 dialog_2 action_1 listBox_14 (_predefined._Cons (StdControlDef.ControlViewSize (update actionSize_11::StdIOBasic._Size [0:maxWidth_9])) _predefined._Nil)) buttonsControl_8)
EdKeyMapping.dialog_26 listBox_0 action_1 shift_2 ctrl_3 alt_4 key_5 mappedTo_6 buttonsControl_7 dialog_8 ok_9 maxWidth_10::I keySize_11 actionSize_12 maxActionWidth_13::I lineHeight_14 listBox_15 = StdWindowDef.Dialog "Key mapping" (EdKeyMapping.dialogContents_25 listBox_0 action_1 dialog_8 shift_2 ctrl_3 alt_4 key_5 mappedTo_6 buttonsControl_7 maxWidth_10 keySize_11 actionSize_12 maxActionWidth_13 lineHeight_14 listBox_15) (_predefined._Cons (StdWindowDef.WindowId dialog_8) (_predefined._Cons (StdWindowDef.WindowOk ok_9) (_predefined._Cons (StdWindowDef.WindowInit (StdFunc.seq (_predefined._Cons (EdKeyMapping.updateMappedFrom_28 listBox_0 action_1 dialog_8) (_predefined._Cons (EdKeyMapping.updateMappedTo_27 key_5 alt_4 ctrl_3 shift_2 mappedTo_6 dialog_8) _predefined._Nil)))) _predefined._Nil)))
EdKeyMapping.storeKeyMapping_30 setKeyMapping_0 dialog_1 !_x_2 = case _x_2 (_Tuple2 dialogState_1_0 pstate_1_1 -> case dialogState_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> _Tuple2 dialogState_1_0 (StdWindow.closeWindow dialog_1 (setKeyMapping_0 keyMapping_2_0 pstate_1_1))) ) 
EdKeyMapping.foldr_48 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (EdKeyMapping.foldr_48 op_0 r_1 x_1_1)) 
EdKeyMapping.foldr_47 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (EdKeyMapping.foldr_47 op_0 r_1 x_1_1)) 
EdKeyMapping.snd_46 !tuple_0 = select tuple_0::_Tuple2 1
EdKeyMapping.anon_19 currentKeys_0 index_1::I rest_2 = _predefined._Cons (<{StdList.!!}> currentKeys_0 (<{StdInt.-_7}> index_1 1)) rest_2
EdKeyMapping.foldr_93 currentKeys_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> EdKeyMapping.anon_19 currentKeys_0 a_1_0 (EdKeyMapping.foldr_93 currentKeys_0 r_1 x_1_1)) 
EdKeyMapping.foldr_94 !_x_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Table.tableRemove _x_0 a_1_0 (EdKeyMapping.foldr_94 _x_0 r_1 x_1_1)) 
EdKeyMapping.foldr_95 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Table.tableRemove (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdKeyMapping.==_5}>)) a_1_0 (EdKeyMapping.foldr_95 r_0 x_1_1)) 
EdKeyMapping.removeBinding_34 key_0 alt_1 ctrl_2 shift_3 mappedTo_4 listBox_5 action_6 !dialog_7 !_x_8 = case _x_8 (_Tuple2 dialogState_1_0 pstate_1_1 -> case dialogState_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> let _x_3_0 = StdPSt.accPIO (StdControl.getWindow dialog_7) pstate_1_1, wstate_3_1 = select _x_3_0::_Tuple2 0 in case (Data.Maybe.isNothing wstate_3_1) (True -> _Tuple2 dialogState_1_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_5_0 = StdListBox.getListBoxSelection listBox_5 (select _x_3_0::_Tuple2 1), indices_5_1 = StdList.map EdKeyMapping.snd_46 (select (select _x_5_0::_Tuple2 0)::_Tuple2 1), _x_5_2 = EdKeyMapping.updateMappedFrom_28 listBox_5 action_6 dialog_7 (_Tuple2 (update dialogState_1_0::EdKeyMapping._KeyMappingDialogState [0:EdKeyMapping.foldr_95 keyMapping_2_0 (EdKeyMapping.foldr_93 (Table.tableLookup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) (<{StdList.!!}> EdActionType.allActions (EdKeyMapping.getPopUp_32 action_6 (Data.Maybe.fromJust wstate_3_1))) (Table.tableInvert (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) keyMapping_2_0)) _predefined._Nil indices_5_1)]) (StdListBox.closeListBoxItems listBox_5 indices_5_1 (select _x_5_0::_Tuple2 1))), _x_5_3 = EdKeyMapping.updateMappedTo_27 key_0 alt_1 ctrl_2 shift_3 mappedTo_4 dialog_7 (_Tuple2 (select _x_5_2::_Tuple2 0) (select _x_5_2::_Tuple2 1)) in _Tuple2 (select _x_5_3::_Tuple2 0) (select _x_5_3::_Tuple2 1)) ) ) 
EdKeyMapping.addBinding_20 !_vEq_0 !keyCode_1 action_2 !keyMapping_3 = Table.tableInsert (_Tuple2 keyCode_1 action_2) (Table.tableRemove _vEq_0 keyCode_1 keyMapping_3)
EdKeyMapping.addBinding_96 !keyCode_0 action_1 !keyMapping_2 = Table.tableInsert (_Tuple2 keyCode_0 action_1) (Table.tableRemove (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdKeyMapping.==_5}>)) keyCode_0 keyMapping_2)
EdKeyMapping.bindKey_35 listBox_0 key_1 alt_2 ctrl_3 shift_4 mappedTo_5 action_6 !dialog_7 !_x_8 = case _x_8 (_Tuple2 dialogState_1_0 pstate_1_1 -> case dialogState_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> let _x_3_0 = StdPSt.accPIO (StdControl.getWindow dialog_7) pstate_1_1, wstate_3_1 = select _x_3_0::_Tuple2 0 in case (Data.Maybe.isNothing wstate_3_1) (True -> _Tuple2 dialogState_1_0 (select _x_3_0::_Tuple2 1)) (False -> let wstate_5_0 = Data.Maybe.fromJust wstate_3_1, action_5_1::I = EdKeyMapping.getPopUp_32 action_6 wstate_5_0, action_5_2 = <{StdList.!!}> EdActionType.allActions action_5_1 in case (StdBool.not (<{StdInt.<_17}> (StdList.length_47 (Table.tableLookup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) action_5_2 (Table.tableInvert (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdActionType.==_3}>)) keyMapping_2_0))) 4)) (True -> _Tuple2 dialogState_1_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_7_0 = EdKeyMapping.updateMappedFrom_28 listBox_0 action_6 dialog_7 (_Tuple2 (update dialogState_1_0::EdKeyMapping._KeyMappingDialogState [0:EdKeyMapping.addBinding_96 (EdKeyMapping.getKeyCode_33 key_1 alt_2 ctrl_3 shift_4 wstate_5_0) action_5_2 keyMapping_2_0]) (select _x_3_0::_Tuple2 1)), _x_7_1 = EdKeyMapping.updateMappedTo_27 key_1 alt_2 ctrl_3 shift_4 mappedTo_5 dialog_7 (_Tuple2 (select _x_7_0::_Tuple2 0) (select _x_7_0::_Tuple2 1)) in _Tuple2 (select _x_7_1::_Tuple2 0) (select _x_7_1::_Tuple2 1)) ) ) ) 
EdKeyMapping.dummyAction = EdActionType.Insert StrictList.SNil
EdKeyMapping.dummyKeycode = EdKeyMapping.KeyCode 0 oskey.helpKey
EdKeyMapping.hasprefix_36 !_vArray_0 !<{_v%_1}> !<{_v==_2}> p_3 s_4 = let x_1_0::I = <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 p_3) 1 in case (select <{_v==_2}>::<{StdOverloaded.==;}> 0 p_3 (select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_4 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_4 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_4) 1)))) (False -> _Tuple2 False s_4) 
EdKeyMapping.fromString_8 !s_0 = <{EdKeyMapping._c;57;20_114}> s_0
<{EdKeyMapping._c;57;20_114}> !s_0 = case s_0 ("BackSpaceKey" -> oskey.backSpaceKey) ("BeginKey" -> oskey.beginKey) ("ClearKey" -> oskey.clearKey) ("DeleteKey" -> oskey.deleteKey) ("DownKey" -> oskey.downKey) ("EndKey" -> oskey.endKey) ("EnterKey" -> oskey.enterKey) ("EscapeKey" -> oskey.escapeKey) ("F1Key" -> oskey.f1Key) ("F2Key" -> oskey.f2Key) ("F3Key" -> oskey.f3Key) ("F4Key" -> oskey.f4Key) ("F5Key" -> oskey.f5Key) ("F6Key" -> oskey.f6Key) ("F7Key" -> oskey.f7Key) ("F8Key" -> oskey.f8Key) ("F9Key" -> oskey.f9Key) ("F10Key" -> oskey.f10Key) ("F11Key" -> oskey.f11Key) ("F12Key" -> oskey.f12Key) ("F13Key" -> oskey.f13Key) ("F14Key" -> oskey.f14Key) ("F15Key" -> oskey.f15Key) ("HelpKey" -> oskey.helpKey) ("LeftKey" -> oskey.leftKey) ("PgDownKey" -> oskey.pgDownKey) ("PgUpKey" -> oskey.pgUpKey) ("ReturnKey" -> oskey.returnKey) ("RightKey" -> oskey.rightKey) ("UpKey" -> oskey.upKey) (_ -> oskey.helpKey)
EdKeyMapping.hasprefix_97 !<{_v%_0}> !<{_v==_1}> p_2 s_3 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_2) 1 in case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 p_2 (select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_3 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_3 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_3) 1)))) (False -> _Tuple2 False s_3) 
EdKeyMapping.hasprefix_98 !<{_v==_0}> p_1 s_2 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_1) 1 in case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 p_1 (<{StdString.%_10}> s_2 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (<{StdString.%_10}> s_2 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_2) 1)))) (False -> _Tuple2 False s_2) 
EdKeyMapping.hasprefix_99 !p_0 !s_1 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_0) 1 in case (<{StdString.==_2}> p_0 (<{StdString.%_10}> s_1 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (<{StdString.%_10}> s_1 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_1) 1)))) (False -> _Tuple2 False s_1) 
EdKeyMapping.fromString_7 !s_0 = let _x_1_0 = EdKeyMapping.hasprefix_99 "Shift+" s_0, _x_1_1 = EdKeyMapping.hasprefix_99 "Ctrl+" (select _x_1_0::_Tuple2 1), _x_1_2 = EdKeyMapping.hasprefix_99 "Alt+" (select _x_1_1::_Tuple2 1) in EdKeyMapping.KeyCode (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> 0 (<{EdKeyMapping._if;46;39_115}> (select _x_1_0::_Tuple2 0))) (<{EdKeyMapping._if;46;60_116}> (select _x_1_1::_Tuple2 0))) (<{EdKeyMapping._if;46;79_117}> (select _x_1_2::_Tuple2 0))) (EdKeyMapping.fromString_8 (select _x_1_2::_Tuple2 1))
<{EdKeyMapping._if;46;79_117}>::I !_x_0::B = case _x_0 (True -> 4) (_ -> 0)
<{EdKeyMapping._if;46;60_116}>::I !_x_0::B = case _x_0 (True -> 2) (_ -> 0)
<{EdKeyMapping._if;46;39_115}>::I !_x_0::B = case _x_0 (True -> 1) (_ -> 0)
EdKeyMapping.SaveKeyMapFile !keymapPath_0 !keyMapping_1 !files_2 = let !_x_1_0 = StdFile.fopen_27 keymapPath_0 1 files_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> False (select _x_1_0::_Tuple3 2)) (False -> let !options_3_0 = Table.WriteTable (<{StdOverloaded.fromString;}> EdKeyMapping.fromString_7) (<{StdOverloaded.toString;}> EdKeyMapping.toString_6) (<{StdOverloaded.fromString;}> EdActionType.fromString_2) (<{StdOverloaded.toString;}> EdActionType.toString_1) EdKeyMapping.dummyKeycode EdKeyMapping.dummyAction keyMapping_1, !file_3_1 = UtilOptions.WriteOptionsFile "1.0" options_3_0 (select _x_1_0::_Tuple3 1) in StdFile.fclose_26 file_3_1 (select _x_1_0::_Tuple3 2)) 
EdKeyMapping.saveKM !_vFileSelectEnv_0 !_vFileEnv_1 km_2 ps_3 = let _x_1_0 = select _vFileSelectEnv_0::<{StdFileSelect.FileSelectEnv;}> 2 "Save keymapping as..." "*.km" ps_3, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = select _vFileEnv_1::<{StdFile.FileEnv;}> 0 (EdKeyMapping.SaveKeyMapFile fn_3_0 km_2) ps_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> select _x_3_2::_Tuple2 1) (False -> select _x_3_2::_Tuple2 1) ) 
EdKeyMapping.savekm_24 !_vFileSelectEnv_0 !_vFileEnv_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> _Tuple2 ls_1_0 (EdKeyMapping.saveKM _vFileSelectEnv_0 _vFileEnv_1 keyMapping_2_0 ps_1_1)) ) 
EdKeyMapping.ReadKeyMapFile !keymapPath_0 !ps_1 = let _x_1_0 = StdFile.fopen_27 keymapPath_0 3 ps_1 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!2}> (_Tuple3 Table.tableNew False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> keymapPath_0 "\" could not be opened."))) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = UtilOptions.ReadVersion file_3_0, version_3_2 = select _x_3_1::_Tuple2 0 in case (StdBool.not (<{StdString.==_2}> version_3_2 "1.0")) (True -> <{_Tuple2!2}> (_Tuple3 Table.tableNew False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> keymapPath_0 (<{StdString.+++_11}> "\" has the wrong version." (<{StdString.+++_11}> version_3_2 "<<<"))))) (select (StdFile.fclose_26 (select _x_3_1::_Tuple2 1) (select _x_1_0::_Tuple3 2))::_Tuple2 1)) (False -> let !_x_5_0 = UtilOptions.ReadOptionsFile (select _x_3_1::_Tuple2 1), !keyMapping_5_1 = Table.ReadTable (<{StdOverloaded.fromString;}> EdKeyMapping.fromString_7) (<{StdOverloaded.toString;}> EdKeyMapping.toString_6) (<{StdOverloaded.fromString;}> EdActionType.fromString_2) (<{StdOverloaded.toString;}> EdActionType.toString_1) EdKeyMapping.dummyKeycode EdKeyMapping.dummyAction (select _x_5_0::_Tuple2 0), !_x_5_2 = StdFile.fclose_26 (select _x_5_0::_Tuple2 1) (select _x_1_0::_Tuple3 2) in case (StdBool.not (select _x_5_2::_Tuple2 0)) (True -> <{_Tuple2!2}> (_Tuple3 keyMapping_5_1 True (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> keymapPath_0 "\" clould not be closed."))) (select _x_5_2::_Tuple2 1)) (False -> <{_Tuple2!2}> (_Tuple3 keyMapping_5_1 True "") (select _x_5_2::_Tuple2 1)) ) ) 
EdKeyMapping.openKM !_vFileSelectEnv_0 !_vFileEnv_1 ps_2 = let _x_1_0 = select _vFileSelectEnv_0::<{StdFileSelect.FileSelectEnv;}> 1 ps_2, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> _Tuple2 Data.Maybe.Nothing (select _x_1_0::_Tuple2 1)) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = select _vFileEnv_1::<{StdFile.FileEnv;}> 0 (EdKeyMapping.ReadKeyMapFile fn_3_0) ps_3_1, _x_3_3 = select _x_3_2::_Tuple2 0 in case (StdBool.not (select _x_3_3::_Tuple3 1)) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_2::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (select _x_3_3::_Tuple3 0)) (select _x_3_2::_Tuple2 1)) ) 
EdKeyMapping.openKM_100 !_vFileEnv_0 !ps_1 = let _x_1_0 = StdPStClass.selectInputFile_13 ps_1, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> _Tuple2 Data.Maybe.Nothing (select _x_1_0::_Tuple2 1)) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = select _vFileEnv_0::<{StdFile.FileEnv;}> 0 (EdKeyMapping.ReadKeyMapFile fn_3_0) ps_3_1, _x_3_3 = select _x_3_2::_Tuple2 0 in case (StdBool.not (select _x_3_3::_Tuple3 1)) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_2::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (select _x_3_3::_Tuple3 0)) (select _x_3_2::_Tuple2 1)) ) 
EdKeyMapping.openKM_101 !ps_0 = let _x_1_0 = StdPStClass.selectInputFile_13 ps_0, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> _Tuple2 Data.Maybe.Nothing (select _x_1_0::_Tuple2 1)) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = StdPStClass.accFiles_8 (EdKeyMapping.ReadKeyMapFile fn_3_0) ps_3_1, _x_3_3 = select _x_3_2::_Tuple2 0 in case (StdBool.not (select _x_3_3::_Tuple3 1)) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_2::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (select _x_3_3::_Tuple3 0)) (select _x_3_2::_Tuple2 1)) ) 
EdKeyMapping.openkm_23 key_0 alt_1 ctrl_2 shift_3 mappedTo_4 listBox_5 action_6 dialog_7 !_x_8 = case _x_8 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = EdKeyMapping.openKM_101 ps_1_1, km_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing km_2_1) (True -> _Tuple2 ls_1_0 (select _x_2_0::_Tuple2 1)) (False -> EdKeyMapping.updateMappedFrom_28 listBox_5 action_6 dialog_7 (EdKeyMapping.updateMappedTo_27 key_0 alt_1 ctrl_2 shift_3 mappedTo_4 dialog_7 (_Tuple2 (update ls_1_0::EdKeyMapping._KeyMappingDialogState [0:Data.Maybe.fromJust km_2_1]) (select _x_2_0::_Tuple2 1)))) ) 
EdKeyMapping.saveKM_103 !_vFileEnv_0 km_1 !ps_2 = let _x_1_0 = StdPStClass.selectOutputFile_14 "Save keymapping as..." "*.km" ps_2, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = select _vFileEnv_0::<{StdFile.FileEnv;}> 0 (EdKeyMapping.SaveKeyMapFile fn_3_0 km_1) ps_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> select _x_3_2::_Tuple2 1) (False -> select _x_3_2::_Tuple2 1) ) 
EdKeyMapping.savekm_102 !_vFileEnv_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> _Tuple2 ls_1_0 (EdKeyMapping.saveKM_103 _vFileEnv_0 keyMapping_2_0 ps_1_1)) ) 
EdKeyMapping.saveKM_105 km_0 !ps_1 = let _x_1_0 = StdPStClass.selectOutputFile_14 "Save keymapping as..." "*.km" ps_1, fn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing fn_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let fn_3_0 = Data.Maybe.fromJust fn_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = StdPStClass.accFiles_8 (EdKeyMapping.SaveKeyMapFile fn_3_0 km_0) ps_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> select _x_3_2::_Tuple2 1) (False -> select _x_3_2::_Tuple2 1) ) 
EdKeyMapping.savekm_104 !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (EdKeyMapping._KeyMappingDialogState keyMapping_2_0 dialogFont_2_1 -> _Tuple2 ls_1_0 (EdKeyMapping.saveKM_105 keyMapping_2_0 ps_1_1)) ) 
EdKeyMapping.configureKeyMapping keyMapping_0 setKeyMapping_1 pstate_2 = let Controls_1_0::I = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_1 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_2::I = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_3 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_4 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_24 StdControlClass.getControlType_25, Controls_1_5 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_6 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_7 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_5 Controls_1_6) (StdControlClass.getControlType_9 Controls_1_5 Controls_1_6), Controls_1_8::I = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_4 Controls_1_7) (StdControlClass.getControlType_9 Controls_1_4 Controls_1_7), Controls_1_9 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_3 Controls_1_8) (StdControlClass.getControlType_9 Controls_1_3 Controls_1_8), Controls_1_10 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_2 Controls_1_9) (StdControlClass.getControlType_9 Controls_1_2 Controls_1_9), Controls_1_11 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_1 Controls_1_10) (StdControlClass.getControlType_9 Controls_1_1 Controls_1_10), Controls_1_12 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_0 Controls_1_11) (StdControlClass.getControlType_9 Controls_1_0 Controls_1_11), Controls_1_13 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_14 Controls_1_12) (StdControlClass.getControlType_15 Controls_1_12), Controls_1_14 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_15 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_24 StdControlClass.getControlType_25, Controls_1_16 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_17 = <{StdControlClass.Controls;}> StdListBox.controlToHandles_14 StdListBox.getControlType_15, Controls_1_18 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_16 Controls_1_17) (StdControlClass.getControlType_9 Controls_1_16 Controls_1_17), Controls_1_19 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_15 Controls_1_18) (StdControlClass.getControlType_9 Controls_1_15 Controls_1_18), Controls_1_20 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_14 Controls_1_19) (StdControlClass.getControlType_9 Controls_1_14 Controls_1_19), Controls_1_21 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_14 Controls_1_20) (StdControlClass.getControlType_15 Controls_1_20), Controls_1_22 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_23 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_24::I = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_25 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_26::I = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_27 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_28::I = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_26 Controls_1_27) (StdControlClass.getControlType_9 Controls_1_26 Controls_1_27), Controls_1_29 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_25 Controls_1_28) (StdControlClass.getControlType_9 Controls_1_25 Controls_1_28), Controls_1_30 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_24 Controls_1_29) (StdControlClass.getControlType_9 Controls_1_24 Controls_1_29), Controls_1_31 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_23 Controls_1_30) (StdControlClass.getControlType_9 Controls_1_23 Controls_1_30), Controls_1_32 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_22 Controls_1_31) (StdControlClass.getControlType_9 Controls_1_22 Controls_1_31), Controls_1_33 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_21 Controls_1_32) (StdControlClass.getControlType_9 Controls_1_21 Controls_1_32), _x_1_34 = StdId.openId_13 pstate_2, pstate_1_35 = select _x_1_34::_Tuple2 1, _x_1_36 = StdId.openId_13 pstate_1_35, pstate_1_37 = select _x_1_36::_Tuple2 1, _x_1_38 = StdId.openId_13 pstate_1_37, pstate_1_39 = select _x_1_38::_Tuple2 1, _x_1_40 = StdId.openId_13 pstate_1_39, pstate_1_41 = select _x_1_40::_Tuple2 1, _x_1_42 = StdId.openId_13 pstate_1_41, pstate_1_43 = select _x_1_42::_Tuple2 1, _x_1_44 = StdId.openId_13 pstate_1_43, pstate_1_45 = select _x_1_44::_Tuple2 1, _x_1_46 = StdId.openId_13 pstate_1_45, pstate_1_47 = select _x_1_46::_Tuple2 1, _x_1_48 = StdId.openId_13 pstate_1_47, pstate_1_49 = select _x_1_48::_Tuple2 1, _x_1_50 = StdPSt.accPIO (StdListBox.openListBoxId (<{StdId.Ids;}> StdId.openId_7 StdId.openIds_8 StdId.openR2Id_9 StdId.openR2Ids_10 StdId.openRId_11 StdId.openRIds_12)) pstate_1_49, pstate_1_51 = select _x_1_50::_Tuple2 1, _x_1_52 = ioutil.accScreenPicture_21 StdPicture.openDialogFont pstate_1_51, font_1_53 = select _x_1_52::_Tuple2 0, listBox_1_54 = select _x_1_50::_Tuple2 0, action_1_55 = select _x_1_46::_Tuple2 0, shift_1_56 = select _x_1_36::_Tuple2 0, ctrl_1_57 = select _x_1_40::_Tuple2 0, alt_1_58 = select _x_1_38::_Tuple2 0, key_1_59 = select _x_1_44::_Tuple2 0, mappedTo_1_60 = select _x_1_48::_Tuple2 0, dialog_1_61 = select _x_1_34::_Tuple2 0, ok_1_62 = select _x_1_42::_Tuple2 0, Controls_1_63 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_64 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_24 StdControlClass.getControlType_25, Controls_1_65 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_66 = <{StdControlClass.Controls;}> StdListBox.controlToHandles_14 StdListBox.getControlType_15, Controls_1_67 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_65 Controls_1_66) (StdControlClass.getControlType_9 Controls_1_65 Controls_1_66), Controls_1_68 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_64 Controls_1_67) (StdControlClass.getControlType_9 Controls_1_64 Controls_1_67), Controls_1_69 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_63 Controls_1_68) (StdControlClass.getControlType_9 Controls_1_63 Controls_1_68), pstate_1_70 = select _x_1_52::_Tuple2 1, _x_1_71 = ioutil.accScreenPicture_21 (StdPicture.getFontMetrics font_1_53) pstate_1_70, pstate_1_72 = select _x_1_71::_Tuple2 1, _x_1_73 = ioutil.accScreenPicture_21 (StdPicture.getFontStringWidths font_1_53 (StdList.map EdActionType.toString_1 EdActionType.allActions)) pstate_1_72, pstate_1_74 = select _x_1_73::_Tuple2 1, _x_1_75 = ioutil.accScreenPicture_21 (StdPicture.getFontStringWidths font_1_53 (StdList.map oskey.toString_33 EdKeyMapping.allKeys)) pstate_1_74, pstate_1_76 = select _x_1_75::_Tuple2 1, _x_1_77 = ioutil.accScreenPicture_21 (StdPicture.getFontStringWidth font_1_53 "Ctrl+Alt+Shift+") pstate_1_76, maxModWidth_1_78 = select _x_1_77::_Tuple2 0, keyWidths_1_79 = select _x_1_75::_Tuple2 0, maxKeyWidth_1_80 = <{StdInt.+_6}> (StdOrdList.maxList_15 keyWidths_1_79) maxModWidth_1_78, metrics_1_81 = select _x_1_71::_Tuple2 0, lineHeight_1_82 = <{StdInt.+_6}> (<{StdInt.+_6}> (select metrics_1_81::StdPictureDef._FontMetrics 0) (select metrics_1_81::StdPictureDef._FontMetrics 1)) (select metrics_1_81::StdPictureDef._FontMetrics 2), listBox_1_83 = StdListBox.ListBoxControl _predefined._Nil _predefined._Nil listBox_1_54 (_predefined._Cons (StdControlDef.ControlViewSize (StdIOBasic._Size (<{StdInt.+_6}> maxModWidth_1_78 maxKeyWidth_1_80) (<{StdInt.*_9}> 3 lineHeight_1_82))) _predefined._Nil), Controls_1_84 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_85 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_86 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_87 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_12 StdControlClass.getControlType_13, Controls_1_88 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_24 StdControlClass.getControlType_25, Controls_1_89 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_90 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_91 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_89 Controls_1_90) (StdControlClass.getControlType_9 Controls_1_89 Controls_1_90), Controls_1_92 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_88 Controls_1_91) (StdControlClass.getControlType_9 Controls_1_88 Controls_1_91), Controls_1_93 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_87 Controls_1_92) (StdControlClass.getControlType_9 Controls_1_87 Controls_1_92), Controls_1_94 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_86 Controls_1_93) (StdControlClass.getControlType_9 Controls_1_86 Controls_1_93), Controls_1_95 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_85 Controls_1_94) (StdControlClass.getControlType_9 Controls_1_85 Controls_1_94), Controls_1_96 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_84 Controls_1_95) (StdControlClass.getControlType_9 Controls_1_84 Controls_1_95), actionWidths_1_97 = select _x_1_73::_Tuple2 0, maxActionWidth_1_98 = StdOrdList.maxList_15 actionWidths_1_97, pstate_1_99 = select _x_1_77::_Tuple2 1, _x_1_100 = StdControl.controlSize (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_14 Controls_1_96) (StdControlClass.getControlType_15 Controls_1_96)) (EdKeyMapping.keyControl_22 dialog_1_61 shift_1_56 ctrl_1_57 alt_1_58 key_1_59 mappedTo_1_60 maxActionWidth_1_98 lineHeight_1_82 _predefined._Nil) False Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing pstate_1_99, pstate_1_101 = select _x_1_100::_Tuple2 1, _x_1_102 = StdControl.controlSize (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_14 Controls_1_69) (StdControlClass.getControlType_15 Controls_1_69)) (EdKeyMapping.actionControl_21 listBox_1_54 dialog_1_61 action_1_55 listBox_1_83 _predefined._Nil) False Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing pstate_1_101, actionSize_1_103 = select _x_1_102::_Tuple2 0, x_1_104 = select actionSize_1_103::StdIOBasic._Size 0, keySize_1_105 = select _x_1_100::_Tuple2 0, y_1_106 = select keySize_1_105::StdIOBasic._Size 0 in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_13 Controls_1_33) (StdControlClass.getControlType_9 Controls_1_13 Controls_1_33)) (EdKeyMapping._KeyMappingDialogState keyMapping_0 font_1_53) (EdKeyMapping.dialog_26 listBox_1_54 action_1_55 shift_1_56 ctrl_1_57 alt_1_58 key_1_59 mappedTo_1_60 (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Open..." (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (EdKeyMapping.openkm_23 key_1_59 alt_1_58 ctrl_1_57 shift_1_56 mappedTo_1_60 listBox_1_54 action_1_55 dialog_1_61)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Save..." (_predefined._Cons (StdControlDef.ControlFunction EdKeyMapping.savekm_104) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Bind" (_predefined._Cons (StdControlDef.ControlFunction (EdKeyMapping.bindKey_35 listBox_1_54 key_1_59 alt_1_58 ctrl_1_57 shift_1_56 mappedTo_1_60 action_1_55 dialog_1_61)) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Remove binding" (_predefined._Cons (StdControlDef.ControlFunction (EdKeyMapping.removeBinding_34 key_1_59 alt_1_58 ctrl_1_57 shift_1_56 mappedTo_1_60 listBox_1_54 action_1_55 dialog_1_61)) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Cancel" (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (StdWindow.closeWindow dialog_1_61))) _predefined._Nil)) (StdControlDef.ButtonControl "Ok" (_predefined._Cons (StdControlDef.ControlId ok_1_62) (_predefined._Cons (StdControlDef.ControlFunction (EdKeyMapping.storeKeyMapping_30 setKeyMapping_1 dialog_1_61)) _predefined._Nil)))))))) dialog_1_61 ok_1_62 (<{EdKeyMapping._c;51;16_118}> (<{StdInt.<_17}> x_1_104 y_1_106) y_1_106 x_1_104) keySize_1_105 actionSize_1_103 maxActionWidth_1_98 lineHeight_1_82 listBox_1_83) (select _x_1_102::_Tuple2 1))::_Tuple2 1
<{EdKeyMapping._c;51;16_118}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
EdKeyMapping.foldr_49 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (EdKeyMapping.foldr_49 op_0 r_1 x_1_1)) 
EdKeyMapping.foldr_106 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Table.tableInsert a_1_0 (EdKeyMapping.foldr_106 r_0 x_1_1)) 
EdKeyMapping.macKeyMapping = EdKeyMapping.foldr_106 Table.tableNew (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 1 4) oskey.leftKey) (EdActionType.Select EdMovement.WordLeft)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 2 1) oskey.leftKey) (EdActionType.Select EdMovement.StartOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 1 oskey.leftKey) (EdActionType.Select EdMovement.CharLeft)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.leftKey) (EdActionType.Move EdMovement.WordLeft)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.leftKey) (EdActionType.Move EdMovement.StartOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.leftKey) (EdActionType.Move EdMovement.CharLeft)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 4 1) oskey.rightKey) (EdActionType.Select EdMovement.WordRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 1 2) oskey.rightKey) (EdActionType.Select EdMovement.EndOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 1 oskey.rightKey) (EdActionType.Select EdMovement.CharRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.rightKey) (EdActionType.Move EdMovement.WordRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.rightKey) (EdActionType.Move EdMovement.EndOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.rightKey) (EdActionType.Move EdMovement.CharRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 4 1) oskey.upKey) (EdActionType.Select EdMovement.PageUp)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 2 1) oskey.upKey) (EdActionType.Select EdMovement.StartOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 1 oskey.upKey) (EdActionType.Select EdMovement.LineUp)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.upKey) (EdActionType.Move EdMovement.PageUp)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.upKey) (EdActionType.Move EdMovement.StartOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.upKey) (EdActionType.Move EdMovement.LineUp)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 4 1) oskey.downKey) (EdActionType.Select EdMovement.PageDown)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode (<{StdInt.+_6}> 2 1) oskey.downKey) (EdActionType.Select EdMovement.EndOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 1 oskey.downKey) (EdActionType.Select EdMovement.LineDown)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.downKey) (EdActionType.Move EdMovement.PageDown)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.downKey) (EdActionType.Move EdMovement.EndOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.downKey) (EdActionType.Move EdMovement.LineDown)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.beginKey) (EdActionType.Scroll EdMovement.StartOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.endKey) (EdActionType.Scroll EdMovement.EndOfText)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.pgUpKey) (EdActionType.Scroll EdMovement.PageUp)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.pgDownKey) (EdActionType.Scroll EdMovement.PageDown)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.clearKey) (EdActionType.Remove EdMovement.EndOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.clearKey) (EdActionType.Remove EdMovement.WordRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.clearKey) (EdActionType.Remove EdMovement.CharRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.deleteKey) (EdActionType.Remove EdMovement.EndOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.deleteKey) (EdActionType.Remove EdMovement.WordRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.deleteKey) (EdActionType.Remove EdMovement.CharRight)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 2 oskey.backSpaceKey) (EdActionType.Remove EdMovement.StartOfLine)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 4 oskey.backSpaceKey) (EdActionType.Remove EdMovement.WordLeft)) (_predefined._Cons (_Tuple2 (EdKeyMapping.KeyCode 0 oskey.backSpaceKey) (EdActionType.Remove EdMovement.CharLeft)) _predefined._Nil)))))))))))))))))))))))))))))))))))))
EdKeyMapping.convertModifiers::I !_x_0 = case _x_0 (StdIOCommon._Modifiers shiftDown_1_0 optionDown_1_1 commandDown_1_2 controlDown_1_3 altDown_1_4 -> <{StdInt.+_6}> (<{StdInt.+_6}> (<{EdKeyMapping._if;239;7_119}> shiftDown_1_0) (<{EdKeyMapping._if;240;7_121}> (EdKeyMapping._f120_120 controlDown_1_3 commandDown_1_2))) (<{EdKeyMapping._if;241;7_123}> (EdKeyMapping._f122_122 altDown_1_4 optionDown_1_1))) 
<{EdKeyMapping._if;241;7_123}>::I !_x_0::B = case _x_0 (True -> 4) (_ -> 0)
EdKeyMapping._f122_122::B !altDown_0::B optionDown_1::B = case altDown_0 (True -> True) (_ -> optionDown_1)
<{EdKeyMapping._if;240;7_121}>::I !_x_0::B = case _x_0 (True -> 2) (_ -> 0)
EdKeyMapping._f120_120::B !controlDown_0::B commandDown_1::B = case controlDown_0 (True -> True) (_ -> commandDown_1)
<{EdKeyMapping._if;239;7_119}>::I !shiftDown_0::B = case shiftDown_0 (True -> 1) (_ -> 0)
EdKeyMapping.convertKeyboardState !_x_0 = case _x_0 (StdIOCommon.SpecialKey special_1_0 _x_1_1 modifiers_1_2 -> EdKeyMapping.KeyCode (EdKeyMapping.convertModifiers modifiers_1_2) special_1_0) (StdIOCommon.CharKey char_1_0 _x_1_1 -> StdMisc.abort "convertKeyboardState (EdKeyMapping.icl): character key not allowed") (StdIOCommon.KeyLost -> StdMisc.abort "convertKeyboardState (EdKeyMapping.icl): key lost allowed") 
EdKeyMapping.findAction !keyboardState_0 !keyMapping_1 = let keyCode_1_0 = EdKeyMapping.convertKeyboardState keyboardState_0, matches_1_1 = Table.tableLookup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{EdKeyMapping.==_5}>)) keyCode_1_0 keyMapping_1 in case (StdList.isEmpty matches_1_1) (True -> Data.Maybe.Nothing) (False -> Data.Maybe.Just (StdList.hd matches_1_1)) 
<{EdKeyMapping.TD;KeyMapping}> _x_0::B = _predefined._Nil
<{EdKeyMapping.TD;KeyCode}> _x_0::B = _predefined._Nil
<{EdKeyMapping.TD;MyModifiers}> _x_0::B = _predefined._Nil
<{EdKeyMapping.TD;KeyMappingDialogState}> _x_0::B = _predefined._Nil

:: EdKeyMapping.KeyCode = EdKeyMapping.KeyCode a1 a2

|| Converted Records
:: EdKeyMapping._KeyMappingDialogState = {EdKeyMapping.keyMapping, EdKeyMapping.dialogFont}

:: <{EdKeyMapping.gEq_s;}> = {!EdKeyMapping.gEq_s}

:: <{EdKeyMapping.gEq_ss;}> = {!EdKeyMapping.gEq_ss}

:: <{EdKeyMapping.gEq_sss;}> = {!EdKeyMapping.gEq_sss}

:: <{EdKeyMapping.gEq_ssss;}> = {!EdKeyMapping.gEq_ssss}

:: <{EdKeyMapping.gEq_sssss;}> = {!EdKeyMapping.gEq_sssss}

:: <{EdKeyMapping.gEq_ssssss;}> = {!EdKeyMapping.gEq_ssssss}

:: <{EdKeyMapping.gEq_sssssss;}> = {!EdKeyMapping.gEq_sssssss}

:: <{EdKeyMapping.gEq_ssssssss;}> = {!EdKeyMapping.gEq_ssssssss}

:: <{EdKeyMapping.gEq_sssssssss;}> = {!EdKeyMapping.gEq_sssssssss}

:: <{EdKeyMapping.bimap_s;}> = {EdKeyMapping.bimap_s}

:: <{EdKeyMapping.bimap_ss;}> = {EdKeyMapping.bimap_ss}

:: <{EdKeyMapping.bimap_sss;}> = {EdKeyMapping.bimap_sss}

