|| ?module? syncol


syncol.iniState = syncol._State 0 False False 0 syncol.StartOfBlock False
syncol.isStringMember::B !x_0::C !i_1::I !s_2 = case (<{StdInt.<_17}> i_1 0) (True -> False) (False -> let !c_2_0::C = _SystemArray.select_19 s_2 i_1 in case (<{StdChar.==_18}> c_2_0 x_0) (True -> True) (False -> syncol.isStringMember x_0 (<{StdInt.-_7}> i_1 StdInt.one_11) s_2) ) 
syncol.funnyChar::B !c_0::C = syncol.isStringMember c_0 (<{StdInt.-_7}> 20 StdInt.one_11) "~@#$%^?!+-*<>\\/|&=:."
syncol.scanFirst_27 !line_size_0::I !level_1::I !index_2::I !indent_3::I !line_4 = case (StdBool.not (<{StdInt.<_17}> index_2 line_size_0)) (True -> <{_Tuple3!7}> index_2 -1 level_1) (False -> let char_2_0::C = _SystemArray.select_19 line_4 index_2 in case (<{StdChar.==_18}> char_2_0 ' ') (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) (<{StdInt.+_6}> indent_3 StdInt.one_11) line_4) (False -> case (<{StdChar.==_18}> char_2_0 '\t') (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) (<{StdInt.<<}> (<{StdInt.+_6}> (<{StdInt.>>}> indent_3 2) StdInt.one_11) 2) line_4) (False -> case (<{StdChar.==_18}> char_2_0 '\n') (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) indent_3 line_4) (False -> case (<{StdChar.==_18}> char_2_0 '\r') (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) indent_3 line_4) (False -> case (<{StdChar.==_18}> char_2_0 '\f') (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) indent_3 line_4) (False -> case (<{StdChar.==_18}> char_2_0 '*') (True -> let <{index`_9_0}>::I = <{StdInt.+_6}> index_2 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> <{index`_9_0}> line_size_0)) (True -> <{_Tuple3!7}> index_2 indent_3 level_1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_4 <{index`_9_0}>) '/') (True -> case (StdBool.not (<{StdInt.==_16}> level_1 0)) (True -> syncol.scanFirst_27 line_size_0 (<{StdInt.-_7}> level_1 StdInt.one_11) (<{StdInt.+_6}> <{index`_9_0}> StdInt.one_11) (<{StdInt.+_6}> (<{StdInt.+_6}> indent_3 StdInt.one_11) StdInt.one_11) line_4) (False -> let <{index``_13_0}>::I = <{StdInt.+_6}> <{index`_9_0}> StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> <{index``_13_0}> line_size_0)) (True -> <{_Tuple3!7}> <{index``_13_0}> -1 (<{StdInt.-_7}> level_1 StdInt.one_11)) (False -> case (syncol.funnyChar (_SystemArray.select_19 line_4 <{index``_13_0}>)) (True -> <{_Tuple3!7}> index_2 indent_3 level_1) (False -> syncol.scanFirst_27 line_size_0 (<{StdInt.-_7}> level_1 StdInt.one_11) <{index``_13_0}> (<{StdInt.+_6}> (<{StdInt.+_6}> indent_3 StdInt.one_11) StdInt.one_11) line_4) ) ) ) (False -> case (<{StdInt.==_16}> level_1 0) (True -> <{_Tuple3!7}> index_2 indent_3 level_1) (False -> syncol.scanFirst_27 line_size_0 level_1 <{index`_9_0}> (<{StdInt.+_6}> indent_3 StdInt.one_11) line_4) ) ) ) (False -> case (<{StdChar.==_18}> char_2_0 '/') (True -> let <{index`_10_0}>::I = <{StdInt.+_6}> index_2 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> <{index`_10_0}> line_size_0)) (True -> <{_Tuple3!7}> index_2 indent_3 level_1) (False -> let <{char`_12_0}>::C = _SystemArray.select_19 line_4 <{index`_10_0}> in case (<{StdChar.==_18}> <{char`_12_0}> '/') (True -> <{_Tuple3!7}> index_2 -1 level_1) (False -> case (<{StdChar.==_18}> <{char`_12_0}> '*') (True -> syncol.scanFirst_27 line_size_0 (<{StdInt.+_6}> level_1 StdInt.one_11) (<{StdInt.+_6}> <{index`_10_0}> StdInt.one_11) (<{StdInt.+_6}> (<{StdInt.+_6}> indent_3 StdInt.one_11) StdInt.one_11) line_4) (False -> case (<{StdInt.==_16}> level_1 0) (True -> <{_Tuple3!7}> index_2 indent_3 level_1) (False -> syncol.scanFirst_27 line_size_0 level_1 <{index`_10_0}> (<{StdInt.+_6}> indent_3 StdInt.one_11) line_4) ) ) ) ) (False -> case (StdBool.not (<{StdInt.==_16}> level_1 0)) (True -> syncol.scanFirst_27 line_size_0 level_1 (<{StdInt.+_6}> index_2 StdInt.one_11) (<{StdInt.+_6}> indent_3 StdInt.one_11) line_4) (False -> <{_Tuple3!7}> index_2 indent_3 level_1) ) ) ) ) ) ) ) ) 
syncol.scanFirst !level_0::I !line_1 = syncol.scanFirst_27 (_SystemArray.size_20 line_1) level_0 0 0 line_1
syncol.whiteChar::B !c_0::C = syncol.isStringMember c_0 (<{StdInt.-_7}> 5 StdInt.one_11) " \t\f\n\r"
syncol.scanfunny::I !i_0::I !line_size_1::I !line_2 = case (StdBool.not (<{StdInt.<_17}> i_0 line_size_1)) (True -> line_size_1) (False -> case (syncol.funnyChar (_SystemArray.select_19 line_2 i_0)) (True -> syncol.scanfunny (<{StdInt.+_6}> i_0 StdInt.one_11) line_size_1 line_2) (False -> i_0) ) 
syncol.pS_28::I !_vArray_0 line_1 !line_size_2::I !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 line_size_2)) (True -> line_size_2) (False -> let char_2_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 line_1 i_3 in case (<{StdChar.==_18}> char_2_0 '"') (True -> <{StdInt.+_6}> i_3 StdInt.one_11) (False -> case (<{StdChar.==_18}> char_2_0 '\\') (True -> syncol.pS_28 _vArray_0 line_1 line_size_2 (<{StdInt.+_6}> i_3 2)) (False -> syncol.pS_28 _vArray_0 line_1 line_size_2 (<{StdInt.+_6}> i_3 StdInt.one_11)) ) ) 
syncol.pC_29::I !_vArray_0 line_1 !line_size_2::I !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 line_size_2)) (True -> line_size_2) (False -> let char_2_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 line_1 i_3 in case (<{StdChar.==_18}> char_2_0 '\'') (True -> <{StdInt.+_6}> i_3 StdInt.one_11) (False -> case (<{StdChar.==_18}> char_2_0 '\\') (True -> syncol.pC_29 _vArray_0 line_1 line_size_2 (<{StdInt.+_6}> i_3 2)) (False -> syncol.pC_29 _vArray_0 line_1 line_size_2 (<{StdInt.+_6}> i_3 StdInt.one_11)) ) ) 
syncol.cleanChar::B !c_0::C = case (StdChar.isLower c_0) (True -> True) (False -> case (StdChar.isUpper c_0) (True -> True) (False -> case (StdChar.isDigit c_0) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) ) ) 
syncol.scanclean::I !i_0::I !line_size_1::I !line_2 = case (StdBool.not (<{StdInt.<_17}> i_0 line_size_1)) (True -> line_size_1) (False -> case (syncol.cleanChar (_SystemArray.select_19 line_2 i_0)) (True -> syncol.scanclean (<{StdInt.+_6}> i_0 StdInt.one_11) line_size_1 line_2) (False -> i_0) ) 
syncol.scanwhite::I !i_0::I !line_size_1::I !line_2 = case (StdBool.not (<{StdInt.<_17}> i_0 line_size_1)) (True -> line_size_1) (False -> case (syncol.whiteChar (_SystemArray.select_19 line_2 i_0)) (True -> syncol.scanwhite (<{StdInt.+_6}> i_0 StdInt.one_11) line_size_1 line_2) (False -> i_0) ) 
syncol.pS_34::I line_0 !line_size_1::I !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 line_size_1)) (True -> line_size_1) (False -> let char_2_0::C = _SystemArray.select_19 line_0 i_2 in case (<{StdChar.==_18}> char_2_0 '"') (True -> <{StdInt.+_6}> i_2 StdInt.one_11) (False -> case (<{StdChar.==_18}> char_2_0 '\\') (True -> syncol.pS_34 line_0 line_size_1 (<{StdInt.+_6}> i_2 2)) (False -> syncol.pS_34 line_0 line_size_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) ) ) 
syncol.pC_35::I line_0 !line_size_1::I !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 line_size_1)) (True -> line_size_1) (False -> let char_2_0::C = _SystemArray.select_19 line_0 i_2 in case (<{StdChar.==_18}> char_2_0 '\'') (True -> <{StdInt.+_6}> i_2 StdInt.one_11) (False -> case (<{StdChar.==_18}> char_2_0 '\\') (True -> syncol.pC_35 line_0 line_size_1 (<{StdInt.+_6}> i_2 2)) (False -> syncol.pC_35 line_0 line_size_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) ) ) 
syncol.getToken::I !level_0::I !index_1::I !line_2 !line_size_3::I = case (StdBool.not (<{StdInt.<_17}> index_1 line_size_3)) (True -> line_size_3) (False -> let !char_2_0::C = _SystemArray.select_19 line_2 index_1, !i_2_1::I = <{StdInt.+_6}> index_1 StdInt.one_11 in case (<{StdChar.==_18}> char_2_0 '*') (True -> case (StdBool.not (<{StdInt.<_17}> i_2_1 line_size_3)) (True -> line_size_3) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_2 i_2_1) '/') (True -> let !i_6_0::I = <{StdInt.+_6}> i_2_1 StdInt.one_11 in case (StdBool.not (<{StdInt.==_16}> level_0 0)) (True -> i_6_0) (False -> syncol.scanfunny i_6_0 line_size_3 line_2) ) (False -> syncol.scanfunny i_2_1 line_size_3 line_2) ) ) (False -> case (<{StdChar.==_18}> char_2_0 '/') (True -> case (StdBool.not (<{StdInt.<_17}> i_2_1 line_size_3)) (True -> line_size_3) (False -> let !char_6_0::C = _SystemArray.select_19 line_2 i_2_1, !i_6_1::I = <{StdInt.+_6}> i_2_1 StdInt.one_11 in case (<{StdChar.==_18}> char_6_0 '/') (True -> i_6_1) (False -> case (<{StdChar.==_18}> char_6_0 '*') (True -> i_6_1) (False -> syncol.scanfunny i_6_1 line_size_3 line_2) ) ) ) (False -> case (case (<{StdChar.==_18}> char_2_0 '"') (True -> <{StdInt.==_16}> level_0 0) (False -> False) ) (True -> syncol.pS_34 line_2 line_size_3 i_2_1) (False -> case (case (<{StdChar.==_18}> char_2_0 '\'') (True -> <{StdInt.==_16}> level_0 0) (False -> False) ) (True -> syncol.pC_35 line_2 line_size_3 i_2_1) (False -> case (case (<{StdInt.==_16}> level_0 0) (True -> syncol.funnyChar char_2_0) (False -> False) ) (True -> syncol.scanfunny i_2_1 line_size_3 line_2) (False -> case (case (StdChar.isLower char_2_0) (True -> True) (False -> StdChar.isUpper char_2_0) ) (True -> syncol.scanclean i_2_1 line_size_3 line_2) (False -> case (syncol.whiteChar char_2_0) (True -> syncol.scanwhite i_2_1 line_size_3 line_2) (False -> i_2_1) ) ) ) ) ) ) ) 
<{syncol.==_31}>::B !_x_0 !_x_1 = case _x_0 (syncol.StartOfBlock -> case _x_1 (syncol.StartOfBlock -> True) ) (syncol.CleanId -> case _x_1 (syncol.CleanId -> True) ) (syncol.OpenPar -> case _x_1 (syncol.OpenPar -> True) ) (syncol.InfixId -> case _x_1 (syncol.InfixId -> True) ) (syncol.Precedence -> case _x_1 (syncol.Precedence -> True) ) (syncol.Fixity -> case _x_1 (syncol.Fixity -> True) ) (syncol.Other -> case _x_1 (syncol.Other -> True) ) (_ -> False)
syncol.pL_26 line_0 !line_size_1::I !state_2 !i_3::I = case state_2 (syncol._State level_1_0 typedef_1_1 typedecl_1_2 offside_1_3 parse_state_1_4 has_content_1_5 -> case (StdBool.not (<{StdInt.<_17}> i_3 line_size_1)) (True -> state_2) (False -> let end_3_0::I = syncol.getToken level_1_0 i_3 line_0 line_size_1 in <{syncol._c;205;11_45}> (<{StdString.%_10}> line_0 (_Tuple2 i_3 (<{StdInt.-_7}> end_3_0 StdInt.one_11))) line_0 line_size_1 state_2 level_1_0 end_3_0 parse_state_1_4 i_3) ) 
<{syncol._c;205;11_45}> !_x_0 line_1 line_size_2::I state_3 level_4::I end_5::I parse_state_6 i_7::I = case _x_0 ("/*" -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [0:<{StdInt.+_6}> level_4 StdInt.one_11]) end_5) ("*/" -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [0:<{StdInt.-_7}> level_4 StdInt.one_11]) end_5) ("//" -> state_3) ("::" -> <{syncol._if;209;36_44}> (<{StdInt.==_16}> level_4 0) parse_state_6 i_7 line_1 line_size_2 state_3 end_5) ("where" -> case (<{StdInt.==_16}> level_4 0) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ("let" -> case (<{StdInt.==_16}> level_4 0) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ("infix" -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.CleanId) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Fixity]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ("infixl" -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.CleanId) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Fixity]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ("infixr" -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.CleanId) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Fixity]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ("(" -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.StartOfBlock) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.OpenPar]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) (")" -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.InfixId) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.CleanId]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) (_ -> case (StdChar.isDigit (_SystemArray.select_19 line_1 i_7)) (True -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.Fixity) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Precedence]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) (False -> case (case (StdChar.isLower (_SystemArray.select_19 line_1 i_7)) (True -> True) (False -> case (StdChar.isUpper (_SystemArray.select_19 line_1 i_7)) (True -> True) (False -> syncol.funnyChar (_SystemArray.select_19 line_1 i_7)) ) ) (True -> case (<{StdInt.==_16}> level_4 0) (True -> case (<{syncol.==_31}> parse_state_6 syncol.StartOfBlock) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.CleanId]) end_5) (False -> case (<{syncol.==_31}> parse_state_6 syncol.OpenPar) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.InfixId]) end_5) (False -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) ) ) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) (False -> case (syncol.whiteChar (_SystemArray.select_19 line_1 i_7)) (True -> syncol.pL_26 line_1 line_size_2 state_3 end_5) (False -> case (<{StdInt.==_16}> level_4 0) (True -> syncol.pL_26 line_1 line_size_2 (update state_3::syncol._State [4:syncol.Other]) end_5) (False -> syncol.pL_26 line_1 line_size_2 state_3 end_5) ) ) ) )
<{syncol._if;209;36_44}> !_x_0::B parse_state_1 i_2::I line_3 !line_size_4::I !state_5 !end_6::I = case _x_0 (True -> <{syncol._c;210;39_43}> parse_state_1 i_2 line_3 line_size_4 state_5 end_6) (_ -> syncol.pL_26 line_3 line_size_4 state_5 end_6)
<{syncol._c;210;39_43}> !parse_state_0 i_1::I line_2 !line_size_3::I !state_4 !end_5::I = case parse_state_0 (syncol.StartOfBlock -> case (<{StdInt.==_16}> i_1 0) (True -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [1:True,4:syncol.Other]) end_5) (False -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [4:syncol.Other]) end_5) ) (syncol.CleanId -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [2:True,4:syncol.Other]) end_5) (syncol.Fixity -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [2:True,4:syncol.Other]) end_5) (syncol.Precedence -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [2:True,4:syncol.Other]) end_5) (_ -> syncol.pL_26 line_2 line_size_3 (update state_4::syncol._State [4:syncol.Other]) end_5)
syncol.parseLine !state_0 !line_1 = case state_0 (syncol._State level_1_0 typedef_1_1 typedecl_1_2 offside_1_3 parse_state_1_4 has_content_1_5 -> let !_x_2_0 = syncol.scanFirst level_1_0 line_1, !_x_2_1 = <{syncol._if;154;31_48}> typedecl_1_2 index_2_8 line_size_2_7 indent_2_10 offside_1_3 parse_state_1_4, !parse_state_2_2 = <{syncol._if;168;31_50}> (<{StdInt.==_16}> indent_2_10 <{offside`_2_9}>) parse_state_1_4, !typedef_2_3::B = <{syncol._if;178;31_52}> (syncol._f51_51 (<{StdInt.==_16}> index_2_8 0) indent_2_10 line_1) typedef_1_1, !has_content_2_4::B = syncol._f53_53 (StdBool.not (<{StdInt.<_17}> indent_2_10 0)) index_2_8 line_size_2_7, !has_content_2_5::B = <{syncol._if;182;31_54}> (<{StdInt.<_17}> 0 index_2_8) has_content_2_4 line_1 index_2_8 line_size_2_7 parse_state_2_2, !state_2_6 = update state_0::syncol._State [0:select _x_2_0::_Tuple3 2,1:typedef_2_3,2:select _x_2_1::_Tuple2 0,3:<{offside`_2_9}>,4:parse_state_2_2,5:has_content_2_5], line_size_2_7::I = _SystemArray.size_20 line_1, index_2_8::I = select _x_2_0::_Tuple3 0, <{offside`_2_9}>::I = select _x_2_1::_Tuple2 1, indent_2_10::I = select _x_2_0::_Tuple3 1 in syncol.pL_26 line_1 line_size_2_7 state_2_6 index_2_8) 
<{syncol._if;182;31_54}>::B !_x_0::B !has_content_1::B line_2 index_3::I line_size_4::I parse_state_5 = case _x_0 (True -> case has_content_1 (True -> case (StdBool.not (<{StdString.==_2}> (<{StdString.%_10}> line_2 (_Tuple2 index_3 (<{StdInt.-_7}> (syncol.scanfunny index_3 line_size_4 line_2) StdInt.one_11))) "::")) (True -> <{syncol.==_31}> parse_state_5 syncol.StartOfBlock) (False -> False) ) (False -> False) ) (_ -> has_content_1)
syncol._f53_53::B !_x_0::B index_1::I line_size_2::I = case _x_0 (True -> <{StdInt.<_17}> index_1 line_size_2) (_ -> False)
<{syncol._if;178;31_52}>::B !_x_0::B typedef_1::B = case _x_0 (True -> False) (_ -> typedef_1)
syncol._f51_51::B !_x_0::B indent_1::I line_2 = case _x_0 (True -> case (StdBool.not (<{StdInt.<_17}> indent_1 0)) (True -> StdBool.not (syncol.whiteChar (_SystemArray.select_19 line_2 0))) (False -> False) ) (_ -> False)
<{syncol._if;168;31_50}> !_x_0::B !parse_state_1 = case _x_0 (True -> <{syncol._c;169;34_49}> parse_state_1) (_ -> parse_state_1)
<{syncol._c;169;34_49}> !parse_state_0 = case parse_state_0 (syncol.OpenPar -> syncol.OpenPar) (syncol.InfixId -> syncol.InfixId) (syncol.Fixity -> syncol.Fixity) (syncol.Precedence -> syncol.Precedence) (syncol.CleanId -> syncol.CleanId) (_ -> syncol.StartOfBlock)
<{syncol._if;154;31_48}> !typedecl_0::B index_1::I line_size_2::I indent_3::I offside_4::I parse_state_5 = case typedecl_0 (True -> case (case (<{StdInt.<_17}> index_1 line_size_2) (True -> case (StdBool.not (<{StdInt.<_17}> indent_3 0)) (True -> StdBool.not (<{StdInt.<_17}> offside_4 indent_3)) (False -> False) ) (False -> False) ) (True -> _Tuple2 False indent_3) (False -> _Tuple2 True offside_4) ) (_ -> _Tuple2 False (<{syncol._if;159;40_47}> (StdBool.not (<{StdInt.<_17}> indent_3 0)) parse_state_5 offside_4 indent_3))
<{syncol._if;159;40_47}>::I !_x_0::B parse_state_1 offside_2::I indent_3::I = case _x_0 (True -> <{syncol._c;159;58_46}> parse_state_1 offside_2 indent_3) (_ -> offside_2)
<{syncol._c;159;58_46}>::I !parse_state_0 offside_1::I indent_2::I = case parse_state_0 (syncol.OpenPar -> offside_1) (syncol.InfixId -> offside_1) (syncol.Fixity -> offside_1) (syncol.Precedence -> offside_1) (syncol.CleanId -> offside_1) (_ -> indent_2)
syncol.parse_19 state_0 !_x_1 = case _x_1 (StrictList.SNil -> _predefined._Nil) (StrictList.SCons line_1_0 lines_1_1 -> let state_2_0 = syncol.parseLine state_0 line_1_0 in _predefined._Cons (_Tuple2 state_2_0 line_1_0) (syncol.parse_19 state_2_0 lines_1_1)) 
syncol.copy !res_0 acc_1 rest_2 = res_0 (<{StdList.++}> acc_1 rest_2)
syncol.anon_24 !_x_0 = case _x_0 (_Tuple2 info_1_0 l_1_1 -> _Tuple2 (update info_1_0::syncol._Info [1:False,2:True]) l_1_1) 
syncol.patch !res_0 acc_1 rest_2 = res_0 (<{StdList.++}> (StdList.map syncol.anon_24 acc_1) rest_2)
syncol.accum !acc_0 info_1 = <{StdList.++}> acc_0 (_predefined._Cons info_1 _predefined._Nil)
syncol.backpatch_20 state_0 res_1 acc_2 !_x_3 = case _x_3 (_predefined._Nil -> res_1 acc_2) (_predefined._Cons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 state`_2_0 line_2_1 -> let !info_3_0 = syncol._Info (select state_0::syncol._State 0) (select <{state`_2_0}>::syncol._State 1) (select <{state`_2_0}>::syncol._State 2) (select <{state`_2_0}>::syncol._State 3) (syncol._f55_55 (select <{state`_2_0}>::syncol._State 5) state_0 <{state`_2_0}>) in case (select <{state`_2_0}>::syncol._State 5) (True -> syncol.backpatch_20 <{state`_2_0}> (syncol.copy res_1 acc_2) (_predefined._Cons (_Tuple2 info_3_0 line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_0::syncol._State 2)) (True -> select <{state`_2_0}>::syncol._State 2) (False -> False) ) (True -> syncol.backpatch_20 <{state`_2_0}> (syncol.patch res_1 acc_2) (_predefined._Cons (_Tuple2 info_3_0 line_2_1) _predefined._Nil) lines_1_1) (False -> syncol.backpatch_20 <{state`_2_0}> res_1 (syncol.accum acc_2 (_Tuple2 info_3_0 line_2_1)) lines_1_1) ) ) ) 
syncol._f55_55::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol.firstParse !lines_0 = StrictList.slFromList (syncol.backpatch_20 syncol.iniState StdFunc.id _predefined._Nil (syncol.parse_19 syncol.iniState lines_0))
syncol.eqInfo::B !_x_0 !_x_1 = case _x_0 (syncol._Info a_1_0 b_1_1 c_1_2 d_1_3 e_1_4 -> case _x_1 (syncol._Info a`_2_0 b`_2_1 c`_2_2 d`_2_3 e`_2_4 -> case (<{StdInt.==_16}> a_1_0 <{a`_2_0}>) (True -> case (<{StdBool.==_3}> b_1_1 <{b`_2_1}>) (True -> case (<{StdBool.==_3}> c_1_2 <{c`_2_2}>) (True -> case (<{StdInt.==_16}> d_1_3 <{d`_2_3}>) (True -> <{StdBool.==_3}> e_1_4 <{e`_2_4}>) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) ) 
syncol.after_23 !_vone_0 !<{_v-_1}> !<{_v+_2}> beg_3 idx_4 state_5 res_6 acc_7 !_x_8 = case _x_8 (StrictList.SNil -> _Tuple3 beg_3 (select <{_v-_1}>::<{StdOverloaded.-;}> 0 idx_4 (select _vone_0::<{StdOverloaded.one;}> 0)) (res_6 acc_7)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 info_2_0 line_2_1 -> let <{state`_3_0}> = syncol.parseLine state_5 line_2_1 in case (select <{state`_3_0}>::syncol._State 5) (True -> let <{flush`_5_0}> = syncol._f56_56 (select <{state`_3_0}>::syncol._State 5) state_5 <{state`_3_0}>, <{info`_5_1}>::B = syncol._Info (select state_5::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) <{flush`_5_0}> in case (syncol.eqInfo info_2_0 <{info`_5_1}>) (True -> _Tuple3 beg_3 idx_4 (res_6 (<{StdList.++}> acc_7 (StrictList.slToList _x_8)))) (False -> syncol.after_23 _vone_0 <{_v-_1}> <{_v+_2}> beg_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 idx_4 (select _vone_0::<{StdOverloaded.one;}> 0)) <{state`_3_0}> (syncol.copy res_6 acc_7) (_predefined._Cons (_Tuple2 <{info`_5_1}> line_2_1) _predefined._Nil) lines_1_1) ) (False -> case (case (StdBool.not (select state_5::syncol._State 2)) (True -> select <{state`_3_0}>::syncol._State 2) (False -> False) ) (True -> syncol.after_23 _vone_0 <{_v-_1}> <{_v+_2}> beg_3 idx_4 (update state_5::syncol._State [2:True]) (syncol.patch res_6 acc_7) _predefined._Nil _x_8) (False -> syncol.after_23 _vone_0 <{_v-_1}> <{_v+_2}> beg_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 idx_4 (select _vone_0::<{StdOverloaded.one;}> 0)) <{state`_3_0}> res_6 (<{StdList.++}> acc_7 (_predefined._Cons (_Tuple2 (syncol._Info (select state_5::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) (syncol._f57_57 (select <{state`_3_0}>::syncol._State 5) state_5 <{state`_3_0}>)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) 
syncol._f57_57::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol._f56_56::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol.during_22 !_vone_0 !<{_v-_1}> !<{_v<_2}> !<{_v+_3}> end_4 beg_5 idx_6 state_7 res_8 acc_9 !_x_10 = case _x_10 (StrictList.SNil -> _Tuple3 beg_5 (select <{_v-_1}>::<{StdOverloaded.-;}> 0 idx_6 (select _vone_0::<{StdOverloaded.one;}> 0)) (res_8 acc_9)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 line_2_1 -> case (select <{_v<_2}>::<{StdOverloaded.<;}> 0 end_4 idx_6) (True -> syncol.after_23 _vone_0 <{_v-_1}> <{_v+_3}> beg_5 idx_6 state_7 res_8 acc_9 _x_10) (False -> let <{state`_4_0}> = syncol.parseLine state_7 line_2_1 in case (select <{state`_4_0}>::syncol._State 5) (True -> syncol.during_22 _vone_0 <{_v-_1}> <{_v<_2}> <{_v+_3}> end_4 beg_5 (select <{_v+_3}>::<{StdOverloaded.+;}> 0 idx_6 (select _vone_0::<{StdOverloaded.one;}> 0)) <{state`_4_0}> (syncol.copy res_8 acc_9) (_predefined._Cons (_Tuple2 (syncol._Info (select state_7::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_7::syncol._State 2)) (True -> select <{state`_4_0}>::syncol._State 2) (False -> False) ) (True -> syncol.during_22 _vone_0 <{_v-_1}> <{_v<_2}> <{_v+_3}> end_4 beg_5 idx_6 (update state_7::syncol._State [2:True]) (syncol.patch res_8 acc_9) _predefined._Nil _x_10) (False -> syncol.during_22 _vone_0 <{_v-_1}> <{_v<_2}> <{_v+_3}> end_4 beg_5 (select <{_v+_3}>::<{StdOverloaded.+;}> 0 idx_6 (select _vone_0::<{StdOverloaded.one;}> 0)) <{state`_4_0}> res_8 (<{StdList.++}> acc_9 (_predefined._Cons (_Tuple2 (syncol._Info (select state_7::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) ) 
syncol.after_37 !<{_v-_0}> !<{_v+_1}> beg_2 idx_3::I state_4 res_5 acc_6 !_x_7 = case _x_7 (StrictList.SNil -> _Tuple3 beg_2 (select <{_v-_0}>::<{StdOverloaded.-;}> 0 idx_3 StdInt.one_11) (res_5 acc_6)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 info_2_0 line_2_1 -> let <{state`_3_0}> = syncol.parseLine state_4 line_2_1 in case (select <{state`_3_0}>::syncol._State 5) (True -> let <{flush`_5_0}> = syncol._f58_58 (select <{state`_3_0}>::syncol._State 5) state_4 <{state`_3_0}>, <{info`_5_1}>::B = syncol._Info (select state_4::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) <{flush`_5_0}> in case (syncol.eqInfo info_2_0 <{info`_5_1}>) (True -> _Tuple3 beg_2 idx_3 (res_5 (<{StdList.++}> acc_6 (StrictList.slToList _x_7)))) (False -> syncol.after_37 <{_v-_0}> <{_v+_1}> beg_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 idx_3 StdInt.one_11) <{state`_3_0}> (syncol.copy res_5 acc_6) (_predefined._Cons (_Tuple2 <{info`_5_1}> line_2_1) _predefined._Nil) lines_1_1) ) (False -> case (case (StdBool.not (select state_4::syncol._State 2)) (True -> select <{state`_3_0}>::syncol._State 2) (False -> False) ) (True -> syncol.after_37 <{_v-_0}> <{_v+_1}> beg_2 idx_3 (update state_4::syncol._State [2:True]) (syncol.patch res_5 acc_6) _predefined._Nil _x_7) (False -> syncol.after_37 <{_v-_0}> <{_v+_1}> beg_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 idx_3 StdInt.one_11) <{state`_3_0}> res_5 (<{StdList.++}> acc_6 (_predefined._Cons (_Tuple2 (syncol._Info (select state_4::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) (syncol._f59_59 (select <{state`_3_0}>::syncol._State 5) state_4 <{state`_3_0}>)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) 
syncol._f59_59::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol._f58_58::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol.during_36 !<{_v-_0}> !<{_v<_1}> !<{_v+_2}> end_3::I beg_4 idx_5::I state_6 res_7 acc_8 !_x_9 = case _x_9 (StrictList.SNil -> _Tuple3 beg_4 (select <{_v-_0}>::<{StdOverloaded.-;}> 0 idx_5 StdInt.one_11) (res_7 acc_8)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 line_2_1 -> case (select <{_v<_1}>::<{StdOverloaded.<;}> 0 end_3 idx_5) (True -> syncol.after_37 <{_v-_0}> <{_v+_2}> beg_4 idx_5 state_6 res_7 acc_8 _x_9) (False -> let <{state`_4_0}> = syncol.parseLine state_6 line_2_1 in case (select <{state`_4_0}>::syncol._State 5) (True -> syncol.during_36 <{_v-_0}> <{_v<_1}> <{_v+_2}> end_3 beg_4 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 idx_5 StdInt.one_11) <{state`_4_0}> (syncol.copy res_7 acc_8) (_predefined._Cons (_Tuple2 (syncol._Info (select state_6::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_6::syncol._State 2)) (True -> select <{state`_4_0}>::syncol._State 2) (False -> False) ) (True -> syncol.during_36 <{_v-_0}> <{_v<_1}> <{_v+_2}> end_3 beg_4 idx_5 (update state_6::syncol._State [2:True]) (syncol.patch res_7 acc_8) _predefined._Nil _x_9) (False -> syncol.during_36 <{_v-_0}> <{_v<_1}> <{_v+_2}> end_3 beg_4 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 idx_5 StdInt.one_11) <{state`_4_0}> res_7 (<{StdList.++}> acc_8 (_predefined._Cons (_Tuple2 (syncol._Info (select state_6::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) ) 
syncol.after_39 !<{_v+_0}> beg_1 idx_2::I state_3 res_4 acc_5 !_x_6 = case _x_6 (StrictList.SNil -> _Tuple3 beg_1 (<{StdInt.-_7}> idx_2 StdInt.one_11) (res_4 acc_5)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 info_2_0 line_2_1 -> let <{state`_3_0}> = syncol.parseLine state_3 line_2_1 in case (select <{state`_3_0}>::syncol._State 5) (True -> let <{flush`_5_0}> = syncol._f60_60 (select <{state`_3_0}>::syncol._State 5) state_3 <{state`_3_0}>, <{info`_5_1}>::B = syncol._Info (select state_3::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) <{flush`_5_0}> in case (syncol.eqInfo info_2_0 <{info`_5_1}>) (True -> _Tuple3 beg_1 idx_2 (res_4 (<{StdList.++}> acc_5 (StrictList.slToList _x_6)))) (False -> syncol.after_39 <{_v+_0}> beg_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 idx_2 StdInt.one_11) <{state`_3_0}> (syncol.copy res_4 acc_5) (_predefined._Cons (_Tuple2 <{info`_5_1}> line_2_1) _predefined._Nil) lines_1_1) ) (False -> case (case (StdBool.not (select state_3::syncol._State 2)) (True -> select <{state`_3_0}>::syncol._State 2) (False -> False) ) (True -> syncol.after_39 <{_v+_0}> beg_1 idx_2 (update state_3::syncol._State [2:True]) (syncol.patch res_4 acc_5) _predefined._Nil _x_6) (False -> syncol.after_39 <{_v+_0}> beg_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 idx_2 StdInt.one_11) <{state`_3_0}> res_4 (<{StdList.++}> acc_5 (_predefined._Cons (_Tuple2 (syncol._Info (select state_3::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) (syncol._f61_61 (select <{state`_3_0}>::syncol._State 5) state_3 <{state`_3_0}>)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) 
syncol._f61_61::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol._f60_60::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol.during_38 !<{_v<_0}> !<{_v+_1}> end_2::I beg_3 idx_4::I state_5 res_6 acc_7 !_x_8 = case _x_8 (StrictList.SNil -> _Tuple3 beg_3 (<{StdInt.-_7}> idx_4 StdInt.one_11) (res_6 acc_7)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 line_2_1 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 end_2 idx_4) (True -> syncol.after_39 <{_v+_1}> beg_3 idx_4 state_5 res_6 acc_7 _x_8) (False -> let <{state`_4_0}> = syncol.parseLine state_5 line_2_1 in case (select <{state`_4_0}>::syncol._State 5) (True -> syncol.during_38 <{_v<_0}> <{_v+_1}> end_2 beg_3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 idx_4 StdInt.one_11) <{state`_4_0}> (syncol.copy res_6 acc_7) (_predefined._Cons (_Tuple2 (syncol._Info (select state_5::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_5::syncol._State 2)) (True -> select <{state`_4_0}>::syncol._State 2) (False -> False) ) (True -> syncol.during_38 <{_v<_0}> <{_v+_1}> end_2 beg_3 idx_4 (update state_5::syncol._State [2:True]) (syncol.patch res_6 acc_7) _predefined._Nil _x_8) (False -> syncol.during_38 <{_v<_0}> <{_v+_1}> end_2 beg_3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 idx_4 StdInt.one_11) <{state`_4_0}> res_6 (<{StdList.++}> acc_7 (_predefined._Cons (_Tuple2 (syncol._Info (select state_5::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) ) 
syncol.during_40 !<{_v+_0}> end_1::I beg_2 idx_3::I state_4 res_5 acc_6 !_x_7 = case _x_7 (StrictList.SNil -> _Tuple3 beg_2 (<{StdInt.-_7}> idx_3 StdInt.one_11) (res_5 acc_6)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 line_2_1 -> case (<{StdInt.<_17}> end_1 idx_3) (True -> syncol.after_39 <{_v+_0}> beg_2 idx_3 state_4 res_5 acc_6 _x_7) (False -> let <{state`_4_0}> = syncol.parseLine state_4 line_2_1 in case (select <{state`_4_0}>::syncol._State 5) (True -> syncol.during_40 <{_v+_0}> end_1 beg_2 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 idx_3 StdInt.one_11) <{state`_4_0}> (syncol.copy res_5 acc_6) (_predefined._Cons (_Tuple2 (syncol._Info (select state_4::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_4::syncol._State 2)) (True -> select <{state`_4_0}>::syncol._State 2) (False -> False) ) (True -> syncol.during_40 <{_v+_0}> end_1 beg_2 idx_3 (update state_4::syncol._State [2:True]) (syncol.patch res_5 acc_6) _predefined._Nil _x_7) (False -> syncol.during_40 <{_v+_0}> end_1 beg_2 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 idx_3 StdInt.one_11) <{state`_4_0}> res_5 (<{StdList.++}> acc_6 (_predefined._Cons (_Tuple2 (syncol._Info (select state_4::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) ) 
syncol.after_42 beg_0 idx_1::I state_2 res_3 acc_4 !_x_5 = case _x_5 (StrictList.SNil -> _Tuple3 beg_0 (<{StdInt.-_7}> idx_1 StdInt.one_11) (res_3 acc_4)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 info_2_0 line_2_1 -> let <{state`_3_0}> = syncol.parseLine state_2 line_2_1 in case (select <{state`_3_0}>::syncol._State 5) (True -> let <{flush`_5_0}> = syncol._f62_62 (select <{state`_3_0}>::syncol._State 5) state_2 <{state`_3_0}>, <{info`_5_1}>::B = syncol._Info (select state_2::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) <{flush`_5_0}> in case (syncol.eqInfo info_2_0 <{info`_5_1}>) (True -> _Tuple3 beg_0 idx_1 (res_3 (<{StdList.++}> acc_4 (StrictList.slToList _x_5)))) (False -> syncol.after_42 beg_0 (<{StdInt.+_6}> idx_1 StdInt.one_11) <{state`_3_0}> (syncol.copy res_3 acc_4) (_predefined._Cons (_Tuple2 <{info`_5_1}> line_2_1) _predefined._Nil) lines_1_1) ) (False -> case (case (StdBool.not (select state_2::syncol._State 2)) (True -> select <{state`_3_0}>::syncol._State 2) (False -> False) ) (True -> syncol.after_42 beg_0 idx_1 (update state_2::syncol._State [2:True]) (syncol.patch res_3 acc_4) _predefined._Nil _x_5) (False -> syncol.after_42 beg_0 (<{StdInt.+_6}> idx_1 StdInt.one_11) <{state`_3_0}> res_3 (<{StdList.++}> acc_4 (_predefined._Cons (_Tuple2 (syncol._Info (select state_2::syncol._State 0) (select <{state`_3_0}>::syncol._State 1) (select <{state`_3_0}>::syncol._State 2) (select <{state`_3_0}>::syncol._State 3) (syncol._f63_63 (select <{state`_3_0}>::syncol._State 5) state_2 <{state`_3_0}>)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) 
syncol._f63_63::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol._f62_62::B !_x_0::B state_1 <{state`_2}> = case _x_0 (True -> True) (_ -> case (StdBool.not (select state_1::syncol._State 2)) (True -> select <{state`_2}>::syncol._State 2) (False -> False) )
syncol.during_41 end_0::I beg_1 idx_2::I state_3 res_4 acc_5 !_x_6 = case _x_6 (StrictList.SNil -> _Tuple3 beg_1 (<{StdInt.-_7}> idx_2 StdInt.one_11) (res_4 acc_5)) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 line_2_1 -> case (<{StdInt.<_17}> end_0 idx_2) (True -> syncol.after_42 beg_1 idx_2 state_3 res_4 acc_5 _x_6) (False -> let <{state`_4_0}> = syncol.parseLine state_3 line_2_1 in case (select <{state`_4_0}>::syncol._State 5) (True -> syncol.during_41 end_0 beg_1 (<{StdInt.+_6}> idx_2 StdInt.one_11) <{state`_4_0}> (syncol.copy res_4 acc_5) (_predefined._Cons (_Tuple2 (syncol._Info (select state_3::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil) lines_1_1) (False -> case (case (StdBool.not (select state_3::syncol._State 2)) (True -> select <{state`_4_0}>::syncol._State 2) (False -> False) ) (True -> syncol.during_41 end_0 beg_1 idx_2 (update state_3::syncol._State [2:True]) (syncol.patch res_4 acc_5) _predefined._Nil _x_6) (False -> syncol.during_41 end_0 beg_1 (<{StdInt.+_6}> idx_2 StdInt.one_11) <{state`_4_0}> res_4 (<{StdList.++}> acc_5 (_predefined._Cons (_Tuple2 (syncol._Info (select state_3::syncol._State 0) (select <{state`_4_0}>::syncol._State 1) (select <{state`_4_0}>::syncol._State 2) (select <{state`_4_0}>::syncol._State 3) (select <{state`_4_0}>::syncol._State 5)) line_2_1) _predefined._Nil)) lines_1_1) ) ) ) ) 
syncol.before_21 end_0::I beg_1::I idx_2::I res_3 state_4 reversed_acc_5 !_x_6 = case _x_6 (StrictList.SNil -> _Tuple3 0 0 (res_3 (StdList.reverse reversed_acc_5))) (StrictList.SCons _x_1_0 lines_1_1 -> case _x_1_0 (_Tuple2 info_2_0 line_2_1 -> case info_2_0 (syncol._Info level_3_0 def_3_1 dec_3_2 off_3_3 flush_3_4 -> case (<{StdInt.<_17}> idx_2 beg_1) (True -> case flush_3_4 (True -> syncol.before_21 end_0 beg_1 (<{StdInt.+_6}> idx_2 StdInt.one_11) res_3 state_4 (_predefined._Cons (_Tuple2 info_2_0 line_2_1) reversed_acc_5) lines_1_1) (False -> syncol.before_21 end_0 beg_1 (<{StdInt.+_6}> idx_2 StdInt.one_11) (syncol.copy res_3 (StdList.reverse reversed_acc_5)) (update state_4::syncol._State [0:level_3_0,1:def_3_1,2:dec_3_2,3:off_3_3]) (_predefined._Cons (_Tuple2 info_2_0 line_2_1) _predefined._Nil) lines_1_1) ) (False -> let <{beg`_5_0}>::I = <{StdInt.-_7}> idx_2 (StdList.length_47 reversed_acc_5) in syncol.during_41 end_0 <{beg`_5_0}> <{beg`_5_0}> state_4 res_3 _predefined._Nil (StrictList.slAppend (StrictList.slFromList (StdList.reverse reversed_acc_5)) _x_6)) ) ) ) 
syncol.quickParse !beg_0::I !end_1::I !lines_2 = let _x_1_0 = syncol.before_21 end_1 beg_0 0 StrictList.slFromList syncol.iniState _predefined._Nil lines_2 in _Tuple3 (select _x_1_0::_Tuple3 0) (select _x_1_0::_Tuple3 1) (select _x_1_0::_Tuple3 2)
<{syncol.slFromList`}> !_x_0 r_1 = case _x_0 (_predefined._Nil -> r_1) (_predefined._Cons x_1_0 xs_1_1 -> StrictList.SCons x_1_0 (<{syncol.slFromList`}> xs_1_1 r_1)) 
<{syncol.TD;Info}> _x_0::B = _predefined._Nil
<{syncol.TD;State}> _x_0::B = _predefined._Nil
<{syncol.TD;ParseState}> _x_0::B = _predefined._Nil

:: syncol.ParseState = syncol.StartOfBlock | syncol.CleanId | syncol.OpenPar | syncol.InfixId | syncol.Precedence | syncol.Fixity | syncol.Other

|| Converted Records
:: syncol._Info = {!syncol.comment_level::I, !syncol.is_typedef::B, !syncol.is_typedecl::B, !syncol.offside_level::I, !syncol.flush::B}

:: syncol._State = {!syncol.level::I, !syncol.typedef::B, !syncol.typedecl::B, !syncol.offside::I, !syncol.parse_state, !syncol.has_content::B}

