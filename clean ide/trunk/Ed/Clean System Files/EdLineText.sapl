|| ?module? EdLineText


EdLineText.anon_43 s_0 = _Tuple2 (syncol._Info 0 False False 0 False) s_0
EdLineText.newText = EdLineText._Text 1 (_predefined._Cons (StrictList.slMap EdLineText.anon_43 (StrictList.SCons "" StrictList.SNil)) _predefined._Nil)
EdLineText.emptyText = EdLineText._Text 0 (_predefined._Cons StrictList.SNil _predefined._Nil)
EdLineText.snd_44 !tuple_0 = select tuple_0::_Tuple2 1
EdLineText.blockToStrings !block_0 = StrictList.slMap EdLineText.snd_44 block_0
EdLineText.blocksToStrings !_x_0 = case _x_0 (_predefined._Nil -> StrictList.SNil) (_predefined._Cons block_1_0 blocks_1_1 -> StrictList.slAppend (EdLineText.blockToStrings block_1_0) (EdLineText.blocksToStrings blocks_1_1)) 
EdLineText.textToStrings !_x_0 = case _x_0 (EdLineText._Text nrLines_1_0 blocks_1_1 -> EdLineText.blocksToStrings blocks_1_1) 
EdLineText.group _x_0::I !_x_1 = case _x_1 (StrictList.SNil -> _predefined._Nil) (_ -> let _x_1_0 = StrictList.slSplitAt _x_0 _x_1 in _predefined._Cons (select _x_1_0::_Tuple2 0) (EdLineText.group _x_0 (select _x_1_0::_Tuple2 1)))
EdLineText.stringsToText lines_0 = let lines_1_0 = syncol.firstParse lines_0 in EdLineText._Text (StrictList.slLength lines_1_0) (EdLineText.group 80 lines_1_0)
EdLineText.sSize_27::I !_vArray_0 sizeNewline_1::I !_x_2 = case _x_2 (StrictList.SNil -> 0) (StrictList.SCons string_1_0 _x_1_1 -> case _x_1_1 (StrictList.SNil -> select _vArray_0::<{_SystemArray.Array;}> 4 string_1_0) (_ -> <{StdInt.+_6}> (<{StdInt.+_6}> (select _vArray_0::<{_SystemArray.Array;}> 4 string_1_0) sizeNewline_1) (EdLineText.sSize_27 _vArray_0 sizeNewline_1 _x_1_1))) 
EdLineText.sU_29 !_vArray_0 !_vArray_1 !l_2::I i_3::I !j_4::I s_5 h_6 = case (StdBool.not (<{StdInt.<_17}> j_4 l_2)) (True -> _Tuple2 i_3 s_5) (False -> EdLineText.sU_29 _vArray_0 _vArray_1 l_2 (<{StdInt.+_6}> i_3 StdInt.one_11) (<{StdInt.+_6}> j_4 StdInt.one_11) (select _vArray_1::<{_SystemArray.Array;}> 5 s_5 i_3 (select _vArray_0::<{_SystemArray.Array;}> 3 h_6 j_4)) h_6) 
EdLineText.sU_48 !_vArray_0 !l_1::I i_2::I !j_3::I s_4 h_5 = case (StdBool.not (<{StdInt.<_17}> j_3 l_1)) (True -> _Tuple2 i_2 s_4) (False -> EdLineText.sU_48 _vArray_0 l_1 (<{StdInt.+_6}> i_2 StdInt.one_11) (<{StdInt.+_6}> j_3 StdInt.one_11) (select _vArray_0::<{_SystemArray.Array;}> 5 s_4 i_2 (_SystemArray.select_19 h_5 j_3)) h_5) 
EdLineText.sU_49 !_vArray_0 !l_1::I i_2::I !j_3::I s_4 h_5 = case (StdBool.not (<{StdInt.<_17}> j_3 l_1)) (True -> _Tuple2 i_2 s_4) (False -> EdLineText.sU_49 _vArray_0 l_1 (<{StdInt.+_6}> i_2 StdInt.one_11) (<{StdInt.+_6}> j_3 StdInt.one_11) (_SystemArray.update_21 s_4 i_2 (select _vArray_0::<{_SystemArray.Array;}> 3 h_5 j_3)) h_5) 
EdLineText.sU_50 !l_0::I i_1::I !j_2::I s_3 h_4 = case (StdBool.not (<{StdInt.<_17}> j_2 l_0)) (True -> _Tuple2 i_1 s_3) (False -> EdLineText.sU_50 l_0 (<{StdInt.+_6}> i_1 StdInt.one_11) (<{StdInt.+_6}> j_2 StdInt.one_11) (_SystemArray.update_21 s_3 i_1 (_SystemArray.select_19 h_4 j_2)) h_4) 
EdLineText.sUpdate_28 !_vArray_0 sizeNewline_1::I newline_2 !i_3::I !s_4 !_x_5 = case _x_5 (StrictList.SNil -> s_4) (StrictList.SCons string_1_0 _x_1_1 -> case _x_1_1 (StrictList.SNil -> select (EdLineText.sU_50 (_SystemArray.size_20 string_1_0) i_3 0 s_4 string_1_0)::_Tuple2 1) (_ -> let _x_2_0 = EdLineText.sU_50 (_SystemArray.size_20 string_1_0) i_3 0 s_4 string_1_0, _x_2_1 = EdLineText.sU_49 _vArray_0 sizeNewline_1 (select _x_2_0::_Tuple2 0) 0 (select _x_2_0::_Tuple2 1) newline_2 in EdLineText.sUpdate_28 _vArray_0 sizeNewline_1 newline_2 (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1) _x_1_1)) 
EdLineText.sSize_51::I sizeNewline_0::I !_x_1 = case _x_1 (StrictList.SNil -> 0) (StrictList.SCons string_1_0 _x_1_1 -> case _x_1_1 (StrictList.SNil -> _SystemArray.size_20 string_1_0) (_ -> <{StdInt.+_6}> (<{StdInt.+_6}> (_SystemArray.size_20 string_1_0) sizeNewline_0) (EdLineText.sSize_51 sizeNewline_0 _x_1_1))) 
EdLineText.sU_53 !l_0::I i_1::I !j_2::I s_3 h_4 = case (StdBool.not (<{StdInt.<_17}> j_2 l_0)) (True -> _Tuple2 i_1 s_3) (False -> EdLineText.sU_53 l_0 (<{StdInt.+_6}> i_1 StdInt.one_11) (<{StdInt.+_6}> j_2 StdInt.one_11) (_SystemArray.update_21 s_3 i_1 (_SystemArray.select_19 h_4 j_2)) h_4) 
EdLineText.sUpdate_52 sizeNewline_0::I newline_1 !i_2::I !s_3 !_x_4 = case _x_4 (StrictList.SNil -> s_3) (StrictList.SCons string_1_0 _x_1_1 -> case _x_1_1 (StrictList.SNil -> select (EdLineText.sU_50 (_SystemArray.size_20 string_1_0) i_2 0 s_3 string_1_0)::_Tuple2 1) (_ -> let _x_2_0 = EdLineText.sU_50 (_SystemArray.size_20 string_1_0) i_2 0 s_3 string_1_0, _x_2_1 = EdLineText.sU_53 sizeNewline_0 (select _x_2_0::_Tuple2 0) 0 (select _x_2_0::_Tuple2 1) newline_1 in EdLineText.sUpdate_52 sizeNewline_0 newline_1 (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1) _x_1_1)) 
EdLineText.stringsToString !ss_0 = let sizeNewline_1_0::I = 2 in EdLineText.sUpdate_52 sizeNewline_1_0 "\r\n" 0 (_SystemArray.createArray_17 (EdLineText.sSize_51 sizeNewline_1_0 ss_0) '\r') ss_0
<{EdLineText.stringToStrings`_30}> !_vArray_0 !<{_v%_1}> !i_2::I string_3 start_4::I = let stringsize_1_0::I = select _vArray_0::<{_SystemArray.Array;}> 4 string_3 in case (StdBool.not (<{StdInt.<_17}> i_2 stringsize_1_0)) (True -> StrictList.SCons (select <{_v%_1}>::<{StdOverloaded.%;}> 0 string_3 (_Tuple2 start_4 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11))) StrictList.SNil) (False -> let lastchar_3_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 string_3 i_2 in case (<{StdChar.==_18}> lastchar_3_0 '\n') (True -> StrictList.SCons (select <{_v%_1}>::<{StdOverloaded.%;}> 0 string_3 (_Tuple2 start_4 (<{StdInt.-_7}> i_2 1))) (<{EdLineText.stringToStrings`_30}> _vArray_0 <{_v%_1}> (<{StdInt.+_6}> i_2 1) string_3 (<{StdInt.+_6}> i_2 1))) (False -> case (<{StdChar.==_18}> lastchar_3_0 '\r') (True -> case (case (<{StdInt.<_17}> i_2 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11)) (True -> <{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 string_3 (<{StdInt.+_6}> i_2 1)) '\n') (False -> False) ) (True -> StrictList.SCons (select <{_v%_1}>::<{StdOverloaded.%;}> 0 string_3 (_Tuple2 start_4 (<{StdInt.-_7}> i_2 1))) (<{EdLineText.stringToStrings`_30}> _vArray_0 <{_v%_1}> (<{StdInt.+_6}> i_2 2) string_3 (<{StdInt.+_6}> i_2 2))) (False -> StrictList.SCons (select <{_v%_1}>::<{StdOverloaded.%;}> 0 string_3 (_Tuple2 start_4 (<{StdInt.-_7}> i_2 1))) (<{EdLineText.stringToStrings`_30}> _vArray_0 <{_v%_1}> (<{StdInt.+_6}> i_2 1) string_3 (<{StdInt.+_6}> i_2 1))) ) (False -> <{EdLineText.stringToStrings`_30}> _vArray_0 <{_v%_1}> (<{StdInt.+_6}> i_2 1) string_3 start_4) ) ) 
<{EdLineText.stringToStrings`_54}> !<{_v%_0}> !i_1::I !string_2 start_3::I = let stringsize_1_0::I = _SystemArray.size_20 string_2 in case (StdBool.not (<{StdInt.<_17}> i_1 stringsize_1_0)) (True -> StrictList.SCons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_3 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11))) StrictList.SNil) (False -> let lastchar_3_0::C = _SystemArray.select_19 string_2 i_1 in case (<{StdChar.==_18}> lastchar_3_0 '\n') (True -> StrictList.SCons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_3 (<{StdInt.-_7}> i_1 1))) (<{EdLineText.stringToStrings`_54}> <{_v%_0}> (<{StdInt.+_6}> i_1 1) string_2 (<{StdInt.+_6}> i_1 1))) (False -> case (<{StdChar.==_18}> lastchar_3_0 '\r') (True -> case (case (<{StdInt.<_17}> i_1 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 string_2 (<{StdInt.+_6}> i_1 1)) '\n') (False -> False) ) (True -> StrictList.SCons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_3 (<{StdInt.-_7}> i_1 1))) (<{EdLineText.stringToStrings`_54}> <{_v%_0}> (<{StdInt.+_6}> i_1 2) string_2 (<{StdInt.+_6}> i_1 2))) (False -> StrictList.SCons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_3 (<{StdInt.-_7}> i_1 1))) (<{EdLineText.stringToStrings`_54}> <{_v%_0}> (<{StdInt.+_6}> i_1 1) string_2 (<{StdInt.+_6}> i_1 1))) ) (False -> <{EdLineText.stringToStrings`_54}> <{_v%_0}> (<{StdInt.+_6}> i_1 1) string_2 start_3) ) ) 
<{EdLineText.stringToStrings`_55}> !i_0::I !string_1 !start_2::I = let stringsize_1_0::I = _SystemArray.size_20 string_1 in case (StdBool.not (<{StdInt.<_17}> i_0 stringsize_1_0)) (True -> StrictList.SCons (<{StdString.%_10}> string_1 (_Tuple2 start_2 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11))) StrictList.SNil) (False -> let lastchar_3_0::C = _SystemArray.select_19 string_1 i_0 in case (<{StdChar.==_18}> lastchar_3_0 '\n') (True -> StrictList.SCons (<{StdString.%_10}> string_1 (_Tuple2 start_2 (<{StdInt.-_7}> i_0 1))) (<{EdLineText.stringToStrings`_55}> (<{StdInt.+_6}> i_0 1) string_1 (<{StdInt.+_6}> i_0 1))) (False -> case (<{StdChar.==_18}> lastchar_3_0 '\r') (True -> case (case (<{StdInt.<_17}> i_0 (<{StdInt.-_7}> stringsize_1_0 StdInt.one_11)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 string_1 (<{StdInt.+_6}> i_0 1)) '\n') (False -> False) ) (True -> StrictList.SCons (<{StdString.%_10}> string_1 (_Tuple2 start_2 (<{StdInt.-_7}> i_0 1))) (<{EdLineText.stringToStrings`_55}> (<{StdInt.+_6}> i_0 2) string_1 (<{StdInt.+_6}> i_0 2))) (False -> StrictList.SCons (<{StdString.%_10}> string_1 (_Tuple2 start_2 (<{StdInt.-_7}> i_0 1))) (<{EdLineText.stringToStrings`_55}> (<{StdInt.+_6}> i_0 1) string_1 (<{StdInt.+_6}> i_0 1))) ) (False -> <{EdLineText.stringToStrings`_55}> (<{StdInt.+_6}> i_0 1) string_1 start_2) ) ) 
EdLineText.stringToStrings !string_0 = <{EdLineText.stringToStrings`_55}> 0 string_0 0
EdLineText.textLength::I !_x_0 = case _x_0 (EdLineText._Text nrLines_1_0 blocks_1_1 -> nrLines_1_0) 
EdLineText.lastLineNr::I !text_0 = <{StdInt.-_7}> (EdLineText.textLength text_0) 1
EdLineText.validateLineNr::I !lineNr_0::I text_1 = case (<{StdInt.<_17}> lineNr_0 0) (True -> 0) (False -> let lastNr_2_0::I = EdLineText.lastLineNr text_1 in case (<{StdInt.<_17}> lastNr_2_0 lineNr_0) (True -> lastNr_2_0) (False -> lineNr_0) ) 
EdLineText.lineNr_31 !<{_v<_0}> linenr_1 <{nrLines`_2}> = case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 <{nrLines`_2}> linenr_1) (True -> <{nrLines`_2}>) (False -> linenr_1) 
EdLineText.lineNr_56::I !linenr_0::I !<{nrLines`_1}>::I = case (<{StdInt.<_17}> <{nrLines`_1}> linenr_0) (True -> <{nrLines`_1}>) (False -> linenr_0) 
EdLineText.getLine !linenr_0::I !text_1 = case text_1 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let <{nrLines`_2_0}>::I = <{StdInt.-_7}> nrLines_1_0 StdInt.one_11, nrSkip_2_1::I = <{StdInt./_10}> (EdLineText.lineNr_56 linenr_0 <{nrLines`_2_0}>) 80 in <{_Tuple2!3}> (select (StrictList.slIndex (<{StdInt.-_7}> (EdLineText.lineNr_56 linenr_0 <{nrLines`_2_0}>) (<{StdInt.*_9}> nrSkip_2_1 80)) (<{StdList.!!}> blocks_1_1 nrSkip_2_1))::_Tuple2 1) text_1) 
EdLineText.lineNr_32 !<{_v<_0}> linenr_1 <{nrLines`_2}> = case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 <{nrLines`_2}> linenr_1) (True -> <{nrLines`_2}>) (False -> linenr_1) 
EdLineText.lineNr_57::I !linenr_0::I !<{nrLines`_1}>::I = case (<{StdInt.<_17}> <{nrLines`_1}> linenr_0) (True -> <{nrLines`_1}>) (False -> linenr_0) 
EdLineText.getLineC !linenr_0::I !text_1 = case text_1 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let <{nrLines`_2_0}>::I = <{StdInt.-_7}> nrLines_1_0 StdInt.one_11, nrSkip_2_1::I = <{StdInt./_10}> (EdLineText.lineNr_57 linenr_0 <{nrLines`_2_0}>) 80 in <{_Tuple2!2}> (StrictList.slIndex (<{StdInt.-_7}> (EdLineText.lineNr_57 linenr_0 <{nrLines`_2_0}>) (<{StdInt.*_9}> nrSkip_2_1 80)) (<{StdList.!!}> blocks_1_1 nrSkip_2_1)) text_1) 
EdLineText.getBlocks !first_0::I !last_1::I !_x_2 = case _x_2 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let nrSkip_2_0::I = <{StdInt./_10}> first_0 80 in <{_Tuple2!3}> nrSkip_2_0 (<{StdList.%_48}> blocks_1_1 (_Tuple2 nrSkip_2_0 (<{StdInt.+_6}> (<{StdInt./_10}> last_1 80) 1)))) 
EdLineText.getLines !first_0::I !last_1::I !text_2 = let _x_1_0 = EdLineText.getBlocks first_0 last_1 text_2 in <{_Tuple2!3}> (StrictList.slTake (<{StdInt.+_6}> (<{StdInt.-_7}> last_1 first_0) 1) (StrictList.slDrop (<{StdInt.-_7}> first_0 (<{StdInt.*_9}> (select _x_1_0::_Tuple2 0) 80)) (EdLineText.blocksToStrings (select _x_1_0::_Tuple2 1)))) text_2
EdLineText.blocksToStringsC !_x_0 = case _x_0 (_predefined._Nil -> StrictList.SNil) (_predefined._Cons block_1_0 blocks_1_1 -> StrictList.slAppend block_1_0 (EdLineText.blocksToStringsC blocks_1_1)) 
EdLineText.textToStringsC !_x_0 = case _x_0 (EdLineText._Text nrLines_1_0 blocks_1_1 -> EdLineText.blocksToStringsC blocks_1_1) 
EdLineText.updateLine !lineNr_0::I !string_1 !text_2 = case text_2 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let !lines_2_0 = StrictList.slAppend (select _x_2_2::_Tuple2 0) (StrictList.SCons (_Tuple2 (select (StrictList.slHead after_2_3)::_Tuple2 0) string_1) (StrictList.slTail after_2_3)), _x_2_1 = syncol.quickParse lineNr_0 lineNr_0 lines_2_0, _x_2_2 = StrictList.slSplitAt lineNr_0 (EdLineText.textToStringsC text_2), after_2_3 = select _x_2_2::_Tuple2 1 in <{_Tuple3!7}> (select _x_2_1::_Tuple3 0) (select _x_2_1::_Tuple3 1) (EdLineText._Text nrLines_1_0 (EdLineText.group 80 (select _x_2_1::_Tuple3 2)))) 
EdLineText.removeLines !first_0::I !last_1::I !text_2 = case text_2 (EdLineText._Text nrLines_1_0 blocks_1_1 -> case (case (<{StdInt.==_16}> first_0 0) (True -> <{StdInt.==_16}> last_1 (EdLineText.lastLineNr text_2)) (False -> False) ) (True -> EdLineText.newText) (False -> let !lines_3_0 = StrictList.slAppend (select _x_3_2::_Tuple2 0) (StrictList.slDrop nrRemoveLines_3_1 (select _x_3_2::_Tuple2 1)), nrRemoveLines_3_1 = <{StdInt.+_6}> (<{StdInt.-_7}> last_1 first_0) 1, _x_3_2::I = StrictList.slSplitAt first_0 (EdLineText.textToStringsC text_2) in EdLineText._Text (<{StdInt.-_7}> nrLines_1_0 nrRemoveLines_3_1) (EdLineText.group 80 (select (syncol.quickParse (<{StdInt.-_7}> first_0 StdInt.one_11) (<{StdInt.-_7}> first_0 StdInt.one_11) lines_3_0)::_Tuple3 2))) ) 
EdLineText.removeLine !lineNr_0::I !text_1 = EdLineText.removeLines lineNr_0 lineNr_0 text_1
EdLineText.anon_45 s_0 = _Tuple2 (syncol._Info 0 False False 0 False) s_0
EdLineText.insertLines !lineNr_0::I !strings_1 !text_2 = case text_2 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let !after_2_0 = StrictList.slAppend (StrictList.slMap EdLineText.anon_45 strings_1) (select _x_2_3::_Tuple2 1), !lines_2_1 = StrictList.slAppend (select _x_2_3::_Tuple2 0) after_2_0, nr_2_2 = StrictList.slLength strings_1, _x_2_3::I = StrictList.slSplitAt lineNr_0 (EdLineText.textToStringsC text_2) in EdLineText._Text (<{StdInt.+_6}> nrLines_1_0 nr_2_2) (EdLineText.group 80 (select (syncol.quickParse (<{StdInt.-_7}> lineNr_0 StdInt.one_11) (<{StdInt.+_6}> lineNr_0 nr_2_2) lines_2_1)::_Tuple3 2))) 
EdLineText.anon_46 s_0 = _Tuple2 (syncol._Info 0 False False 0 False) s_0
EdLineText.appendLines !strings_0 !text_1 = case text_1 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let !lines_2_0 = StrictList.slAppend (EdLineText.textToStringsC text_1) (StrictList.slMap EdLineText.anon_46 strings_0), nrAppendLines_2_1::I = StrictList.slLength strings_0 in EdLineText._Text (<{StdInt.+_6}> nrLines_1_0 nrAppendLines_2_1) (EdLineText.group 80 (select (syncol.quickParse (<{StdInt.-_7}> nrLines_1_0 StdInt.one_11) (<{StdInt.+_6}> nrLines_1_0 nrAppendLines_2_1) lines_2_0)::_Tuple3 2))) 
EdLineText.anon_47 s_0 = _Tuple2 (syncol._Info 0 False False 0 False) s_0
<{EdLineText.appendLines`}> !strings_0 !text_1 = case text_1 (EdLineText._Text nrLines_1_0 blocks_1_1 -> let !lines_2_0 = StrictList.slAppend (select _x_2_4::_Tuple2 0) (StrictList.SCons (<{EdLineText._c;276;16_58}> (StrictList.slHead (select _x_2_4::_Tuple2 1)) string_2_5) (StrictList.slMap EdLineText.anon_47 strings_2_2)), _x_2_1 = <{EdLineText._c;269;26_59}> strings_0, strings_2_2 = select _x_2_1::_Tuple2 1, nrAppendLines_2_3::I = StrictList.slLength strings_2_2, _x_2_4 = StrictList.slSplitAt (<{StdInt.-_7}> nrLines_1_0 StdInt.one_11) (EdLineText.textToStringsC text_1), string_2_5 = select _x_2_1::_Tuple2 0 in EdLineText._Text (<{StdInt.+_6}> nrLines_1_0 nrAppendLines_2_3) (EdLineText.group 80 (select (syncol.quickParse (<{StdInt.-_7}> nrLines_1_0 StdInt.one_11) (<{StdInt.+_6}> nrLines_1_0 nrAppendLines_2_3) lines_2_0)::_Tuple3 2))) 
<{EdLineText._c;269;26_59}> !strings_0 = case strings_0 (StrictList.SNil -> _Tuple2 "" StrictList.SNil) (StrictList.SCons s_1_0 ss_1_1 -> _Tuple2 s_1_0 ss_1_1) 
<{EdLineText._c;276;16_58}> !_x_0 !string_1 = case _x_0 (_Tuple2 pl_1_0 st_1_1 -> <{_Tuple2!3}> pl_1_0 (<{StdString.+++.}> st_1_1 string_1)) 
EdLineText.getLinesC first_0::I last_1::I text_2 = _Tuple2 (StrictList.slTake (<{StdInt.+_6}> (<{StdInt.-_7}> last_1 first_0) 1) (StrictList.slDrop first_0 (EdLineText.textToStringsC text_2))) text_2
<{EdLineText.TD;Text}> _x_0::B = _predefined._Nil
<{EdLineText.TD;TextFragment}> _x_0::B = _predefined._Nil
<{EdLineText.TD;LineAnnot}> _x_0::B = _predefined._Nil


|| Converted Records
:: EdLineText._Text = {EdLineText.nrLines::I, EdLineText.blocks}

