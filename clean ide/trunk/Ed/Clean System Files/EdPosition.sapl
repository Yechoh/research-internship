|| ?module? EdPosition


<{EdPosition.<_0}>::B !_x_0 !_x_1 = case _x_0 (EdPosition._Position col1_1_0 row1_1_1 -> case _x_1 (EdPosition._Position col2_2_0 row2_2_1 -> case (<{StdInt.<_17}> row1_1_1 row2_2_1) (True -> True) (False -> case (<{StdInt.==_16}> row1_1_1 row2_2_1) (True -> <{StdInt.<_17}> col1_1_0 col2_2_0) (False -> False) ) ) ) 
<{EdPosition.==_1}>::B !_x_0 !_x_1 = case _x_0 (EdPosition._Position col1_1_0 row1_1_1 -> case _x_1 (EdPosition._Position col2_2_0 row2_2_1 -> case (<{StdInt.==_16}> col1_1_0 col2_2_0) (True -> <{StdInt.==_16}> row1_1_1 row2_2_1) (False -> False) ) ) 
EdPosition.toString_2 !_x_0 = case _x_0 (EdPosition._Position col_1_0 row_1_1 -> <{StdString.+++_11}> "(" (<{StdString.+++_11}> (StdString.toString_5 row_1_1) (<{StdString.+++_11}> "," (<{StdString.+++_11}> (StdString.toString_5 col_1_0) ")")))) 
<{EdPosition.TD;Position}> _x_0::B = _predefined._Nil
<{EdPosition.TD;ColumnNr}> _x_0::B = _predefined._Nil
<{EdPosition.TD;LineNr}> _x_0::B = _predefined._Nil


|| Converted Records
:: EdPosition._Position = {EdPosition.col, EdPosition.row}

