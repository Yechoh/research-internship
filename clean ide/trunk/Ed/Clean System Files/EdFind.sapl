|| ?module? EdFind


EdFind.IsIdentChar_57::B !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) ) ) 
EdFind.IsFunnyChar_58::B !c_0::C = case (<{StdChar.==_18}> c_0 '~') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '@') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '#') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '$') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '%') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '^') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '?') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '!') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '+') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '-') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '*') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '<') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '>') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\\') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '|') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '&') (True -> True) (False -> <{StdChar.==_18}> c_0 ':') ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
EdFind.not_both_ident_or_funny_chars_56::B !char1_0::C char2_1::C = case (case (case (EdFind.IsFunnyChar_58 char1_0) (True -> EdFind.IsFunnyChar_58 char2_1) (False -> False) ) (True -> True) (False -> case (EdFind.IsIdentChar_57 char1_0) (True -> EdFind.IsIdentChar_57 char2_1) (False -> False) ) ) (True -> False) (False -> True) 
EdFind.isFalse::B !_x_0::B = case _x_0 (False -> True) (_ -> False)
<{EdFind.c;310;118_55}> !_vArray_0 !_vArray_1 !g_i_2::I !g_s_3::I g_a_4 g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_2, _x_2_3 = select _vArray_1::<{_SystemArray.Array;}> 6 g_a_5 g_i_2 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_55}> _vArray_0 _vArray_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
EdFind.inc_51 !<{_v+_0}> !_vone_1 !x_2 = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.dec_50 !<{_v-_0}> !_vone_1 !x_2 = select <{_v-_0}>::<{StdOverloaded.-;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.next_36 !<{_v-_0}> !_vone_1 !<{_v+_2}> !backwards_3::B = case backwards_3 (True -> EdFind.dec_50 <{_v-_0}> _vone_1) (False -> EdFind.inc_51 <{_v+_2}> _vone_1) 
EdFind.IsIdentChar_53::B !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) ) ) 
EdFind.IsFunnyChar_54::B !c_0::C = case (<{StdChar.==_18}> c_0 '~') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '@') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '#') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '$') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '%') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '^') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '?') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '!') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '+') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '-') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '*') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '<') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '>') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\\') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '|') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '&') (True -> True) (False -> <{StdChar.==_18}> c_0 ':') ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
EdFind.not_both_ident_or_funny_chars_52::B !char1_0::C char2_1::C = case (case (case (EdFind.IsFunnyChar_54 char1_0) (True -> EdFind.IsFunnyChar_54 char2_1) (False -> False) ) (True -> True) (False -> case (EdFind.IsIdentChar_53 char1_0) (True -> EdFind.IsIdentChar_53 char2_1) (False -> False) ) ) (True -> False) (False -> True) 
EdFind.dec_116::I !_vone_0 !x_1::I = <{StdInt.-_7}> x_1 (select _vone_0::<{StdOverloaded.one;}> 0)
EdFind.next_115 !_vone_0 !<{_v+_1}> !backwards_2::B = case backwards_2 (True -> EdFind.dec_116 _vone_0) (False -> EdFind.inc_51 <{_v+_1}> _vone_0) 
EdFind.dec_118::I !x_0::I = <{StdInt.-_7}> x_0 StdInt.one_11
EdFind.inc_119::I !<{_v+_0}> !x_1::I = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_1 StdInt.one_11
EdFind.next_117 !<{_v+_0}> !backwards_1::B = case backwards_1 (True -> EdFind.dec_118) (False -> EdFind.inc_119 <{_v+_0}>) 
EdFind.inc_121::I !x_0::I = <{StdInt.+_6}> x_0 StdInt.one_11
EdFind.next_120 !backwards_0::B = case backwards_0 (True -> EdFind.dec_118) (False -> EdFind.inc_121) 
<{EdFind.findInLine`_33}> !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B search_4 !backwards_5::B stringlength_6::I line_7 firstChar_8::C maxColumn_9::I !column_10::I = case (case (case (StdBool.not backwards_5) (True -> <{StdInt.<_17}> maxColumn_9 column_10) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_10 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_8 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 column_10)) (True -> case (select <{_v==_2}>::<{StdOverloaded.==;}> 0 search_4 (select <{_v%_1}>::<{StdOverloaded.%;}> 0 line_7 (_Tuple2 column_10 (<{StdInt.-_7}> (<{StdInt.+_6}> column_10 stringlength_6) 1)))) (True -> case match_words_3 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_10 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 before_index_5_0) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_10 stringlength_6 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (select _vArray_0::<{_SystemArray.Array;}> 4 line_7))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_10) (False -> <{EdFind.findInLine`_33}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) (False -> Data.Maybe.Just column_10) ) (False -> <{EdFind.findInLine`_33}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) (False -> <{EdFind.findInLine`_33}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) 
<{EdFind.findIgnore`_34}> !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B search_4 !backwards_5::B stringlength_6::I line_7 firstChar_8::C maxColumn_9::I !column_10::I = case (case (case (StdBool.not backwards_5) (True -> <{StdInt.<_17}> maxColumn_9 column_10) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_10 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_8) (StdChar.toUpper (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 column_10))) (True -> let s2_3_0 = select <{_v%_1}>::<{StdOverloaded.%;}> 0 line_7 (_Tuple2 column_10 (<{StdInt.-_7}> (<{StdInt.+_6}> column_10 stringlength_6) 1)) in case (case (<{StdInt.==_16}> (select _vArray_0::<{_SystemArray.Array;}> 4 search_4) (select _vArray_0::<{_SystemArray.Array;}> 4 s2_3_0)) (True -> let _x_5_0::I = select _vArray_0::<{_SystemArray.Array;}> 7 search_4, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = select _vArray_0::<{_SystemArray.Array;}> 7 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_55}> _vArray_0 _vArray_0 0 (<{EdFind.g_s1;310;111_187}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_3 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_10 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 before_index_6_0) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_10 stringlength_6 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (select _vArray_0::<{_SystemArray.Array;}> 4 line_7))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_10) (False -> <{EdFind.findInLine`_33}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) (False -> Data.Maybe.Just column_10) ) (False -> <{EdFind.findIgnore`_34}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) (False -> <{EdFind.findIgnore`_34}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_120 backwards_5 column_10)) ) 
<{EdFind.g_s1;310;111_187}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_35 !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B !backwards_4::B search_5 !ignore_case_6::B stringlength_7::I !col_8::I line_9 = case ignore_case_6 (True -> <{EdFind.findIgnore`_34}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_5 backwards_4 stringlength_7 line_9 (select _vArray_0::<{_SystemArray.Array;}> 3 search_5 0) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_9) stringlength_7) col_8) (False -> <{EdFind.findInLine`_33}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_5 backwards_4 stringlength_7 line_9 (select _vArray_0::<{_SystemArray.Array;}> 3 search_5 0) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_9) stringlength_7) col_8) 
<{EdFind.findInLine`_125}> !<{_v%_0}> !<{_v==_1}> match_words_2::B search_3 !backwards_4::B stringlength_5::I line_6 firstChar_7::C maxColumn_8::I !column_9::I = case (case (case (StdBool.not backwards_4) (True -> <{StdInt.<_17}> maxColumn_8 column_9) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_9 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_7 (_SystemArray.select_19 line_6 column_9)) (True -> case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 search_3 (select <{_v%_0}>::<{StdOverloaded.%;}> 0 line_6 (_Tuple2 column_9 (<{StdInt.-_7}> (<{StdInt.+_6}> column_9 stringlength_5) 1)))) (True -> case match_words_2 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_9 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_6 before_index_5_0) (_SystemArray.select_19 line_6 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_9 stringlength_5 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_6))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_6 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_6 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_9) (False -> <{EdFind.findInLine`_125}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) (False -> Data.Maybe.Just column_9) ) (False -> <{EdFind.findInLine`_125}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) (False -> <{EdFind.findInLine`_125}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) 
<{EdFind.c;310;118_124}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = _SystemArray.uselect_22 g_a_3 g_i_1, _x_2_3 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_1 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_124}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
<{EdFind.c;310;118_126}> !g_i_0::I !g_s_1::I g_a_2 g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = _SystemArray.uselect_22 g_a_2 g_i_0, _x_2_3 = _SystemArray.uselect_22 g_a_3 g_i_0 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_126}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
<{EdFind.findIgnore`_123}> !<{_v%_0}> !<{_v==_1}> match_words_2::B search_3 !backwards_4::B stringlength_5::I line_6 firstChar_7::C maxColumn_8::I !column_9::I = case (case (case (StdBool.not backwards_4) (True -> <{StdInt.<_17}> maxColumn_8 column_9) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_9 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_7) (StdChar.toUpper (_SystemArray.select_19 line_6 column_9))) (True -> let s2_3_0 = select <{_v%_0}>::<{StdOverloaded.%;}> 0 line_6 (_Tuple2 column_9 (<{StdInt.-_7}> (<{StdInt.+_6}> column_9 stringlength_5) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_3) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_3, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_126}> 0 (<{EdFind.g_s1;310;111_188}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_2 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_9 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_6 before_index_6_0) (_SystemArray.select_19 line_6 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_9 stringlength_5 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_6))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_6 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_6 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_9) (False -> <{EdFind.findInLine`_125}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) (False -> Data.Maybe.Just column_9) ) (False -> <{EdFind.findIgnore`_123}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) (False -> <{EdFind.findIgnore`_123}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_120 backwards_4 column_9)) ) 
<{EdFind.g_s1;310;111_188}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_122 !<{_v%_0}> !<{_v==_1}> match_words_2::B !backwards_3::B search_4 !ignore_case_5::B stringlength_6::I !col_7::I line_8 = case ignore_case_5 (True -> <{EdFind.findIgnore`_123}> <{_v%_0}> <{_v==_1}> match_words_2 search_4 backwards_3 stringlength_6 line_8 (_SystemArray.select_19 search_4 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_8) stringlength_6) col_7) (False -> <{EdFind.findInLine`_125}> <{_v%_0}> <{_v==_1}> match_words_2 search_4 backwards_3 stringlength_6 line_8 (_SystemArray.select_19 search_4 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_8) stringlength_6) col_7) 
<{EdFind.findInLine`_129}> !<{_v==_0}> match_words_1::B search_2 !backwards_3::B stringlength_4::I line_5 firstChar_6::C maxColumn_7::I !column_8::I = case (case (case (StdBool.not backwards_3) (True -> <{StdInt.<_17}> maxColumn_7 column_8) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_8 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_6 (_SystemArray.select_19 line_5 column_8)) (True -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 search_2 (<{StdString.%_10}> line_5 (_Tuple2 column_8 (<{StdInt.-_7}> (<{StdInt.+_6}> column_8 stringlength_4) 1)))) (True -> case match_words_1 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_8 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_5 before_index_5_0) (_SystemArray.select_19 line_5 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_8 stringlength_4 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_5))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_5 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_5 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_8) (False -> <{EdFind.findInLine`_129}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) (False -> Data.Maybe.Just column_8) ) (False -> <{EdFind.findInLine`_129}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) (False -> <{EdFind.findInLine`_129}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) 
<{EdFind.findIgnore`_128}> !<{_v==_0}> match_words_1::B search_2 !backwards_3::B stringlength_4::I line_5 firstChar_6::C maxColumn_7::I !column_8::I = case (case (case (StdBool.not backwards_3) (True -> <{StdInt.<_17}> maxColumn_7 column_8) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_8 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_6) (StdChar.toUpper (_SystemArray.select_19 line_5 column_8))) (True -> let s2_3_0 = <{StdString.%_10}> line_5 (_Tuple2 column_8 (<{StdInt.-_7}> (<{StdInt.+_6}> column_8 stringlength_4) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_2) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_2, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_126}> 0 (<{EdFind.g_s1;310;111_189}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_1 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_8 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_5 before_index_6_0) (_SystemArray.select_19 line_5 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_8 stringlength_4 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_5))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_5 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_5 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_8) (False -> <{EdFind.findInLine`_129}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) (False -> Data.Maybe.Just column_8) ) (False -> <{EdFind.findIgnore`_128}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) (False -> <{EdFind.findIgnore`_128}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_120 backwards_3 column_8)) ) 
<{EdFind.g_s1;310;111_189}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_127 !<{_v==_0}> match_words_1::B !backwards_2::B search_3 !ignore_case_4::B stringlength_5::I !col_6::I line_7 = case ignore_case_4 (True -> <{EdFind.findIgnore`_128}> <{_v==_0}> match_words_1 search_3 backwards_2 stringlength_5 line_7 (_SystemArray.select_19 search_3 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_7) stringlength_5) col_6) (False -> <{EdFind.findInLine`_129}> <{_v==_0}> match_words_1 search_3 backwards_2 stringlength_5 line_7 (_SystemArray.select_19 search_3 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_7) stringlength_5) col_6) 
<{EdFind.findInLine`_132}> match_words_0::B search_1 !backwards_2::B stringlength_3::I line_4 firstChar_5::C maxColumn_6::I !column_7::I = case (case (case (StdBool.not backwards_2) (True -> <{StdInt.<_17}> maxColumn_6 column_7) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_7 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_5 (_SystemArray.select_19 line_4 column_7)) (True -> case (<{StdString.==_2}> search_1 (<{StdString.%_10}> line_4 (_Tuple2 column_7 (<{StdInt.-_7}> (<{StdInt.+_6}> column_7 stringlength_3) 1)))) (True -> case match_words_0 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_7 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_4 before_index_5_0) (_SystemArray.select_19 line_4 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_7 stringlength_3 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_4))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_52 (_SystemArray.select_19 line_4 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_4 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_7) (False -> <{EdFind.findInLine`_132}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) (False -> Data.Maybe.Just column_7) ) (False -> <{EdFind.findInLine`_132}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) (False -> <{EdFind.findInLine`_132}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) 
<{EdFind.findIgnore`_131}> match_words_0::B search_1 !backwards_2::B stringlength_3::I line_4 firstChar_5::C maxColumn_6::I !column_7::I = case (case (case (StdBool.not backwards_2) (True -> <{StdInt.<_17}> maxColumn_6 column_7) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_7 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_5) (StdChar.toUpper (_SystemArray.select_19 line_4 column_7))) (True -> let s2_3_0 = <{StdString.%_10}> line_4 (_Tuple2 column_7 (<{StdInt.-_7}> (<{StdInt.+_6}> column_7 stringlength_3) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_1) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_1, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_126}> 0 (<{EdFind.g_s1;310;111_190}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_0 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_7 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_4 before_index_6_0) (_SystemArray.select_19 line_4 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_7 stringlength_3 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_4))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_56 (_SystemArray.select_19 line_4 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_4 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_7) (False -> <{EdFind.findInLine`_132}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) (False -> Data.Maybe.Just column_7) ) (False -> <{EdFind.findIgnore`_131}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) (False -> <{EdFind.findIgnore`_131}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_120 backwards_2 column_7)) ) 
<{EdFind.g_s1;310;111_190}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_130 match_words_0::B !backwards_1::B search_2 !ignore_case_3::B stringlength_4::I !col_5::I line_6 = case ignore_case_3 (True -> <{EdFind.findIgnore`_131}> match_words_0 search_2 backwards_1 stringlength_4 line_6 (_SystemArray.select_19 search_2 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_6) stringlength_4) col_5) (False -> <{EdFind.findInLine`_132}> match_words_0 search_2 backwards_1 stringlength_4 line_6 (_SystemArray.select_19 search_2 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_6) stringlength_4) col_5) 
<{EdFind.singleLineSearch`_37}> match_words_0::B search_1 !ignore_case_2::B wraparound_3::B !backwards_4::B inisel_5::B textlength_6::I stringlength_7::I !ini_8::B !_x_9 text_10 = case _x_9 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;196;17_191}> ini_8 backwards_4 line_3_2 stringlength_7 col_2_0, _x_3_1 = EdLineText.getLine row_2_1 text_10, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_130 match_words_0 backwards_4 search_1 ignore_case_2 stringlength_7 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_8 False) (False -> False) ) (True -> Data.Maybe.Nothing) (False -> let row_6_0::I = EdFind.next_120 backwards_4 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_6)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_3 (True -> case backwards_4 (True -> <{EdFind.singleLineSearch`_37}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_6 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_37}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> Data.Maybe.Nothing) ) (False -> <{EdFind.singleLineSearch`_37}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_5 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> Data.Maybe.Nothing) (False -> Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_7) row_2_1))) ) ) ) 
<{EdFind._if;196;17_191}>::I !ini_0::B !backwards_1::B line_2 stringlength_3::I col_4::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_4 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_4) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3) (False -> 0) )
EdFind.simpleLineSearch !sel_0 !backwards_1::B !wraparound_2::B !ignore_case_3::B !match_words_4::B !search_5 !text_6 = case sel_0 (EdSelection._Selection start_1_0 end_1_1 -> case (<{EdPosition.==_1}> start_1_0 end_1_1) (True -> <{EdFind.singleLineSearch`_37}> match_words_4 search_5 ignore_case_3 wraparound_2 backwards_1 (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (EdLineText.textLength text_6) (_SystemArray.size_20 search_5) True sel_0 text_6) (False -> <{EdFind.singleLineSearch`_37}> match_words_4 search_5 ignore_case_3 wraparound_2 backwards_1 (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (EdLineText.textLength text_6) (_SystemArray.size_20 search_5) True (update sel_0::EdSelection._Selection [1:update start_1_0::EdPosition._Position [0:EdFind.next_120 backwards_1 (select start_1_0::EdPosition._Position 0)]]) text_6) ) 
EdFind.IsIdentChar_66::B !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) ) ) 
EdFind.IsFunnyChar_67::B !c_0::C = case (<{StdChar.==_18}> c_0 '~') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '@') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '#') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '$') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '%') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '^') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '?') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '!') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '+') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '-') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '*') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '<') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '>') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\\') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '|') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '&') (True -> True) (False -> <{StdChar.==_18}> c_0 ':') ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
EdFind.not_both_ident_or_funny_chars_65::B !char1_0::C char2_1::C = case (case (case (EdFind.IsFunnyChar_67 char1_0) (True -> EdFind.IsFunnyChar_67 char2_1) (False -> False) ) (True -> True) (False -> case (EdFind.IsIdentChar_66 char1_0) (True -> EdFind.IsIdentChar_66 char2_1) (False -> False) ) ) (True -> False) (False -> True) 
<{EdFind.c;310;118_64}> !_vArray_0 !_vArray_1 !g_i_2::I !g_s_3::I g_a_4 g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_2, _x_2_3 = select _vArray_1::<{_SystemArray.Array;}> 6 g_a_5 g_i_2 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_64}> _vArray_0 _vArray_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
EdFind.inc_60 !<{_v+_0}> !_vone_1 !x_2 = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.dec_59 !<{_v-_0}> !_vone_1 !x_2 = select <{_v-_0}>::<{StdOverloaded.-;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.next_41 !<{_v-_0}> !_vone_1 !<{_v+_2}> !backwards_3::B = case backwards_3 (True -> EdFind.dec_59 <{_v-_0}> _vone_1) (False -> EdFind.inc_60 <{_v+_2}> _vone_1) 
EdFind.IsIdentChar_62::B !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'Z' c_0)) (False -> False) ) (True -> True) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) ) ) 
EdFind.IsFunnyChar_63::B !c_0::C = case (<{StdChar.==_18}> c_0 '~') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '@') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '#') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '$') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '%') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '^') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '?') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '!') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '+') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '-') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '*') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '<') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '>') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '\\') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '|') (True -> True) (False -> case (<{StdChar.==_18}> c_0 '&') (True -> True) (False -> <{StdChar.==_18}> c_0 ':') ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
EdFind.not_both_ident_or_funny_chars_61::B !char1_0::C char2_1::C = case (case (case (EdFind.IsFunnyChar_63 char1_0) (True -> EdFind.IsFunnyChar_63 char2_1) (False -> False) ) (True -> True) (False -> case (EdFind.IsIdentChar_62 char1_0) (True -> EdFind.IsIdentChar_62 char2_1) (False -> False) ) ) (True -> False) (False -> True) 
EdFind.dec_134::I !_vone_0 !x_1::I = <{StdInt.-_7}> x_1 (select _vone_0::<{StdOverloaded.one;}> 0)
EdFind.next_133 !_vone_0 !<{_v+_1}> !backwards_2::B = case backwards_2 (True -> EdFind.dec_134 _vone_0) (False -> EdFind.inc_60 <{_v+_1}> _vone_0) 
EdFind.dec_136::I !x_0::I = <{StdInt.-_7}> x_0 StdInt.one_11
EdFind.inc_137::I !<{_v+_0}> !x_1::I = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_1 StdInt.one_11
EdFind.next_135 !<{_v+_0}> !backwards_1::B = case backwards_1 (True -> EdFind.dec_136) (False -> EdFind.inc_137 <{_v+_0}>) 
EdFind.inc_139::I !x_0::I = <{StdInt.+_6}> x_0 StdInt.one_11
EdFind.next_138 !backwards_0::B = case backwards_0 (True -> EdFind.dec_136) (False -> EdFind.inc_139) 
<{EdFind.findInLine`_38}> !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B search_4 !backwards_5::B stringlength_6::I line_7 firstChar_8::C maxColumn_9::I !column_10::I = case (case (case (StdBool.not backwards_5) (True -> <{StdInt.<_17}> maxColumn_9 column_10) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_10 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_8 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 column_10)) (True -> case (select <{_v==_2}>::<{StdOverloaded.==;}> 0 search_4 (select <{_v%_1}>::<{StdOverloaded.%;}> 0 line_7 (_Tuple2 column_10 (<{StdInt.-_7}> (<{StdInt.+_6}> column_10 stringlength_6) 1)))) (True -> case match_words_3 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_10 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 before_index_5_0) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_10 stringlength_6 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (select _vArray_0::<{_SystemArray.Array;}> 4 line_7))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_10) (False -> <{EdFind.findInLine`_38}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) (False -> Data.Maybe.Just column_10) ) (False -> <{EdFind.findInLine`_38}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) (False -> <{EdFind.findInLine`_38}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) 
<{EdFind.findIgnore`_39}> !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B search_4 !backwards_5::B stringlength_6::I line_7 firstChar_8::C maxColumn_9::I !column_10::I = case (case (case (StdBool.not backwards_5) (True -> <{StdInt.<_17}> maxColumn_9 column_10) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_10 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_8) (StdChar.toUpper (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 column_10))) (True -> let s2_3_0 = select <{_v%_1}>::<{StdOverloaded.%;}> 0 line_7 (_Tuple2 column_10 (<{StdInt.-_7}> (<{StdInt.+_6}> column_10 stringlength_6) 1)) in case (case (<{StdInt.==_16}> (select _vArray_0::<{_SystemArray.Array;}> 4 search_4) (select _vArray_0::<{_SystemArray.Array;}> 4 s2_3_0)) (True -> let _x_5_0::I = select _vArray_0::<{_SystemArray.Array;}> 7 search_4, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = select _vArray_0::<{_SystemArray.Array;}> 7 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_64}> _vArray_0 _vArray_0 0 (<{EdFind.g_s1;310;111_192}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_3 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_10 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 before_index_6_0) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_10 stringlength_6 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (select _vArray_0::<{_SystemArray.Array;}> 4 line_7))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (select _vArray_0::<{_SystemArray.Array;}> 3 line_7 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_10) (False -> <{EdFind.findInLine`_38}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) (False -> Data.Maybe.Just column_10) ) (False -> <{EdFind.findIgnore`_39}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) (False -> <{EdFind.findIgnore`_39}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 backwards_5 stringlength_6 line_7 firstChar_8 maxColumn_9 (EdFind.next_138 backwards_5 column_10)) ) 
<{EdFind.g_s1;310;111_192}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_40 !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B !backwards_4::B search_5 !ignore_case_6::B stringlength_7::I !col_8::I line_9 = case ignore_case_6 (True -> <{EdFind.findIgnore`_39}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_5 backwards_4 stringlength_7 line_9 (select _vArray_0::<{_SystemArray.Array;}> 3 search_5 0) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_9) stringlength_7) col_8) (False -> <{EdFind.findInLine`_38}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_5 backwards_4 stringlength_7 line_9 (select _vArray_0::<{_SystemArray.Array;}> 3 search_5 0) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_9) stringlength_7) col_8) 
<{EdFind.singleLineSearch`_42}> !_vArray_0 !_vArray_1 !<{_v%_2}> !<{_v==_3}> match_words_4::B search_5 !ignore_case_6::B wraparound_7::B !backwards_8::B inisel_9::B textlength_10::I stringlength_11::I !ini_12::B !_x_13 text_14 = case _x_13 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;259;17_193}> ini_12 backwards_8 _vArray_1 line_3_2 stringlength_11 col_2_0, _x_3_1 = select _vArray_0::<{_SystemArray.Array;}> 6 text_14 row_2_1, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_40 _vArray_1 <{_v%_2}> <{_v==_3}> match_words_4 backwards_8 search_5 ignore_case_6 stringlength_11 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_12 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_138 backwards_8 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_10)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_7 (True -> case backwards_8 (True -> <{EdFind.singleLineSearch`_42}> _vArray_0 _vArray_1 <{_v%_2}> <{_v==_3}> match_words_4 search_5 ignore_case_6 wraparound_7 backwards_8 inisel_9 textlength_10 stringlength_11 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_10 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_42}> _vArray_0 _vArray_1 <{_v%_2}> <{_v==_3}> match_words_4 search_5 ignore_case_6 wraparound_7 backwards_8 inisel_9 textlength_10 stringlength_11 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_42}> _vArray_0 _vArray_1 <{_v%_2}> <{_v==_3}> match_words_4 search_5 ignore_case_6 wraparound_7 backwards_8 inisel_9 textlength_10 stringlength_11 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_9 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_11) row_2_1))) (select _x_3_1::_Tuple2 1)) ) ) ) 
<{EdFind._if;259;17_193}>::I !ini_0::B !backwards_1::B _vArray_2 line_3 stringlength_4::I col_5::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_5 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (select _vArray_2::<{_SystemArray.Array;}> 4 line_3) stringlength_4 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_5) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (select _vArray_2::<{_SystemArray.Array;}> 4 line_3) stringlength_4) (False -> 0) )
<{EdFind.singleLineSearch`_140}> !_vArray_0 !<{_v%_1}> !<{_v==_2}> match_words_3::B search_4 !ignore_case_5::B wraparound_6::B !backwards_7::B inisel_8::B textlength_9::I stringlength_10::I !ini_11::B !_x_12 text_13 = case _x_12 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;259;17_194}> ini_11 backwards_7 _vArray_0 line_3_2 stringlength_10 col_2_0, _x_3_1 = _SystemArray.uselect_78 text_13 row_2_1, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_40 _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 backwards_7 search_4 ignore_case_5 stringlength_10 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_11 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_138 backwards_7 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_9)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_6 (True -> case backwards_7 (True -> <{EdFind.singleLineSearch`_140}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 ignore_case_5 wraparound_6 backwards_7 inisel_8 textlength_9 stringlength_10 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_9 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_140}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 ignore_case_5 wraparound_6 backwards_7 inisel_8 textlength_9 stringlength_10 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_140}> _vArray_0 <{_v%_1}> <{_v==_2}> match_words_3 search_4 ignore_case_5 wraparound_6 backwards_7 inisel_8 textlength_9 stringlength_10 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_8 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_10) row_2_1))) (select _x_3_1::_Tuple2 1)) ) ) ) 
<{EdFind._if;259;17_194}>::I !ini_0::B !backwards_1::B _vArray_2 line_3 stringlength_4::I col_5::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_5 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (select _vArray_2::<{_SystemArray.Array;}> 4 line_3) stringlength_4 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_5) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (select _vArray_2::<{_SystemArray.Array;}> 4 line_3) stringlength_4) (False -> 0) )
<{EdFind.findInLine`_145}> !<{_v%_0}> !<{_v==_1}> match_words_2::B search_3 !backwards_4::B stringlength_5::I line_6 firstChar_7::C maxColumn_8::I !column_9::I = case (case (case (StdBool.not backwards_4) (True -> <{StdInt.<_17}> maxColumn_8 column_9) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_9 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_7 (_SystemArray.select_19 line_6 column_9)) (True -> case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 search_3 (select <{_v%_0}>::<{StdOverloaded.%;}> 0 line_6 (_Tuple2 column_9 (<{StdInt.-_7}> (<{StdInt.+_6}> column_9 stringlength_5) 1)))) (True -> case match_words_2 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_9 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_6 before_index_5_0) (_SystemArray.select_19 line_6 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_9 stringlength_5 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_6))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_6 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_6 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_9) (False -> <{EdFind.findInLine`_145}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) (False -> Data.Maybe.Just column_9) ) (False -> <{EdFind.findInLine`_145}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) (False -> <{EdFind.findInLine`_145}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) 
<{EdFind.c;310;118_144}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = _SystemArray.uselect_22 g_a_3 g_i_1, _x_2_3 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_1 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_144}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
<{EdFind.c;310;118_146}> !g_i_0::I !g_s_1::I g_a_2 g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), !g_a_2_1 = _predefined._dummyForStrictAlias (select _x_2_3::_Tuple2 1), _x_2_2 = _SystemArray.uselect_22 g_a_2 g_i_0, _x_2_3 = _SystemArray.uselect_22 g_a_3 g_i_0 in _predefined._Cons (<{StdChar.==_18}> (StdChar.toUpper (select _x_2_2::_Tuple2 0)) (StdChar.toUpper (select _x_2_3::_Tuple2 0))) (<{EdFind.c;310;118_146}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0 g_a_2_1)) (False -> _predefined._Nil) 
<{EdFind.findIgnore`_143}> !<{_v%_0}> !<{_v==_1}> match_words_2::B search_3 !backwards_4::B stringlength_5::I line_6 firstChar_7::C maxColumn_8::I !column_9::I = case (case (case (StdBool.not backwards_4) (True -> <{StdInt.<_17}> maxColumn_8 column_9) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_9 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_7) (StdChar.toUpper (_SystemArray.select_19 line_6 column_9))) (True -> let s2_3_0 = select <{_v%_0}>::<{StdOverloaded.%;}> 0 line_6 (_Tuple2 column_9 (<{StdInt.-_7}> (<{StdInt.+_6}> column_9 stringlength_5) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_3) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_3, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_146}> 0 (<{EdFind.g_s1;310;111_195}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_2 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_9 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_6 before_index_6_0) (_SystemArray.select_19 line_6 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_9 stringlength_5 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_6))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_6 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_6 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_9) (False -> <{EdFind.findInLine`_145}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) (False -> Data.Maybe.Just column_9) ) (False -> <{EdFind.findIgnore`_143}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) (False -> <{EdFind.findIgnore`_143}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 backwards_4 stringlength_5 line_6 firstChar_7 maxColumn_8 (EdFind.next_138 backwards_4 column_9)) ) 
<{EdFind.g_s1;310;111_195}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_142 !<{_v%_0}> !<{_v==_1}> match_words_2::B !backwards_3::B search_4 !ignore_case_5::B stringlength_6::I !col_7::I line_8 = case ignore_case_5 (True -> <{EdFind.findIgnore`_143}> <{_v%_0}> <{_v==_1}> match_words_2 search_4 backwards_3 stringlength_6 line_8 (_SystemArray.select_19 search_4 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_8) stringlength_6) col_7) (False -> <{EdFind.findInLine`_145}> <{_v%_0}> <{_v==_1}> match_words_2 search_4 backwards_3 stringlength_6 line_8 (_SystemArray.select_19 search_4 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_8) stringlength_6) col_7) 
<{EdFind.singleLineSearch`_141}> !<{_v%_0}> !<{_v==_1}> match_words_2::B search_3 !ignore_case_4::B wraparound_5::B !backwards_6::B inisel_7::B textlength_8::I stringlength_9::I !ini_10::B !_x_11 text_12 = case _x_11 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;259;17_196}> ini_10 backwards_6 line_3_2 stringlength_9 col_2_0, _x_3_1 = _SystemArray.uselect_78 text_12 row_2_1, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_142 <{_v%_0}> <{_v==_1}> match_words_2 backwards_6 search_3 ignore_case_4 stringlength_9 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_10 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_138 backwards_6 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_8)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_5 (True -> case backwards_6 (True -> <{EdFind.singleLineSearch`_141}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 ignore_case_4 wraparound_5 backwards_6 inisel_7 textlength_8 stringlength_9 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_8 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_141}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 ignore_case_4 wraparound_5 backwards_6 inisel_7 textlength_8 stringlength_9 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_141}> <{_v%_0}> <{_v==_1}> match_words_2 search_3 ignore_case_4 wraparound_5 backwards_6 inisel_7 textlength_8 stringlength_9 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_7 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_9) row_2_1))) (select _x_3_1::_Tuple2 1)) ) ) ) 
<{EdFind._if;259;17_196}>::I !ini_0::B !backwards_1::B line_2 stringlength_3::I col_4::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_4 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_4) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3) (False -> 0) )
<{EdFind.findInLine`_150}> !<{_v==_0}> match_words_1::B search_2 !backwards_3::B stringlength_4::I line_5 firstChar_6::C maxColumn_7::I !column_8::I = case (case (case (StdBool.not backwards_3) (True -> <{StdInt.<_17}> maxColumn_7 column_8) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_8 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_6 (_SystemArray.select_19 line_5 column_8)) (True -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 search_2 (<{StdString.%_10}> line_5 (_Tuple2 column_8 (<{StdInt.-_7}> (<{StdInt.+_6}> column_8 stringlength_4) 1)))) (True -> case match_words_1 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_8 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_5 before_index_5_0) (_SystemArray.select_19 line_5 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_8 stringlength_4 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_5))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_5 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_5 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_8) (False -> <{EdFind.findInLine`_150}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) (False -> Data.Maybe.Just column_8) ) (False -> <{EdFind.findInLine`_150}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) (False -> <{EdFind.findInLine`_150}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) 
<{EdFind.findIgnore`_149}> !<{_v==_0}> match_words_1::B search_2 !backwards_3::B stringlength_4::I line_5 firstChar_6::C maxColumn_7::I !column_8::I = case (case (case (StdBool.not backwards_3) (True -> <{StdInt.<_17}> maxColumn_7 column_8) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_8 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_6) (StdChar.toUpper (_SystemArray.select_19 line_5 column_8))) (True -> let s2_3_0 = <{StdString.%_10}> line_5 (_Tuple2 column_8 (<{StdInt.-_7}> (<{StdInt.+_6}> column_8 stringlength_4) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_2) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_2, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_146}> 0 (<{EdFind.g_s1;310;111_197}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_1 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_8 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_5 before_index_6_0) (_SystemArray.select_19 line_5 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_8 stringlength_4 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_5))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_5 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_5 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_8) (False -> <{EdFind.findInLine`_150}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) (False -> Data.Maybe.Just column_8) ) (False -> <{EdFind.findIgnore`_149}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) (False -> <{EdFind.findIgnore`_149}> <{_v==_0}> match_words_1 search_2 backwards_3 stringlength_4 line_5 firstChar_6 maxColumn_7 (EdFind.next_138 backwards_3 column_8)) ) 
<{EdFind.g_s1;310;111_197}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_148 !<{_v==_0}> match_words_1::B !backwards_2::B search_3 !ignore_case_4::B stringlength_5::I !col_6::I line_7 = case ignore_case_4 (True -> <{EdFind.findIgnore`_149}> <{_v==_0}> match_words_1 search_3 backwards_2 stringlength_5 line_7 (_SystemArray.select_19 search_3 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_7) stringlength_5) col_6) (False -> <{EdFind.findInLine`_150}> <{_v==_0}> match_words_1 search_3 backwards_2 stringlength_5 line_7 (_SystemArray.select_19 search_3 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_7) stringlength_5) col_6) 
<{EdFind.singleLineSearch`_147}> !<{_v==_0}> match_words_1::B search_2 !ignore_case_3::B wraparound_4::B !backwards_5::B inisel_6::B textlength_7::I stringlength_8::I !ini_9::B !_x_10 text_11 = case _x_10 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;259;17_198}> ini_9 backwards_5 line_3_2 stringlength_8 col_2_0, _x_3_1 = _SystemArray.uselect_78 text_11 row_2_1, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_148 <{_v==_0}> match_words_1 backwards_5 search_2 ignore_case_3 stringlength_8 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_9 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_138 backwards_5 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_7)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_4 (True -> case backwards_5 (True -> <{EdFind.singleLineSearch`_147}> <{_v==_0}> match_words_1 search_2 ignore_case_3 wraparound_4 backwards_5 inisel_6 textlength_7 stringlength_8 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_7 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_147}> <{_v==_0}> match_words_1 search_2 ignore_case_3 wraparound_4 backwards_5 inisel_6 textlength_7 stringlength_8 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_147}> <{_v==_0}> match_words_1 search_2 ignore_case_3 wraparound_4 backwards_5 inisel_6 textlength_7 stringlength_8 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_6 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_8) row_2_1))) (select _x_3_1::_Tuple2 1)) ) ) ) 
<{EdFind._if;259;17_198}>::I !ini_0::B !backwards_1::B line_2 stringlength_3::I col_4::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_4 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_4) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3) (False -> 0) )
<{EdFind.findInLine`_154}> match_words_0::B search_1 !backwards_2::B stringlength_3::I line_4 firstChar_5::C maxColumn_6::I !column_7::I = case (case (case (StdBool.not backwards_2) (True -> <{StdInt.<_17}> maxColumn_6 column_7) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_7 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> firstChar_5 (_SystemArray.select_19 line_4 column_7)) (True -> case (<{StdString.==_2}> search_1 (<{StdString.%_10}> line_4 (_Tuple2 column_7 (<{StdInt.-_7}> (<{StdInt.+_6}> column_7 stringlength_3) 1)))) (True -> case match_words_0 (True -> let before_index_5_0::I = <{StdInt.-_7}> column_7 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_5_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_4 before_index_5_0) (_SystemArray.select_19 line_4 (<{StdInt.+_6}> before_index_5_0 StdInt.one_11))) ) (True -> let after_index_7_0::I = <{StdInt.+_6}> column_7 stringlength_3 in case (StdBool.not (<{StdInt.<_17}> after_index_7_0 (_SystemArray.size_20 line_4))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_61 (_SystemArray.select_19 line_4 (<{StdInt.-_7}> after_index_7_0 StdInt.one_11)) (_SystemArray.select_19 line_4 after_index_7_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_7) (False -> <{EdFind.findInLine`_154}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) (False -> Data.Maybe.Just column_7) ) (False -> <{EdFind.findInLine`_154}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) (False -> <{EdFind.findInLine`_154}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) 
<{EdFind.findIgnore`_153}> match_words_0::B search_1 !backwards_2::B stringlength_3::I line_4 firstChar_5::C maxColumn_6::I !column_7::I = case (case (case (StdBool.not backwards_2) (True -> <{StdInt.<_17}> maxColumn_6 column_7) (False -> False) ) (True -> True) (False -> <{StdInt.<_17}> column_7 0) ) (True -> Data.Maybe.Nothing) (False -> case (<{StdChar.==_18}> (StdChar.toUpper firstChar_5) (StdChar.toUpper (_SystemArray.select_19 line_4 column_7))) (True -> let s2_3_0 = <{StdString.%_10}> line_4 (_Tuple2 column_7 (<{StdInt.-_7}> (<{StdInt.+_6}> column_7 stringlength_3) 1)) in case (case (<{StdInt.==_16}> (_SystemArray.size_20 search_1) (_SystemArray.size_20 s2_3_0)) (True -> let _x_5_0::I = _SystemArray.usize_23 search_1, g_s_5_1::I = select _x_5_0::_Tuple2 0, g_s2_5_2 = <{StdInt.-_7}> g_s_5_1 1, _x_5_3::I = _SystemArray.usize_23 s2_3_0, g_s_5_4::I = select _x_5_3::_Tuple2 0, g_s2_5_5 = <{StdInt.-_7}> g_s_5_4 1 in StdList.isEmpty (StdList.filter EdFind.isFalse (<{EdFind.c;310;118_146}> 0 (<{EdFind.g_s1;310;111_199}> (<{StdInt.<_17}> g_s2_5_2 g_s2_5_5) g_s2_5_2 g_s2_5_5) (select _x_5_0::_Tuple2 1) (select _x_5_3::_Tuple2 1)))) (False -> False) ) (True -> case match_words_0 (True -> let before_index_6_0::I = <{StdInt.-_7}> column_7 StdInt.one_11 in case (case (case (<{StdInt.<_17}> before_index_6_0 0) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_4 before_index_6_0) (_SystemArray.select_19 line_4 (<{StdInt.+_6}> before_index_6_0 StdInt.one_11))) ) (True -> let after_index_8_0::I = <{StdInt.+_6}> column_7 stringlength_3 in case (StdBool.not (<{StdInt.<_17}> after_index_8_0 (_SystemArray.size_20 line_4))) (True -> True) (False -> EdFind.not_both_ident_or_funny_chars_65 (_SystemArray.select_19 line_4 (<{StdInt.-_7}> after_index_8_0 StdInt.one_11)) (_SystemArray.select_19 line_4 after_index_8_0)) ) (False -> False) ) (True -> Data.Maybe.Just column_7) (False -> <{EdFind.findInLine`_154}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) (False -> Data.Maybe.Just column_7) ) (False -> <{EdFind.findIgnore`_153}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) (False -> <{EdFind.findIgnore`_153}> match_words_0 search_1 backwards_2 stringlength_3 line_4 firstChar_5 maxColumn_6 (EdFind.next_138 backwards_2 column_7)) ) 
<{EdFind.g_s1;310;111_199}>::I !_x_0::B g_s2_1::I g_s2_2::I = case _x_0 (True -> g_s2_1) (_ -> g_s2_2)
EdFind.mcolumn_152 match_words_0::B !backwards_1::B search_2 !ignore_case_3::B stringlength_4::I !col_5::I line_6 = case ignore_case_3 (True -> <{EdFind.findIgnore`_153}> match_words_0 search_2 backwards_1 stringlength_4 line_6 (_SystemArray.select_19 search_2 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_6) stringlength_4) col_5) (False -> <{EdFind.findInLine`_154}> match_words_0 search_2 backwards_1 stringlength_4 line_6 (_SystemArray.select_19 search_2 0) (<{StdInt.-_7}> (_SystemArray.size_20 line_6) stringlength_4) col_5) 
<{EdFind.singleLineSearch`_151}> match_words_0::B search_1 !ignore_case_2::B wraparound_3::B !backwards_4::B inisel_5::B textlength_6::I stringlength_7::I !ini_8::B !_x_9 text_10 = case _x_9 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let col_3_0 = <{EdFind._if;259;17_200}> ini_8 backwards_4 line_3_2 stringlength_7 col_2_0, _x_3_1 = _SystemArray.uselect_78 text_10 row_2_1, line_3_2 = select _x_3_1::_Tuple2 0, xxx_3_3::I = EdFind.mcolumn_152 match_words_0 backwards_4 search_1 ignore_case_2 stringlength_7 col_3_0 line_3_2 in case (Data.Maybe.isNothing xxx_3_3) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_8 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_138 backwards_4 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_6)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_3 (True -> case backwards_4 (True -> <{EdFind.singleLineSearch`_151}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_6 StdInt.one_11))) (select _x_3_1::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_151}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_1::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_151}> match_words_0 search_1 ignore_case_2 wraparound_3 backwards_4 inisel_5 textlength_6 stringlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_1::_Tuple2 1)) ) ) (False -> let col_5_0::I = Data.Maybe.fromJust xxx_3_3 in case (case inisel_5 (True -> case (<{StdInt.==_16}> col_5_0 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position col_5_0 row_2_1) (EdPosition._Position (<{StdInt.+_6}> col_5_0 stringlength_7) row_2_1))) (select _x_3_1::_Tuple2 1)) ) ) ) 
<{EdFind._if;259;17_200}>::I !ini_0::B !backwards_1::B line_2 stringlength_3::I col_4::I = case ini_0 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_4 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_4) ) (_ -> case backwards_1 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_2) stringlength_3) (False -> 0) )
<{EdFind.simpleLineSearch`}> !sel_0 !backwards_1::B !wraparound_2::B !ignore_case_3::B !match_words_4::B !search_5 !<{text`_6}> = case sel_0 (EdSelection._Selection start_1_0 end_1_1 -> case (<{EdPosition.==_1}> start_1_0 end_1_1) (True -> let _x_3_0 = _SystemArray.usize_79 <{text`_6}> in <{EdFind.singleLineSearch`_151}> match_words_4 search_5 ignore_case_3 wraparound_2 backwards_1 (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (select _x_3_0::_Tuple2 0) (_SystemArray.size_20 search_5) True sel_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_3_0 = _SystemArray.usize_79 <{text`_6}> in <{EdFind.singleLineSearch`_151}> match_words_4 search_5 ignore_case_3 wraparound_2 backwards_1 (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (select _x_3_0::_Tuple2 0) (_SystemArray.size_20 search_5) True (update sel_0::EdSelection._Selection [1:update start_1_0::EdPosition._Position [0:EdFind.next_138 backwards_1 (select start_1_0::EdPosition._Position 0)]]) (select _x_3_0::_Tuple2 1)) ) 
<{EdFind.c;97;30_15}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;97;30_15}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.anon_16 !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_1 (_Tuple2 _x_2_0 c_2_1 -> c_2_1) ) 
<{EdFind.col`_19}>::I !_vArray_0 !backwards_1::B stringlength_2::I col_3::I !ini_4::B line_5 = case ini_4 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_3 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_5) stringlength_2 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_3) ) (False -> case backwards_1 (True -> <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_5) stringlength_2) (False -> 0) ) 
EdFind.findb_18 !_vArray_0 backwards_1::B stringlength_2::I col_3::I ini_4::B line_5 !_x_6 = case _x_6 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> (<{EdFind.col`_19}> _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5) s_2_0)) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findb_18 _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5 r_1_1) ) ) 
EdFind.findf_17 !_vArray_0 backwards_1::B stringlength_2::I col_3::I ini_4::B line_5 !_x_6 = case _x_6 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> s_2_0 (<{EdFind.col`_19}> _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5))) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findf_17 _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5 r_1_1) ) ) 
EdFind.reline_20 !_vArray_0 !backwards_1::B stringlength_2::I !reParser_3 col_4::I ini_5::B line_6 = case backwards_1 (True -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 7 line_6 in EdFind.findb_18 _vArray_0 backwards_1 stringlength_2 col_4 ini_5 line_6 (StdList.reverse (StdList.map EdFind.anon_16 (reParser_3 (<{EdFind.c;97;30_15}> _vArray_0 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)))))) (False -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 7 line_6 in EdFind.findf_17 _vArray_0 backwards_1 stringlength_2 col_4 ini_5 line_6 (StdList.map EdFind.anon_16 (reParser_3 (<{EdFind.c;97;30_15}> _vArray_0 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1))))) 
EdFind.inc_69 !<{_v+_0}> !_vone_1 !x_2 = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.dec_68 !<{_v-_0}> !_vone_1 !x_2 = select <{_v-_0}>::<{StdOverloaded.-;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.next_21 !<{_v-_0}> !_vone_1 !<{_v+_2}> !backwards_3::B = case backwards_3 (True -> EdFind.dec_68 <{_v-_0}> _vone_1) (False -> EdFind.inc_69 <{_v+_2}> _vone_1) 
<{EdFind.c;97;30_156}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;97;30_156}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{EdFind.col`_158}>::I !backwards_0::B stringlength_1::I col_2::I !ini_3::B line_4 = case ini_3 (True -> case backwards_0 (True -> let x_3_0::I = <{StdInt.-_7}> col_2 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_4) stringlength_1 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_2) ) (False -> case backwards_0 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_4) stringlength_1) (False -> 0) ) 
EdFind.findb_157 backwards_0::B stringlength_1::I col_2::I ini_3::B line_4 !_x_5 = case _x_5 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> (<{EdFind.col`_158}> backwards_0 stringlength_1 col_2 ini_3 line_4) s_2_0)) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findb_157 backwards_0 stringlength_1 col_2 ini_3 line_4 r_1_1) ) ) 
EdFind.findf_159 backwards_0::B stringlength_1::I col_2::I ini_3::B line_4 !_x_5 = case _x_5 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> s_2_0 (<{EdFind.col`_158}> backwards_0 stringlength_1 col_2 ini_3 line_4))) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findf_159 backwards_0 stringlength_1 col_2 ini_3 line_4 r_1_1) ) ) 
EdFind.reline_155 !backwards_0::B stringlength_1::I !reParser_2 col_3::I ini_4::B line_5 = case backwards_0 (True -> let _x_2_0 = _SystemArray.usize_23 line_5 in EdFind.findb_157 backwards_0 stringlength_1 col_3 ini_4 line_5 (StdList.reverse (StdList.map EdFind.anon_16 (reParser_2 (<{EdFind.c;97;30_156}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)))))) (False -> let _x_2_0 = _SystemArray.usize_23 line_5 in EdFind.findf_159 backwards_0 stringlength_1 col_3 ini_4 line_5 (StdList.map EdFind.anon_16 (reParser_2 (<{EdFind.c;97;30_156}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1))))) 
EdFind.dec_161::I !_vone_0 !x_1::I = <{StdInt.-_7}> x_1 (select _vone_0::<{StdOverloaded.one;}> 0)
EdFind.next_160 !_vone_0 !<{_v+_1}> !backwards_2::B = case backwards_2 (True -> EdFind.dec_161 _vone_0) (False -> EdFind.inc_69 <{_v+_1}> _vone_0) 
EdFind.dec_163::I !x_0::I = <{StdInt.-_7}> x_0 StdInt.one_11
EdFind.inc_164::I !<{_v+_0}> !x_1::I = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_1 StdInt.one_11
EdFind.next_162 !<{_v+_0}> !backwards_1::B = case backwards_1 (True -> EdFind.dec_163) (False -> EdFind.inc_164 <{_v+_0}>) 
EdFind.inc_166::I !x_0::I = <{StdInt.+_6}> x_0 StdInt.one_11
EdFind.next_165 !backwards_0::B = case backwards_0 (True -> EdFind.dec_163) (False -> EdFind.inc_166) 
<{EdFind.singleLineSearch`_22}> !backwards_0::B wraparound_1::B stringlength_2::I !reParser_3 inisel_4::B textlength_5::I ini_6::B !_x_7 <{text`_8}> = case _x_7 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let _x_3_0 = EdLineText.getLine row_2_1 <{text`_8}>, line_3_1 = select _x_3_0::_Tuple2 0, rl_3_2 = EdFind.reline_155 backwards_0 stringlength_2 reParser_3 col_2_0 ini_6 line_3_1 in case (Data.Maybe.isNothing rl_3_2) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_6 False) (False -> False) ) (True -> Data.Maybe.Nothing) (False -> let row_6_0::I = EdFind.next_165 backwards_0 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_5)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_1 (True -> case backwards_0 (True -> <{EdFind.singleLineSearch`_22}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_5 StdInt.one_11))) (select _x_3_0::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_22}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_0::_Tuple2 1)) ) (False -> Data.Maybe.Nothing) ) (False -> <{EdFind.singleLineSearch`_22}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_0::_Tuple2 1)) ) ) (False -> let _x_5_0::I = Data.Maybe.fromJust rl_3_2, scol_5_1 = select _x_5_0::_Tuple2 0 in case (case inisel_4 (True -> case (<{StdInt.==_16}> scol_5_1 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> Data.Maybe.Nothing) (False -> Data.Maybe.Just (EdSelection._Selection (EdPosition._Position scol_5_1 row_2_1) (EdPosition._Position (select _x_5_0::_Tuple2 1) row_2_1))) ) ) ) 
<{EdFind.c;54;38_13}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;54;38_13}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.split_14 !_x_0 = case _x_0 (_predefined._Cons h_1_0 t_1_1 -> _Tuple2 h_1_0 t_1_1) 
<{EdFind.c;54;38_167}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;54;38_167}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.regexpLineSearch !sel_0 !backwards_1::B !wraparound_2::B !ignore_case_3::B !match_words_4::B !search_5 !text_6 = case sel_0 (EdSelection._Selection start_1_0 end_1_1 -> let _x_2_0 = _SystemArray.usize_23 search_5, maybeREParserList_2_1 = StdRegExp.findParser (<{EdFind.c;54;38_167}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)) in case (StdList.isEmpty maybeREParserList_2_1) (True -> Data.Maybe.Nothing) (False -> let _x_4_0 = EdFind.split_14 maybeREParserList_2_1 in case (StdBool.not (StdList.isEmpty (select _x_4_0::_Tuple2 1))) (True -> Data.Maybe.Nothing) (False -> let _x_6_0 = select _x_4_0::_Tuple2 0 in case (StdBool.not (StdList.isEmpty (select _x_6_0::_Tuple2 0))) (True -> Data.Maybe.Nothing) (False -> case (<{EdPosition.==_1}> start_1_0 end_1_1) (True -> <{EdFind.singleLineSearch`_22}> backwards_1 wraparound_2 (_SystemArray.size_20 search_5) (select _x_6_0::_Tuple2 1) (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (EdLineText.textLength text_6) True sel_0 text_6) (False -> <{EdFind.singleLineSearch`_22}> backwards_1 wraparound_2 (_SystemArray.size_20 search_5) (select _x_6_0::_Tuple2 1) (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (EdLineText.textLength text_6) True (update sel_0::EdSelection._Selection [1:update start_1_0::EdPosition._Position [0:EdFind.next_165 backwards_1 (select start_1_0::EdPosition._Position 0)]]) text_6) ) ) ) ) 
<{EdFind.c;165;30_25}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;165;30_25}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.anon_26 !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_1 (_Tuple2 _x_2_0 c_2_1 -> c_2_1) ) 
<{EdFind.col`_29}>::I !_vArray_0 !backwards_1::B stringlength_2::I col_3::I !ini_4::B line_5 = case ini_4 (True -> case backwards_1 (True -> let x_3_0::I = <{StdInt.-_7}> col_3 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_5) stringlength_2 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_3) ) (False -> case backwards_1 (True -> <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 line_5) stringlength_2) (False -> 0) ) 
EdFind.findb_28 !_vArray_0 backwards_1::B stringlength_2::I col_3::I ini_4::B line_5 !_x_6 = case _x_6 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> (<{EdFind.col`_29}> _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5) s_2_0)) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findb_28 _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5 r_1_1) ) ) 
EdFind.findf_27 !_vArray_0 backwards_1::B stringlength_2::I col_3::I ini_4::B line_5 !_x_6 = case _x_6 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> s_2_0 (<{EdFind.col`_29}> _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5))) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findf_27 _vArray_0 backwards_1 stringlength_2 col_3 ini_4 line_5 r_1_1) ) ) 
EdFind.reline_30 !_vArray_0 !backwards_1::B stringlength_2::I !reParser_3 col_4::I ini_5::B line_6 = case backwards_1 (True -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 7 line_6 in EdFind.findb_28 _vArray_0 backwards_1 stringlength_2 col_4 ini_5 line_6 (StdList.reverse (StdList.map EdFind.anon_26 (reParser_3 (<{EdFind.c;165;30_25}> _vArray_0 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)))))) (False -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 7 line_6 in EdFind.findf_27 _vArray_0 backwards_1 stringlength_2 col_4 ini_5 line_6 (StdList.map EdFind.anon_26 (reParser_3 (<{EdFind.c;165;30_25}> _vArray_0 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1))))) 
EdFind.inc_71 !<{_v+_0}> !_vone_1 !x_2 = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.dec_70 !<{_v-_0}> !_vone_1 !x_2 = select <{_v-_0}>::<{StdOverloaded.-;}> 0 x_2 (select _vone_1::<{StdOverloaded.one;}> 0)
EdFind.next_31 !<{_v-_0}> !_vone_1 !<{_v+_2}> !backwards_3::B = case backwards_3 (True -> EdFind.dec_70 <{_v-_0}> _vone_1) (False -> EdFind.inc_71 <{_v+_2}> _vone_1) 
EdFind.dec_169::I !_vone_0 !x_1::I = <{StdInt.-_7}> x_1 (select _vone_0::<{StdOverloaded.one;}> 0)
EdFind.next_168 !_vone_0 !<{_v+_1}> !backwards_2::B = case backwards_2 (True -> EdFind.dec_169 _vone_0) (False -> EdFind.inc_71 <{_v+_1}> _vone_0) 
EdFind.dec_171::I !x_0::I = <{StdInt.-_7}> x_0 StdInt.one_11
EdFind.inc_172::I !<{_v+_0}> !x_1::I = select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_1 StdInt.one_11
EdFind.next_170 !<{_v+_0}> !backwards_1::B = case backwards_1 (True -> EdFind.dec_171) (False -> EdFind.inc_172 <{_v+_0}>) 
EdFind.inc_174::I !x_0::I = <{StdInt.+_6}> x_0 StdInt.one_11
EdFind.next_173 !backwards_0::B = case backwards_0 (True -> EdFind.dec_171) (False -> EdFind.inc_174) 
<{EdFind.singleLineSearch`_32}> !_vArray_0 !_vArray_1 !backwards_2::B wraparound_3::B stringlength_4::I !reParser_5 inisel_6::B textlength_7::I ini_8::B !_x_9 <{text`_10}> = case _x_9 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let _x_3_0 = select _vArray_0::<{_SystemArray.Array;}> 6 <{text`_10}> row_2_1, line_3_1 = select _x_3_0::_Tuple2 0, rl_3_2 = EdFind.reline_30 _vArray_1 backwards_2 stringlength_4 reParser_5 col_2_0 ini_8 line_3_1 in case (Data.Maybe.isNothing rl_3_2) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_8 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_173 backwards_2 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_7)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_3 (True -> case backwards_2 (True -> <{EdFind.singleLineSearch`_32}> _vArray_0 _vArray_1 backwards_2 wraparound_3 stringlength_4 reParser_5 inisel_6 textlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_7 StdInt.one_11))) (select _x_3_0::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_32}> _vArray_0 _vArray_1 backwards_2 wraparound_3 stringlength_4 reParser_5 inisel_6 textlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_0::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_32}> _vArray_0 _vArray_1 backwards_2 wraparound_3 stringlength_4 reParser_5 inisel_6 textlength_7 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_0::_Tuple2 1)) ) ) (False -> let _x_5_0::I = Data.Maybe.fromJust rl_3_2, scol_5_1 = select _x_5_0::_Tuple2 0 in case (case inisel_6 (True -> case (<{StdInt.==_16}> scol_5_1 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position scol_5_1 row_2_1) (EdPosition._Position (select _x_5_0::_Tuple2 1) row_2_1))) (select _x_3_0::_Tuple2 1)) ) ) ) 
<{EdFind.c;122;38_23}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;122;38_23}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.split_24 !_x_0 = case _x_0 (_predefined._Cons h_1_0 t_1_1 -> _Tuple2 h_1_0 t_1_1) 
<{EdFind.c;122;38_175}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;122;38_175}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{EdFind.singleLineSearch`_176}> !_vArray_0 !backwards_1::B wraparound_2::B stringlength_3::I !reParser_4 inisel_5::B textlength_6::I ini_7::B !_x_8 <{text`_9}> = case _x_8 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let _x_3_0 = _SystemArray.uselect_78 <{text`_9}> row_2_1, line_3_1 = select _x_3_0::_Tuple2 0, rl_3_2 = EdFind.reline_30 _vArray_0 backwards_1 stringlength_3 reParser_4 col_2_0 ini_7 line_3_1 in case (Data.Maybe.isNothing rl_3_2) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_7 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_173 backwards_1 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_6)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_2 (True -> case backwards_1 (True -> <{EdFind.singleLineSearch`_176}> _vArray_0 backwards_1 wraparound_2 stringlength_3 reParser_4 inisel_5 textlength_6 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_6 StdInt.one_11))) (select _x_3_0::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_176}> _vArray_0 backwards_1 wraparound_2 stringlength_3 reParser_4 inisel_5 textlength_6 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_0::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_176}> _vArray_0 backwards_1 wraparound_2 stringlength_3 reParser_4 inisel_5 textlength_6 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_0::_Tuple2 1)) ) ) (False -> let _x_5_0::I = Data.Maybe.fromJust rl_3_2, scol_5_1 = select _x_5_0::_Tuple2 0 in case (case inisel_5 (True -> case (<{StdInt.==_16}> scol_5_1 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position scol_5_1 row_2_1) (EdPosition._Position (select _x_5_0::_Tuple2 1) row_2_1))) (select _x_3_0::_Tuple2 1)) ) ) ) 
<{EdFind.c;165;30_179}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;165;30_179}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{EdFind.col`_181}>::I !backwards_0::B stringlength_1::I col_2::I !ini_3::B line_4 = case ini_3 (True -> case backwards_0 (True -> let x_3_0::I = <{StdInt.-_7}> col_2 StdInt.one_11, y_3_1::I = <{StdInt.-_7}> (_SystemArray.size_20 line_4) stringlength_1 in case (<{StdInt.<_17}> x_3_0 y_3_1) (True -> x_3_0) (False -> y_3_1) ) (False -> col_2) ) (False -> case backwards_0 (True -> <{StdInt.-_7}> (_SystemArray.size_20 line_4) stringlength_1) (False -> 0) ) 
EdFind.findb_180 backwards_0::B stringlength_1::I col_2::I ini_3::B line_4 !_x_5 = case _x_5 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> (<{EdFind.col`_181}> backwards_0 stringlength_1 col_2 ini_3 line_4) s_2_0)) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findb_180 backwards_0 stringlength_1 col_2 ini_3 line_4 r_1_1) ) ) 
EdFind.findf_182 backwards_0::B stringlength_1::I col_2::I ini_3::B line_4 !_x_5 = case _x_5 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 s_2_0 f_2_1 -> case (StdBool.not (<{StdInt.<_17}> s_2_0 (<{EdFind.col`_181}> backwards_0 stringlength_1 col_2 ini_3 line_4))) (True -> Data.Maybe.Just (_Tuple2 s_2_0 f_2_1)) (False -> EdFind.findf_182 backwards_0 stringlength_1 col_2 ini_3 line_4 r_1_1) ) ) 
EdFind.reline_178 !backwards_0::B stringlength_1::I !reParser_2 col_3::I ini_4::B line_5 = case backwards_0 (True -> let _x_2_0 = _SystemArray.usize_23 line_5 in EdFind.findb_180 backwards_0 stringlength_1 col_3 ini_4 line_5 (StdList.reverse (StdList.map EdFind.anon_26 (reParser_2 (<{EdFind.c;165;30_179}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)))))) (False -> let _x_2_0 = _SystemArray.usize_23 line_5 in EdFind.findf_182 backwards_0 stringlength_1 col_3 ini_4 line_5 (StdList.map EdFind.anon_26 (reParser_2 (<{EdFind.c;165;30_179}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1))))) 
<{EdFind.singleLineSearch`_177}> !backwards_0::B wraparound_1::B stringlength_2::I !reParser_3 inisel_4::B textlength_5::I ini_6::B !_x_7 <{text`_8}> = case _x_7 (EdSelection._Selection start_1_0 e_1_1 -> case e_1_1 (EdPosition._Position col_2_0 row_2_1 -> let _x_3_0 = _SystemArray.uselect_78 <{text`_8}> row_2_1, line_3_1 = select _x_3_0::_Tuple2 0, rl_3_2 = EdFind.reline_178 backwards_0 stringlength_2 reParser_3 col_2_0 ini_6 line_3_1 in case (Data.Maybe.isNothing rl_3_2) (True -> case (case (<{StdInt.==_16}> row_2_1 (select start_1_0::EdPosition._Position 1)) (True -> <{StdBool.==_3}> ini_6 False) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> let row_6_0::I = EdFind.next_173 backwards_0 row_2_1 in case (case (StdBool.not (<{StdInt.<_17}> row_6_0 textlength_5)) (True -> True) (False -> <{StdInt.<_17}> row_6_0 0) ) (True -> case wraparound_1 (True -> case backwards_0 (True -> <{EdFind.singleLineSearch`_177}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 (<{StdInt.-_7}> textlength_5 StdInt.one_11))) (select _x_3_0::_Tuple2 1)) (False -> <{EdFind.singleLineSearch`_177}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 0)) (select _x_3_0::_Tuple2 1)) ) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) ) (False -> <{EdFind.singleLineSearch`_177}> backwards_0 wraparound_1 stringlength_2 reParser_3 inisel_4 textlength_5 False (EdSelection._Selection start_1_0 (EdPosition._Position 0 row_6_0)) (select _x_3_0::_Tuple2 1)) ) ) (False -> let _x_5_0::I = Data.Maybe.fromJust rl_3_2, scol_5_1 = select _x_5_0::_Tuple2 0 in case (case inisel_4 (True -> case (<{StdInt.==_16}> scol_5_1 (select start_1_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> (select start_1_0::EdPosition._Position 1) row_2_1) (False -> False) ) (False -> False) ) (True -> _Tuple2 Data.Maybe.Nothing (select _x_3_0::_Tuple2 1)) (False -> _Tuple2 (Data.Maybe.Just (EdSelection._Selection (EdPosition._Position scol_5_1 row_2_1) (EdPosition._Position (select _x_5_0::_Tuple2 1) row_2_1))) (select _x_3_0::_Tuple2 1)) ) ) ) 
<{EdFind.regexpLineSearch`}> !sel_0 !backwards_1::B !wraparound_2::B !ignore_case_3::B !match_words_4::B !search_5 !<{text`_6}> = case sel_0 (EdSelection._Selection start_1_0 end_1_1 -> let _x_2_0 = _SystemArray.usize_23 search_5, maybeREParserList_2_1 = StdRegExp.findParser (<{EdFind.c;122;38_175}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)) in case (StdList.isEmpty maybeREParserList_2_1) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (select (_SystemArray.usize_79 <{text`_6}>)::_Tuple2 1)) (False -> let _x_4_0 = EdFind.split_24 maybeREParserList_2_1 in case (StdBool.not (StdList.isEmpty (select _x_4_0::_Tuple2 1))) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (select (_SystemArray.usize_79 <{text`_6}>)::_Tuple2 1)) (False -> let _x_6_0 = select _x_4_0::_Tuple2 0 in case (StdBool.not (StdList.isEmpty (select _x_6_0::_Tuple2 0))) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (select (_SystemArray.usize_79 <{text`_6}>)::_Tuple2 1)) (False -> case (<{EdPosition.==_1}> start_1_0 end_1_1) (True -> let _x_9_0 = _SystemArray.usize_79 <{text`_6}> in <{EdFind.singleLineSearch`_177}> backwards_1 wraparound_2 (_SystemArray.size_20 search_5) (select _x_6_0::_Tuple2 1) (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (select _x_9_0::_Tuple2 0) True sel_0 (select _x_9_0::_Tuple2 1)) (False -> let _x_9_0 = _SystemArray.usize_79 <{text`_6}> in <{EdFind.singleLineSearch`_177}> backwards_1 wraparound_2 (_SystemArray.size_20 search_5) (select _x_6_0::_Tuple2 1) (StdBool.not (<{EdPosition.==_1}> start_1_0 end_1_1)) (select _x_9_0::_Tuple2 0) True (update sel_0::EdSelection._Selection [1:update start_1_0::EdPosition._Position [0:EdFind.next_173 backwards_1 (select start_1_0::EdPosition._Position 0)]]) (select _x_9_0::_Tuple2 1)) ) ) ) ) 
<{EdFind.c;34;26_9}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;34;26_9}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.anon_10 !_x_0 = case _x_0 (_Tuple2 _x_1_0 c_1_1 -> c_1_1) 
EdFind.find_11 start_0 end_1 !_x_2 = case _x_2 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 m_2_0 _x_2_1 -> case _x_2_1 (_Tuple2 s_3_0 f_3_1 -> case (case (<{StdInt.==_16}> s_3_0 (select start_0::EdPosition._Position 0)) (True -> <{StdInt.==_16}> f_3_1 (select end_1::EdPosition._Position 0)) (False -> False) ) (True -> Data.Maybe.Just m_2_0) (False -> Data.Maybe.Nothing) ) ) ) 
EdFind.reline_12 !_vArray_0 start_1 end_2 line_3 !reParser_4 = let _x_1_0 = select _vArray_0::<{_SystemArray.Array;}> 7 line_3 in EdFind.find_11 start_1 end_2 (StdList.map EdFind.anon_10 (reParser_4 (<{EdFind.c;34;26_9}> _vArray_0 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1))))
<{EdFind.c;24;51_6}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;24;51_6}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{EdFind.c;28;38_7}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;28;38_7}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.split_8 !_x_0 = case _x_0 (_predefined._Cons h_1_0 t_1_1 -> _Tuple2 h_1_0 t_1_1) 
<{EdFind.c;28;38_183}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;28;38_183}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{EdFind.c;34;26_185}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;34;26_185}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.reline_184 start_0 end_1 line_2 !reParser_3 = let _x_1_0 = _SystemArray.usize_23 line_2 in EdFind.find_11 start_0 end_1 (StdList.map EdFind.anon_10 (reParser_3 (<{EdFind.c;34;26_185}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1))))
<{EdFind.c;24;51_186}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{EdFind.c;24;51_186}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
EdFind.regexpLineReplace !sel_0 !backwards_1::B !wraparound_2::B !ignore_case_3::B !match_words_4::B !search_5 !replace_6 !line_7 = case sel_0 (EdSelection._Selection start_1_0 end_1_1 -> let _x_2_0 = _SystemArray.usize_23 search_5, maybeREParserList_2_1 = StdRegExp.findParser (<{EdFind.c;28;38_183}> 0 (<{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1) (select _x_2_0::_Tuple2 1)) in case (StdList.isEmpty maybeREParserList_2_1) (True -> Data.Maybe.Nothing) (False -> let _x_4_0 = EdFind.split_8 maybeREParserList_2_1 in case (StdBool.not (StdList.isEmpty (select _x_4_0::_Tuple2 1))) (True -> Data.Maybe.Nothing) (False -> let _x_6_0 = select _x_4_0::_Tuple2 0 in case (StdBool.not (StdList.isEmpty (select _x_6_0::_Tuple2 0))) (True -> Data.Maybe.Nothing) (False -> case (<{EdPosition.==_1}> start_1_0 end_1_1) (True -> Data.Maybe.Nothing) (False -> let reParser_9_0 = select _x_6_0::_Tuple2 1, markedString_9_1 = EdFind.reline_184 start_1_0 end_1_1 line_7 reParser_9_0 in case (Data.Maybe.isNothing markedString_9_1) (True -> Data.Maybe.Nothing) (False -> let _x_11_0 = _SystemArray.usize_23 replace_6, findResult_11_1 = Data.Maybe.fromJust markedString_9_1, massagedResult_11_2 = StdRegExp.massageResult findResult_11_1, _x_11_3 = StdRegExp.replaceOne_RE (<{EdFind.c;24;51_186}> 0 (<{StdInt.-_7}> (select _x_11_0::_Tuple2 0) 1) (select _x_11_0::_Tuple2 1)) massagedResult_11_2 in case (Data.Maybe.isJust (select _x_11_3::_Tuple2 0)) (True -> Data.Maybe.Nothing) (False -> Data.Maybe.Just (StdList.toString_79 (Data.Maybe.fromJust (select _x_11_3::_Tuple2 1)))) ) ) ) ) ) ) 


|| Converted Records
:: <{EdFind.gEq_s;}> = {!EdFind.gEq_s}

:: <{EdFind.gEq_ss;}> = {!EdFind.gEq_ss}

:: <{EdFind.gEq_sss;}> = {!EdFind.gEq_sss}

:: <{EdFind.gEq_ssss;}> = {!EdFind.gEq_ssss}

:: <{EdFind.gEq_sssss;}> = {!EdFind.gEq_sssss}

:: <{EdFind.gEq_ssssss;}> = {!EdFind.gEq_ssssss}

:: <{EdFind.gEq_sssssss;}> = {!EdFind.gEq_sssssss}

:: <{EdFind.gEq_ssssssss;}> = {!EdFind.gEq_ssssssss}

:: <{EdFind.gEq_sssssssss;}> = {!EdFind.gEq_sssssssss}

:: <{EdFind.bimap_s;}> = {EdFind.bimap_s}

:: <{EdFind.bimap_ss;}> = {EdFind.bimap_ss}

:: <{EdFind.bimap_sss;}> = {EdFind.bimap_sss}

