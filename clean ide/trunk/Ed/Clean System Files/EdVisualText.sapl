|| ?module? EdVisualText


EdVisualText.drawTextLines_28 lineHeight_0::I font_1 !lastLine_2::I !f_3::I y_4::I text_5 !picture_6 = case (<{StdInt.<_17}> lastLine_2 f_3) (True -> picture_6) (False -> let _x_2_0 = EdLineText.getLineC f_3 text_5 in EdVisualText.drawTextLines_28 lineHeight_0 font_1 lastLine_2 (<{StdInt.+_6}> f_3 StdInt.one_11) (<{StdInt.+_6}> y_4 lineHeight_0) (select _x_2_0::_Tuple2 1) (EdTab.tabDrawStringC (StdIOBasic._Point2 0 y_4) (select _x_2_0::_Tuple2 0) font_1 picture_6)) 
EdVisualText.computeBaseLine::I !lineNr_0::I !_x_1 = case _x_1 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> <{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.*_9}> lineNr_0 lineHeight_1_1) (select metrics_1_2::StdPictureDef._FontMetrics 0)) (select metrics_1_2::StdPictureDef._FontMetrics 2)) 
EdVisualText.drawLinesC_33 !firstLine_0::I !lastLine_1::I !font_2 text_3 !picture_4 = case font_2 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> EdVisualText.drawTextLines_28 lineHeight_1_1 font_2 lastLine_1 firstLine_0 (EdVisualText.computeBaseLine firstLine_0 font_2) text_3 picture_4) 
EdVisualText.drawTextLines_29 lineHeight_0::I font_1 _x_2::I !_x_3 !picture_4 = case _x_3 (StrictList.SNil -> picture_4) (StrictList.SCons string_1_0 strings_1_1 -> EdVisualText.drawTextLines_29 lineHeight_0 font_1 (<{StdInt.+_6}> _x_2 lineHeight_0) strings_1_1 (EdTab.tabDrawString (StdIOBasic._Point2 0 _x_2) string_1_0 font_1 picture_4)) 
EdVisualText.drawLinesP_34 !firstLine_0::I !lastLine_1::I !font_2 !text_3 !picture_4 = case font_2 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> EdVisualText.drawTextLines_29 lineHeight_1_1 font_2 (EdVisualText.computeBaseLine firstLine_0 font_2) (select (EdLineText.getLines firstLine_0 lastLine_1 text_3)::_Tuple2 0) picture_4) 
EdVisualText.drawLines_32 !f_0::I !l_1::I !i_2 t_3 !p_4 = case i_2 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> case showSyntax_1_8 (True -> EdVisualText.drawLinesC_33 f_0 l_1 i_2 t_3 p_4) (False -> EdVisualText.drawLinesP_34 f_0 l_1 i_2 t_3 p_4) ) 
EdVisualText.drawBackground_31 colours_0 !_x_1 !r_2 = case _x_1 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> case r_2 (StdIOBasic._Rectangle corner1_2_0 corner2_2_1 -> case corner1_2_0 (StdIOBasic._Point2 x1_3_0 y1_3_1 -> case corner2_2_1 (StdIOBasic._Point2 x2_4_0 y2_4_1 -> let margin_5_0::I = <{StdInt.*_9}> marginWidth_1_5 charWidth_1_4 in case (case (StdBool.not (<{StdInt.<_17}> 0 marginWidth_1_5)) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> margin_5_0 x2_4_0)) ) (True -> StdFunc.seq (_predefined._Cons (StdPicture.setPenBack (select colours_0::EdMonad._SyntaxColours 1)) (_predefined._Cons (StdPicture.unfill_103 r_2) _predefined._Nil))) (False -> case (StdBool.not (<{StdInt.<_17}> x1_3_0 margin_5_0)) (True -> StdFunc.seq (_predefined._Cons (StdPicture.setPenBack (select colours_0::EdMonad._SyntaxColours 2)) (_predefined._Cons (StdPicture.unfill_103 r_2) _predefined._Nil))) (False -> StdFunc.seq (_predefined._Cons (StdPicture.setPenBack (select colours_0::EdMonad._SyntaxColours 2)) (_predefined._Cons (StdPicture.unfill_103 (update r_2::StdIOBasic._Rectangle [0:update (select r_2::StdIOBasic._Rectangle 0)::StdIOBasic._Point2 [0:margin_5_0]])) (_predefined._Cons (StdPicture.setPenBack (select colours_0::EdMonad._SyntaxColours 1)) (_predefined._Cons (StdPicture.unfill_103 (update r_2::StdIOBasic._Rectangle [1:update (select r_2::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 [0:margin_5_0]])) _predefined._Nil))))) ) ) ) ) ) 
EdVisualText.vUR_30 thefont_0 syntaxColours_1 font_2 lineHeight_3::I text_4 !y1_5::I !y2_6::I !x1_7::I !x2_8::I !pict_9 = let x_1_0 = -1, <{x1`_1_1}>::I = <{EdVisualText._c;48;16_123}> (<{StdInt.<_17}> x1_7 x2_8) x1_7 x2_8, <{y1`_1_2}>::I = <{EdVisualText._c;48;16_122}> (<{StdInt.<_17}> y1_5 y2_6) y1_5 y2_6, x_1_3::I = -1, <{x2`_1_4}>::I = <{EdVisualText._c;51;16_121}> (<{StdInt.<_17}> x1_7 x2_8) x2_8 x1_7, <{y2`_1_5}>::I = <{EdVisualText._c;51;16_120}> (<{StdInt.<_17}> y1_5 y2_6) y2_6 y1_5, <{rectangle`_1_6}>::I = StdIOBasic._Rectangle (StdIOBasic._Point2 (<{EdVisualText._c;51;16_118}> (<{StdInt.<_17}> x_1_0 <{x1`_1_1}>) <{x1`_1_1}> x_1_0) <{y1`_1_2}>) (StdIOBasic._Point2 (<{EdVisualText._c;51;16_119}> (<{StdInt.<_17}> x_1_3 <{x2`_1_4}>) <{x2`_1_4}> x_1_3) <{y2`_1_5}>) in StdPicture.appClipPicture (StdPicture.toRegion_49 <{rectangle`_1_6}>) (StdFunc.seq (_predefined._Cons (StdPicture.setPenFont thefont_0) (_predefined._Cons (EdVisualText.drawBackground_31 syntaxColours_1 font_2 <{rectangle`_1_6}>) (_predefined._Cons (EdVisualText.drawLines_32 (EdLineText.validateLineNr (<{StdInt./_10}> <{y1`_1_2}> lineHeight_3) text_4) (EdLineText.validateLineNr (<{StdInt./_10}> <{y2`_1_5}> lineHeight_3) text_4) font_2 text_4) _predefined._Nil)))) pict_9
<{EdVisualText._c;48;16_123}>::I !_x_0::B x1_1::I x2_2::I = case _x_0 (True -> x1_1) (_ -> x2_2)
<{EdVisualText._c;48;16_122}>::I !_x_0::B y1_1::I y2_2::I = case _x_0 (True -> y1_1) (_ -> y2_2)
<{EdVisualText._c;51;16_121}>::I !_x_0::B x2_1::I x1_2::I = case _x_0 (True -> x2_1) (_ -> x1_2)
<{EdVisualText._c;51;16_120}>::I !_x_0::B y2_1::I y1_2::I = case _x_0 (True -> y2_1) (_ -> y1_2)
<{EdVisualText._c;51;16_119}>::I !_x_0::B <{x2`_1}>::I x_2::I = case _x_0 (True -> <{x2`_1}>) (_ -> x_2)
<{EdVisualText._c;51;16_118}>::I !_x_0::B <{x1`_1}>::I x_2::I = case _x_0 (True -> <{x1`_1}>) (_ -> x_2)
EdVisualText.vUpdateRectangle text_0 !font_1 !rectangle_2 = case font_1 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> case rectangle_2 (StdIOBasic._Rectangle corner1_2_0 corner2_2_1 -> case corner1_2_0 (StdIOBasic._Point2 x1_3_0 y1_3_1 -> case corner2_2_1 (StdIOBasic._Point2 x2_4_0 y2_4_1 -> EdVisualText.vUR_30 thefont_1_0 syntaxColours_1_9 font_1 lineHeight_1_1 text_0 y1_3_1 y2_4_1 x1_3_0 x2_4_0) ) ) ) 
EdVisualText.seqmap f_0 !_x_1 !e_2 = case _x_1 (_predefined._Nil -> e_2) (_predefined._Cons h_1_0 t_1_1 -> let !e_2_0 = f_0 h_1_0 e_2 in EdVisualText.seqmap f_0 t_1_1 e_2_0) 
EdVisualText.vUpdateText !font_0 !text_1 !frame_2 !rectangles_3 = EdVisualText.seqmap (EdVisualText.vUpdateRectangle text_1 font_0) rectangles_3
EdVisualText.anon_53 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_52 ma_0 !mb_1 state_2 = mb_1 (select (ma_0 state_2)::_Tuple2 1)
EdVisualText.anon_51 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_50 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_49 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_48 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_40 drawFun_0 window_1 = EdMonad.appEnv (StdPSt.appPIO (StdWindow.appWindowPicture window_1 drawFun_0))
EdVisualText.anon_103 ma_0 drawFun_1 state_2 = let _x_1_0 = ma_0 state_2 in EdVisualText.anon_40 drawFun_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vDraw drawFun_0 = EdVisualText.anon_103 EdMonad.getWindowId drawFun_0
EdVisualText.width_16::I !_vArray_0 !charWidth_1::I s_2 = <{StdInt.*_9}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_2) charWidth_1
EdVisualText.virtualDraw_17::I tabWidth_0::I !_x_1 _x_2::I = case _x_1 (_predefined._Nil -> 0) (_predefined._Cons w_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{StdInt.+_6}> _x_2 w_1_0) (_ -> EdVisualText.virtualDraw_17 tabWidth_0 _x_1_1 (<{StdInt.*_9}> tabWidth_0 (<{StdInt.+_6}> (<{StdInt./_10}> (<{StdInt.+_6}> _x_2 w_1_0) tabWidth_0) StdInt.one_11)))) 
EdVisualText.width_104::I !charWidth_0::I !s_1 = <{StdInt.*_9}> (_SystemArray.size_20 s_1) charWidth_0
EdVisualText.tabStringWidth::I !startX_0::I !strings_1 !_x_2 = case _x_2 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> let x_2_0::I = 1 in <{StdInt.-_7}> (EdVisualText.virtualDraw_17 (<{StdInt.*_9}> (<{EdVisualText._c;51;16_124}> (<{StdInt.<_17}> x_2_0 tabSize_1_3) tabSize_1_3 x_2_0) charWidth_1_4) (StdList.map (EdVisualText.width_104 charWidth_1_4) strings_1) startX_0) startX_0) 
<{EdVisualText._c;51;16_124}>::I !_x_0::B tabSize_1::I x_2::I = case _x_0 (True -> tabSize_1) (_ -> x_2)
EdVisualText.positionToPoint !_x_0 !text_1 !font_2 = case _x_0 (EdPosition._Position col_1_0 row_1_1 -> StdIOBasic._Point2 (EdVisualText.tabStringWidth 0 (EdTab.splitAtTabs (<{StdString.%_10}> (select (EdLineText.getLine row_1_1 text_1)::_Tuple2 0) (_Tuple2 0 (<{StdInt.-_7}> col_1_0 1)))) font_2) (<{StdInt.*_9}> (select font_2::EdMonad._FontInfo 1) row_1_1)) 
EdVisualText.anon_35 position_0 !numLines_1::I text_2 frame_3 font_4 = case (StdBool.not (<{StdInt.==_16}> numLines_1 0)) (True -> let point_2_0::I = EdVisualText.positionToPoint position_0 text_2 font_4, x_2_1::I = select (select frame_3::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 1, y_2_2 = <{StdInt.+_6}> (select point_2_0::StdIOBasic._Point2 1) (<{StdInt.*_9}> (select font_4::EdMonad._FontInfo 1) numLines_1) in EdVisualText.vDraw (EdVisualText.vUpdateRectangle text_2 font_4 (StdIOBasic._Rectangle (StdIOBasic._Point2 (select (select frame_3::StdIOBasic._Rectangle 0)::StdIOBasic._Point2 0) (select point_2_0::StdIOBasic._Point2 1)) (StdIOBasic._Point2 (select (select frame_3::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 0) (<{EdVisualText._c;48;16_125}> (<{StdInt.<_17}> x_2_1 y_2_2) x_2_1 y_2_2))))) (False -> EdVisualText.vDraw (EdVisualText.vUpdateRectangle text_2 font_4 (StdIOBasic._Rectangle (StdIOBasic._Point2 (select (select frame_3::StdIOBasic._Rectangle 0)::StdIOBasic._Point2 0) (select (EdVisualText.positionToPoint position_0 text_2 font_4)::StdIOBasic._Point2 1)) (StdIOBasic._Point2 (select (select frame_3::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 0) (select (select frame_3::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 1))))) 
<{EdVisualText._c;48;16_125}>::I !_x_0::B x_1::I y_2::I = case _x_0 (True -> x_1) (_ -> y_2)
EdVisualText.anon_105 ma_0 position_1 !numLines_2::I text_3 frame_4 state_5 = let _x_1_0 = ma_0 state_5 in EdVisualText.anon_35 position_1 numLines_2 text_3 frame_4 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_36 position_0 numLines_1::I text_2 frame_3 = EdVisualText.anon_105 EdMonad.getFontInfo position_0 numLines_1 text_2 frame_3
EdVisualText.anon_47 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_21 window_0 = EdMonad.accEnv (StdPSt.accPIO (StdWindow.getWindowViewFrame window_0))
EdVisualText.anon_106 ma_0 state_1 = let _x_1_0 = ma_0 state_1 in EdVisualText.anon_21 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.getViewFrame = EdVisualText.anon_106 EdMonad.getWindowId
EdVisualText.anon_107 ma_0 position_1 !numLines_2::I text_3 state_4 = let _x_1_0 = ma_0 state_4 in EdVisualText.anon_36 position_1 numLines_2 text_3 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_37 position_0 numLines_1::I text_2 = EdVisualText.anon_107 EdVisualText.getViewFrame position_0 numLines_1 text_2
EdVisualText.anon_108 ma_0 position_1 !numLines_2::I state_3 = let _x_1_0 = ma_0 state_3 in EdVisualText.anon_37 position_1 numLines_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vTextUpdate !position_0 numLines_1::I = case position_0 (EdPosition._Position col_1_0 row_1_1 -> EdVisualText.anon_108 EdMonad.getText position_0 numLines_1) 
EdVisualText.anon_46 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_45 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_44 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_43 x_0 state_1 = _Tuple2 x_0 state_1
EdVisualText.anon_18 MAX_L_0::I text_1 font_2 lineNumbers_3::B = EdVisualText.anon_43 (StdIOBasic._Rectangle (StdIOBasic._Point2 (<{EdVisualText._if;48;26_126}> lineNumbers_3 font_2) 0) (StdIOBasic._Point2 (<{StdInt.*_9}> (select font_2::EdMonad._FontInfo 4) MAX_L_0) (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.*_9}> (select font_2::EdMonad._FontInfo 1) (EdLineText.textLength text_1)) (select (select font_2::EdMonad._FontInfo 2)::StdPictureDef._FontMetrics 2)) (select (select font_2::EdMonad._FontInfo 2)::StdPictureDef._FontMetrics 1))))
<{EdVisualText._if;48;26_126}>::I !lineNumbers_0::B font_1 = case lineNumbers_0 (True -> <{StdInt.*_9}> (select (select font_1::EdMonad._FontInfo 2)::StdPictureDef._FontMetrics 3) -5) (_ -> -4)
EdVisualText.anon_109 ma_0 MAX_L_1::I text_2 font_3 state_4 = let _x_1_0 = ma_0 state_4 in EdVisualText.anon_18 MAX_L_1 text_2 font_3 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_19 MAX_L_0::I text_1 font_2 = EdVisualText.anon_109 EdMonad.getLineNumbers MAX_L_0 text_1 font_2
EdVisualText.anon_110 ma_0 MAX_L_1::I text_2 state_3 = let _x_1_0 = ma_0 state_3 in EdVisualText.anon_19 MAX_L_1 text_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_20 MAX_L_0::I text_1 = EdVisualText.anon_110 EdMonad.getFontInfo MAX_L_0 text_1
EdVisualText.anon_111 ma_0 MAX_L_1::I state_2 = let _x_1_0 = ma_0 state_2 in EdVisualText.anon_20 MAX_L_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.computeViewDomain = EdVisualText.anon_111 EdMonad.getText 320
EdVisualText.my_set_view_domain_39 !window_0 viewDomain_1 !_x_2 = case _x_2 (_Tuple2 editState_1_0 pState_1_1 -> let !pState_2_0 = StdPSt.appPIO (StdWindow.setWindowViewDomain window_0 viewDomain_1) pState_1_1, !pState_2_1 = StdPSt.appPIO (StdWindow.updateWindow window_0 Data.Maybe.Nothing) pState_2_0 in _Tuple2 StdMisc.undef (_Tuple2 editState_1_0 pState_2_1)) 
EdVisualText.monad_38 !_x_0 = case _x_0 (_Tuple2 editState_1_0 pState_1_1 -> let !_x_2_0 = EdMonad.getWindowId (_Tuple2 editState_1_0 pState_1_1), !_x_2_1 = StdPSt.accPIO (StdWindow.getWindowViewDomain window_2_3) (select _x_2_4::_Tuple2 1), maybeOldViewDomain_2_2 = select _x_2_1::_Tuple2 0, window_2_3 = select _x_2_0::_Tuple2 0, _x_2_4 = select _x_2_0::_Tuple2 1 in case (Data.Maybe.isNothing maybeOldViewDomain_2_2) (True -> StdMisc.abort "vResetViewDomain (EdVisualText.icl): unknown window id") (False -> let !oldViewDomain_4_0 = Data.Maybe.fromJust maybeOldViewDomain_2_2, !_x_4_1 = EdVisualText.computeViewDomain (_Tuple2 (select _x_2_4::_Tuple2 0) (select _x_2_1::_Tuple2 1)), viewDomain_4_2 = select _x_4_1::_Tuple2 0 in case (<{StdIOBasic.==_25}> viewDomain_4_2 oldViewDomain_4_0) (True -> let !pState_6_0 = StdPSt.appPIO (StdWindow.updateWindow window_2_3 Data.Maybe.Nothing) (select _x_6_1::_Tuple2 1), _x_6_1 = select _x_4_1::_Tuple2 1 in _Tuple2 StdMisc.undef (_Tuple2 (select _x_6_1::_Tuple2 0) pState_6_0)) (False -> let !_x_6_0 = EdVisualText.my_set_view_domain_39 window_2_3 viewDomain_4_2 (_Tuple2 (select _x_6_2::_Tuple2 0) (select _x_6_2::_Tuple2 1)), _x_6_1 = select _x_6_0::_Tuple2 1, _x_6_2 = select _x_4_1::_Tuple2 1 in _Tuple2 (select _x_6_0::_Tuple2 0) (_Tuple2 (select _x_6_1::_Tuple2 0) (select _x_6_1::_Tuple2 1))) ) ) 
EdVisualText.vResetViewDomain = EdVisualText.monad_38
EdVisualText.anon_22 position_0 textFragment_1 text_2 = let _x_1_0 = EdText.insertText position_0 textFragment_1 text_2, fin_1_1 = select _x_1_0::_Tuple2 0 in EdVisualText.anon_52 (EdMonad.setText (select _x_1_0::_Tuple2 1)) (<{EdVisualText._if;35;40_127}> (Data.Maybe.isNothing fin_1_1) fin_1_1)
<{EdVisualText._if;35;40_127}> !_x_0::B fin_1 = case _x_0 (True -> EdVisualText.vResetViewDomain) (_ -> let _x_1_0::I = Data.Maybe.fromJust fin_1, beg_1_1 = select _x_1_0::_Tuple2 0 in EdVisualText.vTextUpdate (EdPosition._Position 0 beg_1_1) (<{StdInt.+_6}> (<{StdInt.-_7}> (select _x_1_0::_Tuple2 1) beg_1_1) 1))
EdVisualText.anon_112 !ma_0 !position_1 !textFragment_2 state_3 = let _x_1_0 = ma_0 state_3 in EdVisualText.anon_22 position_1 textFragment_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vInsertText position_0 textFragment_1 = EdVisualText.anon_112 EdMonad.getText position_0 textFragment_1
EdVisualText.anon_55 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_54 ma_0 !mb_1 state_2 = mb_1 (select (ma_0 state_2)::_Tuple2 1)
EdVisualText.vResetViewDomain_24 !_x_0 = case _x_0 (_Tuple2 editState_1_0 pState_1_1 -> let !_x_2_0 = EdMonad.getWindowId (_Tuple2 editState_1_0 pState_1_1), !_x_2_1 = StdPSt.accPIO (StdWindow.getWindowViewDomain window_2_3) (select _x_2_4::_Tuple2 1), maybeOldViewDomain_2_2 = select _x_2_1::_Tuple2 0, window_2_3 = select _x_2_0::_Tuple2 0, _x_2_4 = select _x_2_0::_Tuple2 1 in case (Data.Maybe.isNothing maybeOldViewDomain_2_2) (True -> StdMisc.abort "vResetViewDomain (EdVisualText.icl): unknown window id") (False -> let !oldViewDomain_4_0 = Data.Maybe.fromJust maybeOldViewDomain_2_2, !_x_4_1 = EdVisualText.computeViewDomain (_Tuple2 (select _x_2_4::_Tuple2 0) (select _x_2_1::_Tuple2 1)), viewDomain_4_2 = select _x_4_1::_Tuple2 0 in case (<{StdIOBasic.==_25}> viewDomain_4_2 oldViewDomain_4_0) (True -> let !pState_6_0 = StdPSt.appPIO (StdWindow.updateWindow window_2_3 Data.Maybe.Nothing) (select _x_6_1::_Tuple2 1), _x_6_1 = select _x_4_1::_Tuple2 1 in _Tuple2 StdMisc.undef (_Tuple2 (select _x_6_1::_Tuple2 0) pState_6_0)) (False -> let !pState_6_0 = StdPSt.appPIO (StdWindow.setWindowViewDomain window_2_3 viewDomain_4_2) (select _x_6_1::_Tuple2 1), _x_6_1 = select _x_4_1::_Tuple2 1 in _Tuple2 StdMisc.undef (_Tuple2 (select _x_6_1::_Tuple2 0) pState_6_0)) ) ) 
EdVisualText.anon_113 !ma_0 state_1 = EdVisualText.vResetViewDomain_24 (select (ma_0 state_1)::_Tuple2 1)
EdVisualText.anon_23 textFragment_0 text_1 = EdVisualText.anon_113 (EdMonad.setText (EdLineText.appendLines textFragment_0 text_1))
EdVisualText.anon_114 !ma_0 !textFragment_1 state_2 = let _x_1_0 = ma_0 state_2 in EdVisualText.anon_23 textFragment_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vAppendLines textFragment_0 = EdVisualText.anon_114 EdMonad.getText textFragment_0
EdVisualText.anon_57 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_56 ma_0 !mb_1 state_2 = mb_1 (select (ma_0 state_2)::_Tuple2 1)
EdVisualText.vResetViewDomain_26 !_x_0 = case _x_0 (_Tuple2 editState_1_0 pState_1_1 -> let !_x_2_0 = EdMonad.getWindowId (_Tuple2 editState_1_0 pState_1_1), !_x_2_1 = StdPSt.accPIO (StdWindow.getWindowViewDomain window_2_3) (select _x_2_4::_Tuple2 1), maybeOldViewDomain_2_2 = select _x_2_1::_Tuple2 0, window_2_3 = select _x_2_0::_Tuple2 0, _x_2_4 = select _x_2_0::_Tuple2 1 in case (Data.Maybe.isNothing maybeOldViewDomain_2_2) (True -> StdMisc.abort "vResetViewDomain (EdVisualText.icl): unknown window id") (False -> let !oldViewDomain_4_0 = Data.Maybe.fromJust maybeOldViewDomain_2_2, !_x_4_1 = EdVisualText.computeViewDomain (_Tuple2 (select _x_2_4::_Tuple2 0) (select _x_2_1::_Tuple2 1)), viewDomain_4_2 = select _x_4_1::_Tuple2 0 in case (<{StdIOBasic.==_25}> viewDomain_4_2 oldViewDomain_4_0) (True -> let !pState_6_0 = StdPSt.appPIO (StdWindow.updateWindow window_2_3 Data.Maybe.Nothing) (select _x_6_1::_Tuple2 1), _x_6_1 = select _x_4_1::_Tuple2 1 in _Tuple2 StdMisc.undef (_Tuple2 (select _x_6_1::_Tuple2 0) pState_6_0)) (False -> let !pState_6_0 = StdPSt.appPIO (StdWindow.setWindowViewDomain window_2_3 viewDomain_4_2) (select _x_6_1::_Tuple2 1), _x_6_1 = select _x_4_1::_Tuple2 1 in _Tuple2 StdMisc.undef (_Tuple2 (select _x_6_1::_Tuple2 0) pState_6_0)) ) ) 
EdVisualText.anon_115 !ma_0 state_1 = EdVisualText.vResetViewDomain_26 (select (ma_0 state_1)::_Tuple2 1)
EdVisualText.anon_25 textFragment_0 text_1 = EdVisualText.anon_115 (EdMonad.setText (EdText.appendText textFragment_0 text_1))
EdVisualText.anon_116 !ma_0 !textFragment_1 state_2 = let _x_1_0 = ma_0 state_2 in EdVisualText.anon_25 textFragment_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vAppendText textFragment_0 = EdVisualText.anon_116 EdMonad.getText textFragment_0
EdVisualText.anon_59 ma_0 !f_1 state_2 = let _x_1_0 = ma_0 state_2 in f_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.anon_58 ma_0 !mb_1 state_2 = mb_1 (select (ma_0 state_2)::_Tuple2 1)
EdVisualText.anon_27 selection_0 text_1 = let _x_1_0 = EdText.removeText selection_0 text_1, fin_1_1 = select _x_1_0::_Tuple2 0 in EdVisualText.anon_58 (EdMonad.setText (select _x_1_0::_Tuple2 1)) (<{EdVisualText._if;35;40_128}> (Data.Maybe.isNothing fin_1_1) fin_1_1)
<{EdVisualText._if;35;40_128}> !_x_0::B fin_1 = case _x_0 (True -> EdVisualText.vResetViewDomain) (_ -> let _x_1_0::I = Data.Maybe.fromJust fin_1, beg_1_1 = select _x_1_0::_Tuple2 0 in EdVisualText.vTextUpdate (EdPosition._Position 0 beg_1_1) (<{StdInt.+_6}> (<{StdInt.-_7}> (select _x_1_0::_Tuple2 1) beg_1_1) 1))
EdVisualText.anon_117 !ma_0 !selection_1 state_2 = let _x_1_0 = ma_0 state_2 in EdVisualText.anon_27 selection_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
EdVisualText.vRemoveText !selection_0 = case selection_0 (EdSelection._Selection start_1_0 end_1_1 -> case start_1_0 (EdPosition._Position col1_2_0 row1_2_1 -> case end_1_1 (EdPosition._Position col2_3_0 row2_3_1 -> EdVisualText.anon_117 EdMonad.getText selection_0) ) ) 
EdVisualText.binarySearch_41::I font_0 x_1::I !left_2::I !right_3::I splitLine_4 = case (<{StdInt.==_16}> left_2 right_3) (True -> left_2) (False -> let middle_2_0::I = <{StdInt.+_6}> left_2 (<{StdInt./_10}> (<{StdInt.-_7}> right_3 left_2) 2) in case (<{StdInt.<_17}> x_1 (<{StdInt./_10}> (<{StdInt.+_6}> (EdVisualText.tabStringWidth 0 (EdTab.tabTake middle_2_0 splitLine_4) font_0) (EdVisualText.tabStringWidth 0 (EdTab.tabTake (<{StdInt.+_6}> middle_2_0 1) splitLine_4) font_0)) 2)) (True -> EdVisualText.binarySearch_41 font_0 x_1 left_2 middle_2_0 splitLine_4) (False -> EdVisualText.binarySearch_41 font_0 x_1 (<{StdInt.+_6}> middle_2_0 1) right_3 splitLine_4) ) 
EdVisualText.findColumn_42::I !x_0::I row_1::I text_2 font_3 = case (<{StdInt.<_17}> x_0 0) (True -> 0) (False -> let _x_2_0 = EdLineText.getLine row_1 text_2, textLine_2_1 = select _x_2_0::_Tuple2 0, splitLine_2_2 = EdTab.splitAtTabs textLine_2_1 in case (<{StdInt.<_17}> (EdVisualText.tabStringWidth 0 splitLine_2_2 font_3) x_0) (True -> _SystemArray.size_20 textLine_2_1) (False -> EdVisualText.binarySearch_41 font_3 x_0 0 (_SystemArray.size_20 textLine_2_1) splitLine_2_2) ) 
EdVisualText.pointToPosition !_x_0 !text_1 !font_2 = case _x_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> let lastLineNr_2_0::I = <{StdInt.-_7}> (EdLineText.textLength text_1) 1, row_2_1::I = <{StdInt./_10}> y_1_1 (select font_2::EdMonad._FontInfo 1) in case (<{StdInt.<_17}> lastLineNr_2_0 row_2_1) (True -> EdPosition._Position (_SystemArray.size_20 (select (EdLineText.getLine lastLineNr_2_0 text_1)::_Tuple2 0)) lastLineNr_2_0) (False -> case (<{StdInt.<_17}> row_2_1 0) (True -> EdPosition._Position 0 0) (False -> EdPosition._Position (EdVisualText.findColumn_42 x_1_0 row_2_1 text_1 font_2) row_2_1) ) ) 


|| Converted Records
:: <{EdVisualText.gEq_s;}> = {!EdVisualText.gEq_s}

:: <{EdVisualText.gEq_ss;}> = {!EdVisualText.gEq_ss}

:: <{EdVisualText.gEq_sss;}> = {!EdVisualText.gEq_sss}

:: <{EdVisualText.gEq_ssss;}> = {!EdVisualText.gEq_ssss}

:: <{EdVisualText.gEq_sssss;}> = {!EdVisualText.gEq_sssss}

:: <{EdVisualText.gEq_ssssss;}> = {!EdVisualText.gEq_ssssss}

:: <{EdVisualText.gEq_sssssss;}> = {!EdVisualText.gEq_sssssss}

:: <{EdVisualText.gEq_ssssssss;}> = {!EdVisualText.gEq_ssssssss}

:: <{EdVisualText.gEq_sssssssss;}> = {!EdVisualText.gEq_sssssssss}

:: <{EdVisualText.bimap_s;}> = {EdVisualText.bimap_s}

:: <{EdVisualText.bimap_ss;}> = {EdVisualText.bimap_ss}

:: <{EdVisualText.bimap_sss;}> = {EdVisualText.bimap_sss}

