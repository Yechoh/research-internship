|| ?module? EdTab


<{EdTab.splitAtTabs`_5}> !<{_v%_0}> !_vArray_1 string_2 !max_3::I start_4::I !current_5::I = case (<{StdInt.<_17}> max_3 current_5) (True -> _predefined._Cons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_4 max_3)) _predefined._Nil) (False -> case (<{StdChar.==_18}> (select _vArray_1::<{_SystemArray.Array;}> 3 string_2 current_5) '\t') (True -> let new_3_0::I = <{StdInt.+_6}> current_5 1 in _predefined._Cons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_2 (_Tuple2 start_4 (<{StdInt.-_7}> current_5 1))) (<{EdTab.splitAtTabs`_5}> <{_v%_0}> _vArray_1 string_2 max_3 new_3_0 new_3_0)) (False -> <{EdTab.splitAtTabs`_5}> <{_v%_0}> _vArray_1 string_2 max_3 start_4 (<{StdInt.+_6}> current_5 1)) ) 
<{EdTab.splitAtTabs`_69}> !_vArray_0 string_1 !max_2::I start_3::I !current_4::I = case (<{StdInt.<_17}> max_2 current_4) (True -> _predefined._Cons (<{StdString.%_10}> string_1 (_Tuple2 start_3 max_2)) _predefined._Nil) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 string_1 current_4) '\t') (True -> let new_3_0::I = <{StdInt.+_6}> current_4 1 in _predefined._Cons (<{StdString.%_10}> string_1 (_Tuple2 start_3 (<{StdInt.-_7}> current_4 1))) (<{EdTab.splitAtTabs`_69}> _vArray_0 string_1 max_2 new_3_0 new_3_0)) (False -> <{EdTab.splitAtTabs`_69}> _vArray_0 string_1 max_2 start_3 (<{StdInt.+_6}> current_4 1)) ) 
<{EdTab.splitAtTabs`_70}> string_0 !max_1::I start_2::I !current_3::I = case (<{StdInt.<_17}> max_1 current_3) (True -> _predefined._Cons (<{StdString.%_10}> string_0 (_Tuple2 start_2 max_1)) _predefined._Nil) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_0 current_3) '\t') (True -> let new_3_0::I = <{StdInt.+_6}> current_3 1 in _predefined._Cons (<{StdString.%_10}> string_0 (_Tuple2 start_2 (<{StdInt.-_7}> current_3 1))) (<{EdTab.splitAtTabs`_70}> string_0 max_1 new_3_0 new_3_0)) (False -> <{EdTab.splitAtTabs`_70}> string_0 max_1 start_2 (<{StdInt.+_6}> current_3 1)) ) 
EdTab.splitAtTabs !string_0 = <{EdTab.splitAtTabs`_70}> string_0 (<{StdInt.-_7}> (_SystemArray.size_20 string_0) 1) 0 0
EdTab.tabTake !_x_0::I _x_1 = case _x_0 (0 -> _predefined._Cons "" _predefined._Nil) (_ -> case _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons string_1_0 strings_1_1 -> let len_2_0::I = _SystemArray.size_20 string_1_0 in case (StdBool.not (<{StdInt.<_17}> len_2_0 _x_0)) (True -> _predefined._Cons (<{StdString.%_10}> string_1_0 (_Tuple2 0 (<{StdInt.-_7}> _x_0 1))) _predefined._Nil) (False -> _predefined._Cons string_1_0 (EdTab.tabTake (<{StdInt.-_7}> (<{StdInt.-_7}> _x_0 len_2_0) 1) strings_1_1)) ) )
<{EdTab.alignAtTab`}>::I !x_0::I !tabSize_1::I !charWidth_2::I = case (StdBool.not (<{StdInt.<_17}> 0 tabSize_1)) (True -> <{StdInt.+_6}> x_0 charWidth_2) (False -> let tabWidth_2_0::I = <{StdInt.*_9}> tabSize_1 charWidth_2 in <{StdInt.*_9}> tabWidth_2_0 (<{StdInt.+_6}> (<{StdInt./_10}> x_0 tabWidth_2_0) StdInt.one_11)) 
<{EdTab.tabDrawString`_6}> showTabs_0::B tabSize_1::I charWidth_2::I !_x_3 !_x_4 !picture_5 = case _x_4 (_predefined._Nil -> picture_5) (_predefined._Cons string_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> StdPicture.draw_61 string_1_0 (StdPicture.setPenPos _x_3 picture_5)) (_ -> case (StdBool.not showTabs_0) (True -> let _x_3_0 = StdPicture.getPenPos (StdPicture.draw_61 string_1_0 (StdPicture.setPenPos _x_3 picture_5)) in <{EdTab.tabDrawString`_6}> showTabs_0 tabSize_1 charWidth_2 (update _x_3::StdIOBasic._Point2 [0:<{EdTab.alignAtTab`}> (select (select _x_3_0::_Tuple2 0)::StdIOBasic._Point2 0) tabSize_1 charWidth_2]) _x_1_1 (select _x_3_0::_Tuple2 1)) (False -> let _x_3_0 = StdPicture.getPenPos (StdPicture.draw_61 string_1_0 (StdPicture.setPenPos _x_3 picture_5)) in <{EdTab.tabDrawString`_6}> showTabs_0 tabSize_1 charWidth_2 (update _x_3::StdIOBasic._Point2 [0:<{EdTab.alignAtTab`}> (select (select _x_3_0::_Tuple2 0)::StdIOBasic._Point2 0) tabSize_1 charWidth_2]) _x_1_1 (StdPicture.setPenColour StdPictureDef.Black (StdPicture.draw_57 '~' (StdPicture.setPenColour StdPictureDef.Red (select _x_3_0::_Tuple2 1))))) )) 
EdTab.tabDrawString !point_0 !string_1 !_x_2 !picture_3 = case _x_2 (EdMonad._FontInfo thefont_1_0 lineHeight_1_1 metrics_1_2 tabSize_1_3 charWidth_1_4 marginWidth_1_5 autoTab_1_6 showTabs_1_7 showSyntax_1_8 syntaxColours_1_9 -> let !strings_2_0 = EdTab.splitAtTabs string_1 in <{EdTab.tabDrawString`_6}> showTabs_1_7 tabSize_1_3 charWidth_1_4 point_0 strings_2_0 picture_3) 
EdTab.in_comment_7::B !cl_0 = <{EdTab._c;309;29_75}> cl_0
<{EdTab._c;309;29_75}>::B !cl_0 = case cl_0 (EdTab.N l_1_0 -> StdBool.not (<{StdInt.==_16}> l_1_0 0)) (EdTab.T l_1_0 -> StdBool.not (<{StdInt.==_16}> l_1_0 0)) (EdTab.D l_1_0 -> StdBool.not (<{StdInt.==_16}> l_1_0 0)) (_ -> False)
EdTab.dec_comment_8 !cl_0 = <{EdTab._c;315;30_76}> cl_0
<{EdTab._c;315;30_76}> !cl_0 = case cl_0 (EdTab.N l_1_0 -> EdTab.N (<{StdInt.-_7}> l_1_0 StdInt.one_11)) (EdTab.T l_1_0 -> EdTab.T (<{StdInt.-_7}> l_1_0 StdInt.one_11)) (EdTab.D l_1_0 -> EdTab.D (<{StdInt.-_7}> l_1_0 StdInt.one_11)) 
EdTab.non_comment_colour_10 textColour_0 typedefColour_1 typedeclColour_2 !cl_3 = <{EdTab._c;325;37_77}> cl_3 textColour_0 typedefColour_1 typedeclColour_2
<{EdTab._c;325;37_77}> !cl_0 textColour_1 typedefColour_2 typedeclColour_3 = case cl_0 (EdTab.N _x_1_0 -> textColour_1) (EdTab.T _x_1_0 -> typedefColour_2) (EdTab.D _x_1_0 -> typedeclColour_3) 
EdTab.isStringMember_16::B !x_0::C !i_1::I !s_2 = case (<{StdInt.<_17}> i_1 0) (True -> False) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_2 i_1) x_0) (True -> True) (False -> EdTab.isStringMember_16 x_0 (<{StdInt.-_7}> i_1 StdInt.one_11) s_2) ) 
EdTab.funnyChar_15::B !_vArray_0 s_1 !funnySize_2::I !funnyChars_3 i_4::I = EdTab.isStringMember_16 (select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_4) (<{StdInt.-_7}> funnySize_2 StdInt.one_11) funnyChars_3
EdTab.scanfunny_13::I !_vArray_0 s_1 funnySize_2::I funnyChars_3 !l_4::I !i_5::I = case (StdBool.not (<{StdInt.<_17}> i_5 l_4)) (True -> l_4) (False -> case (EdTab.funnyChar_15 _vArray_0 s_1 funnySize_2 funnyChars_3 i_5) (True -> EdTab.scanfunny_13 _vArray_0 s_1 funnySize_2 funnyChars_3 l_4 (<{StdInt.+_6}> i_5 StdInt.one_11)) (False -> i_5) ) 
EdTab.inc_comment_9 !cl_0 = <{EdTab._c;320;30_78}> cl_0
<{EdTab._c;320;30_78}> !cl_0 = case cl_0 (EdTab.N l_1_0 -> EdTab.N (<{StdInt.+_6}> l_1_0 StdInt.one_11)) (EdTab.T l_1_0 -> EdTab.T (<{StdInt.+_6}> l_1_0 StdInt.one_11)) (EdTab.D l_1_0 -> EdTab.D (<{StdInt.+_6}> l_1_0 StdInt.one_11)) 
EdTab.scanalpha_12::I !_vArray_0 s_1 !l_2::I !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 l_2)) (True -> l_2) (False -> let c_2_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_3 in case (StdChar.isAlphanum c_2_0) (True -> EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_3 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_2_0 '_') (True -> EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_3 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_2_0 '`') (True -> EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_3 StdInt.one_11)) (False -> i_3) ) ) ) 
EdTab.scankeyword_11 !_vArray_0 s_1 l_2::I !s_3 !i_4::I = let c_1_0::C = _SystemArray.select_19 s_3 i_4 in case (StdBool.not (EdTab._f79_79 (StdChar.isAlpha c_1_0) c_1_0)) (True -> <{_Tuple2!3}> False (<{StdInt.+_6}> i_4 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_1_0 'f') (True -> let j_4_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_4_0 (<{StdInt.+_6}> i_4 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 3))) "from") (False -> False) ) (True -> <{_Tuple2!3}> True j_4_0) (False -> <{_Tuple2!3}> False j_4_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'g') (True -> let j_5_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_5_0 (<{StdInt.+_6}> i_4 7)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 6))) "generic") (False -> False) ) (True -> <{_Tuple2!3}> True j_5_0) (False -> <{_Tuple2!3}> False j_5_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'd') (True -> let j_6_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_4 10)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 9))) "definition") j_6_0) (False -> case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_4 6)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "derive") j_6_0) (False -> case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_4 7)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 6))) "dynamic") j_6_0) (False -> <{_Tuple2!3}> False j_6_0) ) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'i') (True -> let j_7_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 14)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 13))) "implementation") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 8)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 7))) "instance") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "import") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "infixl") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "infixr") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 4))) "infix") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 1))) "if") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_4 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 1))) "in") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> <{_Tuple2!3}> False j_7_0) ) ) ) ) ) ) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'e') (True -> let j_8_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_8_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "export") (False -> False) ) (True -> <{_Tuple2!3}> True j_8_0) (False -> <{_Tuple2!3}> False j_8_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'm') (True -> let j_9_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_9_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "module") (False -> False) ) (True -> <{_Tuple2!3}> True j_9_0) (False -> <{_Tuple2!3}> False j_9_0) ) (False -> case (<{StdChar.==_18}> c_1_0 's') (True -> let j_10_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_10_0 (<{StdInt.+_6}> i_4 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 5))) "system") (False -> False) ) (True -> <{_Tuple2!3}> True j_10_0) (False -> <{_Tuple2!3}> False j_10_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'c') (True -> let j_11_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_11_0 (<{StdInt.+_6}> i_4 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 4))) "class") (False -> False) ) (True -> <{_Tuple2!3}> True j_11_0) (False -> case (<{StdInt.==_16}> j_11_0 (<{StdInt.+_6}> i_4 4)) (True -> case (<{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 3))) "case") (True -> <{_Tuple2!3}> True j_11_0) (False -> case (<{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 3))) "code") (True -> <{_Tuple2!3}> True j_11_0) (False -> <{_Tuple2!3}> False j_11_0) ) ) (False -> <{_Tuple2!3}> False j_11_0) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'l') (True -> let j_12_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_12_0 (<{StdInt.+_6}> i_4 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 3))) "let!") (False -> False) ) (True -> <{_Tuple2!3}> True j_12_0) (False -> case (case (<{StdInt.==_16}> j_12_0 (<{StdInt.+_6}> i_4 3)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 2))) "let") (False -> False) ) (True -> <{_Tuple2!3}> True j_12_0) (False -> <{_Tuple2!3}> False j_12_0) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'o') (True -> let j_13_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_13_0 (<{StdInt.+_6}> i_4 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 1))) "of") (False -> False) ) (True -> <{_Tuple2!3}> True j_13_0) (False -> <{_Tuple2!3}> False j_13_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'w') (True -> let j_14_0::I = EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11) in case (case (<{StdInt.==_16}> j_14_0 (<{StdInt.+_6}> i_4 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 3))) "with") (False -> False) ) (True -> <{_Tuple2!3}> True j_14_0) (False -> case (case (<{StdInt.==_16}> j_14_0 (<{StdInt.+_6}> i_4 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_3 (_Tuple2 i_4 (<{StdInt.+_6}> i_4 4))) "where") (False -> False) ) (True -> <{_Tuple2!3}> True j_14_0) (False -> <{_Tuple2!3}> False j_14_0) ) ) (False -> <{_Tuple2!3}> False (EdTab.scanalpha_12 _vArray_0 s_1 l_2 (<{StdInt.+_6}> i_4 StdInt.one_11))) ) ) ) ) ) ) ) ) ) ) ) 
EdTab._f79_79::B !_x_0::B c_1::C = case _x_0 (True -> True) (_ -> <{StdChar.==_18}> c_1 '_')
EdTab.funnyChar_71::B !s_0 !funnySize_1::I !funnyChars_2 !i_3::I = EdTab.isStringMember_16 (_SystemArray.select_19 s_0 i_3) (<{StdInt.-_7}> funnySize_1 StdInt.one_11) funnyChars_2
EdTab.scanfunny_72::I s_0 funnySize_1::I funnyChars_2 !l_3::I !i_4::I = case (StdBool.not (<{StdInt.<_17}> i_4 l_3)) (True -> l_3) (False -> case (EdTab.funnyChar_71 s_0 funnySize_1 funnyChars_2 i_4) (True -> EdTab.scanfunny_72 s_0 funnySize_1 funnyChars_2 l_3 (<{StdInt.+_6}> i_4 StdInt.one_11)) (False -> i_4) ) 
EdTab.scanalpha_74::I s_0 !l_1::I !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 l_1)) (True -> l_1) (False -> let c_2_0::C = _SystemArray.select_19 s_0 i_2 in case (StdChar.isAlphanum c_2_0) (True -> EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_2_0 '_') (True -> EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_2_0 '`') (True -> EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) (False -> i_2) ) ) ) 
EdTab.scankeyword_73 s_0 l_1::I !s_2 !i_3::I = let c_1_0::C = _SystemArray.select_19 s_2 i_3 in case (StdBool.not (EdTab._f80_80 (StdChar.isAlpha c_1_0) c_1_0)) (True -> <{_Tuple2!3}> False (<{StdInt.+_6}> i_3 StdInt.one_11)) (False -> case (<{StdChar.==_18}> c_1_0 'f') (True -> let j_4_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_4_0 (<{StdInt.+_6}> i_3 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 3))) "from") (False -> False) ) (True -> <{_Tuple2!3}> True j_4_0) (False -> <{_Tuple2!3}> False j_4_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'g') (True -> let j_5_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_5_0 (<{StdInt.+_6}> i_3 7)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 6))) "generic") (False -> False) ) (True -> <{_Tuple2!3}> True j_5_0) (False -> <{_Tuple2!3}> False j_5_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'd') (True -> let j_6_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_3 10)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 9))) "definition") j_6_0) (False -> case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_3 6)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "derive") j_6_0) (False -> case (<{StdInt.==_16}> j_6_0 (<{StdInt.+_6}> i_3 7)) (True -> <{_Tuple2!3}> (<{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 6))) "dynamic") j_6_0) (False -> <{_Tuple2!3}> False j_6_0) ) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'i') (True -> let j_7_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 14)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 13))) "implementation") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 8)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 7))) "instance") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "import") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "infixl") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "infixr") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 4))) "infix") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 1))) "if") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> case (case (<{StdInt.==_16}> j_7_0 (<{StdInt.+_6}> i_3 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 1))) "in") (False -> False) ) (True -> <{_Tuple2!3}> True j_7_0) (False -> <{_Tuple2!3}> False j_7_0) ) ) ) ) ) ) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'e') (True -> let j_8_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_8_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "export") (False -> False) ) (True -> <{_Tuple2!3}> True j_8_0) (False -> <{_Tuple2!3}> False j_8_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'm') (True -> let j_9_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_9_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "module") (False -> False) ) (True -> <{_Tuple2!3}> True j_9_0) (False -> <{_Tuple2!3}> False j_9_0) ) (False -> case (<{StdChar.==_18}> c_1_0 's') (True -> let j_10_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_10_0 (<{StdInt.+_6}> i_3 6)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 5))) "system") (False -> False) ) (True -> <{_Tuple2!3}> True j_10_0) (False -> <{_Tuple2!3}> False j_10_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'c') (True -> let j_11_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_11_0 (<{StdInt.+_6}> i_3 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 4))) "class") (False -> False) ) (True -> <{_Tuple2!3}> True j_11_0) (False -> case (<{StdInt.==_16}> j_11_0 (<{StdInt.+_6}> i_3 4)) (True -> case (<{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 3))) "case") (True -> <{_Tuple2!3}> True j_11_0) (False -> case (<{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 3))) "code") (True -> <{_Tuple2!3}> True j_11_0) (False -> <{_Tuple2!3}> False j_11_0) ) ) (False -> <{_Tuple2!3}> False j_11_0) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'l') (True -> let j_12_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_12_0 (<{StdInt.+_6}> i_3 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 3))) "let!") (False -> False) ) (True -> <{_Tuple2!3}> True j_12_0) (False -> case (case (<{StdInt.==_16}> j_12_0 (<{StdInt.+_6}> i_3 3)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 2))) "let") (False -> False) ) (True -> <{_Tuple2!3}> True j_12_0) (False -> <{_Tuple2!3}> False j_12_0) ) ) (False -> case (<{StdChar.==_18}> c_1_0 'o') (True -> let j_13_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_13_0 (<{StdInt.+_6}> i_3 2)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 1))) "of") (False -> False) ) (True -> <{_Tuple2!3}> True j_13_0) (False -> <{_Tuple2!3}> False j_13_0) ) (False -> case (<{StdChar.==_18}> c_1_0 'w') (True -> let j_14_0::I = EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11) in case (case (<{StdInt.==_16}> j_14_0 (<{StdInt.+_6}> i_3 4)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 3))) "with") (False -> False) ) (True -> <{_Tuple2!3}> True j_14_0) (False -> case (case (<{StdInt.==_16}> j_14_0 (<{StdInt.+_6}> i_3 5)) (True -> <{StdString.==_2}> (<{StdString.%_10}> s_2 (_Tuple2 i_3 (<{StdInt.+_6}> i_3 4))) "where") (False -> False) ) (True -> <{_Tuple2!3}> True j_14_0) (False -> <{_Tuple2!3}> False j_14_0) ) ) (False -> <{_Tuple2!3}> False (EdTab.scanalpha_74 s_0 l_1 (<{StdInt.+_6}> i_3 StdInt.one_11))) ) ) ) ) ) ) ) ) ) ) ) 
EdTab._f80_80::B !_x_0::B c_1::C = case _x_0 (True -> True) (_ -> <{StdChar.==_18}> c_1 '_')
EdTab.dC_19 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8::I funnyChars_9 !l_10::I !i_11::I !pic_12 = case (StdBool.not (<{StdInt.<_17}> i_11 l_10)) (True -> <{_Tuple2!3}> EdTab.C pic_12) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_11) '\'') (True -> EdTab.dL_17 textColour_6 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 s_7 funnySize_8 funnyChars_9 l_10 (EdTab.N 0) (<{StdInt.+_6}> i_11 StdInt.one_11) (StdPicture.setPenColour textColour_6 (ospicture.pictdrawchar '\'' pic_12))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_11) '\\') (True -> let i_4_0::I = <{StdInt.+_6}> i_11 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> i_4_0 l_10)) (True -> <{_Tuple2!3}> EdTab.C (ospicture.pictdrawchar '\\' pic_12)) (False -> EdTab.dC_19 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_4_0 StdInt.one_11) (ospicture.pictdrawchar (_SystemArray.select_19 s_7 i_4_0) (ospicture.pictdrawchar '\\' pic_12))) ) (False -> EdTab.dC_19 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_11 StdInt.one_11) (ospicture.pictdrawchar (_SystemArray.select_19 s_7 i_11) pic_12)) ) ) 
EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8::I funnyChars_9 !l_10::I !cl_11 !i_12::I !pic_13 = case (StdBool.not (<{StdInt.<_17}> i_12 l_10)) (True -> <{_Tuple2!3}> cl_11 pic_13) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_12) '*') (True -> let <{i`_3_0}>::I = <{StdInt.+_6}> i_12 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> <{i`_3_0}> l_10)) (True -> <{_Tuple2!3}> cl_11 (ospicture.pictdrawchar '*' pic_13)) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 <{i`_3_0}>) '/') (True -> case (EdTab.in_comment_7 cl_11) (True -> let cl_7_0 = EdTab.dec_comment_8 cl_11 in case (StdBool.not (EdTab.in_comment_7 cl_7_0)) (True -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_7_0 (<{StdInt.+_6}> <{i`_3_0}> StdInt.one_11) (StdPicture.setPenColour (EdTab.non_comment_colour_10 textColour_0 typedefColour_1 typedeclColour_2 cl_7_0) (ospicture.pictdrawstring "*/" (StdPicture.setPenColour commentColour_6 pic_13)))) (False -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_7_0 (<{StdInt.+_6}> <{i`_3_0}> StdInt.one_11) (ospicture.pictdrawstring "*/" (StdPicture.setPenColour commentColour_6 pic_13))) ) (False -> let <{i``_7_0}>::I = <{StdInt.+_6}> <{i`_3_0}> StdInt.one_11 in case (case (<{StdInt.<_17}> <{i``_7_0}> l_10) (True -> EdTab.funnyChar_71 s_7 funnySize_8 funnyChars_9 <{i``_7_0}>) (False -> False) ) (True -> let j_9_0::I = EdTab.scanfunny_72 s_7 funnySize_8 funnyChars_9 l_10 <{i``_7_0}> in EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 j_9_0 (ospicture.pictdrawstring (<{StdString.%_10}> s_7 (_Tuple2 <{i``_7_0}> (<{StdInt.-_7}> j_9_0 StdInt.one_11))) (ospicture.pictdrawstring "*/" pic_13))) (False -> let cl_9_0 = EdTab.dec_comment_8 cl_11 in case (StdBool.not (EdTab.in_comment_7 cl_9_0)) (True -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_9_0 <{i``_7_0}> (StdPicture.setPenColour (EdTab.non_comment_colour_10 textColour_0 typedefColour_1 typedeclColour_2 cl_9_0) (ospicture.pictdrawstring "*/" (StdPicture.setPenColour commentColour_6 pic_13)))) (False -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_9_0 <{i``_7_0}> (ospicture.pictdrawstring "*/" (StdPicture.setPenColour commentColour_6 pic_13))) ) ) ) (False -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 <{i`_3_0}> (ospicture.pictdrawchar '*' pic_13)) ) ) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_12) '/') (True -> let <{i`_4_0}>::I = <{StdInt.+_6}> i_12 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> <{i`_4_0}> l_10)) (True -> <{_Tuple2!3}> cl_11 (ospicture.pictdrawchar '/' pic_13)) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 <{i`_4_0}>) '/') (True -> <{_Tuple2!3}> EdTab.L (ospicture.pictdrawstring (<{StdString.%_10}> s_7 (_Tuple2 (<{StdInt.+_6}> <{i`_4_0}> StdInt.one_11) l_10)) (ospicture.pictdrawstring "//" (StdPicture.setPenColour commentColour_6 pic_13)))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 <{i`_4_0}>) '*') (True -> let cl_8_0 = EdTab.inc_comment_9 cl_11 in case (EdTab.in_comment_7 cl_8_0) (True -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_8_0 (<{StdInt.+_6}> <{i`_4_0}> StdInt.one_11) (ospicture.pictdrawstring "/*" (StdPicture.setPenColour commentColour_6 pic_13))) (False -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_8_0 (<{StdInt.+_6}> <{i`_4_0}> StdInt.one_11) (StdPicture.setPenColour (EdTab.non_comment_colour_10 textColour_0 typedefColour_1 typedeclColour_2 cl_8_0) (ospicture.pictdrawstring "/*" (StdPicture.setPenColour commentColour_6 pic_13)))) ) (False -> EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 <{i`_4_0}> (ospicture.pictdrawchar '/' pic_13)) ) ) ) (False -> case (case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_12) '"') (True -> StdBool.not (EdTab.in_comment_7 cl_11)) (False -> False) ) (True -> EdTab.dS_18 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 textColour_0 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_12 StdInt.one_11) (ospicture.pictdrawchar '"' (StdPicture.setPenColour stringColour_5 pic_13))) (False -> case (case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_12) '\'') (True -> StdBool.not (EdTab.in_comment_7 cl_11)) (False -> False) ) (True -> EdTab.dC_19 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 textColour_0 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_12 StdInt.one_11) (ospicture.pictdrawchar '\'' (StdPicture.setPenColour charColour_4 pic_13))) (False -> case (case (StdBool.not (EdTab.in_comment_7 cl_11)) (True -> EdTab.funnyChar_71 s_7 funnySize_8 funnyChars_9 i_12) (False -> False) ) (True -> let j_7_0::I = EdTab.scanfunny_72 s_7 funnySize_8 funnyChars_9 l_10 i_12 in EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 j_7_0 (ospicture.pictdrawstring (<{StdString.%_10}> s_7 (_Tuple2 i_12 (<{StdInt.-_7}> j_7_0 StdInt.one_11))) pic_13)) (False -> let _x_7_0 = EdTab.scankeyword_73 s_7 l_10 s_7 i_12 in case (case (select _x_7_0::_Tuple2 0) (True -> StdBool.not (EdTab.in_comment_7 cl_11)) (False -> False) ) (True -> let j_9_0 = select _x_7_0::_Tuple2 1, _x_9_1::I = StdPicture.getPenColour pic_13 in EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 j_9_0 (StdPicture.setPenColour (select _x_9_1::_Tuple2 0) (ospicture.pictdrawstring (<{StdString.%_10}> s_7 (_Tuple2 i_12 (<{StdInt.-_7}> j_9_0 StdInt.one_11))) (StdPicture.setPenColour keywordColour_3 (select _x_9_1::_Tuple2 1))))) (False -> let j_9_0::I = select _x_7_0::_Tuple2 1 in EdTab.dL_17 textColour_0 typedefColour_1 typedeclColour_2 keywordColour_3 charColour_4 stringColour_5 commentColour_6 s_7 funnySize_8 funnyChars_9 l_10 cl_11 j_9_0 (ospicture.pictdrawstring (<{StdString.%_10}> s_7 (_Tuple2 i_12 (<{StdInt.-_7}> j_9_0 StdInt.one_11))) pic_13)) ) ) ) ) ) ) 
EdTab.dS_18 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8::I funnyChars_9 !l_10::I !i_11::I !pic_12 = case (StdBool.not (<{StdInt.<_17}> i_11 l_10)) (True -> <{_Tuple2!3}> EdTab.S pic_12) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_11) '"') (True -> EdTab.dL_17 textColour_6 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 s_7 funnySize_8 funnyChars_9 l_10 (EdTab.N 0) (<{StdInt.+_6}> i_11 StdInt.one_11) (StdPicture.setPenColour textColour_6 (ospicture.pictdrawchar '"' pic_12))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_7 i_11) '\\') (True -> let i_4_0::I = <{StdInt.+_6}> i_11 StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> i_4_0 l_10)) (True -> <{_Tuple2!3}> EdTab.S (ospicture.pictdrawchar '\\' pic_12)) (False -> EdTab.dS_18 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_4_0 StdInt.one_11) (ospicture.pictdrawchar (_SystemArray.select_19 s_7 i_4_0) (ospicture.pictdrawchar '\\' pic_12))) ) (False -> EdTab.dS_18 typedefColour_0 typedeclColour_1 keywordColour_2 charColour_3 stringColour_4 commentColour_5 textColour_6 s_7 funnySize_8 funnyChars_9 l_10 (<{StdInt.+_6}> i_11 StdInt.one_11) (ospicture.pictdrawchar (_SystemArray.select_19 s_7 i_11) pic_12)) ) ) 
EdTab.drawC_14 keywordColour_0 typedeclColour_1 typedefColour_2 textColour_3 commentColour_4 charColour_5 stringColour_6 s_7 funnySize_8::I funnyChars_9 l_10::I !_x_11 !pic_12 = case _x_11 (EdTab.S -> EdTab.dS_18 typedefColour_2 typedeclColour_1 keywordColour_0 charColour_5 stringColour_6 commentColour_4 textColour_3 s_7 funnySize_8 funnyChars_9 l_10 0 (StdPicture.setPenColour stringColour_6 pic_12)) (EdTab.C -> EdTab.dC_19 typedefColour_2 typedeclColour_1 keywordColour_0 charColour_5 stringColour_6 commentColour_4 textColour_3 s_7 funnySize_8 funnyChars_9 l_10 0 (StdPicture.setPenColour charColour_5 pic_12)) (EdTab.L -> <{_Tuple2!3}> EdTab.L (ospicture.pictdrawstring s_7 (StdPicture.setPenColour commentColour_4 pic_12))) (EdTab.N cl_1_0 -> EdTab.dL_17 textColour_3 typedefColour_2 typedeclColour_1 keywordColour_0 charColour_5 stringColour_6 commentColour_4 s_7 funnySize_8 funnyChars_9 l_10 (EdTab.N cl_1_0) 0 (<{EdTab._if;145;22_81}> (<{StdInt.==_16}> cl_1_0 0) textColour_3 commentColour_4 pic_12)) (EdTab.T cl_1_0 -> EdTab.dL_17 textColour_3 typedefColour_2 typedeclColour_1 keywordColour_0 charColour_5 stringColour_6 commentColour_4 s_7 funnySize_8 funnyChars_9 l_10 (EdTab.T cl_1_0) 0 (<{EdTab._if;148;22_82}> (<{StdInt.==_16}> cl_1_0 0) typedefColour_2 commentColour_4 pic_12)) (EdTab.D cl_1_0 -> EdTab.dL_17 textColour_3 typedefColour_2 typedeclColour_1 keywordColour_0 charColour_5 stringColour_6 commentColour_4 s_7 funnySize_8 funnyChars_9 l_10 (EdTab.D cl_1_0) 0 (<{EdTab._if;151;22_83}> (<{StdInt.==_16}> cl_1_0 0) typedeclColour_1 commentColour_4 pic_12)) 
<{EdTab._if;151;22_83}> !_x_0::B typedeclColour_1 commentColour_2 = case _x_0 (True -> StdPicture.setPenColour typedeclColour_1) (_ -> StdPicture.setPenColour commentColour_2)
<{EdTab._if;148;22_82}> !_x_0::B typedefColour_1 commentColour_2 = case _x_0 (True -> StdPicture.setPenColour typedefColour_1) (_ -> StdPicture.setPenColour commentColour_2)
<{EdTab._if;145;22_81}> !_x_0::B textColour_1 commentColour_2 = case _x_0 (True -> StdPicture.setPenColour textColour_1) (_ -> StdPicture.setPenColour commentColour_2)
EdTab.drawC_21 keywordColour_0 typedeclColour_1 typedefColour_2 textColour_3 commentColour_4 charColour_5 stringColour_6 !c_7 !s_8 !pic_9 = EdTab.drawC_14 keywordColour_0 typedeclColour_1 typedefColour_2 textColour_3 commentColour_4 charColour_5 stringColour_6 s_8 20 "~@#$%^?!+-*<>\\/|&=:." (_SystemArray.size_20 s_8) c_7 pic_9
<{EdTab.tabDrawString`_20}> keywordColour_0 typedeclColour_1 typedefColour_2 commentColour_3 charColour_4 stringColour_5 textColour_6 tabColour_7 showTabs_8::B tabSize_9::I charWidth_10::I !_x_11 !_x_12 !_x_13 !picture_14 = case _x_13 (_predefined._Nil -> picture_14) (_predefined._Cons string_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> let !picture_3_0 = StdPicture.setPenPos _x_12 picture_14, !_x_3_1 = EdTab.drawC_21 keywordColour_0 typedeclColour_1 typedefColour_2 textColour_6 commentColour_3 charColour_4 stringColour_5 _x_11 string_1_0 picture_3_0 in select _x_3_1::_Tuple2 1) (_ -> let !picture_2_0 = StdPicture.setPenPos _x_12 picture_14, !_x_2_1 = EdTab.drawC_21 keywordColour_0 typedeclColour_1 typedefColour_2 textColour_6 commentColour_3 charColour_4 stringColour_5 _x_11 string_1_0 picture_2_0, !_x_2_2 = StdPicture.getPenPos (select _x_2_1::_Tuple2 1), !newX_2_3::I = <{EdTab.alignAtTab`}> (select (select _x_2_2::_Tuple2 0)::StdIOBasic._Point2 0) tabSize_9 charWidth_10 in case (StdBool.not showTabs_8) (True -> <{EdTab.tabDrawString`_20}> keywordColour_0 typedeclColour_1 typedefColour_2 commentColour_3 charColour_4 stringColour_5 textColour_6 tabColour_7 showTabs_8 tabSize_9 charWidth_10 (select _x_2_1::_Tuple2 0) (update _x_12::StdIOBasic._Point2 [0:newX_2_3]) _x_1_1 (select _x_2_2::_Tuple2 1)) (False -> let !picture_4_0 = StdPicture.setPenColour tabColour_7 (select _x_2_2::_Tuple2 1), !picture_4_1 = ospicture.pictdrawchar '~' picture_4_0, !picture_4_2 = StdPicture.setPenColour textColour_6 picture_4_1 in <{EdTab.tabDrawString`_20}> keywordColour_0 typedeclColour_1 typedefColour_2 commentColour_3 charColour_4 stringColour_5 textColour_6 tabColour_7 showTabs_8 tabSize_9 charWidth_10 (select _x_2_1::_Tuple2 0) (update _x_12::StdIOBasic._Point2 [0:newX_2_3]) _x_1_1 picture_4_2) )) 
EdTab.tabDrawStringC !point_0 !_x_1 !_x_2 !picture_3 = case _x_1 (_Tuple2 _x_1_0 string_1_1 -> case _x_1_0 (syncol._Info clevel_2_0 typedef_2_1 typedecl_2_2 offside_level_2_3 flush_2_4 -> case _x_2 (EdMonad._FontInfo thefont_3_0 lineHeight_3_1 metrics_3_2 tabSize_3_3 charWidth_3_4 marginWidth_3_5 autoTab_3_6 showTabs_3_7 showSyntax_3_8 _x_3_9 -> case _x_3_9 (EdMonad._SyntaxColours textColour_4_0 backgroundColour_4_1 marginColour_4_2 tabColour_4_3 commentColour_4_4 stringColour_4_5 charColour_4_6 keywordColour_4_7 typedefColour_4_8 typedeclColour_4_9 -> let !strings_5_0 = EdTab.splitAtTabs string_1_1 in case typedef_2_1 (True -> <{EdTab.tabDrawString`_20}> keywordColour_4_7 typedeclColour_4_9 typedefColour_4_8 commentColour_4_4 charColour_4_6 stringColour_4_5 textColour_4_0 tabColour_4_3 showTabs_3_7 tabSize_3_3 charWidth_3_4 (EdTab.T clevel_2_0) point_0 strings_5_0 picture_3) (False -> case typedecl_2_2 (True -> <{EdTab.tabDrawString`_20}> keywordColour_4_7 typedeclColour_4_9 typedefColour_4_8 commentColour_4_4 charColour_4_6 stringColour_4_5 textColour_4_0 tabColour_4_3 showTabs_3_7 tabSize_3_3 charWidth_3_4 (EdTab.D clevel_2_0) point_0 strings_5_0 picture_3) (False -> <{EdTab.tabDrawString`_20}> keywordColour_4_7 typedeclColour_4_9 typedefColour_4_8 commentColour_4_4 charColour_4_6 stringColour_4_5 textColour_4_0 tabColour_4_3 showTabs_3_7 tabSize_3_3 charWidth_3_4 (EdTab.N clevel_2_0) point_0 strings_5_0 picture_3) ) ) ) ) ) 
<{EdTab.TD;CommentLevel}> _x_0::B = _predefined._Nil

:: EdTab.CommentLevel = EdTab.N a1::I | EdTab.L | EdTab.S | EdTab.C | EdTab.T a1::I | EdTab.D a1::I

|| Converted Records
:: <{EdTab.gEq_s;}> = {!EdTab.gEq_s}

:: <{EdTab.gEq_ss;}> = {!EdTab.gEq_ss}

:: <{EdTab.gEq_sss;}> = {!EdTab.gEq_sss}

:: <{EdTab.gEq_ssss;}> = {!EdTab.gEq_ssss}

:: <{EdTab.gEq_sssss;}> = {!EdTab.gEq_sssss}

:: <{EdTab.gEq_ssssss;}> = {!EdTab.gEq_ssssss}

:: <{EdTab.gEq_sssssss;}> = {!EdTab.gEq_sssssss}

:: <{EdTab.gEq_ssssssss;}> = {!EdTab.gEq_ssssssss}

:: <{EdTab.gEq_sssssssss;}> = {!EdTab.gEq_sssssssss}

:: <{EdTab.bimap_s;}> = {EdTab.bimap_s}

:: <{EdTab.bimap_ss;}> = {EdTab.bimap_ss}

:: <{EdTab.bimap_sss;}> = {EdTab.bimap_sss}

