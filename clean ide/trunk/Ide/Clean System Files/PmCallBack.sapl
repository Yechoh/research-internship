|| ?module? PmCallBack


PmCallBack.start !ini_step_0 !step_1 !ps_2 = let !_x_1_0 = IdeState.getInterrupt ps_2 in interrupt.StartIntr (select _x_1_0::_Tuple2 0) ini_step_0 step_1 (select _x_1_0::_Tuple2 1)
PmCallBack.cont !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = IdeState.getInterrupt ps_1_1 in <{_Tuple2!2}> ls_1_0 (interrupt.ContIntr (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1))) 
PmCallBack.stop !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = IdeState.getInterrupt ps_1_1 in <{_Tuple2!2}> ls_1_0 (interrupt.StopIntr (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1))) 
<{PmCallBack.TD;GeneralSt}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{PmCallBack.gEq_s;}> = {!PmCallBack.gEq_s}

:: <{PmCallBack.gEq_ss;}> = {!PmCallBack.gEq_ss}

:: <{PmCallBack.gEq_sss;}> = {!PmCallBack.gEq_sss}

:: <{PmCallBack.gEq_ssss;}> = {!PmCallBack.gEq_ssss}

:: <{PmCallBack.gEq_sssss;}> = {!PmCallBack.gEq_sssss}

:: <{PmCallBack.gEq_ssssss;}> = {!PmCallBack.gEq_ssssss}

:: <{PmCallBack.gEq_sssssss;}> = {!PmCallBack.gEq_sssssss}

:: <{PmCallBack.gEq_ssssssss;}> = {!PmCallBack.gEq_ssssssss}

:: <{PmCallBack.gEq_sssssssss;}> = {!PmCallBack.gEq_sssssssss}

:: <{PmCallBack.bimap_s;}> = {PmCallBack.bimap_s}

:: <{PmCallBack.bimap_ss;}> = {PmCallBack.bimap_ss}

:: <{PmCallBack.bimap_sss;}> = {PmCallBack.bimap_sss}

