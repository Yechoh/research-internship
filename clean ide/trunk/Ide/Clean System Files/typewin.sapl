|| ?module? typewin


typewin.iniTypeWinInfo !_v_0 !_vaccScreenPicture_1 !m_2 !u_3 !ids_4 !tprefs_5 !env_6 = let _x_1_0 = select _vaccScreenPicture_1::<{StdPSt.accScreenPicture;}> 0 (StdPicture.openFont (select tprefs_5::PmPrefs._TypPrefs 0)) env_6, _x_1_1 = select _x_1_0::_Tuple2 0 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> StdMisc.abort "Unable to open font for Types window") (False -> let _x_3_0 = select _v_0::<{StdId.Ids;}> 0 (select _x_1_0::_Tuple2 1), _x_3_1 = EdMessage.openEditId _v_0 (select _x_3_0::_Tuple2 1) in _Tuple2 (typewin._TypeWinInfo (select _x_3_0::_Tuple2 0) (select _x_3_1::_Tuple2 0) u_3 ids_4 (select _x_1_1::_Tuple2 1) (select tprefs_5::PmPrefs._TypPrefs 1) (select tprefs_5::PmPrefs._TypPrefs 2) (select tprefs_5::PmPrefs._TypPrefs 3)) (select _x_3_1::_Tuple2 1)) 
typewin.quoteString_25 !s_0 = <{StdString.+++_11}> "\"" (<{StdString.+++_11}> s_0 "\"")
typewin.getTypeWinInf !_vTyper_0 !ps_1 = StdPSt.accPLoc (select _vTyper_0::<{typewin.Typer;}> 0) ps_1
typewin.type_message !edit_0 !monad_1 !pState_2 = let _x_1_0 = EdMessage.appEditState edit_0 monad_1 pState_2 in _Tuple2 (Data.Maybe.Just (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1)
typewin.anon_51 !f_0 g_1 x_2 = f_0 (g_1 x_2)
typewin.tw_deactivate !_vTyper_0 !ps_1 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_1, ps_1_1 = select _x_1_0::_Tuple2 1 in update ps_1_1::iostate._PSt [1:StdMenuElement.enableMenuElements (select (select _x_1_0::_Tuple2 0)::typewin._TypeWinInfo 3) (select ps_1_1::iostate._PSt 1)]
typewin.tw_activate !_vTyper_0 !ps_1 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_1, ps_1_1 = select _x_1_0::_Tuple2 1 in update ps_1_1::iostate._PSt [1:StdMenuElement.disableMenuElements (select (select _x_1_0::_Tuple2 0)::typewin._TypeWinInfo 3) (select ps_1_1::iostate._PSt 1)]
typewin.setTypeWinInf !_vTyper_0 twi_1 !ps_2 = StdPSt.appPLoc (select _vTyper_0::<{typewin.Typer;}> 1 twi_1) ps_2
typewin.tw_close !_vTyper_0 !ps_1 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_1, twi_1_1 = select _x_1_0::_Tuple2 0, w_1_2 = select twi_1_1::typewin._TypeWinInfo 0, ps_1_3 = select _x_1_0::_Tuple2 1, _x_1_4 = StdPSt.accPIO (StdWindow.getWindowPos w_1_2) ps_1_3, mpos_1_5 = select _x_1_4::_Tuple2 0 in case (Data.Maybe.isNothing mpos_1_5) (True -> select _x_1_4::_Tuple2 1) (False -> let _x_3_0 = StdPSt.accPIO (StdWindow.getWindowOuterSize w_1_2) (select _x_1_4::_Tuple2 1) in StdWindow.closeWindow w_1_2 (typewin.setTypeWinInf _vTyper_0 (update twi_1_1::typewin._TypeWinInfo [5:Data.Maybe.fromJust mpos_1_5,6:select _x_3_0::_Tuple2 0]) (select _x_3_0::_Tuple2 1))) 
typewin.anon_95 !_vTyper_0 !g_1 x_2 = typewin.tw_close _vTyper_0 (g_1 x_2)
typewin.anon_96 !_vTyper_0 !_vTyper_1 !x_2 = typewin.tw_close _vTyper_0 (typewin.tw_deactivate _vTyper_1 x_2)
typewin.openTypeWindow !_vTyper_0 twi_1 text_2 atts_3 ps_4 = let window_1_0 = select twi_1::typewin._TypeWinInfo 0, _x_1_1 = EdMonad.initEditState window_1_0 (select twi_1::typewin._TypeWinInfo 2) "" (select twi_1::typewin._TypeWinInfo 4) (_Tuple5 4 True False False True) 0 (select twi_1::typewin._TypeWinInfo 7) ps_4, _x_1_2 = select (EdMonad.setText text_2 (_Tuple2 (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1)))::_Tuple2 1, _x_1_3 = EdMonad.getFontInfo (_Tuple2 (select _x_1_2::_Tuple2 0) (select _x_1_2::_Tuple2 1)), _x_1_4 = select _x_1_3::_Tuple2 1, _x_1_5 = EdVisualText.computeViewDomain (_Tuple2 (select _x_1_4::_Tuple2 0) (select _x_1_4::_Tuple2 1)), _x_1_6 = select _x_1_5::_Tuple2 1, editState_1_7 = select _x_1_6::_Tuple2 0, font_1_8 = select _x_1_3::_Tuple2 0 in select (StdWindow.openWindow_55 (<{StdControlClass.Controls;}> StdControlReceiver.controlToHandles_2 StdControlReceiver.getControlType_3) editState_1_7 (StdWindowDef.Window "Types" (EdMessage.openEditReceiver (select twi_1::typewin._TypeWinInfo 1)) (_predefined._Cons (StdWindowDef.WindowOuterSize (select twi_1::typewin._TypeWinInfo 6)) (_predefined._Cons (StdWindowDef.WindowHMargin 0 0) (_predefined._Cons (StdWindowDef.WindowVMargin 0 0) (_predefined._Cons (StdWindowDef.WindowId window_1_0) (_predefined._Cons (StdWindowDef.WindowViewDomain (select _x_1_5::_Tuple2 0)) (_predefined._Cons (StdWindowDef.WindowLook True (EdLook.editWindowLook editState_1_7)) (_predefined._Cons (StdWindowDef.WindowHScroll (ioutil.altScrollFunction StdIOCommon.Horizontal (select (select font_1_8::EdMonad._FontInfo 2)::StdPictureDef._FontMetrics 3))) (_predefined._Cons (StdWindowDef.WindowVScroll (ioutil.alignScrollFunction StdIOCommon.Vertical (select font_1_8::EdMonad._FontInfo 1))) (_predefined._Cons (StdWindowDef.WindowPos (_Tuple2 StdIOCommon.Fix (StdIOCommon.OffsetVector (select twi_1::typewin._TypeWinInfo 5)))) (_predefined._Cons (StdWindowDef.WindowClose (StdIOBasic.noLS (typewin.anon_96 _vTyper_0 _vTyper_0))) (_predefined._Cons (StdWindowDef.WindowActivate (StdIOBasic.noLS (typewin.tw_activate _vTyper_0))) (_predefined._Cons (StdWindowDef.WindowDeactivate (StdIOBasic.noLS (typewin.tw_deactivate _vTyper_0))) atts_3))))))))))))) (select _x_1_6::_Tuple2 1))::_Tuple2 1
typewin.updateTypeWindow !_vTyper_0 !interact_1::B !name_2 atts_3 !message_4 !ps_5 = case (case (StdBool.not interact_1) (True -> True) (False -> StdList.isEmpty message_4) ) (True -> ps_5) (False -> let _x_2_0 = typewin.getTypeWinInf _vTyper_0 ps_5, twi_2_1 = select _x_2_0::_Tuple2 0, w_2_2 = select twi_2_1::typewin._TypeWinInfo 0, ps_2_3 = select _x_2_0::_Tuple2 1, _x_2_4 = UtilObjectIO.isWindow w_2_2 ps_2_3 in case (select _x_2_4::_Tuple2 0) (True -> let !_x_4_0 = typewin.type_message (select twi_2_1::typewin._TypeWinInfo 1) (EdVisualText.vAppendLines (StrictList.slFromList (_predefined._Cons (typewin.quoteString_25 name_2) message_4))) (select _x_2_4::_Tuple2 1) in select _x_4_0::_Tuple2 1) (False -> let !_x_4_0 = typewin.type_message (select twi_2_1::typewin._TypeWinInfo 1) (EdVisualText.vAppendLines (StrictList.slFromList (_predefined._Cons (typewin.quoteString_25 name_2) message_4))) (typewin.openTypeWindow _vTyper_0 twi_2_1 EdLineText.emptyText atts_3 (select _x_2_4::_Tuple2 1)) in select _x_4_0::_Tuple2 1) ) 
typewin.isTypeWindow::B !x_0 !_x_1 = case _x_1 (typewin._TypeWinInfo w_1_0 e_1_1 u_1_2 ids_1_3 tfnt_1_4 tpos_1_5 tsiz_1_6 sync_1_7 -> <{id.==_27}> x_0 w_1_0) 
typewin.tw_maybe_close !_vTyper_0 !win_1 !ps_2 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_2 in case (typewin.isTypeWindow win_1 (select _x_1_0::_Tuple2 0)) (True -> _Tuple2 True (typewin.tw_close _vTyper_0 (typewin.tw_deactivate _vTyper_0 (select _x_1_0::_Tuple2 1)))) (False -> _Tuple2 False (select _x_1_0::_Tuple2 1)) 
typewin.tw_safe_close !_vTyper_0 !ps_1 = let _x_1_0 = StdPSt.accPIO StdWindow.getActiveWindow ps_1, win_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing win_1_1) (True -> typewin.tw_close _vTyper_0 (select _x_1_0::_Tuple2 1)) (False -> let ps_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = typewin.getTypeWinInf _vTyper_0 ps_3_0 in case (typewin.isTypeWindow (Data.Maybe.fromJust win_1_1) (select _x_3_1::_Tuple2 0)) (True -> typewin.tw_close _vTyper_0 (typewin.tw_deactivate _vTyper_0 (select _x_3_1::_Tuple2 1))) (False -> typewin.tw_close _vTyper_0 (select _x_3_1::_Tuple2 1)) ) 
typewin.TW_GetInf !_x_0 = case _x_0 (typewin._TypeWinInfo w_1_0 e_1_1 u_1_2 ids_1_3 tfnt_1_4 tpos_1_5 tsiz_1_6 sync_1_7 -> PmPrefs._TypPrefs (StdPicture.getFontDef tfnt_1_4) tpos_1_5 tsiz_1_6 sync_1_7) 
typewin.TW_SetUpd !ids_0 !twi_1 = update twi_1::typewin._TypeWinInfo [3:ids_0]
typewin.maybe_type_win_message !_vTyper_0 !id_1 message_2 !ps_3 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_3, twi_1_1 = select _x_1_0::_Tuple2 0 in case (<{id.==_27}> id_1 (select twi_1_1::typewin._TypeWinInfo 0)) (True -> typewin.type_message (select twi_1_1::typewin._TypeWinInfo 1) message_2 (select _x_1_0::_Tuple2 1)) (False -> _Tuple2 Data.Maybe.Nothing (select _x_1_0::_Tuple2 1)) 
typewin.type_win_message !_vTyper_0 !message_1 !ps_2 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_2 in typewin.type_message (select (select _x_1_0::_Tuple2 0)::typewin._TypeWinInfo 1) message_1 (select _x_1_0::_Tuple2 1)
typewin.TW_GetWind !_x_0 = case _x_0 (typewin._TypeWinInfo w_1_0 e_1_1 u_1_2 ids_1_3 tfnt_1_4 tpos_1_5 tsiz_1_6 sync_1_7 -> w_1_0) 
typewin.lsfun_37 !f_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> f_0 (_Tuple2 ls_1_0 ps_1_1)) 
typewin.cont_28 !_vtoString_0 !col_1 !ps_2 = case (Data.Maybe.isNothing col_1) (True -> ps_2) (False -> StdClipboard.setClipboard (_predefined._Cons (StdClipboard.toClipboard_4 (select _vtoString_0::<{StdOverloaded.toString;}> 0 (Data.Maybe.fromJust col_1))) _predefined._Nil) ps_2) 
typewin.cont_97 !col_0 !ps_1 = case (Data.Maybe.isNothing col_0) (True -> ps_1) (False -> StdClipboard.setClipboard (_predefined._Cons (StdClipboard.toClipboard_4 (colourclip.toString_0 (Data.Maybe.fromJust col_0))) _predefined._Nil) ps_1) 
typewin.copyFun_41 rgbid_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_0 typewin.cont_97 ps_1_1)) 
typewin.toStringC_40 !c_0 = colourclip.toString_0 c_0
typewin.setBoxCol_46 cb1id_0 cb2id_1 cb3id_2 cb4id_3 !_x_4 = case _x_4 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> let _x_3_0 = <{typewin._c;467;23_98}> cur_2_0 cb1id_0 txt_2_1 cb2id_1 cmt_2_2 cb3id_2 mod_2_3 cb4id_3 bck_2_4 in _Tuple2 ls_1_0 (StdPSt.appPIO (<{colorpickcontrol.SetColourBox`}> (select _x_3_0::_Tuple2 0) (StdPicture.toRGBColour (select _x_3_0::_Tuple2 1))) ps_1_1)) ) 
<{typewin._c;467;23_98}> !cur_0 cb1id_1 txt_2 cb2id_3 cmt_4 cb3id_5 mod_6 cb4id_7 bck_8 = case cur_0 (typewin.TXT -> _Tuple2 cb1id_1 txt_2) (typewin.CMT -> _Tuple2 cb2id_3 cmt_4) (typewin.MOD -> _Tuple2 cb3id_5 mod_6) (typewin.BCK -> _Tuple2 cb4id_7 bck_8) 
typewin.pasteFun_42 rgb_0 cb1id_1 cb2id_2 cb3id_3 cb4id_4 !_x_5 = case _x_5 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> let _x_3_0 = StdClipboard.getClipboard ps_1_1, its_3_1 = select _x_3_0::_Tuple2 0 in case (StdList.isEmpty its_3_1) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let its_5_0 = StdList.map StdClipboard.fromClipboard_3 its_3_1, its_5_1 = StdList.filter Data.Maybe.isJust its_5_0 in case (StdList.isEmpty its_5_1) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let it_7_0 = Data.Maybe.fromJust (StdList.hd its_5_1) in case (StdBool.not (<{StdString.==_2}> it_7_0 (typewin.toStringC_40 (colourclip.fromString_1 it_7_0)))) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_9_0 = typewin.setBoxCol_46 cb1id_1 cb2id_2 cb3id_3 cb4id_4 (_Tuple2 (<{typewin._c;422;23_99}> cur_2_0 ls_1_0 col_9_1) (select _x_3_0::_Tuple2 1)), col_9_1 = colourclip.fromString_1 it_7_0 in _Tuple2 (select _x_9_0::_Tuple2 0) (<{colorpickcontrol.setColourBoxColour`}> rgb_0 col_9_1 (select _x_9_0::_Tuple2 1))) ) ) ) ) 
<{typewin._c;422;23_99}> !cur_0 !ls_1 col_2 = case cur_0 (typewin.TXT -> update ls_1::typewin._TWC_LS [1:col_2]) (typewin.CMT -> update ls_1::typewin._TWC_LS [2:col_2]) (typewin.MOD -> update ls_1::typewin._TWC_LS [3:col_2]) (typewin.BCK -> update ls_1::typewin._TWC_LS [4:col_2]) 
typewin.TW_GetSync !_x_0 = case _x_0 (typewin._TypeWinInfo w_1_0 e_1_1 u_1_2 ids_1_3 tfnt_1_4 tpos_1_5 tsiz_1_6 sync_1_7 -> sync_1_7) 
typewin.sc_update_34 !mod_0 !cmt_1 !bck_2 !txt_3 !sc_4 = update sc_4::EdMonad._SyntaxColours [0:txt_3,1:bck_2,4:cmt_1,5:mod_0,9:txt_3]
typewin.TW_SetSync !sync_0 !twi_1 = update twi_1::typewin._TypeWinInfo [7:sync_0]
typewin.TW_SetFnt !fnt_0 !twi_1 = update twi_1::typewin._TypeWinInfo [4:fnt_0]
typewin.fi_update_33 !mod_0 !cmt_1 !bck_2 !txt_3 !fi_4 = update fi_4::EdMonad._FontInfo [9:typewin.sc_update_34 mod_0 cmt_1 bck_2 txt_3 (select fi_4::EdMonad._FontInfo 9)]
typewin.maybe_type_win_message2 !_vTyper_0 message_1 !ps_2 = let _x_1_0 = typewin.getTypeWinInf _vTyper_0 ps_2, twi_1_1 = select _x_1_0::_Tuple2 0, e_1_2 = select twi_1_1::typewin._TypeWinInfo 1, ps_1_3 = select _x_1_0::_Tuple2 1, _x_1_4 = EdMessage.hasEditState e_1_2 ps_1_3 in case (select _x_1_4::_Tuple2 0) (True -> typewin.type_message e_1_2 message_1 (select _x_1_4::_Tuple2 1)) (False -> _Tuple2 Data.Maybe.Nothing (select _x_1_4::_Tuple2 1)) 
typewin.updateTW_47 !_vTyper_0 win_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> let _x_3_0 = StdPSt.accPLoc (select _vTyper_0::<{typewin.Typer;}> 0) ps_1_1, _x_3_1 = ioutil.safeOpenFont (StdPictureDef._FontDef fn_2_5 _predefined._Nil fs_2_6) (select _x_3_0::_Tuple2 1), font_3_2 = select _x_3_1::_Tuple2 0, twi_3_3 = select _x_3_0::_Tuple2 0 in _Tuple2 ls_1_0 (StdPSt.appPIO (StdWindow.updateWindow win_1 Data.Maybe.Nothing) (select (typewin.maybe_type_win_message2 _vTyper_0 (EdMonad.setFont font_3_2) (select (typewin.maybe_type_win_message2 _vTyper_0 (EdMonad.appFontInfo (typewin.fi_update_33 mod_2_3 cmt_2_2 bck_2_4 txt_2_1)) (StdPSt.appPLoc (select _vTyper_0::<{typewin.Typer;}> 1 (typewin.TW_SetFnt font_3_2 (typewin.TW_SetSync (typewin.sc_update_34 mod_2_3 cmt_2_2 bck_2_4 txt_2_1 (typewin.TW_GetSync twi_3_3)) twi_3_3))) (select _x_3_1::_Tuple2 1)))::_Tuple2 1))::_Tuple2 1))) ) 
typewin.cont2_30 !_vTyper_0 win_1 !cur_2 col_3 !_x_4 = case _x_4 (_Tuple2 ls_1_0 ps_1_1 -> typewin.updateTW_47 _vTyper_0 win_1 (_Tuple2 (<{typewin._c;441;20_100}> cur_2 ls_1_0 col_3) ps_1_1)) 
<{typewin._c;441;20_100}> !cur_0 !ls_1 col_2 = case cur_0 (typewin.TXT -> update ls_1::typewin._TWC_LS [1:col_2]) (typewin.CMT -> update ls_1::typewin._TWC_LS [2:col_2]) (typewin.MOD -> update ls_1::typewin._TWC_LS [3:col_2]) (typewin.BCK -> update ls_1::typewin._TWC_LS [4:col_2]) 
typewin.cont_29 !_vTyper_0 win_1 cur_2 lsid_3 !col_4 !ps_5 = case (Data.Maybe.isNothing col_4) (True -> ps_5) (False -> select (StdReceiver.asyncSend lsid_3 (typewin.cont2_30 _vTyper_0 win_1 cur_2 (Data.Maybe.fromJust col_4)) ps_5)::_Tuple2 1) 
typewin.applyFun_43 !_vTyper_0 win_1 rgbid_2 lsid_3 !_x_4 = case _x_4 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_2 (typewin.cont_29 _vTyper_0 win_1 cur_2_0 lsid_3) ps_1_1)) ) 
typewin.cancelFun_45 !_vTyper_0 win_1 !wini_2 dialog_3 !_x_4 = case _x_4 (_Tuple2 ls_1_0 ps_1_1 -> typewin.updateTW_47 _vTyper_0 win_1 (_Tuple2 wini_2 (StdWindow.closeWindow dialog_3 ps_1_1))) 
typewin.cont2_32 !_vTyper_0 win_1 dialog_2 !cur_3 col_4 !_x_5 = case _x_5 (_Tuple2 ls_1_0 ps_1_1 -> typewin.updateTW_47 _vTyper_0 win_1 (_Tuple2 (<{typewin._c;458;20_101}> cur_3 ls_1_0 col_4) (StdWindow.closeWindow dialog_2 ps_1_1))) 
<{typewin._c;458;20_101}> !cur_0 !ls_1 col_2 = case cur_0 (typewin.TXT -> update ls_1::typewin._TWC_LS [1:col_2]) (typewin.CMT -> update ls_1::typewin._TWC_LS [2:col_2]) (typewin.MOD -> update ls_1::typewin._TWC_LS [3:col_2]) (typewin.BCK -> update ls_1::typewin._TWC_LS [4:col_2]) 
typewin.cont_31 !_vTyper_0 win_1 dialog_2 cur_3 lsid_4 !col_5 !ps_6 = case (Data.Maybe.isNothing col_5) (True -> ps_6) (False -> select (StdReceiver.asyncSend lsid_4 (typewin.cont2_32 _vTyper_0 win_1 dialog_2 cur_3 (Data.Maybe.fromJust col_5)) ps_6)::_Tuple2 1) 
typewin.okFun_44 !_vTyper_0 win_1 rgbid_2 lsid_3 dialog_4 !_x_5 = case _x_5 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_2 (typewin.cont_31 _vTyper_0 win_1 dialog_4 cur_2_0 lsid_3) ps_1_1)) ) 
typewin.mfilter_38::B !_x_0 = case _x_0 (StdIOCommon.MouseDown _x_1_0 _x_1_1 _x_1_2 -> True) (_ -> False)
typewin.cont2_27 act_0 col_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> _Tuple2 (<{typewin._c;390;23_102}> cur_2_0 ls_1_0 act_0 col_1) ps_1_1) ) 
<{typewin._c;390;23_102}> !cur_0 !ls_1 act_2 col_3 = case cur_0 (typewin.TXT -> update ls_1::typewin._TWC_LS [0:act_2,1:col_3]) (typewin.CMT -> update ls_1::typewin._TWC_LS [0:act_2,2:col_3]) (typewin.MOD -> update ls_1::typewin._TWC_LS [0:act_2,3:col_3]) (typewin.BCK -> update ls_1::typewin._TWC_LS [0:act_2,4:col_3]) 
typewin.cont_26 lsid_0 rgbid_1 cb4id_2 bck_3 cb3id_4 mod_5 cb2id_6 cmt_7 cb1id_8 txt_9 cur_10 act_11 !col_12 !ps_13 = case (Data.Maybe.isNothing col_12) (True -> ps_13) (False -> let col_2_0 = Data.Maybe.fromJust col_12 in select (StdReceiver.asyncSend lsid_0 (typewin.cont2_27 act_11 col_2_0) (<{colorpickcontrol.setColourBoxColour`}> rgbid_1 (<{typewin._c;380;22_103}> act_11 txt_9 cmt_7 mod_5 bck_3) (colorpickcontrol.setColourBoxId rgbid_1 (<{typewin._c;375;21_104}> act_11 cb1id_8 cb2id_6 cb3id_4 cb4id_2) (StdPSt.appPIO (<{typewin._c;365;31_107}> act_11 cb4id_2 cur_10 col_2_0 bck_3) (StdPSt.appPIO (<{typewin._c;355;31_110}> act_11 cb3id_4 cur_10 col_2_0 mod_5) (StdPSt.appPIO (<{typewin._c;345;31_113}> act_11 cb2id_6 cur_10 col_2_0 cmt_7) (StdPSt.appPIO (<{typewin._c;335;31_116}> act_11 cb1id_8 cur_10 col_2_0 txt_9) ps_13)))))))::_Tuple2 1) 
<{typewin._c;335;31_116}> !act_0 cb1id_1 cur_2 col_3 txt_4 = case act_0 (typewin.TXT -> <{colorpickcontrol.SetColourBox`}> cb1id_1 (<{typewin._c;336;61_114}> cur_2 col_3 txt_4)) (_ -> colorpickcontrol.SetColourBox cb1id_1 (<{typewin._c;340;60_115}> cur_2 col_3 txt_4))
<{typewin._c;340;60_115}> !cur_0 col_1 txt_2 = case cur_0 (typewin.TXT -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour txt_2)
<{typewin._c;336;61_114}> !cur_0 col_1 txt_2 = case cur_0 (typewin.TXT -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour txt_2)
<{typewin._c;345;31_113}> !act_0 cb2id_1 cur_2 col_3 cmt_4 = case act_0 (typewin.CMT -> <{colorpickcontrol.SetColourBox`}> cb2id_1 (<{typewin._c;346;61_111}> cur_2 col_3 cmt_4)) (_ -> colorpickcontrol.SetColourBox cb2id_1 (<{typewin._c;350;60_112}> cur_2 col_3 cmt_4))
<{typewin._c;350;60_112}> !cur_0 col_1 cmt_2 = case cur_0 (typewin.CMT -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour cmt_2)
<{typewin._c;346;61_111}> !cur_0 col_1 cmt_2 = case cur_0 (typewin.CMT -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour cmt_2)
<{typewin._c;355;31_110}> !act_0 cb3id_1 cur_2 col_3 mod_4 = case act_0 (typewin.MOD -> <{colorpickcontrol.SetColourBox`}> cb3id_1 (<{typewin._c;356;61_108}> cur_2 col_3 mod_4)) (_ -> colorpickcontrol.SetColourBox cb3id_1 (<{typewin._c;360;60_109}> cur_2 col_3 mod_4))
<{typewin._c;360;60_109}> !cur_0 col_1 mod_2 = case cur_0 (typewin.MOD -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour mod_2)
<{typewin._c;356;61_108}> !cur_0 col_1 mod_2 = case cur_0 (typewin.MOD -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour mod_2)
<{typewin._c;365;31_107}> !act_0 cb4id_1 cur_2 col_3 bck_4 = case act_0 (typewin.BCK -> <{colorpickcontrol.SetColourBox`}> cb4id_1 (<{typewin._c;366;61_105}> cur_2 col_3 bck_4)) (_ -> colorpickcontrol.SetColourBox cb4id_1 (<{typewin._c;370;60_106}> cur_2 col_3 bck_4))
<{typewin._c;370;60_106}> !cur_0 col_1 bck_2 = case cur_0 (typewin.BCK -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour bck_2)
<{typewin._c;366;61_105}> !cur_0 col_1 bck_2 = case cur_0 (typewin.BCK -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour bck_2)
<{typewin._c;375;21_104}> !act_0 cb1id_1 cb2id_2 cb3id_3 cb4id_4 = case act_0 (typewin.TXT -> cb1id_1) (typewin.CMT -> cb2id_2) (typewin.MOD -> cb3id_3) (typewin.BCK -> cb4id_4) 
<{typewin._c;380;22_103}> !act_0 txt_1 cmt_2 mod_3 bck_4 = case act_0 (typewin.TXT -> txt_1) (typewin.CMT -> cmt_2) (typewin.MOD -> mod_3) (typewin.BCK -> bck_4) 
<{typewin.==_48}>::B !_x_0 !_x_1 = case _x_0 (typewin.TXT -> case _x_1 (typewin.TXT -> True) ) (typewin.CMT -> case _x_1 (typewin.CMT -> True) ) (typewin.MOD -> case _x_1 (typewin.MOD -> True) ) (typewin.BCK -> case _x_1 (typewin.BCK -> True) ) (_ -> False)
typewin.mfun_39 rgbid_0 lsid_1 cb1id_2 cb2id_3 cb3id_4 cb4id_5 !act_6 _x_7 !_x_8 = case _x_8 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (typewin._TWC_LS cur_2_0 txt_2_1 cmt_2_2 mod_2_3 bck_2_4 fn_2_5 fs_2_6 -> case (<{typewin.==_48}> act_6 cur_2_0) (True -> _Tuple2 ls_1_0 ps_1_1) (False -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_0 (typewin.cont_26 lsid_1 rgbid_0 cb4id_5 bck_2_4 cb3id_4 mod_2_3 cb2id_3 cmt_2_2 cb1id_2 txt_2_1 cur_2_0 act_6) ps_1_1)) ) ) 
typewin.sizefun_36 size_0::I !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::typewin._TWC_LS [6:size_0]) ps_1_1) 
typewin.fontfun_35 name_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::typewin._TWC_LS [5:name_0]) ps_1_1) 
typewin.typewinPane !_vTyper_0 !_vTyper_1 !_vTyper_2 ps_3 = let _x_1_0 = StdPSt.accPLoc (select _vTyper_0::<{typewin.Typer;}> 0) ps_3, twi_1_1 = select _x_1_0::_Tuple2 0, _x_1_2 = typewin.TW_GetInf twi_1_1, sync_1_3 = select _x_1_2::PmPrefs._TypPrefs 3, _x_1_4 = select _x_1_2::PmPrefs._TypPrefs 0, inifn_1_5 = select _x_1_4::StdPictureDef._FontDef 0, inifs_1_6 = select _x_1_4::StdPictureDef._FontDef 2, wloc_1_7 = typewin._TWC_LS typewin.TXT (select sync_1_3::EdMonad._SyntaxColours 0) (select sync_1_3::EdMonad._SyntaxColours 4) (select sync_1_3::EdMonad._SyntaxColours 5) (select sync_1_3::EdMonad._SyntaxColours 1) inifn_1_5 inifs_1_6, _x_1_8 = StdPSt.accPIO (StdPSt.accScreenPicture_13 StdPicture.getFontNames) (select _x_1_0::_Tuple2 1), fontNames_1_9 = select _x_1_8::_Tuple2 0, _x_1_10 = StdPSt.accPIO (StdPSt.accScreenPicture_13 (StdFunc.seqList (StdList.map ioutil.lisFixedWidth fontNames_1_9))) (select _x_1_8::_Tuple2 1), left_1_11 = StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32), _x_1_12 = colorpickcontrol.openRGBId (<{StdId.Ids;}> StdId.openId_13 StdId.openIds_14 StdId.openR2Id_15 StdId.openR2Ids_16 StdId.openRId_17 StdId.openRIds_18) (select _x_1_10::_Tuple2 1), rgbid_1_13 = select _x_1_12::_Tuple2 0, _x_1_14 = StdId.openId_13 (select _x_1_12::_Tuple2 1), _x_1_15 = StdId.openId_13 (select _x_1_14::_Tuple2 1), _x_1_16 = StdId.openId_13 (select _x_1_15::_Tuple2 1), _x_1_17 = StdId.openId_13 (select _x_1_16::_Tuple2 1), cb1id_1_18 = select _x_1_17::_Tuple2 0, _x_1_19 = StdId.openId_13 (select _x_1_17::_Tuple2 1), _x_1_20 = StdId.openId_13 (select _x_1_19::_Tuple2 1), _x_1_21 = StdId.openId_13 (select _x_1_20::_Tuple2 1), _x_1_22 = StdId.openRId_17 (select _x_1_21::_Tuple2 1), lsid_1_23 = select _x_1_22::_Tuple2 0, cb2id_1_24 = select _x_1_19::_Tuple2 0, cb3id_1_25::I = select _x_1_20::_Tuple2 0, cb4id_1_26 = select _x_1_21::_Tuple2 0, ok_1_27 = select _x_1_15::_Tuple2 0, win_1_28 = typewin.TW_GetWind twi_1_1, w_1_29 = select _x_1_14::_Tuple2 0, cancel_1_30 = select _x_1_16::_Tuple2 0, _x_1_31 = UtilObjectIO.GetDialogBackgroundColour (select _x_1_22::_Tuple2 1) in _Tuple4 wloc_1_7 (<{StdIOBasic.:+:}> (StdControlDef.LayoutControl (<{StdIOBasic.:+:}> (morecontrols.FontNameSizeControl inifn_1_5 inifs_1_6 (ioutil.lfilter (select _x_1_10::_Tuple2 0) fontNames_1_9) (_predefined._Cons 7 (_predefined._Cons 8 (_predefined._Cons 9 (_predefined._Cons 10 (_predefined._Cons 12 (_predefined._Cons 14 (_predefined._Cons 18 (_predefined._Cons 24 _predefined._Nil)))))))) typewin.fontfun_35 typewin.sizefun_36 (_predefined._Cons left_1_11 _predefined._Nil)) (<{colorpickcontrol.RGBColourPickControl`}> rgbid_1_13 (select sync_1_3::EdMonad._SyntaxColours 0) cb1id_1_18 (Data.Maybe.Just (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)))) _predefined._Nil) (<{StdIOBasic.:+:}> (StdControlDef.LayoutControl (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Text:" (_predefined._Cons left_1_11 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{StdIOBasic.:+:}> (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour (select sync_1_3::EdMonad._SyntaxColours 0)) cb1id_1_18 (_Tuple2 typewin.mfilter_38 (typewin.mfun_39 rgbid_1_13 lsid_1_23 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26 typewin.TXT)) Data.Maybe.Nothing) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Modules:" (_predefined._Cons left_1_11 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{StdIOBasic.:+:}> (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour (select sync_1_3::EdMonad._SyntaxColours 5)) cb3id_1_25 (_Tuple2 typewin.mfilter_38 (typewin.mfun_39 rgbid_1_13 lsid_1_23 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26 typewin.MOD)) Data.Maybe.Nothing) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Comments:" (_predefined._Cons left_1_11 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{StdIOBasic.:+:}> (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour (select sync_1_3::EdMonad._SyntaxColours 4)) cb2id_1_24 (_Tuple2 typewin.mfilter_38 (typewin.mfun_39 rgbid_1_13 lsid_1_23 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26 typewin.CMT)) Data.Maybe.Nothing) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Background:" (_predefined._Cons left_1_11 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour (select sync_1_3::EdMonad._SyntaxColours 1)) cb4id_1_26 (_Tuple2 typewin.mfilter_38 (typewin.mfun_39 rgbid_1_13 lsid_1_23 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26 typewin.BCK)) Data.Maybe.Nothing)))))))) _predefined._Nil) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Ok" (_predefined._Cons (StdControlDef.ControlId ok_1_27) (_predefined._Cons (StdControlDef.ControlFunction (typewin.okFun_44 _vTyper_1 win_1_28 rgbid_1_13 lsid_1_23 w_1_29)) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Right StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Cancel")) _predefined._Nil))))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Cancel" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (typewin.cancelFun_45 _vTyper_1 win_1_28 wloc_1_7 w_1_29)) (_predefined._Cons (StdControlDef.ControlId cancel_1_30) _predefined._Nil)))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Apply" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (typewin.applyFun_43 _vTyper_1 win_1_28 rgbid_1_13 lsid_1_23)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Paste" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (typewin.pasteFun_42 rgbid_1_13 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Copy" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (typewin.copyFun_41 rgbid_1_13)) _predefined._Nil))) (StdReceiverDef.Receiver lsid_1_23 typewin.lsfun_37 _predefined._Nil)))))))) (_predefined._Cons (StdWindowDef.WindowPen (_predefined._Cons (StdPictureDef.PenBack (select _x_1_31::_Tuple2 0)) _predefined._Nil)) (_predefined._Cons (StdWindowDef.WindowClose (typewin.cancelFun_45 _vTyper_2 win_1_28 wloc_1_7 w_1_29)) (_predefined._Cons (StdWindowDef.WindowId w_1_29) (_predefined._Cons (StdWindowDef.WindowOk ok_1_27) (_predefined._Cons (StdWindowDef.WindowCancel cancel_1_30) (_predefined._Cons (StdWindowDef.WindowInit (typewin.setBoxCol_46 cb1id_1_18 cb2id_1_24 cb3id_1_25 cb4id_1_26)) _predefined._Nil)))))) (select _x_1_31::_Tuple2 1)
typewin.typewinColours !_vTyper_0 !ps_1 = let Controls_1_0 = <{StdControlClass.Controls;}> morecontrols.controlToHandles_0 morecontrols.getControlType_1, Controls_1_1 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_9 colorpickcontrol.getControlType_10, Controls_1_2 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_0 Controls_1_1) (StdControlClass.getControlType_9 Controls_1_0 Controls_1_1), Controls_1_3 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_22 Controls_1_2) (StdControlClass.getControlType_23 Controls_1_2), Controls_1_4 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_5 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_1_6 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_7 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_1_8 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_9 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_1_10 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_1_11 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_1_12 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_10 Controls_1_11) (StdControlClass.getControlType_9 Controls_1_10 Controls_1_11), Controls_1_13 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_9 Controls_1_12) (StdControlClass.getControlType_9 Controls_1_9 Controls_1_12), Controls_1_14 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_8 Controls_1_13) (StdControlClass.getControlType_9 Controls_1_8 Controls_1_13), Controls_1_15 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_7 Controls_1_14) (StdControlClass.getControlType_9 Controls_1_7 Controls_1_14), Controls_1_16 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_6 Controls_1_15) (StdControlClass.getControlType_9 Controls_1_6 Controls_1_15), Controls_1_17 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_5 Controls_1_16) (StdControlClass.getControlType_9 Controls_1_5 Controls_1_16), Controls_1_18 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_4 Controls_1_17) (StdControlClass.getControlType_9 Controls_1_4 Controls_1_17), Controls_1_19 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_22 Controls_1_18) (StdControlClass.getControlType_23 Controls_1_18), Controls_1_20 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_21 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_22 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_23 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_24 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_25 = <{StdControlClass.Controls;}> StdControlReceiver.controlToHandles_0 StdControlReceiver.getControlType_1, Controls_1_26 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_24 Controls_1_25) (StdControlClass.getControlType_9 Controls_1_24 Controls_1_25), Controls_1_27 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_23 Controls_1_26) (StdControlClass.getControlType_9 Controls_1_23 Controls_1_26), Controls_1_28 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_22 Controls_1_27) (StdControlClass.getControlType_9 Controls_1_22 Controls_1_27), Controls_1_29 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_21 Controls_1_28) (StdControlClass.getControlType_9 Controls_1_21 Controls_1_28), Controls_1_30 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_20 Controls_1_29) (StdControlClass.getControlType_9 Controls_1_20 Controls_1_29), Controls_1_31 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_19 Controls_1_30) (StdControlClass.getControlType_9 Controls_1_19 Controls_1_30), _x_1_32 = typewin.typewinPane _vTyper_0 _vTyper_0 _vTyper_0 ps_1 in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_3 Controls_1_31) (StdControlClass.getControlType_9 Controls_1_3 Controls_1_31)) (select _x_1_32::_Tuple4 0) (StdWindowDef.Dialog "Types Window..." (select _x_1_32::_Tuple4 1) (select _x_1_32::_Tuple4 2)) (select _x_1_32::_Tuple4 3))::_Tuple2 1
<{typewin.TD;TypeWinInfo}> _x_0::B = _predefined._Nil
<{typewin.TD;Typer;}> _x_0::B = _predefined._Nil
<{typewin.TD;TWC_LS}> _x_0::B = _predefined._Nil
<{typewin.TD;TWC_CR}> _x_0::B = _predefined._Nil

:: typewin.TWC_CR = typewin.TXT | typewin.CMT | typewin.MOD | typewin.BCK

|| Converted Records
:: typewin._TypeWinInfo = {!typewin.wId, !typewin.eId, !typewin.uId, !typewin.ids, !typewin.tfnt, !typewin.tpos, !typewin.tsiz, !typewin.sync}

:: <{typewin.Typer;}> = {!typewin.getTypeWinInfo, !typewin.setTypeWinInfo}

:: typewin._TWC_LS = {typewin.cur, typewin.txt, typewin.cmt, typewin.mod, typewin.bck, typewin.fn, typewin.fs::I}

:: <{typewin.gEq_s;}> = {!typewin.gEq_s}

:: <{typewin.gEq_ss;}> = {!typewin.gEq_ss}

:: <{typewin.gEq_sss;}> = {!typewin.gEq_sss}

:: <{typewin.gEq_ssss;}> = {!typewin.gEq_ssss}

:: <{typewin.gEq_sssss;}> = {!typewin.gEq_sssss}

:: <{typewin.gEq_ssssss;}> = {!typewin.gEq_ssssss}

:: <{typewin.gEq_sssssss;}> = {!typewin.gEq_sssssss}

:: <{typewin.gEq_ssssssss;}> = {!typewin.gEq_ssssssss}

:: <{typewin.gEq_sssssssss;}> = {!typewin.gEq_sssssssss}

:: <{typewin.bimap_s;}> = {typewin.bimap_s}

:: <{typewin.bimap_ss;}> = {typewin.bimap_ss}

:: <{typewin.bimap_sss;}> = {typewin.bimap_sss}

