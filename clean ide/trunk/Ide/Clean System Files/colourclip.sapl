|| ?module? colourclip


colourclip.toString_0 !_x_0 = case _x_0 (StdPictureDef.RGB _x_1_0 -> case _x_1_0 (StdPictureDef._RGBColour r_2_0 g_2_1 b_2_2 -> <{StdString.+++_11}> "RGB " (<{StdString.+++_11}> (StdString.toString_5 r_2_0) (<{StdString.+++_11}> " :: " (<{StdString.+++_11}> (StdString.toString_5 g_2_1) (<{StdString.+++_11}> " :: " (StdString.toString_5 b_2_2)))))) ) (StdPictureDef.Black -> "0Black") (StdPictureDef.White -> "1White") (StdPictureDef.DarkGrey -> "2DarkGrey") (StdPictureDef.Grey -> "3Grey") (StdPictureDef.LightGrey -> "4LightGrey") (StdPictureDef.Red -> "5Red") (StdPictureDef.Green -> "6Green") (StdPictureDef.Blue -> "7Blue") (StdPictureDef.Cyan -> "8Cyan") (StdPictureDef.Magenta -> "9Magenta") (StdPictureDef.Yellow -> "Yellow") 
colourclip.hasprefix_4 !_vArray_0 !<{_v%_1}> !<{_v==_2}> p_3 s_4 = let x_1_0::I = <{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 p_3) 1 in case (select <{_v==_2}>::<{StdOverloaded.==;}> 0 p_3 (select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_4 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_4 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_4) 1)))) (False -> _Tuple2 False s_4) 
colourclip.findfirstnondigit_2::I !_vArray_0 s_1 !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 (select _vArray_0::<{_SystemArray.Array;}> 4 s_1))) (True -> i_2) (False -> case (StdChar.isDigit (select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_2)) (True -> colourclip.findfirstnondigit_2 _vArray_0 s_1 (<{StdInt.+_6}> i_2 StdInt.one_11)) (False -> i_2) ) 
colourclip.StoInt_3::I !_vArray_0 !<{_v%_1}> !_vto_2 s_3 = select _vto_2::<{StdOverloaded.toInt;}> 0 (select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_3 (_Tuple2 0 (<{StdInt.-_7}> (colourclip.findfirstnondigit_2 _vArray_0 s_3 0) 1)))
colourclip.findfirstnondigit_7::I !s_0 !i_1::I = case (StdBool.not (<{StdInt.<_17}> i_1 (_SystemArray.size_20 s_0))) (True -> i_1) (False -> case (StdChar.isDigit (_SystemArray.select_19 s_0 i_1)) (True -> colourclip.findfirstnondigit_7 s_0 (<{StdInt.+_6}> i_1 StdInt.one_11)) (False -> i_1) ) 
colourclip.StoInt_6::I !<{_v%_0}> !_vto_1 s_2 = select _vto_1::<{StdOverloaded.toInt;}> 0 (select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_2 (_Tuple2 0 (<{StdInt.-_7}> (colourclip.findfirstnondigit_7 s_2 0) 1)))
colourclip.hasprefix_5 !<{_v%_0}> !<{_v==_1}> p_2 s_3 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_2) 1 in case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 p_2 (select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_3 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_3 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_3) 1)))) (False -> _Tuple2 False s_3) 
colourclip.StoInt_9::I !_vto_0 s_1 = select _vto_0::<{StdOverloaded.toInt;}> 0 (<{StdString.%_10}> s_1 (_Tuple2 0 (<{StdInt.-_7}> (colourclip.findfirstnondigit_7 s_1 0) 1)))
colourclip.hasprefix_8 !<{_v==_0}> p_1 s_2 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_1) 1 in case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 p_1 (<{StdString.%_10}> s_2 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (<{StdString.%_10}> s_2 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_2) 1)))) (False -> _Tuple2 False s_2) 
colourclip.StoInt_11::I !s_0 = StdInt.toInt_23 (<{StdString.%_10}> s_0 (_Tuple2 0 (<{StdInt.-_7}> (colourclip.findfirstnondigit_7 s_0 0) 1)))
colourclip.hasprefix_10 !p_0 !s_1 = let x_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 p_0) 1 in case (<{StdString.==_2}> p_0 (<{StdString.%_10}> s_1 (_Tuple2 0 x_1_0))) (True -> _Tuple2 True (<{StdString.%_10}> s_1 (_Tuple2 (<{StdInt.+_6}> x_1_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 s_1) 1)))) (False -> _Tuple2 False s_1) 
colourclip.fromString_1 !s_0 = case (<{StdInt.==_16}> (_SystemArray.size_20 s_0) 0) (True -> StdPictureDef.Black) (False -> <{colourclip._c;25;11_12}> (_SystemArray.select_19 s_0 0) s_0) 
<{colourclip._c;25;11_12}> !_x_0::C s_1 = case _x_0 ('0' -> StdPictureDef.Black) ('1' -> StdPictureDef.White) ('2' -> StdPictureDef.DarkGrey) ('3' -> StdPictureDef.Grey) ('4' -> StdPictureDef.LightGrey) ('5' -> StdPictureDef.Red) ('6' -> StdPictureDef.Green) ('7' -> StdPictureDef.Blue) ('8' -> StdPictureDef.Cyan) ('9' -> StdPictureDef.Magenta) ('Y' -> StdPictureDef.Yellow) ('R' -> let s1_2_0::I = select (colourclip.hasprefix_10 "RGB " s_1)::_Tuple2 1, rrr_2_1 = colourclip.StoInt_11 s1_2_0, s3_2_2::I = select (colourclip.hasprefix_10 " :: " (select (colourclip.hasprefix_10 (StdString.toString_5 rrr_2_1) s1_2_0)::_Tuple2 1))::_Tuple2 1, ggg_2_3 = colourclip.StoInt_11 s3_2_2 in StdPictureDef.RGB (StdPictureDef._RGBColour rrr_2_1 ggg_2_3 (colourclip.StoInt_11 (select (colourclip.hasprefix_10 " :: " (select (colourclip.hasprefix_10 (StdString.toString_5 ggg_2_3) s3_2_2)::_Tuple2 1))::_Tuple2 1)))) (_ -> StdPictureDef.Black)


|| Converted Records
