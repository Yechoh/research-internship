|| ?module? projwin


projwin.isProjWin !win_0 !ps_1 = let _x_1_0 = IdeState.getPWW ps_1 in <{_Tuple2!3}> (<{id.==_27}> (select _x_1_0::_Tuple2 0) win_0) (select _x_1_0::_Tuple2 1)
projwin.lsfun_54 !f_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> f_0 (_Tuple2 ls_1_0 ps_1_1)) 
projwin.cont_39 !_vtoString_0 !col_1 !ps_2 = case (Data.Maybe.isNothing col_1) (True -> ps_2) (False -> StdClipboard.setClipboard (_predefined._Cons (StdClipboard.toClipboard_4 (select _vtoString_0::<{StdOverloaded.toString;}> 0 (Data.Maybe.fromJust col_1))) _predefined._Nil) ps_2) 
projwin.cont_188 !col_0 !ps_1 = case (Data.Maybe.isNothing col_0) (True -> ps_1) (False -> StdClipboard.setClipboard (_predefined._Cons (StdClipboard.toClipboard_4 (colourclip.toString_0 (Data.Maybe.fromJust col_0))) _predefined._Nil) ps_1) 
projwin.copyFun_46 rgbid_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_0 projwin.cont_188 ps_1_1)) 
projwin.toStringC_45 !c_0 = colourclip.toString_0 c_0
projwin.setBoxCol_50 hc_0 fc_1 bc_2 !_x_3 = case _x_3 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> let _x_3_0 = <{projwin._c;214;23_219}> cr_2_5 hc_0 hc_2_4 fc_1 fc_2_2 bc_2 bc_2_3 in _Tuple2 ls_1_0 (StdPSt.appPIO (<{colorpickcontrol.SetColourBox`}> (select _x_3_0::_Tuple2 0) (StdPicture.toRGBColour (select _x_3_0::_Tuple2 1))) ps_1_1)) ) 
<{projwin._c;214;23_219}> !cr_0 hc_1 hc_2 fc_3 fc_4 bc_5 bc_6 = case cr_0 (projwin.HC -> _Tuple2 hc_1 hc_2) (projwin.FC -> _Tuple2 fc_3 fc_4) (projwin.BC -> _Tuple2 bc_5 bc_6) 
projwin.pasteFun_47 rgb_0 hc_1 fc_2 bc_3 !_x_4 = case _x_4 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> let _x_3_0 = StdClipboard.getClipboard ps_1_1, its_3_1 = select _x_3_0::_Tuple2 0 in case (StdList.isEmpty its_3_1) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let its_5_0 = StdList.map StdClipboard.fromClipboard_3 its_3_1, its_5_1 = StdList.filter Data.Maybe.isJust its_5_0 in case (StdList.isEmpty its_5_1) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let it_7_0 = Data.Maybe.fromJust (StdList.hd its_5_1) in case (StdBool.not (<{StdString.==_2}> it_7_0 (projwin.toStringC_45 (colourclip.fromString_1 it_7_0)))) (True -> _Tuple2 ls_1_0 (select _x_3_0::_Tuple2 1)) (False -> let _x_9_0 = projwin.setBoxCol_50 hc_1 fc_2 bc_3 (_Tuple2 (<{projwin._c;148;23_220}> cr_2_5 ls_1_0 col_9_1) (select _x_3_0::_Tuple2 1)), col_9_1 = colourclip.fromString_1 it_7_0 in _Tuple2 (select _x_9_0::_Tuple2 0) (<{colorpickcontrol.setColourBoxColour`}> rgb_0 col_9_1 (select _x_9_0::_Tuple2 1))) ) ) ) ) 
<{projwin._c;148;23_220}> !cr_0 !ls_1 !col_2 = case cr_0 (projwin.HC -> update ls_1::projwin._PWO [4:col_2]) (projwin.FC -> update ls_1::projwin._PWO [2:col_2]) (projwin.BC -> update ls_1::projwin._PWO [3:col_2]) 
projwin.anon_129 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.anon_189 !_x_0 !g_1 x_2 = StdPicture.fill_101 _x_0 (g_1 x_2)
projwin.anon_190 !_x_0 !_x_1 !x_2 = StdPicture.fill_101 _x_0 (StdPicture.setPenColour _x_1 x_2)
projwin.anon_44 hc_0 _x_1 !_x_2 = case _x_2 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> projwin.anon_190 newFrame_1_1 hc_0) 
projwin.lookup_73 !<{_v==_0}> d_1 !_x_2 = case _x_2 (_predefined._Nil -> _Tuple2 False d_1) (_predefined._Cons _x_1_0 ds_1_1 -> case _x_1_0 (_Tuple2 u_2_0 d`_2_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 d_1 <{d`_2_1}>) (True -> _Tuple2 u_2_0 d_1) (False -> projwin.lookup_73 <{_v==_0}> d_1 ds_1_1) ) ) 
projwin.anon_72 !<{_v==_0}> !fstate_1 d_2 = projwin.lookup_73 <{_v==_0}> d_2 fstate_1
projwin.lookup_192 d_0 !_x_1 = case _x_1 (_predefined._Nil -> _Tuple2 False d_0) (_predefined._Cons _x_1_0 ds_1_1 -> case _x_1_0 (_Tuple2 u_2_0 d`_2_1 -> case (<{StdString.==_2}> d_0 <{d`_2_1}>) (True -> _Tuple2 u_2_0 d_0) (False -> projwin.lookup_192 d_0 ds_1_1) ) ) 
projwin.anon_191 !fstate_0 d_1 = projwin.lookup_192 d_1 fstate_0
projwin.getProjwinPaths ps_0 = let _x_1_0 = IdeState.getFromProject PmProject.PR_GetPaths ps_0, _x_1_1 = IdeState.getCurrentPaths (select _x_1_0::_Tuple2 1), _x_1_2 = IdeState.getFstate (select _x_1_1::_Tuple2 1) in _Tuple2 (UtilStrictLists.Map (projwin.anon_191 (select _x_1_2::_Tuple2 0)) (UtilStrictLists.AppendLists (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0))) (select _x_1_2::_Tuple2 1)
projwin.any_76::B !<{_v==_0}> p_1 !_x_2 = case _x_2 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 tl_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 b_2_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 p_1 b_2_1) (True -> True) (False -> projwin.any_76 <{_v==_0}> p_1 tl_1_1) ) ) 
projwin.isInPaths_81::B !<{_v==_0}> !srcpaths_1 !_x_2 = case _x_2 (_Tuple4 _x_1_0 p_1_1 _x_1_2 _x_1_3 -> projwin.any_76 <{_v==_0}> p_1_1 srcpaths_1) 
projwin.bf_77::B !<{_v==_0}> x_1 y_2 !_x_3 = case _x_3 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 p_2_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 p_2_1 y_2) (True -> False) (False -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 p_2_1 x_1) (True -> True) (False -> projwin.bf_77 <{_v==_0}> x_1 y_2 r_1_1) ) ) ) 
projwin.before_84::B !<{_v==_0}> !srcpaths_1 x_2 y_3 = projwin.bf_77 <{_v==_0}> x_2 y_3 srcpaths_1
projwin.less_83::B !<{_v==_0}> !<{_v<_1}> !srcpaths_2 a_3 b_4 c_5 d_6 = case (projwin.before_84 <{_v==_0}> srcpaths_2 b_4 d_6) (True -> True) (False -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 b_4 d_6) (True -> select <{_v<_1}>::<{StdOverloaded.<;}> 0 a_3 c_5) (False -> False) ) 
projwin.anon_75::B !<{_v==_0}> !<{_v<_1}> !srcpaths_2 !_x_3 !_x_4 = case _x_3 (_Tuple4 a_1_0 b_1_1 _x_1_2 _x_1_3 -> case _x_4 (_Tuple4 c_2_0 d_2_1 _x_2_2 _x_2_3 -> projwin.less_83 <{_v==_0}> <{_v<_1}> srcpaths_2 a_1_0 b_1_1 c_2_0 d_2_1) ) 
projwin.anon_128 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.anon_127 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.isUnfoldedDir_80::B !<{_v==_0}> d_1 !_x_2 = case _x_2 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 ds_1_1 -> case _x_1_0 (_Tuple2 u_2_0 d`_2_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 d_1 <{d`_2_1}>) (True -> u_2_0) (False -> projwin.isUnfoldedDir_80 <{_v==_0}> d_1 ds_1_1) ) ) 
projwin.update_74 !<{_v==_0}> d_1 u_2 !_x_3 = case _x_3 (_predefined._Nil -> _predefined._Cons (_Tuple2 u_2 d_1) _predefined._Nil) (_predefined._Cons e_1_0 fs_1_1 -> case e_1_0 (_Tuple2 _x_2_0 d`_2_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 d_1 <{d`_2_1}>) (True -> _predefined._Cons (_Tuple2 u_2 d_1) fs_1_1) (False -> _predefined._Cons e_1_0 (projwin.update_74 <{_v==_0}> d_1 u_2 fs_1_1)) ) ) 
projwin.update_193 d_0 u_1 !_x_2 = case _x_2 (_predefined._Nil -> _predefined._Cons (_Tuple2 u_1 d_0) _predefined._Nil) (_predefined._Cons e_1_0 fs_1_1 -> case e_1_0 (_Tuple2 _x_2_0 d`_2_1 -> case (<{StdString.==_2}> d_0 <{d`_2_1}>) (True -> _predefined._Cons (_Tuple2 u_1 d_0) fs_1_1) (False -> _predefined._Cons e_1_0 (projwin.update_193 d_0 u_1 fs_1_1)) ) ) 
projwin.updFstate d_0 u_1::B !ps_2 = let _x_1_0 = IdeState.getFstate ps_2 in IdeState.setFstate (projwin.update_193 d_0 u_1 (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1)
projwin.get_project_and_environment_paths !ps_0 = let _x_1_0 = IdeState.getCurrentPaths ps_0, _x_1_1 = IdeState.getProject (select _x_1_0::_Tuple2 1) in <{_Tuple2!3}> (UtilStrictLists.AppendLists (PmProject.PR_GetPaths (select _x_1_1::_Tuple2 0)) (select _x_1_0::_Tuple2 0)) (select _x_1_1::_Tuple2 1)
projwin.exists_module_90 !module_name_0 !file_ext_1 !ps_2 = let _x_1_0 = projwin.get_project_and_environment_paths ps_2, _x_1_1 = StdPStClass.accFiles_8 (PmDirCache.FindHModule module_name_0 file_ext_1 (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1), _x_1_2 = select _x_1_1::_Tuple2 0 in <{_Tuple3!5}> (select _x_1_2::_Tuple2 0) (UtilIO.GetLongPathName (select _x_1_2::_Tuple2 1)) (select _x_1_1::_Tuple2 1)
projwin.anon_126 !x_0 = x_0
projwin.could_not_find_notice_89 path_0 !ps_1 = ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Clean Project Manager" (_predefined._Cons "Could not find file:" (_predefined._Cons path_0 _predefined._Nil))) (ExtNotice.NoticeButton "OK" projwin.anon_126) _predefined._Nil) ps_1
projwin.open_imp_88 !dirpath_0 !imp_mod_name_with_ext_1 !ps_2 = let imp_mod_file_name_1_0 = StdPathname.replace_dots_by_dir_separators (StdPathname.RemoveSuffix imp_mod_name_with_ext_1), icl_file_name_1_1 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".icl", path_1_2 = <{StdString.+++_11}> dirpath_0 icl_file_name_1_1, _x_1_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_1_2) ps_2 in case (select _x_1_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_1_2 EdSelection.emptySelection (select _x_1_3::_Tuple2 1)) (False -> let hs_file_name_3_0 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".hs", path_3_1 = <{StdString.+++_11}> dirpath_0 hs_file_name_3_0, ps_3_2 = select _x_1_3::_Tuple2 1, _x_3_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_3_1) ps_3_2 in case (select _x_3_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_3_1 EdSelection.emptySelection (select _x_3_3::_Tuple2 1)) (False -> let lhs_file_name_5_0 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".lhs", path_5_1 = <{StdString.+++_11}> dirpath_0 lhs_file_name_5_0, ps_5_2 = select _x_3_3::_Tuple2 1, _x_5_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_5_1) ps_5_2 in case (select _x_5_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_5_1 EdSelection.emptySelection (select _x_5_3::_Tuple2 1)) (False -> let ps_7_0 = select _x_5_3::_Tuple2 1, _x_7_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".icl" ps_7_0 in case (select _x_7_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_7_1::_Tuple3 1) EdSelection.emptySelection (select _x_7_1::_Tuple3 2)) (False -> let ps_9_0 = select _x_7_1::_Tuple3 2, _x_9_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".hs" ps_9_0 in case (select _x_9_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_9_1::_Tuple3 1) EdSelection.emptySelection (select _x_9_1::_Tuple3 2)) (False -> let ps_11_0 = select _x_9_1::_Tuple3 2, _x_11_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".lhs" ps_11_0 in case (select _x_11_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_11_1::_Tuple3 1) EdSelection.emptySelection (select _x_11_1::_Tuple3 2)) (False -> projwin.could_not_find_notice_89 icl_file_name_1_1 (select _x_11_1::_Tuple3 2)) ) ) ) ) ) 
projwin.open_def_87 !dirpath_0 !imp_mod_name_with_ext_1 !ps_2 = let imp_mod_file_name_1_0 = StdPathname.replace_dots_by_dir_separators (StdPathname.RemoveSuffix imp_mod_name_with_ext_1), dcl_file_name_1_1 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".dcl", path_1_2 = <{StdString.+++_11}> dirpath_0 dcl_file_name_1_1, _x_1_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_1_2) ps_2 in case (select _x_1_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_1_2 EdSelection.emptySelection (select _x_1_3::_Tuple2 1)) (False -> let hs_file_name_3_0 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".hs", path_3_1 = <{StdString.+++_11}> dirpath_0 hs_file_name_3_0, ps_3_2 = select _x_1_3::_Tuple2 1, _x_3_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_3_1) ps_3_2 in case (select _x_3_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_3_1 EdSelection.emptySelection (select _x_3_3::_Tuple2 1)) (False -> let lhs_file_name_5_0 = <{StdString.+++_11}> imp_mod_file_name_1_0 ".lhs", path_5_1 = <{StdString.+++_11}> dirpath_0 lhs_file_name_5_0, ps_5_2 = select _x_3_3::_Tuple2 1, _x_5_3 = StdPStClass.accFiles_8 (UtilIO.FExists path_5_1) ps_5_2 in case (select _x_5_3::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_5_1 EdSelection.emptySelection (select _x_5_3::_Tuple2 1)) (False -> let ps_7_0 = select _x_5_3::_Tuple2 1, _x_7_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".dcl" ps_7_0 in case (select _x_7_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_7_1::_Tuple3 1) EdSelection.emptySelection (select _x_7_1::_Tuple3 2)) (False -> let ps_9_0 = select _x_7_1::_Tuple3 2, _x_9_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".hs" ps_9_0 in case (select _x_9_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_9_1::_Tuple3 1) EdSelection.emptySelection (select _x_9_1::_Tuple3 2)) (False -> let ps_11_0 = select _x_9_1::_Tuple3 2, _x_11_1 = projwin.exists_module_90 imp_mod_file_name_1_0 ".lhs" ps_11_0 in case (select _x_11_1::_Tuple3 0) (True -> edfiles.ed_open_path_sel (select _x_11_1::_Tuple3 1) EdSelection.emptySelection (select _x_11_1::_Tuple3 2)) (False -> projwin.could_not_find_notice_89 dcl_file_name_1_1 (select _x_11_1::_Tuple3 2)) ) ) ) ) ) 
projwin.f_78 !shift_0::B b_1 imp_mod_name_with_ext_2 = case shift_0 (True -> projwin.open_def_87 b_1 imp_mod_name_with_ext_2) (False -> projwin.open_imp_88 b_1 imp_mod_name_with_ext_2) 
<{projwin.f`_79}> !shift_0::B b_1 imp_mod_name_with_ext_2 = case shift_0 (True -> projwin.open_imp_88 b_1 imp_mod_name_with_ext_2) (False -> projwin.open_def_87 b_1 imp_mod_name_with_ext_2) 
projwin.openif_82 !rootdir_0 !root_1 !ps_2 = let defpath_1_0 = PmPath.MakeDefPathname root_1, path_1_1 = <{StdString.+++_11}> rootdir_0 defpath_1_0, _x_1_2 = StdPStClass.accFiles_8 (UtilIO.FExists path_1_1) ps_2 in case (select _x_1_2::_Tuple2 0) (True -> edfiles.ed_open_path_sel path_1_1 EdSelection.emptySelection (select _x_1_2::_Tuple2 1)) (False -> projwin.open_imp_88 rootdir_0 (PmPath.MakeImpPathname root_1) (select _x_1_2::_Tuple2 1)) 
projwin.any_195::B p_0 !_x_1 = case _x_1 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 tl_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 b_2_1 -> case (<{StdString.==_2}> p_0 b_2_1) (True -> True) (False -> projwin.any_195 p_0 tl_1_1) ) ) 
projwin.isInPaths_194::B !srcpaths_0 !_x_1 = case _x_1 (_Tuple4 _x_1_0 p_1_1 _x_1_2 _x_1_3 -> projwin.any_195 p_1_1 srcpaths_0) 
projwin.bf_199::B x_0 y_1 !_x_2 = case _x_2 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 p_2_1 -> case (<{StdString.==_2}> p_2_1 y_1) (True -> False) (False -> case (<{StdString.==_2}> p_2_1 x_0) (True -> True) (False -> projwin.bf_199 x_0 y_1 r_1_1) ) ) ) 
projwin.before_198::B !srcpaths_0 x_1 y_2 = projwin.bf_199 x_1 y_2 srcpaths_0
projwin.less_197::B !<{_v<_0}> !srcpaths_1 a_2 !b_3 c_4 !d_5 = case (projwin.before_198 srcpaths_1 b_3 d_5) (True -> True) (False -> case (<{StdString.==_2}> b_3 d_5) (True -> select <{_v<_0}>::<{StdOverloaded.<;}> 0 a_2 c_4) (False -> False) ) 
projwin.anon_196::B !<{_v<_0}> !srcpaths_1 !_x_2 !_x_3 = case _x_2 (_Tuple4 a_1_0 b_1_1 _x_1_2 _x_1_3 -> case _x_3 (_Tuple4 c_2_0 d_2_1 _x_2_2 _x_2_3 -> projwin.less_197 <{_v<_0}> srcpaths_1 a_1_0 b_1_1 c_2_0 d_2_1) ) 
projwin.isUnfoldedDir_200::B d_0 !_x_1 = case _x_1 (<{_predefined._!Nil!}> -> False) (<{_predefined._!Cons!}> _x_1_0 ds_1_1 -> case _x_1_0 (_Tuple2 u_2_0 d`_2_1 -> case (<{StdString.==_2}> d_0 <{d`_2_1}>) (True -> u_2_0) (False -> projwin.isUnfoldedDir_200 d_0 ds_1_1) ) ) 
projwin.less_204::B !srcpaths_0 a_1 !b_2 c_3 !d_4 = case (projwin.before_198 srcpaths_0 b_2 d_4) (True -> True) (False -> case (<{StdString.==_2}> b_2 d_4) (True -> <{StdString.<_3}> a_1 c_3) (False -> False) ) 
projwin.anon_203::B !srcpaths_0 !_x_1 !_x_2 = case _x_1 (_Tuple4 a_1_0 b_1_1 _x_1_2 _x_1_3 -> case _x_2 (_Tuple4 c_2_0 d_2_1 _x_2_2 _x_2_3 -> projwin.less_204 srcpaths_0 a_1_0 b_1_1 c_2_0 d_2_1) ) 
projwin.anon_202 !g_0 x_1 = projwin.pm_update_project_window_interactive (g_0 x_1)
projwin.anon_201 !g_0 x_1 = projwin.pm_update_project_window_interactive (g_0 x_1)
projwin.makenice_85 shift_0::B appPath_1 prjPath_2 srcpaths_3 _x_4::B _x_5 !_x_6 = case _x_6 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple4 imp_mod_name_with_ext_2_0 b_2_1 _x_2_2 _x_2_3 -> case (StdBool.not (<{StdString.==_2}> _x_5 b_2_1)) (True -> let <{u`_4_0}>::B = projwin.isUnfoldedDir_200 b_2_1 srcpaths_3 in _predefined._Cons (<{projwin._if;538;35_223}> <{u`_4_0}> appPath_1 prjPath_2 b_2_1) (projwin.makenice_85 shift_0 appPath_1 prjPath_2 srcpaths_3 <{u`_4_0}> b_2_1 _x_6)) (False -> case _x_4 (True -> _predefined._Cons (_Tuple3 (PmPath.GetModuleName imp_mod_name_with_ext_2_0) (projwin.f_78 shift_0 b_2_1 imp_mod_name_with_ext_2_0) (<{projwin.f`_79}> shift_0 b_2_1 imp_mod_name_with_ext_2_0)) (projwin.makenice_85 shift_0 appPath_1 prjPath_2 srcpaths_3 _x_4 _x_5 r_1_1)) (False -> projwin.makenice_85 shift_0 appPath_1 prjPath_2 srcpaths_3 _x_4 _x_5 r_1_1) ) ) ) 
projwin.items_86 srcpaths_0 appPath_1 prjPath_2 !modules_3 shift_4::B = let mods_1_0 = UtilStrictLists.StrictListToList modules_3 in case (StdList.isEmpty mods_1_0) (True -> _predefined._Nil) (False -> let _x_3_1 = select mods_1_0::_Tuple2 0, root_3_2 = select _x_3_1::_Tuple4 0, rootdir_3_3 = select _x_3_1::_Tuple4 1 in _predefined._Cons (_Tuple3 (PmPath.GetModuleName root_3_2) (projwin.open_imp_88 rootdir_3_3 (PmPath.MakeImpPathname root_3_2)) (projwin.openif_82 rootdir_3_3 root_3_2)) (projwin.makenice_85 shift_4 appPath_1 prjPath_2 srcpaths_0 True "" (StdOrdList.sortBy (projwin.anon_203 srcpaths_0) (StdList.filter (projwin.isInPaths_194 srcpaths_0) (select mods_1_0::_Tuple2 1))))) 
projwin.pm_update_project_window_interactive !ps_0 = let _x_1_0 = IdeState.getPWI ps_0, ps_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = IdeState.getPWX ps_1_1, lb_1_3 = select _x_1_0::_Tuple2 0, ps_1_4 = select _x_1_2::_Tuple2 1, _x_1_5 = IdeState.getPWM ps_1_4, ps_1_6 = select _x_1_5::_Tuple2 1, _x_1_7 = IdeState.getPrefs ps_1_6, ps_1_8 = select _x_1_7::_Tuple2 1, _x_1_9 = IdeState.getFromProject PmProject.PR_GetModuleStuff ps_1_8, ps_1_10 = select _x_1_9::_Tuple2 1, _x_1_11 = IdeState.getFromProject PmProject.PR_GetExecPath ps_1_10, ps_1_12 = select _x_1_11::_Tuple2 1, _x_1_13 = IdeState.getFromProject PmProject.PR_GetRootModuleName ps_1_12, ps_1_14 = select _x_1_13::_Tuple2 1, _x_1_15 = IdeState.getPWW ps_1_14, w_1_16 = select _x_1_15::_Tuple2 0, ps_1_17 = select _x_1_15::_Tuple2 1, _x_1_18 = StdPSt.accPIO (StdControl.getWindow w_1_16) ps_1_17, ps_1_19 = select _x_1_18::_Tuple2 1, ps_1_20 = ExtListBox.closeAllExtListBoxItems lb_1_3 ps_1_19, _x_1_21 = projwin.getProjwinPaths ps_1_20, ps_1_22 = select _x_1_21::_Tuple2 1, _x_1_23 = IdeState.getStup ps_1_22, appPath_1_24 = select _x_1_23::_Tuple2 0, ps_1_25 = select _x_1_23::_Tuple2 1, _x_1_26 = IdeState.getFromProject PmProject.PR_GetRootDir ps_1_25, prjPath_1_27 = select _x_1_26::_Tuple2 0, ps_1_28 = select _x_1_26::_Tuple2 1, srcpaths_1_29 = select _x_1_21::_Tuple2 0, modules_1_30 = select _x_1_9::_Tuple2 0, prefs_1_31 = select _x_1_7::_Tuple2 0 in flextextcontrol.setFlexTexts (_predefined._Cons (_Tuple2 (select _x_1_2::_Tuple2 0) (PmPath.symPath appPath_1_24 prjPath_1_27 (select _x_1_11::_Tuple2 0))) (_predefined._Cons (_Tuple2 (select _x_1_5::_Tuple2 0) (PmPath.symPath appPath_1_24 prjPath_1_27 (select _x_1_13::_Tuple2 0))) _predefined._Nil)) (<{projwin._c;481;23_222}> (select (<{projwin._c;463;23_221}> (select _x_1_18::_Tuple2 0) lb_1_3)::_Tuple2 1) lb_1_3 srcpaths_1_29 appPath_1_24 prjPath_1_27 modules_1_30 prefs_1_31 ps_1_28)
<{projwin._if;538;35_223}> !<{u`_0}>::B appPath_1 prjPath_2 b_3 = case <{u`_0}> (True -> _Tuple3 (<{StdString.+++_11}> "\\\\--- " (PmPath.symPath appPath_1 prjPath_2 b_3)) (projwin.anon_201 (projwin.updFstate b_3 False)) StdFunc.id) (_ -> _Tuple3 (<{StdString.+++_11}> "//--- " (PmPath.symPath appPath_1 prjPath_2 b_3)) (projwin.anon_202 (projwin.updFstate b_3 True)) StdFunc.id)
<{projwin._c;481;23_222}> !_x_0 !lb_1 srcpaths_2 appPath_3 prjPath_4 !modules_5 prefs_6 !ps_7 = case _x_0 (Data.Maybe.Nothing -> ExtListBox.appendExtListBoxItems lb_1 (projwin.items_86 srcpaths_2 appPath_3 prjPath_4 modules_5 (select (select prefs_6::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 6)) ps_7) (Data.Maybe.Just jframe_1_0 -> StdPSt.appPIO (StdControl.moveControlViewFrame (select lb_1::ExtListBox._ExtListBoxId 0) (StdIOBasic.toVector_23 (select jframe_1_0::StdIOBasic._Rectangle 0))) (ExtListBox.appendExtListBoxItems lb_1 (projwin.items_86 srcpaths_2 appPath_3 prjPath_4 modules_5 (select (select prefs_6::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 6)) ps_7)) 
<{projwin._c;463;23_221}> !_x_0 lb_1 = case _x_0 (Data.Maybe.Nothing -> _Tuple2 False Data.Maybe.Nothing) (Data.Maybe.Just ws_1_0 -> StdControl.getControlViewFrame (select lb_1::ExtListBox._ExtListBoxId 0) ws_1_0) 
projwin.pm_update_project_window !ps_0 = let _x_1_0 = IdeState.getInteract ps_0 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> select _x_1_0::_Tuple2 1) (False -> projwin.pm_update_project_window_interactive (select _x_1_0::_Tuple2 1)) 
projwin.apply_56 !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> let _x_3_0::B = IdeState.getPWI ps_1_1, ps_3_1 = select _x_3_0::_Tuple2 1, _x_3_2 = ioutil.accScreenPicture_21 (StdPicture.openFont (StdPictureDef._FontDef fn_2_0 _predefined._Nil fs_2_1)) ps_3_1, _x_3_3 = select _x_3_2::_Tuple2 0, fnt_ok_3_4 = select _x_3_3::_Tuple2 0 in case (StdBool.not fnt_ok_3_4) (True -> let lb_5_0 = select _x_3_0::_Tuple2 0, _x_5_1 = IdeState.getPWW (ExtListBox.setExtListBoxPen lb_5_0 (_predefined._Cons (StdPictureDef.PenColour fc_2_2) (_predefined._Cons (StdPictureDef.PenBack bc_2_3) (<{projwin._if;249;23_224}> fnt_ok_3_4 fnt_5_4))) (ExtListBox.closeAllExtListBoxItems lb_5_0 (select _x_3_2::_Tuple2 1))), _x_5_2 = IdeState.getPrefs (StdPSt.appPIO (StdWindow.setWindowLook (select _x_5_1::_Tuple2 0) True (_Tuple2 True (projwin.anon_44 hc_2_4))) (select _x_5_1::_Tuple2 1)), prefs_5_3 = select _x_5_2::_Tuple2 0, fnt_5_4 = select _x_3_3::_Tuple2 1 in _Tuple2 ls_1_0 (IdeState.setPrefs (update prefs_5_3::PmPrefs._Prefs [7:update (select prefs_5_3::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs [2:hc_2_4,3:fc_2_2,4:bc_2_3,5:update (select (select prefs_5_3::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 5)::StdPictureDef._FontDef [0:fn_2_0,2:fs_2_1],6:shift_2_6]]) (select _x_5_2::_Tuple2 1))) (False -> let lb_5_0 = select _x_3_0::_Tuple2 0, pen2_5_1 = <{projwin._if;249;23_225}> fnt_ok_3_4 fnt_5_7, _x_5_2 = IdeState.getPWW (ExtListBox.setExtListBoxPen lb_5_0 (_predefined._Cons (StdPictureDef.PenColour fc_2_2) (_predefined._Cons (StdPictureDef.PenBack bc_2_3) pen2_5_1)) (ExtListBox.closeAllExtListBoxItems lb_5_0 (select _x_3_2::_Tuple2 1))), _x_5_3 = IdeState.getPrefs (StdPSt.appPIO (StdWindow.setWindowLook (select _x_5_2::_Tuple2 0) True (_Tuple2 True (projwin.anon_44 hc_2_4))) (select _x_5_2::_Tuple2 1)), prefs_5_4 = select _x_5_3::_Tuple2 0, _x_5_5 = IdeState.getPWX (IdeState.setPrefs (update prefs_5_4::PmPrefs._Prefs [7:update (select prefs_5_4::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs [2:hc_2_4,3:fc_2_2,4:bc_2_3,5:update (select (select prefs_5_4::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 5)::StdPictureDef._FontDef [0:fn_2_0,2:fs_2_1],6:shift_2_6]]) (select _x_5_3::_Tuple2 1)), _x_5_6 = IdeState.getPWM (select _x_5_5::_Tuple2 1), fnt_5_7 = select _x_3_3::_Tuple2 1 in _Tuple2 ls_1_0 (projwin.pm_update_project_window (flextextcontrol.addFlexPens (_predefined._Cons (_Tuple2 (select _x_5_5::_Tuple2 0) pen2_5_1) (_predefined._Cons (_Tuple2 (select _x_5_6::_Tuple2 0) pen2_5_1) _predefined._Nil)) (select _x_5_6::_Tuple2 1)))) ) ) 
<{projwin._if;249;23_225}> !fnt_ok_0::B fnt_1 = case fnt_ok_0 (True -> _predefined._Cons (StdPictureDef.PenFont fnt_1) _predefined._Nil) (_ -> _predefined._Nil)
<{projwin._if;249;23_224}> !fnt_ok_0::B fnt_1 = case fnt_ok_0 (True -> _predefined._Cons (StdPictureDef.PenFont fnt_1) _predefined._Nil) (_ -> _predefined._Nil)
projwin.cont4_43 !finish_0 cr_1 col_2 !_x_3 = case _x_3 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = projwin.apply_56 (_Tuple2 (<{projwin._c;240;27_226}> cr_1 ls_1_0 col_2) ps_1_1) in finish_0 (_Tuple2 (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1))) 
<{projwin._c;240;27_226}> !cr_0 !ls_1 !col_2 = case cr_0 (projwin.HC -> update ls_1::projwin._PWO [4:col_2]) (projwin.FC -> update ls_1::projwin._PWO [2:col_2]) (projwin.BC -> update ls_1::projwin._PWO [3:col_2]) 
projwin.cont1_42 finish_0 cr_1 lsid_2 !col_3 !ps_4 = case (Data.Maybe.isNothing col_3) (True -> ps_4) (False -> select (StdReceiver.asyncSend lsid_2 (projwin.cont4_43 finish_0 cr_1 (Data.Maybe.fromJust col_3)) ps_4)::_Tuple2 1) 
projwin.cset_55 rgbid_0 lsid_1 finish_2 !_x_3 = case _x_3 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_0 (projwin.cont1_42 finish_2 cr_2_5 lsid_1) ps_1_1)) ) 
projwin.applyFun_51 rgbid_0 lsid_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> projwin.cset_55 rgbid_0 lsid_1 StdFunc.id (_Tuple2 ls_1_0 ps_1_1)) 
projwin.cancelFun_53 inils_0 dialog_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = projwin.apply_56 (_Tuple2 inils_0 ps_1_1) in _Tuple2 (select _x_2_0::_Tuple2 0) (StdWindow.closeWindow dialog_1 (select _x_2_0::_Tuple2 1))) 
projwin.okFun_52 rgbid_0 lsid_1 dialog_2 !_x_3 = case _x_3 (_Tuple2 ls_1_0 ps_1_1 -> projwin.cset_55 rgbid_0 lsid_1 (StdIOBasic.noLS (StdWindow.closeWindow dialog_2)) (_Tuple2 ls_1_0 ps_1_1)) 
projwin.anon_38 !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::projwin._PWO [6:False]) ps_1_1) 
projwin.anon_37 !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::projwin._PWO [6:True]) ps_1_1) 
projwin.mfilter_48::B !_x_0 = case _x_0 (StdIOCommon.MouseDown _x_1_0 _x_1_1 _x_1_2 -> True) (_ -> False)
projwin.cont2_41 ac_0 col_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> _Tuple2 (<{projwin._c;208;23_227}> cr_2_5 ls_1_0 col_1 ac_0) ps_1_1) ) 
<{projwin._c;208;23_227}> !cr_0 !ls_1 !col_2 !ac_3 = case cr_0 (projwin.HC -> update ls_1::projwin._PWO [4:col_2,5:ac_3]) (projwin.FC -> update ls_1::projwin._PWO [2:col_2,5:ac_3]) (projwin.BC -> update ls_1::projwin._PWO [3:col_2,5:ac_3]) 
projwin.cont_40 lsid_0 rgbid_1 bc_2 bc_3 fc_4 fc_5 hc_6 hc_7 cr_8 ac_9 !col_10 !ps_11 = case (Data.Maybe.isNothing col_10) (True -> ps_11) (False -> let col_2_0 = Data.Maybe.fromJust col_10 in select (StdReceiver.asyncSend lsid_0 (projwin.cont2_41 ac_9 col_2_0) (<{colorpickcontrol.setColourBoxColour`}> rgbid_1 (<{projwin._c;199;22_228}> ac_9 hc_7 fc_5 bc_3) (colorpickcontrol.setColourBoxId rgbid_1 (<{projwin._c;195;21_229}> ac_9 hc_6 fc_4 bc_2) (StdPSt.appPIO (<{projwin._c;185;31_232}> ac_9 bc_2 cr_8 col_2_0 bc_3) (StdPSt.appPIO (<{projwin._c;175;31_235}> ac_9 fc_4 cr_8 col_2_0 fc_5) (StdPSt.appPIO (<{projwin._c;165;31_238}> ac_9 hc_6 cr_8 col_2_0 hc_7) ps_11))))))::_Tuple2 1) 
<{projwin._c;165;31_238}> !ac_0 hc_1 cr_2 col_3 hc_4 = case ac_0 (projwin.HC -> <{colorpickcontrol.SetColourBox`}> hc_1 (<{projwin._c;166;60_236}> cr_2 col_3 hc_4)) (_ -> colorpickcontrol.SetColourBox hc_1 (<{projwin._c;170;59_237}> cr_2 col_3 hc_4))
<{projwin._c;170;59_237}> !cr_0 col_1 hc_2 = case cr_0 (projwin.HC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour hc_2)
<{projwin._c;166;60_236}> !cr_0 col_1 hc_2 = case cr_0 (projwin.HC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour hc_2)
<{projwin._c;175;31_235}> !ac_0 fc_1 cr_2 col_3 fc_4 = case ac_0 (projwin.FC -> <{colorpickcontrol.SetColourBox`}> fc_1 (<{projwin._c;176;60_233}> cr_2 col_3 fc_4)) (_ -> colorpickcontrol.SetColourBox fc_1 (<{projwin._c;180;59_234}> cr_2 col_3 fc_4))
<{projwin._c;180;59_234}> !cr_0 col_1 fc_2 = case cr_0 (projwin.FC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour fc_2)
<{projwin._c;176;60_233}> !cr_0 col_1 fc_2 = case cr_0 (projwin.FC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour fc_2)
<{projwin._c;185;31_232}> !ac_0 bc_1 cr_2 col_3 bc_4 = case ac_0 (projwin.BC -> <{colorpickcontrol.SetColourBox`}> bc_1 (<{projwin._c;186;60_230}> cr_2 col_3 bc_4)) (_ -> colorpickcontrol.SetColourBox bc_1 (<{projwin._c;190;59_231}> cr_2 col_3 bc_4))
<{projwin._c;190;59_231}> !cr_0 col_1 bc_2 = case cr_0 (projwin.BC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour bc_2)
<{projwin._c;186;60_230}> !cr_0 col_1 bc_2 = case cr_0 (projwin.BC -> StdPicture.toRGBColour col_1) (_ -> StdPicture.toRGBColour bc_2)
<{projwin._c;195;21_229}> !ac_0 hc_1 fc_2 bc_3 = case ac_0 (projwin.HC -> hc_1) (projwin.FC -> fc_2) (projwin.BC -> bc_3) 
<{projwin._c;199;22_228}> !ac_0 hc_1 fc_2 bc_3 = case ac_0 (projwin.HC -> hc_1) (projwin.FC -> fc_2) (projwin.BC -> bc_3) 
<{projwin.==_123}>::B !_x_0 !_x_1 = case _x_0 (projwin.HC -> case _x_1 (projwin.HC -> True) ) (projwin.FC -> case _x_1 (projwin.FC -> True) ) (projwin.BC -> case _x_1 (projwin.BC -> True) ) (_ -> False)
projwin.mfun_49 rgbid_0 lsid_1 hc_2 fc_3 bc_4 !ac_5 _x_6 !_x_7 = case _x_7 (_Tuple2 ls_1_0 ps_1_1 -> case ls_1_0 (projwin._PWO fn_2_0 fs_2_1 fc_2_2 bc_2_3 hc_2_4 cr_2_5 shift_2_6 -> case (<{projwin.==_123}> cr_2_5 ac_5) (True -> _Tuple2 ls_1_0 ps_1_1) (False -> _Tuple2 ls_1_0 (colorpickcontrol.getColourBoxColour rgbid_0 (projwin.cont_40 lsid_1 rgbid_0 bc_4 bc_2_3 fc_3 fc_2_2 hc_2 hc_2_4 cr_2_5 ac_5) ps_1_1)) ) ) 
projwin.sizefun_58 size_0::I !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::projwin._PWO [1:size_0]) ps_1_1) 
projwin.fontfun_57 name_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> _Tuple2 (update ls_1_0::projwin._PWO [0:name_0]) ps_1_1) 
projwin.projwinOptions !ps_0 = let _x_1_0 = StdId.openId_13 ps_0, ps_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = StdId.openId_13 ps_1_1, ps_1_3 = select _x_1_2::_Tuple2 1, _x_1_4 = StdId.openId_13 ps_1_3, ps_1_5 = select _x_1_4::_Tuple2 1, _x_1_6 = StdId.openId_13 ps_1_5, ps_1_7 = select _x_1_6::_Tuple2 1, _x_1_8 = StdId.openId_13 ps_1_7, ps_1_9 = select _x_1_8::_Tuple2 1, _x_1_10 = StdId.openId_13 ps_1_9, ps_1_11 = select _x_1_10::_Tuple2 1, _x_1_12 = colorpickcontrol.openRGBId (<{StdId.Ids;}> StdId.openId_13 StdId.openIds_14 StdId.openR2Id_15 StdId.openR2Ids_16 StdId.openRId_17 StdId.openRIds_18) ps_1_11, ps_1_13 = select _x_1_12::_Tuple2 1, _x_1_14 = StdId.openRId_17 ps_1_13, ps_1_15 = select _x_1_14::_Tuple2 1, _x_1_16 = StdPSt.accPIO (StdPSt.accScreenPicture_13 StdPicture.getFontNames) ps_1_15, ps_1_17 = select _x_1_16::_Tuple2 1, _x_1_18 = IdeState.getPWI ps_1_17, lb_1_19 = select _x_1_18::_Tuple2 0, ps_1_20 = select _x_1_18::_Tuple2 1, _x_1_21 = ExtListBox.getExtListBoxPen lb_1_19 ps_1_20, pen_1_22 = select _x_1_21::_Tuple2 0 in case (Data.Maybe.isNothing pen_1_22) (True -> select _x_1_21::_Tuple2 1) (False -> let Controls_3_0 = <{StdControlClass.Controls;}> morecontrols.controlToHandles_0 morecontrols.getControlType_1, Controls_3_1 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_9 colorpickcontrol.getControlType_10, Controls_3_2 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_0 Controls_3_1) (StdControlClass.getControlType_9 Controls_3_0 Controls_3_1), Controls_3_3 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_22 Controls_3_2) (StdControlClass.getControlType_23 Controls_3_2), Controls_3_4 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_3_5 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_3_6 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_3_7 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_3_8 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31, Controls_3_9 = <{StdControlClass.Controls;}> colorpickcontrol.controlToHandles_13 colorpickcontrol.getControlType_14, Controls_3_10::B = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_8 Controls_3_9) (StdControlClass.getControlType_9 Controls_3_8 Controls_3_9), Controls_3_11 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_7 Controls_3_10) (StdControlClass.getControlType_9 Controls_3_7 Controls_3_10), Controls_3_12 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_6 Controls_3_11) (StdControlClass.getControlType_9 Controls_3_6 Controls_3_11), Controls_3_13 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_5 Controls_3_12) (StdControlClass.getControlType_9 Controls_3_5 Controls_3_12), Controls_3_14 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_4 Controls_3_13) (StdControlClass.getControlType_9 Controls_3_4 Controls_3_13), Controls_3_15 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_22 Controls_3_14) (StdControlClass.getControlType_23 Controls_3_14), Controls_3_16::I = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_26 StdControlClass.getControlType_27, Controls_3_17 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_18 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_19 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_20 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_21 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_22 = <{StdControlClass.Controls;}> StdControlReceiver.controlToHandles_0 StdControlReceiver.getControlType_1, Controls_3_23 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_21 Controls_3_22) (StdControlClass.getControlType_9 Controls_3_21 Controls_3_22), Controls_3_24 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_20 Controls_3_23) (StdControlClass.getControlType_9 Controls_3_20 Controls_3_23), Controls_3_25 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_19 Controls_3_24) (StdControlClass.getControlType_9 Controls_3_19 Controls_3_24), Controls_3_26 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_18 Controls_3_25) (StdControlClass.getControlType_9 Controls_3_18 Controls_3_25), Controls_3_27 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_17 Controls_3_26) (StdControlClass.getControlType_9 Controls_3_17 Controls_3_26), Controls_3_28 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_16 Controls_3_27) (StdControlClass.getControlType_9 Controls_3_16 Controls_3_27), Controls_3_29 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_15 Controls_3_28) (StdControlClass.getControlType_9 Controls_3_15 Controls_3_28), fdef_3_30 = ioutil.getPenAttributeFont (Data.Maybe.fromJust pen_1_22), inifn_3_31 = select fdef_3_30::StdPictureDef._FontDef 0, inifs_3_32 = select fdef_3_30::StdPictureDef._FontDef 2, _x_3_33 = IdeState.getPrefs (select _x_1_21::_Tuple2 1), prefs_3_34 = select _x_3_33::_Tuple2 0, inifc_3_35 = select (select prefs_3_34::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 3, inibc_3_36 = select (select prefs_3_34::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 4, inihc_3_37 = select (select prefs_3_34::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 2, inishift_3_38 = select (select prefs_3_34::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 6, inistate_3_39 = projwin._PWO inifn_3_31 inifs_3_32 inifc_3_35 inibc_3_36 inihc_3_37 projwin.HC inishift_3_38, left_3_40 = StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32), rgbid_3_41 = select _x_1_12::_Tuple2 0, hcid_3_42 = select _x_1_6::_Tuple2 0, lsid_3_43 = select _x_1_14::_Tuple2 0, fcid_3_44 = select _x_1_8::_Tuple2 0, bcid_3_45 = select _x_1_10::_Tuple2 0, ok_3_46 = select _x_1_2::_Tuple2 0, dialog_3_47 = select _x_1_0::_Tuple2 0, cancel_3_48 = select _x_1_4::_Tuple2 0 in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_3 Controls_3_29) (StdControlClass.getControlType_9 Controls_3_3 Controls_3_29)) inistate_3_39 (StdWindowDef.Dialog "Project Window..." (<{StdIOBasic.:+:}> (StdControlDef.LayoutControl (<{StdIOBasic.:+:}> (morecontrols.FontNameSizeControl inifn_3_31 inifs_3_32 (select _x_1_16::_Tuple2 0) (_predefined._Cons 7 (_predefined._Cons 8 (_predefined._Cons 9 (_predefined._Cons 10 (_predefined._Cons 11 (_predefined._Cons 12 _predefined._Nil)))))) projwin.fontfun_57 projwin.sizefun_58 (_predefined._Cons left_3_40 _predefined._Nil)) (<{colorpickcontrol.RGBColourPickControl`}> rgbid_3_41 inihc_3_37 hcid_3_42 (Data.Maybe.Just (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)))) _predefined._Nil) (<{StdIOBasic.:+:}> (StdControlDef.LayoutControl (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Header:" (_predefined._Cons left_3_40 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{StdIOBasic.:+:}> (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour inihc_3_37) hcid_3_42 (_Tuple2 projwin.mfilter_48 (projwin.mfun_49 rgbid_3_41 lsid_3_43 hcid_3_42 fcid_3_44 bcid_3_45 projwin.HC)) Data.Maybe.Nothing) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Text:" (_predefined._Cons left_3_40 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{StdIOBasic.:+:}> (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour inifc_3_35) fcid_3_44 (_Tuple2 projwin.mfilter_48 (projwin.mfun_49 rgbid_3_41 lsid_3_43 hcid_3_42 fcid_3_44 bcid_3_45 projwin.FC)) Data.Maybe.Nothing) (<{StdIOBasic.:+:}> (StdControlDef.TextControl "Background:" (_predefined._Cons left_3_40 (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Background: ")) _predefined._Nil))) (<{colorpickcontrol.ColourBoxControl`}> (StdPicture.toRGBColour inibc_3_36) bcid_3_45 (_Tuple2 projwin.mfilter_48 (projwin.mfun_49 rgbid_3_41 lsid_3_43 hcid_3_42 fcid_3_44 bcid_3_45 projwin.BC)) Data.Maybe.Nothing)))))) _predefined._Nil) (<{StdIOBasic.:+:}> (StdControlDef.RadioControl (_predefined._Cons (_Tuple3 "Open .dcl on double-click" Data.Maybe.Nothing projwin.anon_37) (_predefined._Cons (_Tuple3 "Open .icl on double-click" Data.Maybe.Nothing projwin.anon_38) _predefined._Nil)) (StdControlDef.Columns 1) (<{projwin._if;82;28_239}> inishift_3_38) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Ok" (_predefined._Cons (StdControlDef.ControlId ok_3_46) (_predefined._Cons (StdControlDef.ControlFunction (projwin.okFun_52 rgbid_3_41 lsid_3_43 dialog_3_47)) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Right StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Cancel")) _predefined._Nil))))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Cancel" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (projwin.cancelFun_53 inistate_3_39 dialog_3_47)) (_predefined._Cons (StdControlDef.ControlId cancel_3_48) _predefined._Nil)))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Apply" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (projwin.applyFun_51 rgbid_3_41 lsid_3_43)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Paste" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (projwin.pasteFun_47 rgbid_3_41 hcid_3_42 fcid_3_44 bcid_3_45)) _predefined._Nil))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Copy" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.LeftOfPrev StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (projwin.copyFun_46 rgbid_3_41)) _predefined._Nil))) (StdReceiverDef.Receiver lsid_3_43 projwin.lsfun_54 _predefined._Nil))))))))) (_predefined._Cons (StdWindowDef.WindowId dialog_3_47) (_predefined._Cons (StdWindowDef.WindowOk ok_3_46) (_predefined._Cons (StdWindowDef.WindowCancel cancel_3_48) (_predefined._Cons (StdWindowDef.WindowClose (projwin.cancelFun_53 inistate_3_39 dialog_3_47)) (_predefined._Cons (StdWindowDef.WindowInit (projwin.setBoxCol_50 hcid_3_42 fcid_3_44 bcid_3_45)) _predefined._Nil)))))) (select _x_3_33::_Tuple2 1))::_Tuple2 1) 
<{projwin._if;82;28_239}>::I !inishift_0::B = case inishift_0 (True -> 1) (_ -> 2)
projwin.getFont_68 !fd_0 !pic_1 = let _x_1_0 = StdPicture.openFont fd_0 pic_1, _x_1_1 = select _x_1_0::_Tuple2 0 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> StdPicture.openDialogFont (select _x_1_0::_Tuple2 1)) (False -> _Tuple2 (select _x_1_1::_Tuple2 1) (select _x_1_0::_Tuple2 1)) 
projwin.anon_65 !cc_0 _x_1 !nw_2 = update cc_0::StdIOBasic._Size [0:<{StdInt.-_7}> (select nw_2::StdIOBasic._Size 0) 20]
projwin.anon_64 !cc_0 _x_1 !nw_2 = update cc_0::StdIOBasic._Size [0:<{StdInt.-_7}> (select nw_2::StdIOBasic._Size 0) 20]
projwin.top_controls_71 lb_0 local_1 local2_2 local3_3 xx_4 mm_5 pw_main_6 pw_exec_7 butw_8::I fnt_9 = <{StdIOBasic.:+:}> (flextextcontrol.FlexText pw_exec_7 xx_4 (_predefined._Cons (StdControlDef.ControlPen (_predefined._Cons (StdPictureDef.PenColour StdPictureDef.Black) (_predefined._Cons (StdPictureDef.PenBack StdPictureDef.LightGrey) (_predefined._Cons (StdPictureDef.PenFont fnt_9) _predefined._Nil)))) (_predefined._Cons (StdControlDef.ControlResize projwin.anon_64) (_predefined._Cons (StdControlDef.ControlId local3_3) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Fix (StdIOCommon.OffsetVector (StdIOBasic._Vector2 10 10)))) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.PixelWidth (<{StdInt.-_7}> butw_8 20))) _predefined._Nil)))))) (flextextcontrol.FlexText pw_main_6 mm_5 (_predefined._Cons (StdControlDef.ControlPen (_predefined._Cons (StdPictureDef.PenColour StdPictureDef.Black) (_predefined._Cons (StdPictureDef.PenBack StdPictureDef.LightGrey) (_predefined._Cons (StdPictureDef.PenFont fnt_9) _predefined._Nil)))) (_predefined._Cons (StdControlDef.ControlResize projwin.anon_65) (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 (StdIOCommon.Below local3_3) (StdIOCommon.OffsetVector (update StdIOBasic.zero_11::StdIOBasic._Vector2 [1:5])))) (_predefined._Cons (StdControlDef.ControlId local2_2) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.PixelWidth (<{StdInt.-_7}> butw_8 20))) _predefined._Nil))))))
projwin.anon_59 lb_0 xx_1 mm_2 lc_3 lc2_4 lc3_5 pw_main_6 pw_exec_7 fnt_8 butw_9::I = projwin.top_controls_71 (select lb_0::ExtListBox._ExtListBoxId 0) lc_3 lc2_4 lc3_5 xx_1 mm_2 pw_main_6 pw_exec_7 butw_9 fnt_8
projwin.hasSelection_119::B !selection_0 = case (StdList.isEmpty selection_0) (True -> False) (False -> True) 
projwin.anon_117 appPath_0 prjPath_1 !_x_2 = case _x_2 (_Tuple2 p_1_0 b_1_1 -> _Tuple2 (PmPath.fulPath appPath_0 prjPath_1 p_1_0) b_1_1) 
projwin.foldl_131 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> projwin.foldl_131 op_0 (op_0 r_1 a_1_0) x_1_1) 
projwin.update_116 !<{_v==_0}> !_x_1 !_x_2 = case _x_1 (_predefined._Nil -> case _x_2 (_Tuple2 d_2_0 u_2_1 -> _predefined._Cons (_Tuple2 u_2_1 d_2_0) _predefined._Nil) ) (_predefined._Cons e_1_0 fs_1_1 -> case e_1_0 (_Tuple2 _x_2_0 d`_2_1 -> case _x_2 (_Tuple2 d_3_0 u_3_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 d_3_0 <{d`_2_1}>) (True -> _predefined._Cons (_Tuple2 u_3_1 d_3_0) fs_1_1) (False -> _predefined._Cons e_1_0 (projwin.update_116 <{_v==_0}> fs_1_1 (_Tuple2 d_3_0 u_3_1))) ) ) ) 
projwin.update_205 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_Tuple2 d_2_0 u_2_1 -> _predefined._Cons (_Tuple2 u_2_1 d_2_0) _predefined._Nil) ) (_predefined._Cons e_1_0 fs_1_1 -> case e_1_0 (_Tuple2 _x_2_0 d`_2_1 -> case _x_1 (_Tuple2 d_3_0 u_3_1 -> case (<{StdString.==_2}> d_3_0 <{d`_2_1}>) (True -> _predefined._Cons (_Tuple2 u_3_1 d_3_0) fs_1_1) (False -> _predefined._Cons e_1_0 (projwin.update_205 fs_1_1 (_Tuple2 d_3_0 u_3_1))) ) ) ) 
projwin.foldl_206 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> projwin.foldl_206 (projwin.update_205 r_0 a_1_0) x_1_1) 
<{projwin.updFstate`}> !l_0 !ps_1 = let _x_1_0 = IdeState.getFstate ps_1 in IdeState.setFstate (projwin.foldl_206 (select _x_1_0::_Tuple2 0) l_0) (select _x_1_0::_Tuple2 1)
<{projwin.c;1020;45_118}> items_0 !g_l_1 = <{projwin.g_c1;1020;50_240}> g_l_1 items_0
<{projwin.g_c1;1020;50_240}> !g_l_0 items_1 = case g_l_0 (_predefined._Cons x_1_0 g_t_1_1 -> case (case (<{StdString.==_2}> (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 0 5)) "//--- ") (True -> True) (False -> <{StdString.==_2}> (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 0 5)) "\\\\--- ") ) (True -> _predefined._Cons (_Tuple2 (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 6 256)) True) (<{projwin.c;1020;45_118}> items_1 g_t_1_1)) (False -> <{projwin.c;1020;45_118}> items_1 g_t_1_1) ) (_ -> _predefined._Nil)
projwin.hasSelection_122::B !selection_0 = case (StdList.isEmpty selection_0) (True -> False) (False -> True) 
projwin.anon_120 appPath_0 prjPath_1 !_x_2 = case _x_2 (_Tuple2 p_1_0 b_1_1 -> _Tuple2 (PmPath.fulPath appPath_0 prjPath_1 p_1_0) b_1_1) 
<{projwin.c;1036;46_121}> items_0 !g_l_1 = <{projwin.g_c1;1036;51_241}> g_l_1 items_0
<{projwin.g_c1;1036;51_241}> !g_l_0 items_1 = case g_l_0 (_predefined._Cons x_1_0 g_t_1_1 -> case (case (<{StdString.==_2}> (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 0 5)) "//--- ") (True -> True) (False -> <{StdString.==_2}> (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 0 5)) "\\\\--- ") ) (True -> _predefined._Cons (_Tuple2 (<{StdString.%_10}> (<{StdList.!!}> items_1 (<{StdInt.-_7}> x_1_0 1)) (_Tuple2 6 256)) False) (<{projwin.c;1036;46_121}> items_1 g_t_1_1)) (False -> <{projwin.c;1036;46_121}> items_1 g_t_1_1) ) (_ -> _predefined._Nil)
projwin.keyboard !_x_0 !_x_1 = case _x_0 (StdIOCommon.CharKey _x_1_0 _x_1_1 -> case _x_1_0 ('+' -> case _x_1_1 (StdIOCommon.KeyDown _x_3_0 -> case _x_3_0 (False -> case _x_1 (_Tuple2 _x_5_0 ps_5_1 -> case _x_5_0 (_Tuple2 lbState_6_0 ls_6_1 -> case lbState_6_0 (ExtListBox._ExtListBoxState items_7_0 funs_7_1 shiftfuns_7_2 selection_7_3 listbox_7_4 lineHeight_7_5 initHeight_7_6 lMargin_7_7 tMargin_7_8 rMargin_7_9 bMargin_7_10 pen_7_11 newselfun_7_12 -> case (StdBool.not (projwin.hasSelection_119 selection_7_3)) (True -> _Tuple2 (_Tuple2 lbState_6_0 ls_6_1) ps_5_1) (False -> let _x_9_0 = IdeState.getStup ps_5_1, _x_9_1 = IdeState.getFromProject PmProject.PR_GetRootDir (select _x_9_0::_Tuple2 1) in _Tuple2 (_Tuple2 lbState_6_0 ls_6_1) (projwin.pm_update_project_window_interactive (<{projwin.updFstate`}> (StdList.map (projwin.anon_117 (select _x_9_0::_Tuple2 0) (select _x_9_1::_Tuple2 0)) (<{projwin.c;1020;45_118}> items_7_0 selection_7_3)) (select _x_9_1::_Tuple2 1)))) ) ) ) ) ) ) ('-' -> case _x_1_1 (StdIOCommon.KeyDown _x_3_0 -> case _x_3_0 (False -> case _x_1 (_Tuple2 _x_5_0 ps_5_1 -> case _x_5_0 (_Tuple2 lbState_6_0 ls_6_1 -> case lbState_6_0 (ExtListBox._ExtListBoxState items_7_0 funs_7_1 shiftfuns_7_2 selection_7_3 listbox_7_4 lineHeight_7_5 initHeight_7_6 lMargin_7_7 tMargin_7_8 rMargin_7_9 bMargin_7_10 pen_7_11 newselfun_7_12 -> case (StdBool.not (projwin.hasSelection_122 selection_7_3)) (True -> _Tuple2 (_Tuple2 lbState_6_0 ls_6_1) ps_5_1) (False -> let _x_9_0 = IdeState.getStup ps_5_1, _x_9_1 = IdeState.getFromProject PmProject.PR_GetRootDir (select _x_9_0::_Tuple2 1) in _Tuple2 (_Tuple2 lbState_6_0 ls_6_1) (projwin.pm_update_project_window_interactive (<{projwin.updFstate`}> (StdList.map (projwin.anon_120 (select _x_9_0::_Tuple2 0) (select _x_9_1::_Tuple2 0)) (<{projwin.c;1036;46_121}> items_7_0 selection_7_3)) (select _x_9_1::_Tuple2 1)))) ) ) ) ) ) ) ) (_ -> _x_1)
projwin.keyFilter::B !_x_0 = case _x_0 (StdIOCommon.CharKey _x_1_0 _x_1_1 -> case _x_1_0 ('+' -> True) ('-' -> True) ) (_ -> False)
projwin.extKeyboard = StdControlDef.ControlKeyboard projwin.keyFilter StdIOCommon.Able projwin.keyboard
projwin.anon_63 !minh_0::I _x_1 _x_2 !nw_3 = update nw_3::StdIOBasic._Size [1:<{StdInt.-_7}> (select nw_3::StdIOBasic._Size 1) minh_0]
projwin.anon_62 _x_0 !ps_1 = ps_1
projwin.PWListBox_70 ini_0::B lb_1 lc2_2 minh_3::I size_4 pen_5 = ExtListBox.ExtListBoxControl _predefined._Nil _predefined._Nil projwin.anon_62 lb_1 (_predefined._Cons (StdControlDef.ControlOuterSize size_4) (_predefined._Cons (StdControlDef.ControlResize (projwin.anon_63 minh_3)) (_predefined._Cons (StdControlDef.ControlPos (<{projwin._if;394;39_242}> ini_0 lc2_2)) (_predefined._Cons (StdControlDef.ControlPen pen_5) (_predefined._Cons (StdControlDef.ControlHMargin 10 10) (_predefined._Cons (StdControlDef.ControlVMargin 3 3) (_predefined._Cons projwin.extKeyboard _predefined._Nil)))))))
<{projwin._if;394;39_242}> !ini_0::B lc2_1 = case ini_0 (True -> _Tuple2 StdIOCommon.Left StdIOCommon.zero_32) (_ -> _Tuple2 (StdIOCommon.Below lc2_1) (StdIOCommon.OffsetVector (update StdIOBasic.zero_11::StdIOBasic._Vector2 [0:<{StdInt.~_15}> 10,1:10])))
projwin.anon_60 lb_0 lc2_1 pen_2 pw_min_size_3 ini_4::B siz_5 = projwin.PWListBox_70 ini_4 lb_0 lc2_1 (<{StdInt.+_6}> (select pw_min_size_3::StdIOBasic._Size 1) 4) siz_5 pen_2
projwin.anon_130 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.proj_deactivate_67 !ps_0 = let _x_1_0 = IdeState.getMenuIds ps_0, ps_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = select _x_1_0::_Tuple2 0, search_1_3 = select _x_1_2::IdeState._MenuIds 15, mn_sav_1_4 = select _x_1_2::IdeState._MenuIds 0 in update ps_1_1::iostate._PSt [1:StdMenuElement.enableMenuElements (select search_1_3::IdeState._SearchMenuIds 2) (StdMenuElement.enableMenuElements (select search_1_3::IdeState._SearchMenuIds 1) (StdMenuElement.enableMenuElements (_predefined._Cons (select _x_1_2::IdeState._MenuIds 3) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 10) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 11) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 12) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 13) (select _x_1_2::IdeState._MenuIds 14)))))) (StdMenuElement.disableMenuElements (_predefined._Cons mn_sav_1_4 (_predefined._Cons (select _x_1_2::IdeState._MenuIds 1) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 24) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 25) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 26) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 27) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 28) _predefined._Nil))))))) (StdMenuElement.setMenuElementTitles (_predefined._Cons (_Tuple2 mn_sav_1_4 "Save") _predefined._Nil) (select ps_1_1::iostate._PSt 1)))))]
projwin.proj_activate_66 c_0 !ps_1 = let _x_1_0 = IdeState.getMenuIds ps_1, ps_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = select _x_1_0::_Tuple2 0, mn_sav_1_3 = select _x_1_2::IdeState._MenuIds 0, module_1_4 = select _x_1_2::IdeState._MenuIds 23, search_1_5 = select _x_1_2::IdeState._MenuIds 15, mn_und_1_6 = select _x_1_2::IdeState._MenuIds 9 in update ps_1_1::iostate._PSt [1:StdMenuElement.disableMenuElements (StdList.removeMembers (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) (_predefined._Cons mn_sav_1_3 (_predefined._Cons (select _x_1_2::IdeState._MenuIds 1) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 24) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 25) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 26) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 27) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 28) _predefined._Nil))))))) module_1_4) (StdMenuElement.enableMenuElements module_1_4 (StdMenuElement.disableMenuElements (select search_1_5::IdeState._SearchMenuIds 2) (StdMenuElement.disableMenuElements (select search_1_5::IdeState._SearchMenuIds 1) (StdMenuElement.disableMenuElements (_predefined._Cons mn_und_1_6 (_predefined._Cons (select _x_1_2::IdeState._MenuIds 3) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 10) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 11) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 12) (_predefined._Cons (select _x_1_2::IdeState._MenuIds 13) (StdList.removeAt 3 (select _x_1_2::IdeState._MenuIds 14)))))))) (StdMenuElement.setMenuElementTitles (_predefined._Cons (_Tuple2 mn_sav_1_3 "Save Project") (_predefined._Cons (_Tuple2 mn_und_1_6 "&Undo") _predefined._Nil)) (select ps_1_1::iostate._PSt 1))))))]
projwin.anon_61 _x_0 !_x_1 = case _x_1 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> StdFunc.seq (StdList.map StdPicture.unfill_103 updArea_1_2)) 
projwin.anon_207 c_0 !g_1 x_2 = projwin.proj_activate_66 c_0 (g_1 x_2)
projwin.anon_208 c_0 !_x_1 !_x_2::I !x_3 = projwin.proj_activate_66 c_0 (IdePlatform.SetWindowIcon _x_1 _x_2 x_3)
projwin.ProjectWindow_69 title_0 lb_1 lb_2 tc_3 w_4 pw_xsiz_5 pw_xpos_6 topc_7 menu_8 = StdWindowDef.Window title_0 (<{StdIOBasic.:+:}> tc_3 lb_1) (_predefined._Cons (StdWindowDef.WindowId w_4) (_predefined._Cons (StdWindowDef.WindowViewSize pw_xsiz_5) (_predefined._Cons (StdWindowDef.WindowPos pw_xpos_6) (_predefined._Cons (StdWindowDef.WindowPen (_predefined._Cons (StdPictureDef.PenBack topc_7) _predefined._Nil)) (_predefined._Cons (StdWindowDef.WindowLook True projwin.anon_61) (_predefined._Cons (StdWindowDef.WindowInit (StdIOBasic.noLS (projwin.anon_208 lb_2 w_4 32513))) (_predefined._Cons (StdWindowDef.WindowInitActive lb_2) (_predefined._Cons (StdWindowDef.WindowActivate (StdIOBasic.noLS (projwin.proj_activate_66 lb_2))) (_predefined._Cons (StdWindowDef.WindowDeactivate (StdIOBasic.noLS projwin.proj_deactivate_67)) _predefined._Nil)))))))))
projwin.pm_open_project_window !ps_0 = let Controls_1_0 = <{StdControlClass.Controls;}> flextextcontrol.controlToHandles_4 flextextcontrol.getControlType_5, Controls_1_1 = <{StdControlClass.Controls;}> flextextcontrol.controlToHandles_4 flextextcontrol.getControlType_5, Controls_1_2 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_0 Controls_1_1) (StdControlClass.getControlType_9 Controls_1_0 Controls_1_1), Controls_1_3 = <{StdControlClass.Controls;}> ExtListBox.controlToHandles_20 ExtListBox.getControlType_21, _x_1_4 = IdeState.getMenuIds ps_0, ps_1_5 = select _x_1_4::_Tuple2 1, _x_1_6::I = IdeState.getPrefs ps_1_5, ps_1_7 = select _x_1_6::_Tuple2 1, _x_1_8 = IdeState.getPWW ps_1_7, ps_1_9 = select _x_1_8::_Tuple2 1, _x_1_10 = IdeState.getPWI ps_1_9, lb_1_11 = select _x_1_10::_Tuple2 0, ps_1_12 = select _x_1_10::_Tuple2 1, _x_1_13 = IdeState.getPWX ps_1_12, ps_1_14 = select _x_1_13::_Tuple2 1, _x_1_15 = IdeState.getPWM ps_1_14, ps_1_16 = select _x_1_15::_Tuple2 1, _x_1_17 = StdId.openId_13 ps_1_16, ps_1_18 = select _x_1_17::_Tuple2 1, _x_1_19 = StdId.openId_13 ps_1_18, lc2_1_20 = select _x_1_19::_Tuple2 0, prefs_1_21 = select _x_1_6::_Tuple2 0, ps_1_22 = select _x_1_19::_Tuple2 1, _x_1_23 = StdId.openId_13 ps_1_22, ps_1_24 = select _x_1_23::_Tuple2 1, _x_1_25 = ioutil.accScreenPicture_21 (projwin.getFont_68 (select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 5)) ps_1_24, fnt_1_26 = select _x_1_25::_Tuple2 0, pen_1_27 = _predefined._Cons (StdPictureDef.PenBack (select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 4)) (_predefined._Cons (StdPictureDef.PenColour (select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 3)) (_predefined._Cons (StdPictureDef.PenFont fnt_1_26) _predefined._Nil)), Controls_1_28 = <{StdControlClass.Controls;}> flextextcontrol.controlToHandles_4 flextextcontrol.getControlType_5, Controls_1_29 = <{StdControlClass.Controls;}> flextextcontrol.controlToHandles_4 flextextcontrol.getControlType_5, xx_1_30 = select _x_1_13::_Tuple2 0, mm_1_31 = select _x_1_15::_Tuple2 0, lc_1_32 = select _x_1_17::_Tuple2 0, lc3_1_33 = select _x_1_23::_Tuple2 0, pw_main_1_34 = "", pw_exec_1_35 = "", topc_1_36 = projwin.anon_59 lb_1_11 xx_1_30 mm_1_31 lc_1_32 lc2_1_20 lc3_1_33 pw_main_1_34 pw_exec_1_35 fnt_1_26, ps_1_37 = select _x_1_25::_Tuple2 1, _x_1_38 = StdControl.controlSize (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_28 Controls_1_29) (StdControlClass.getControlType_9 Controls_1_28 Controls_1_29)) (topc_1_36 0) True Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing ps_1_37, pw_min_size_1_39 = select _x_1_38::_Tuple2 0, lbox_1_40 = projwin.anon_60 lb_1_11 lc2_1_20 pen_1_27 pw_min_size_1_39, pw_xsiz_1_41 = select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 1, butwidth_1_42 = select pw_xsiz_1_41::StdIOBasic._Size 0, w_1_43 = select _x_1_8::_Tuple2 0, pw_xvec_1_44 = select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 0, pw_xpos_1_45 = _Tuple2 StdIOCommon.LeftTop (StdIOCommon.OffsetVector pw_xvec_1_44), menu_1_46 = select _x_1_4::_Tuple2 0, ps_1_47 = select _x_1_38::_Tuple2 1, _x_1_48 = StdWindow.openWindow_55 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_2 Controls_1_3) (StdControlClass.getControlType_9 Controls_1_2 Controls_1_3)) StdIOBasic.Void (projwin.ProjectWindow_69 "project" (lbox_1_40 False (update pw_xsiz_1_41::StdIOBasic._Size [1:<{StdInt.-_7}> (select pw_xsiz_1_41::StdIOBasic._Size 1) (<{StdInt.+_6}> (select pw_min_size_1_39::StdIOBasic._Size 1) 4)])) (select lb_1_11::ExtListBox._ExtListBoxId 0) (topc_1_36 butwidth_1_42) w_1_43 pw_xsiz_1_41 pw_xpos_1_45 (select (select prefs_1_21::PmPrefs._Prefs 7)::PmPrefs._PrjPrefs 2) menu_1_46) ps_1_47 in case (StdBool.not (<{StdIOCommon.==_42}> (select _x_1_48::_Tuple2 0) StdIOCommon.NoError)) (True -> StdMisc.abort "unable to open Project window") (False -> select _x_1_48::_Tuple2 1) 
projwin.anon_133 !x_0 = x_0
projwin.anon_132 !x_0 = x_0
projwin.anon_91 !l_0 = l_0
projwin.pm_set !ps_0 = let _x_1_0 = StdPSt.accPIO StdWindow.getActiveWindow ps_0, win_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing win_1_1) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Unable to set main module." (_predefined._Cons "There is no active module window." _predefined._Nil)) (ExtNotice.NoticeButton "OK" projwin.anon_132) _predefined._Nil) (select _x_1_0::_Tuple2 1)) (False -> let win_3_0 = Data.Maybe.fromJust win_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 EdClient.msgGetPathName ps_3_1, path_3_3 = select _x_3_2::_Tuple2 0 in case (Data.Maybe.isNothing path_3_3) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Unable to set main module." (_predefined._Cons "There is no active module window." _predefined._Nil)) (ExtNotice.NoticeButton "OK" projwin.anon_133) _predefined._Nil) (select _x_3_2::_Tuple2 1)) (False -> let path_5_0 = Data.Maybe.fromJust path_3_3, ps_5_1 = select _x_3_2::_Tuple2 1, _x_5_2 = IdeState.getFromProject projwin.anon_91 ps_5_1, project_5_3 = select _x_5_2::_Tuple2 0, info_5_4 = PmProject.PR_GetModuleInfo (PmPath.GetModuleName path_5_0) project_5_3 in case (Data.Maybe.isJust info_5_4) (True -> let info_7_0 = Data.Maybe.fromJust info_5_4 in projwin.pm_update_project_window (IdeState.appProject (StdFunc.const (PmProject.PR_SetRoot path_5_0 (select (select info_7_0::PmTypes._ModInfo 2)::PmTypes._ModEditOptions 1) (select info_7_0::PmTypes._ModInfo 1) project_5_3)) (select _x_5_2::_Tuple2 1))) (False -> let ps_7_0 = select _x_5_2::_Tuple2 1, _x_7_1 = StdPSt.accPIO (StdWindow.getWindowPos win_3_0) ps_7_0, pos_7_2 = select _x_7_1::_Tuple2 0 in case (Data.Maybe.isNothing pos_7_2) (True -> select _x_7_1::_Tuple2 1) (False -> let ps_9_0 = select _x_7_1::_Tuple2 1, _x_9_1 = StdPSt.accPIO (StdWindow.getWindowViewSize win_3_0) ps_9_0, ps_9_2 = select _x_9_1::_Tuple2 1, _x_9_3 = EdClient.sendToActiveWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) EdMonad.getNewlineConvention ps_9_2, nlc_9_4 = select _x_9_3::_Tuple2 0 in case (Data.Maybe.isNothing nlc_9_4) (True -> select _x_9_3::_Tuple2 1) (False -> let pos_11_0 = Data.Maybe.fromJust pos_7_2, siz_11_1 = select _x_9_1::_Tuple2 0 in projwin.pm_update_project_window (IdeState.appProject (StdFunc.const (PmProject.PR_SetRoot path_5_0 (PmTypes._EditWdOptions (PmTypes._EditOptions (Data.Maybe.fromJust nlc_9_4)) (PmTypes.WindowPosAndSize (PmTypes._WindowPos_and_Size (select pos_11_0::StdIOBasic._Vector2 0) (select pos_11_0::StdIOBasic._Vector2 1) (select siz_11_1::StdIOBasic._Size 0) (select siz_11_1::StdIOBasic._Size 1)))) PmCompilerOptions.DefaultCompilerOptions project_5_3)) (select _x_9_3::_Tuple2 1))) ) ) ) ) 
projwin.anon_92 _x_0 _x_1 _x_2 _x_3 = StdFunc.id
projwin.anon_136 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.fst_135 !tuple_0 = select tuple_0::_Tuple2 0
projwin.findModule !pathname_0 !ps_1 = let srcpaths_1_0 = <{projwin._if;853;18_243}> (PmPath.IsABCPathname pathname_0) srcpaths_1_5, _x_1_1 = projwin.get_project_and_environment_paths ps_1, ps_1_2 = select _x_1_1::_Tuple2 1, _x_1_3 = StdPStClass.accFiles_8 (PmDirCache.SearchDisk pathname_0 srcpaths_1_0) ps_1_2, _x_1_4 = select _x_1_3::_Tuple2 0, srcpaths_1_5 = select _x_1_1::_Tuple2 0 in case (StdBool.not (select _x_1_4::_Tuple2 0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_1_3::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Maybe.Just (UtilIO.GetLongPathName (select _x_1_4::_Tuple2 1))) (select _x_1_3::_Tuple2 1)) 
<{projwin._if;853;18_243}> !_x_0::B !srcpaths_1 = case _x_0 (True -> UtilStrictLists.Map PmPath.MakeSystemPathname srcpaths_1) (_ -> srcpaths_1)
<{projwin.c;840;43_108}> !g_l_0 = <{projwin.g_c1;840;48_244}> g_l_0
<{projwin.g_c1;840;48_244}> !g_l_0 = case g_l_0 (_predefined._Cons m_1_0 g_t_1_1 -> case (Data.Maybe.isJust m_1_0) (True -> _predefined._Cons (Data.Maybe.fromJust m_1_0) (<{projwin.c;840;43_108}> g_t_1_1)) (False -> <{projwin.c;840;43_108}> g_t_1_1) ) (_ -> _predefined._Nil)
projwin.anon_209 !g_0 x_1 = PmPath.MakeImpPathname (g_0 x_1)
projwin.anon_210 !x_0 = PmPath.MakeImpPathname (projwin.fst_135 x_0)
projwin.getActiveModules !ps_0 = let _x_1_0 = EdClient.sendToActiveWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) EdClient.msgGetPathName ps_0, winpath_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing winpath_1_1) (True -> let ps_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = StdPSt.accPIO StdWindow.getActiveWindow ps_3_0, win_3_2 = select _x_3_1::_Tuple2 0 in case (Data.Maybe.isNothing win_3_2) (True -> _Tuple2 _predefined._Nil (select _x_3_1::_Tuple2 1)) (False -> let win_5_0 = Data.Maybe.fromJust win_3_2, ps_5_1 = select _x_3_1::_Tuple2 1, _x_5_2 = projwin.isProjWin win_5_0 ps_5_1 in case (StdBool.not (select _x_5_2::_Tuple2 0)) (True -> _Tuple2 _predefined._Nil (select _x_5_2::_Tuple2 1)) (False -> let ps_7_0 = select _x_5_2::_Tuple2 1, _x_7_1 = IdeState.getPWI ps_7_0, lb_7_2 = select _x_7_1::_Tuple2 0, ps_7_3 = select _x_7_1::_Tuple2 1, _x_7_4 = ExtListBox.getExtListBoxSelection lb_7_2 ps_7_3, _x_7_5 = select _x_7_4::_Tuple2 0, sel_7_6 = select _x_7_5::_Tuple2 1 in case (case (select _x_7_5::_Tuple2 0) (True -> StdBool.not (StdList.isEmpty sel_7_6)) (False -> False) ) (True -> let _x_9_0 = StdFunc.seqList (StdList.map projwin.findModule (StdList.map projwin.anon_210 sel_7_6)) (select _x_7_4::_Tuple2 1) in _Tuple2 (<{projwin.c;840;43_108}> (select _x_9_0::_Tuple2 0)) (select _x_9_0::_Tuple2 1)) (False -> _Tuple2 _predefined._Nil (select _x_7_4::_Tuple2 1)) ) ) ) (False -> let winpath_3_0 = Data.Maybe.fromJust winpath_1_1 in case (PmPath.IsImpPathname winpath_3_0) (True -> _Tuple2 (_predefined._Cons winpath_3_0 _predefined._Nil) (select _x_1_0::_Tuple2 1)) (False -> case (PmPath.IsDefPathname winpath_3_0) (True -> _Tuple2 (_predefined._Cons (PmPath.MakeImpPathname winpath_3_0) _predefined._Nil) (select _x_1_0::_Tuple2 1)) (False -> _Tuple2 _predefined._Nil (select _x_1_0::_Tuple2 1)) ) ) 
projwin.anon_109 !l_0 = l_0
projwin.anon_115 !l_0 = l_0
projwin.anon_134 !x_0 = x_0
projwin.pm_save_common !pathname_0 project_1 ps_2 = case (<{StdString.==_2}> pathname_0 "") (True -> _Tuple2 project_1 ps_2) (False -> let prjpath_2_0 = PmPath.MakeProjectPathname pathname_0, _x_2_1 = IdeState.getStup ps_2, startupdir_2_2 = select _x_2_1::_Tuple2 0, ps_2_3 = select _x_2_1::_Tuple2 1, _x_2_4 = StdPStClass.accFiles_8 (PmProject.SaveProjectFile prjpath_2_0 project_1 startupdir_2_2) ps_2_3 in case (StdBool.not (select _x_2_4::_Tuple2 0)) (True -> _Tuple2 project_1 (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons (<{StdString.+++_11}> "The file " (<{StdString.+++_11}> (StdPathname.RemovePath prjpath_2_0) " could not be saved because")) (_predefined._Cons "of a file I/O error." _predefined._Nil)) (ExtNotice.NoticeButton "OK" projwin.anon_134) _predefined._Nil) (select _x_2_4::_Tuple2 1))) (False -> _Tuple2 project_1 (select (IdeState.getPrefs (select _x_2_4::_Tuple2 1))::_Tuple2 1)) ) 
projwin.pm_save !ps_0 = let _x_1_0 = IdeState.getFromProject projwin.anon_115 ps_0, _x_1_1 = IdeState.getProjectFilePath (select _x_1_0::_Tuple2 1), _x_1_2 = projwin.pm_save_common (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 1) in IdeState.appProject (StdFunc.const (PmProject.PR_SetSaved (select _x_1_2::_Tuple2 0))) (select _x_1_2::_Tuple2 1)
projwin.final_113 newproject_0 !ps_1 = projwin.pm_update_project_window (projwin.pm_save (IdeState.appProject (StdFunc.const newproject_0) (messwin.closeInfo ps_1)))
projwin.setproject_112 compile_0 cont_1 winpath_2 !paths_3 ok_4 newpaths_5 newproject_6 ps_7 = projwin.okcont_111 cont_1 compile_0 paths_3 newproject_6 (cont_1 winpath_2 (PmPath.GetModuleName winpath_2) ok_4 newpaths_5 ps_7)
projwin.okcont_111 cont_0 compile_1 !_x_2 project_3 ps_4 = case _x_2 (_predefined._Nil -> projwin.final_113 project_3 ps_4) (_predefined._Cons path_1_0 paths_1_1 -> compile_1 path_1_0 project_3 (projwin.setproject_112 compile_1 cont_0 path_1_0 paths_1_1) ps_4) 
projwin.init_110 cont_0 compile_1 !paths_2 ps_3 = let _x_1_0 = IdeState.getFromProject projwin.anon_109 ps_3 in projwin.okcont_111 cont_0 compile_1 paths_2 (select _x_1_0::_Tuple2 0) (typewin.tw_safe_close (<{typewin.Typer;}> IdeState.getTypeWinInfo_70 IdeState.setTypeWinInfo_71) (errwin.ew_safe_close (select _x_1_0::_Tuple2 1)))
projwin.DoProcess msg_0 compile_1 cont_2 !ps_3 = let _x_1_0 = projwin.getActiveModules ps_3 in menubar.mb_update_undoinfo (edfiles.ed_ask_save_all False True (projwin.init_110 cont_2 compile_1 (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1))
projwin.pm_compile !ps_0 = projwin.DoProcess "compiling" (PmDriver.CompileProjectModule PmCleanSystem.Compilation) projwin.anon_92 ps_0
projwin.anon_93 _x_0 _x_1 _x_2 _x_3 = StdFunc.id
projwin.pm_check !ps_0 = projwin.DoProcess "checking" (PmDriver.CompileProjectModule PmCleanSystem.SyntaxCheck) projwin.anon_93 ps_0
projwin.mess_95 es_0 = let _x_1_0 = EdClient.msgGetTabs es_0, _x_1_1 = select _x_1_0::_Tuple2 0 in EdClient.msgSetTabs (_Tuple3 8 (select _x_1_1::_Tuple3 1) (select _x_1_1::_Tuple3 2)) (select _x_1_0::_Tuple2 1)
projwin.cont_94 !wasopen_0::B !win_1 !ps_2 = case wasopen_0 (True -> edfiles.ed_revert_win win_1 ps_2) (False -> select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 projwin.mess_95 ps_2)::_Tuple2 1) 
projwin.ed_open_assembly_97 pathName_0 !ps_1 = let _x_1_0 = IdeState.getFHI ps_1 in edfiles.ed_open_cont pathName_0 projwin.cont_94 (select (StdReceiver.syncSend2 (select _x_1_0::_Tuple2 0) pathName_0 (select _x_1_0::_Tuple2 1))::_Tuple2 1)
projwin.open_gen_asm_96 winpath_0 modname_1 !ok_2::B newpaths_3::B !ps_4 = case (StdBool.not (projwin._f245_245 ok_2 newpaths_3)) (True -> ps_4) (False -> projwin.ed_open_assembly_97 (PmPath.MakeAssemblySystemPathname winpath_0) ps_4) 
projwin._f245_245::B !ok_0::B newpaths_1::B = case ok_0 (True -> newpaths_1) (_ -> False)
projwin.pm_gen_asm !ps_0 = projwin.DoProcess "generating" PmDriver.GenAsmProjectModule projwin.open_gen_asm_96 ps_0
projwin.anon_138 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.anon_137 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.disableProjectMenu !ps_0 = let _x_1_0 = IdeState.getMenuIds ps_0 in StdPSt.appPIO (StdMenu.disableMenus (_predefined._Cons (select (select _x_1_0::_Tuple2 0)::IdeState._MenuIds 16) _predefined._Nil)) (select _x_1_0::_Tuple2 1)
projwin.cont_98 path_0 !linked_1::B ok_2::B !ps_3 = case (case linked_1 (True -> True) (False -> StdBool.not ok_2) ) (True -> messwin.closeInfo ps_3) (False -> messwin.showInfo (messwin.Level1 "Project is up to date") ps_3) 
projwin.bring_project_upto_date !force_0::B continuation_1 !ps_2 = PmDriver.BringProjectUptoDate force_0 continuation_1 (typewin.tw_safe_close (<{typewin.Typer;}> IdeState.getTypeWinInfo_70 IdeState.setTypeWinInfo_71) (errwin.ew_safe_close ps_2))
projwin.enableProjectMenu !ps_0 = let _x_1_0 = IdeState.getMenuIds ps_0 in StdPSt.appPIO (StdMenu.enableMenus (_predefined._Cons (select (select _x_1_0::_Tuple2 0)::IdeState._MenuIds 16) _predefined._Nil)) (select _x_1_0::_Tuple2 1)
projwin.anon_211 !force_0::B continuation_1 !g_2 x_3 = projwin.bring_project_upto_date force_0 continuation_1 (g_2 x_3)
projwin.anon_212 !g_0 x_1 = projwin.enableProjectMenu (g_0 x_1)
projwin.anon_213 !force_0::B continuation_1 !x_2 = projwin.bring_project_upto_date force_0 continuation_1 (projwin.disableProjectMenu x_2)
projwin.anon_214 !force_0::B continuation_1 !x_2 = projwin.enableProjectMenu (projwin.anon_213 force_0 continuation_1 x_2)
projwin.pm_upto !force_0::B !ps_1 = menubar.mb_update_undoinfo (edfiles.ed_ask_save_all False True (projwin.anon_214 force_0 projwin.cont_98) ps_1)
projwin.anon_140 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.anon_139 !f_0 g_1 x_2 = f_0 (g_1 x_2)
projwin.cont_99 execpath_0 linked_1 !ok_2::B !ps_3 = case (StdBool.not ok_2) (True -> messwin.closeInfo ps_3) (False -> let _x_2_0 = IdeState.getFromProject PmProject.PR_GetRootDir (select (IdeState.getFromProject PmProject.PR_GetLinkOptions (messwin.closeInfo ps_3))::_Tuple2 1), _x_2_1 = IdeState.getStup (select _x_2_0::_Tuple2 1) in IdePlatform.RunProgram (PmPath.fulPath (select _x_2_1::_Tuple2 0) (select _x_2_0::_Tuple2 0) execpath_0) (select _x_2_1::_Tuple2 1)) 
projwin.anon_215 !force_0::B continuation_1 !g_2 x_3 = projwin.bring_project_upto_date force_0 continuation_1 (g_2 x_3)
projwin.anon_216 !g_0 x_1 = projwin.enableProjectMenu (g_0 x_1)
projwin.anon_217 !force_0::B continuation_1 !x_2 = projwin.bring_project_upto_date force_0 continuation_1 (projwin.disableProjectMenu x_2)
projwin.anon_218 !force_0::B continuation_1 !x_2 = projwin.enableProjectMenu (projwin.anon_217 force_0 continuation_1 x_2)
projwin.pm_exec !ps_0 = menubar.mb_update_undoinfo (edfiles.ed_ask_save_all False True (projwin.anon_218 False projwin.cont_99) ps_0)
projwin.pm_run !ps_0 = let _x_1_0 = IdeState.getStup ps_0, _x_1_1 = IdeState.getFromProject PmProject.PR_GetRootDir (select _x_1_0::_Tuple2 1), _x_1_2 = IdeState.getFromProject PmProject.PR_GetExecPath (select _x_1_1::_Tuple2 1) in IdePlatform.RunProgram (PmPath.fulPath (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0) (select _x_1_2::_Tuple2 0)) (select _x_1_2::_Tuple2 1)
projwin.pm_build !ps_0 = ps_0
projwin.pm_link !ps_0 = ps_0
projwin.fst_142 !tuple_0 = select tuple_0::_Tuple2 0
projwin.anon_141 !x_0 = x_0
projwin.anon_100 !l_0 = l_0
projwin.anon_101 !co_0 !mi_1 = update mi_1::PmTypes._ModInfo [1:co_0]
projwin.anon_102 !mod_0 co_1 !l_2 = PmProject.PR_UpdateModule mod_0 (projwin.anon_101 co_1) l_2
projwin.anon_103 mod_0 co_1 = IdeState.appProject (projwin.anon_102 mod_0 co_1)
projwin.anon_104 !co_0 !mi_1 = update mi_1::PmTypes._ModInfo [1:co_0]
projwin.anon_105 !sel_0 co_1 !l_2 = PmProject.PR_UpdateModules sel_0 (projwin.anon_104 co_1) l_2
projwin.anon_106 sel_0 co_1 = IdeState.appProject (projwin.anon_105 sel_0 co_1)
projwin.pm_copt !ps_0 = let _x_1_0 = IdeState.getPWI ps_0, ps_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = IdeState.getFromProject projwin.anon_100 ps_1_1, ps_1_3 = select _x_1_2::_Tuple2 1, _x_1_4 = EdClient.sendToActiveWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) EdClient.msgGetPathName ps_1_3, path_1_5 = select _x_1_4::_Tuple2 0 in case (Data.Maybe.isJust path_1_5) (True -> let path_3_0 = Data.Maybe.fromJust path_1_5, ps_3_1 = select _x_1_4::_Tuple2 1, _x_3_2 = IdeState.getCurrentPaths ps_3_1, ps_3_3 = select _x_3_2::_Tuple2 1, _x_3_4 = IdeState.getFromProject PmProject.PR_GetPaths ps_3_3, prjpaths_3_5 = select _x_3_4::_Tuple2 0, syspaths_3_6 = select _x_3_2::_Tuple2 0, _x_3_7 = PmPath.determine_dir_and_filename path_3_0 (UtilStrictLists.AppendLists prjpaths_3_5 syspaths_3_6), _x_3_8 = select _x_3_7::_Tuple2 0, mod_3_9 = select _x_3_8::PmTypes._ModuleDirAndName 1, project_3_10 = select _x_1_2::_Tuple2 0, minf_3_11 = PmProject.PR_GetModuleInfo mod_3_9 project_3_10 in case (Data.Maybe.isNothing minf_3_11) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "This module is not part of the current project." _predefined._Nil) (ExtNotice.NoticeButton "OK" projwin.anon_141) _predefined._Nil) (select _x_3_4::_Tuple2 1)) (False -> PmDialogues.doCompilerOptionsDialog "Module Options" (select (Data.Maybe.fromJust minf_3_11)::PmTypes._ModInfo 1) (projwin.anon_103 mod_3_9) (select _x_3_4::_Tuple2 1)) ) (False -> let ps_3_0 = select _x_1_4::_Tuple2 1, _x_3_1 = IdeState.getPWW ps_3_0, ps_3_2 = select _x_3_1::_Tuple2 1, _x_3_3 = StdPSt.accPIO StdWindow.getActiveWindow ps_3_2, aw_3_4 = select _x_3_3::_Tuple2 0 in case (case (Data.Maybe.isNothing aw_3_4) (True -> True) (False -> StdBool.not (<{id.==_27}> (select _x_3_1::_Tuple2 0) (Data.Maybe.fromJust aw_3_4))) ) (True -> select _x_3_3::_Tuple2 1) (False -> let lb_5_0 = select _x_1_0::_Tuple2 0, ps_5_1 = select _x_3_3::_Tuple2 1, _x_5_2 = ExtListBox.getExtListBoxSelection lb_5_0 ps_5_1, _x_5_3 = select _x_5_2::_Tuple2 0, sel_5_4 = select _x_5_3::_Tuple2 1 in case (case (select _x_5_3::_Tuple2 0) (True -> StdBool.not (StdList.isEmpty sel_5_4)) (False -> False) ) (True -> let sel_7_0 = StdList.map projwin.fst_142 sel_5_4, mod_7_1 = StdList.hd sel_7_0, project_7_2 = select _x_1_2::_Tuple2 0, minf_7_3 = PmProject.PR_GetModuleInfo mod_7_1 project_7_2 in case (Data.Maybe.isNothing minf_7_3) (True -> select _x_5_2::_Tuple2 1) (False -> PmDialogues.doCompilerOptionsDialog "Module Options" (select (Data.Maybe.fromJust minf_7_3)::PmTypes._ModInfo 1) (projwin.anon_106 sel_7_0) (select _x_5_2::_Tuple2 1)) ) (False -> select _x_5_2::_Tuple2 1) ) ) 
projwin.anon_107 prefs_0 co_1 = IdeState.setPrefs (update prefs_0::PmPrefs._Prefs [11:co_1])
projwin.pm_coprefs !ps_0 = let _x_1_0 = IdeState.getPrefs ps_0, prefs_1_1 = select _x_1_0::_Tuple2 0 in PmDialogues.doCompilerOptionsDialog "Module Defaults" (select prefs_1_1::PmPrefs._Prefs 11) (projwin.anon_107 prefs_1_1) (select _x_1_0::_Tuple2 1)
projwin.pm_set_window_title pathname_0 !ps_1 = let _x_1_0 = IdeState.getPWW ps_1 in StdPSt.appPIO (StdWindow.setWindowTitle (select _x_1_0::_Tuple2 0) (<{StdString.+++_11}> (StdPathname.RemovePath pathname_0) (<{StdString.+++_11}> " - " pathname_0))) (select _x_1_0::_Tuple2 1)
projwin.pm_save_as !ps_0 = let _x_1_0 = StdPStClass.selectOutputFile_14 "Save Project as:" "*.prj" ps_0, pn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing pn_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let pn_3_0 = Data.Maybe.fromJust pn_1_1, _x_3_1 = IdeState.getPHI (projwin.pm_save (IdeState.setProjectFilePath pn_3_0 (select _x_1_0::_Tuple2 1))) in projmen.pm_menu_add pn_3_0 (projwin.pm_set_window_title pn_3_0 (select (StdReceiver.syncSend2 (select _x_3_1::_Tuple2 0) pn_3_0 (select _x_3_1::_Tuple2 1))::_Tuple2 1))) 
projwin.anon_114 !l_0 = l_0
projwin.pm_save_copy_as !ps_0 = let _x_1_0 = StdPStClass.selectOutputFile_14 "Save copy of Project as:" "*.prj" ps_0, pn_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing pn_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let _x_3_0 = IdeState.getFromProject projwin.anon_114 (select _x_1_0::_Tuple2 1), _x_3_1 = projwin.pm_save_common (Data.Maybe.fromJust pn_1_1) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1) in IdeState.appProject (StdFunc.const (select _x_3_1::_Tuple2 0)) (select _x_3_1::_Tuple2 1)) 
projwin.pm_maybe_save !win_0 !ps_1 = let _x_1_0 = IdeState.getPWW ps_1 in case (<{id.==_27}> (select _x_1_0::_Tuple2 0) win_0) (True -> _Tuple2 True (projwin.pm_save (select _x_1_0::_Tuple2 1))) (False -> _Tuple2 False (select _x_1_0::_Tuple2 1)) 
projwin.anon_144 !x_0 = x_0
projwin.anon_143 !x_0 = x_0
projwin.pm_save_project_as_template !ps_0 = let _x_1_0 = IdeState.getProject ps_0, project_1_1 = select _x_1_0::_Tuple2 0 in case (StdBool.not (PmProject.PR_ProjectSet project_1_1)) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "No open project" _predefined._Nil) (ExtNotice.NoticeButton "OK" projwin.anon_143) _predefined._Nil) (select _x_1_0::_Tuple2 1)) (False -> let ps_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = IdeState.getProjectFilePath ps_3_0 in case (<{StdInt.==_16}> (_SystemArray.size_20 (select _x_3_1::_Tuple2 0)) 0) (True -> select _x_3_1::_Tuple2 1) (False -> let ps_5_0 = select _x_3_1::_Tuple2 1, _x_5_1 = StdPStClass.selectOutputFile_14 "Save Project Template:" "*.prt" ps_5_0, ps_5_2 = select _x_5_1::_Tuple2 1 in <{projwin._c;956;7_246}> (select _x_5_1::_Tuple2 0) ps_5_2 project_1_1) ) 
<{projwin._c;956;7_246}> !_x_0 !ps_1 project_2 = case _x_0 (Data.Maybe.Nothing -> ps_1) (Data.Maybe.Just prt_path_1_0 -> let _x_2_0 = IdeState.getStup ps_1, startupdir_2_1 = select _x_2_0::_Tuple2 0, ps_2_2 = select _x_2_0::_Tuple2 1, _x_2_3 = StdPStClass.accFiles_8 (PmProject.save_project_template_file prt_path_1_0 project_2 startupdir_2_1) ps_2_2 in case (StdBool.not (select _x_2_3::_Tuple2 0)) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons (<{StdString.+++_11}> "The file " (<{StdString.+++_11}> (StdPathname.RemovePath prt_path_1_0) " could not be saved because")) (_predefined._Cons "of a file I/O error." _predefined._Nil)) (ExtNotice.NoticeButton "OK" projwin.anon_144) _predefined._Nil) (select _x_2_3::_Tuple2 1)) (False -> select _x_2_3::_Tuple2 1) ) 
projwin.pm_get_projwin_possiz ps_0 = let _x_1_0 = IdeState.getPWW ps_0, w_1_1 = select _x_1_0::_Tuple2 0, _x_1_2 = StdPSt.accPIO (StdWindow.getWindowViewSize w_1_1) (select _x_1_0::_Tuple2 1), _x_1_3 = StdPSt.accPIO (StdWindow.getWindowPos w_1_1) (select _x_1_2::_Tuple2 1) in _Tuple2 (_Tuple2 (Data.Maybe.fromJust (select _x_1_3::_Tuple2 0)) (select _x_1_2::_Tuple2 0)) (select _x_1_3::_Tuple2 1)
<{projwin.TD;PWO}> _x_0::B = _predefined._Nil
<{projwin.TD;AC}> _x_0::B = _predefined._Nil

:: projwin.AC = projwin.HC | projwin.FC | projwin.BC

|| Converted Records
:: projwin._PWO = {!projwin.fn, !projwin.fs::I, !projwin.fc, !projwin.bc, !projwin.hc, !projwin.cr, !projwin.shift::B}

:: <{projwin.gEq_s;}> = {!projwin.gEq_s}

:: <{projwin.gEq_ss;}> = {!projwin.gEq_ss}

:: <{projwin.gEq_sss;}> = {!projwin.gEq_sss}

:: <{projwin.gEq_ssss;}> = {!projwin.gEq_ssss}

:: <{projwin.gEq_sssss;}> = {!projwin.gEq_sssss}

:: <{projwin.gEq_ssssss;}> = {!projwin.gEq_ssssss}

:: <{projwin.gEq_sssssss;}> = {!projwin.gEq_sssssss}

:: <{projwin.gEq_ssssssss;}> = {!projwin.gEq_ssssssss}

:: <{projwin.gEq_sssssssss;}> = {!projwin.gEq_sssssssss}

:: <{projwin.bimap_s;}> = {projwin.bimap_s}

:: <{projwin.bimap_ss;}> = {projwin.bimap_ss}

:: <{projwin.bimap_sss;}> = {projwin.bimap_sss}

