|| ?module? balance


balance.BalanceDownString !_vArray_0 ps_1 !ci_2::I !len_3::I str_4 = case (StdBool.not (<{StdInt.<_17}> ci_2 len_3)) (True -> _Tuple4 False ps_1 len_3 ' ') (False -> let char_2_0::B = select _vArray_0::<{_SystemArray.Array;}> 3 str_4 ci_2, close_2_1::C = balance._f56_56 (<{StdChar.==_18}> char_2_0 ')') char_2_0 in case (case close_2_1 (True -> <{StdList.==_84}> ps_1 _predefined._Nil) (False -> False) ) (True -> _Tuple4 True _predefined._Nil ci_2 char_2_0) (False -> case (case close_2_1 (True -> let a_5_0::C = StdList.hd ps_1 in case (case (<{StdChar.==_18}> a_5_0 '(') (True -> <{StdChar.==_18}> char_2_0 ')') (False -> False) ) (True -> True) (False -> case (case (<{StdChar.==_18}> a_5_0 '[') (True -> <{StdChar.==_18}> char_2_0 ']') (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> a_5_0 '{') (True -> <{StdChar.==_18}> char_2_0 '}') (False -> False) ) ) ) (False -> False) ) (True -> balance.BalanceDownString _vArray_0 (StdList.tl ps_1) (<{StdInt.+_6}> ci_2 StdInt.one_11) len_3 str_4) (False -> case close_2_1 (True -> _Tuple4 False ps_1 len_3 ' ') (False -> case (case (<{StdChar.==_18}> char_2_0 '(') (True -> True) (False -> case (<{StdChar.==_18}> char_2_0 '{') (True -> True) (False -> <{StdChar.==_18}> char_2_0 '[') ) ) (True -> balance.BalanceDownString _vArray_0 (_predefined._Cons char_2_0 ps_1) (<{StdInt.+_6}> ci_2 StdInt.one_11) len_3 str_4) (False -> balance.BalanceDownString _vArray_0 ps_1 (<{StdInt.+_6}> ci_2 StdInt.one_11) len_3 str_4) ) ) ) ) 
balance._f56_56::B !_x_0::B char_1::C = case _x_0 (True -> True) (_ -> case (<{StdChar.==_18}> char_1 '}') (True -> True) (False -> <{StdChar.==_18}> char_1 ']') )
balance.BalanceDownString_55 ps_0 !ci_1::I !len_2::I str_3 = case (StdBool.not (<{StdInt.<_17}> ci_1 len_2)) (True -> _Tuple4 False ps_0 len_2 ' ') (False -> let char_2_0::B = _SystemArray.select_19 str_3 ci_1, close_2_1::C = balance._f57_57 (<{StdChar.==_18}> char_2_0 ')') char_2_0 in case (case close_2_1 (True -> <{StdList.==_84}> ps_0 _predefined._Nil) (False -> False) ) (True -> _Tuple4 True _predefined._Nil ci_1 char_2_0) (False -> case (case close_2_1 (True -> let a_5_0::C = StdList.hd ps_0 in case (case (<{StdChar.==_18}> a_5_0 '(') (True -> <{StdChar.==_18}> char_2_0 ')') (False -> False) ) (True -> True) (False -> case (case (<{StdChar.==_18}> a_5_0 '[') (True -> <{StdChar.==_18}> char_2_0 ']') (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> a_5_0 '{') (True -> <{StdChar.==_18}> char_2_0 '}') (False -> False) ) ) ) (False -> False) ) (True -> balance.BalanceDownString_55 (StdList.tl ps_0) (<{StdInt.+_6}> ci_1 StdInt.one_11) len_2 str_3) (False -> case close_2_1 (True -> _Tuple4 False ps_0 len_2 ' ') (False -> case (case (<{StdChar.==_18}> char_2_0 '(') (True -> True) (False -> case (<{StdChar.==_18}> char_2_0 '{') (True -> True) (False -> <{StdChar.==_18}> char_2_0 '[') ) ) (True -> balance.BalanceDownString_55 (_predefined._Cons char_2_0 ps_0) (<{StdInt.+_6}> ci_1 StdInt.one_11) len_2 str_3) (False -> balance.BalanceDownString_55 ps_0 (<{StdInt.+_6}> ci_1 StdInt.one_11) len_2 str_3) ) ) ) ) 
balance._f57_57::B !_x_0::B char_1::C = case _x_0 (True -> True) (_ -> case (<{StdChar.==_18}> char_1 '}') (True -> True) (False -> <{StdChar.==_18}> char_1 ']') )
balance.BalanceDown ps_0 ln_1::I cn_2::I !_x_3 text_4 = case _x_3 ("" -> case (<{StdInt.==_16}> ln_1 (EdLineText.lastLineNr text_4)) (True -> _Tuple4 False 0 0 ' ') (False -> let ln_3_0 = <{StdInt.+_6}> ln_1 StdInt.one_11, _x_3_1::I = EdLineText.getLine ln_3_0 text_4 in balance.BalanceDown ps_0 ln_3_0 0 (select _x_3_1::_Tuple2 0) (select _x_3_1::_Tuple2 1)) ) (_ -> let len_1_0 = _SystemArray.size_20 _x_3, _x_1_1::I = balance.BalanceDownString_55 ps_0 cn_2 len_1_0 _x_3 in case (select _x_1_1::_Tuple4 0) (True -> _Tuple4 True ln_1 (select _x_1_1::_Tuple4 2) (select _x_1_1::_Tuple4 3)) (False -> let ci_3_0::I = select _x_1_1::_Tuple4 2 in case (StdBool.not (<{StdInt.<_17}> ci_3_0 len_1_0)) (True -> balance.BalanceDown (select _x_1_1::_Tuple4 1) ln_1 cn_2 "" text_4) (False -> balance.BalanceDown (select _x_1_1::_Tuple4 1) ln_1 ci_3_0 _x_3 text_4) ) )
balance.BalanceDownText !ln_0::I cn_1::I !text_2 = let _x_1_0 = EdLineText.getLine ln_0 text_2 in balance.BalanceDown _predefined._Nil ln_0 cn_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
balance.TakeChars !_x_0::I line_1 = case _x_0 (0 -> "") (_ -> <{StdString.%_10}> line_1 (_Tuple2 0 (<{StdInt.-_7}> _x_0 StdInt.one_11)))
balance.BalanceUpString !ps_0 !ci_1::I !str_2 = case (<{StdInt.<_17}> ci_1 0) (True -> <{_Tuple4!7}> False ps_0 0 ' ') (False -> let char_2_0::B = _SystemArray.select_19 str_2 ci_1, open_2_1::C = balance._f58_58 (<{StdChar.==_18}> char_2_0 '(') char_2_0 in case (case open_2_1 (True -> <{StdList.==_84}> ps_0 _predefined._Nil) (False -> False) ) (True -> <{_Tuple4!7}> True _predefined._Nil ci_1 char_2_0) (False -> case (case open_2_1 (True -> let b_5_0::C = StdList.hd ps_0 in case (case (<{StdChar.==_18}> char_2_0 '(') (True -> <{StdChar.==_18}> b_5_0 ')') (False -> False) ) (True -> True) (False -> case (case (<{StdChar.==_18}> char_2_0 '[') (True -> <{StdChar.==_18}> b_5_0 ']') (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> char_2_0 '{') (True -> <{StdChar.==_18}> b_5_0 '}') (False -> False) ) ) ) (False -> False) ) (True -> balance.BalanceUpString (StdList.tl ps_0) (<{StdInt.-_7}> ci_1 StdInt.one_11) str_2) (False -> case open_2_1 (True -> <{_Tuple4!7}> False ps_0 0 ' ') (False -> case (case (<{StdChar.==_18}> char_2_0 ')') (True -> True) (False -> case (<{StdChar.==_18}> char_2_0 '}') (True -> True) (False -> <{StdChar.==_18}> char_2_0 ']') ) ) (True -> balance.BalanceUpString (_predefined._Cons char_2_0 ps_0) (<{StdInt.-_7}> ci_1 StdInt.one_11) str_2) (False -> balance.BalanceUpString ps_0 (<{StdInt.-_7}> ci_1 StdInt.one_11) str_2) ) ) ) ) 
balance._f58_58::B !_x_0::B char_1::C = case _x_0 (True -> True) (_ -> case (<{StdChar.==_18}> char_1 '{') (True -> True) (False -> <{StdChar.==_18}> char_1 '[') )
balance.BalanceUpLine ps_0 ci_1::I !_x_2 = case _x_2 ("" -> _Tuple4 False ps_0 ci_1 ' ') (_ -> let len_1_0 = _SystemArray.size_20 _x_2, _x_1_1::I = balance.BalanceUpString ps_0 (<{StdInt.-_7}> len_1_0 StdInt.one_11) _x_2 in case (select _x_1_1::_Tuple4 0) (True -> _Tuple4 True _predefined._Nil (<{StdInt.-_7}> (<{StdInt.-_7}> len_1_0 (select _x_1_1::_Tuple4 2)) StdInt.one_11) (select _x_1_1::_Tuple4 3)) (False -> _Tuple4 False (select _x_1_1::_Tuple4 1) len_1_0 (select _x_1_1::_Tuple4 3)) )
balance.BalanceUp ps_0 !ln_1::I text_2 = case (<{StdInt.<_17}> ln_1 0) (True -> _Tuple4 False 0 0 ' ') (False -> let _x_2_0 = EdLineText.getLine ln_1 text_2, line_2_1::I = select _x_2_0::_Tuple2 0, len_2_2 = _SystemArray.size_20 line_2_1, _x_2_3 = balance.BalanceUpString ps_0 (<{StdInt.-_7}> len_2_2 StdInt.one_11) line_2_1 in case (select _x_2_3::_Tuple4 0) (True -> _Tuple4 True ln_1 (select _x_2_3::_Tuple4 2) (select _x_2_3::_Tuple4 3)) (False -> balance.BalanceUp (select _x_2_3::_Tuple4 1) (<{StdInt.-_7}> ln_1 StdInt.one_11) (select _x_2_0::_Tuple2 1)) ) 
balance.BalanceUpText ln_0::I !cn_1::I text_2 = let _x_1_0 = EdLineText.getLine ln_0 text_2, line_1_1 = select _x_1_0::_Tuple2 0, _x_1_2 = balance.BalanceUpLine _predefined._Nil 0 (balance.TakeChars cn_1 line_1_1) in case (select _x_1_2::_Tuple4 0) (True -> _Tuple4 True ln_0 (<{StdInt.-_7}> (<{StdInt.-_7}> cn_1 (select _x_1_2::_Tuple4 2)) StdInt.one_11) (select _x_1_2::_Tuple4 3)) (False -> balance.BalanceUp (select _x_1_2::_Tuple4 1) (<{StdInt.-_7}> ln_0 StdInt.one_11) (select _x_1_0::_Tuple2 1)) 
balance.Text_Balance !bln_0::I !bcn_1::I !eln_2::I !ecn_3::I !text_4 = let _x_1_0 = balance.BalanceDownText eln_2 ecn_3 text_4, _x_1_1 = balance.BalanceUpText bln_0 bcn_1 text_4 in case (case (StdBool.not (select _x_1_0::_Tuple4 0)) (True -> True) (False -> case (StdBool.not (select _x_1_1::_Tuple4 0)) (True -> True) (False -> let upb_4_0::C = select _x_1_1::_Tuple4 3, downb_4_1::C = select _x_1_0::_Tuple4 3 in StdBool.not (balance._f60_60 (balance._f59_59 (<{StdChar.==_18}> upb_4_0 '(') downb_4_1) upb_4_0 downb_4_1)) ) ) (True -> <{_Tuple2!3}> False (EdSelection._Selection (EdPosition._Position 0 0) (EdPosition._Position 0 0))) (False -> <{_Tuple2!3}> True (EdSelection._Selection (EdPosition._Position (select _x_1_1::_Tuple4 2) (select _x_1_1::_Tuple4 1)) (EdPosition._Position (<{StdInt.+_6}> (select _x_1_0::_Tuple4 2) StdInt.one_11) (select _x_1_0::_Tuple4 1)))) 
balance._f60_60::B !_x_0::B upb_1::C downb_2::C = case _x_0 (True -> True) (_ -> case (case (<{StdChar.==_18}> upb_1 '[') (True -> <{StdChar.==_18}> downb_2 ']') (False -> False) ) (True -> True) (False -> case (<{StdChar.==_18}> upb_1 '{') (True -> <{StdChar.==_18}> downb_2 '}') (False -> False) ) )
balance._f59_59::B !_x_0::B downb_1::C = case _x_0 (True -> <{StdChar.==_18}> downb_1 ')') (_ -> False)


|| Converted Records
:: <{balance.gEq_s;}> = {!balance.gEq_s}

:: <{balance.gEq_ss;}> = {!balance.gEq_ss}

:: <{balance.gEq_sss;}> = {!balance.gEq_sss}

:: <{balance.gEq_ssss;}> = {!balance.gEq_ssss}

:: <{balance.gEq_sssss;}> = {!balance.gEq_sssss}

:: <{balance.gEq_ssssss;}> = {!balance.gEq_ssssss}

:: <{balance.gEq_sssssss;}> = {!balance.gEq_sssssss}

:: <{balance.gEq_ssssssss;}> = {!balance.gEq_ssssssss}

:: <{balance.gEq_sssssssss;}> = {!balance.gEq_sssssssss}

:: <{balance.bimap_s;}> = {balance.bimap_s}

:: <{balance.bimap_ss;}> = {balance.bimap_ss}

:: <{balance.bimap_sss;}> = {balance.bimap_sss}

