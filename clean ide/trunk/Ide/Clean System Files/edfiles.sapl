|| ?module? edfiles


edfiles.anon_50 !x_0 = x_0
edfiles.anon_49 !x_0 = x_0
edfiles.anon_48 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_118 !_x_0 !g_1 x_2 = StdMenuElement.setMenuElementTitles _x_0 (g_1 x_2)
edfiles.anon_119 !_x_0 !_x_1 !x_2 = StdMenuElement.setMenuElementTitles _x_0 (StdMenuElement.disableMenuElements _x_1 x_2)
edfiles.ed_deactivate title_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> let _x_2_0 = IdeState.getMenuIds ps_1_1, menu_2_1 = select _x_2_0::_Tuple2 0 in _Tuple2 ls_1_0 (StdPSt.appPIO (edfiles.anon_119 (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 0) "&Save") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 2) "&Revert") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 4) "Open Other") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 5) "Open Definition...") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 6) "Open Implementation...") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 7) "&Print") (_predefined._Cons (_Tuple2 (select menu_2_1::IdeState._MenuIds 9) "&Undo") _predefined._Nil))))))) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 0) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 1) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 2) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 4) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 7) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 9) (_predefined._Cons (select menu_2_1::IdeState._MenuIds 28) (select menu_2_1::IdeState._MenuIds 23))))))))) (select _x_2_0::_Tuple2 1))) 
edfiles.anon_42 !update_in_project_0::B !isDefmod_1::B !pos_size_2 !inf_3 = case inf_3 (PmTypes._ModInfo dir_1_0 compilerOptions_1_1 mod_edit_options_1_2 abcLink_1_3 -> case mod_edit_options_1_2 (PmTypes._ModEditOptions defeo_2_0 impeo_2_1 defopen_2_2 impopen_2_3 -> case isDefmod_1 (True -> update inf_3::PmTypes._ModInfo [2:update mod_edit_options_1_2::PmTypes._ModEditOptions [0:update defeo_2_0::PmTypes._EditWdOptions [1:pos_size_2],2:StdBool.not update_in_project_0]]) (False -> update inf_3::PmTypes._ModInfo [2:update mod_edit_options_1_2::PmTypes._ModEditOptions [1:update impeo_2_1::PmTypes._EditWdOptions [1:pos_size_2],3:StdBool.not update_in_project_0]]) ) ) 
edfiles.anon_43 !modname_0 !update_1 !p_2 = PmProject.PR_UpdateModule modname_0 update_1 p_2
edfiles.ed_common_close !update_in_project_0::B !win_1 !ps_2 = let _x_1_0 = clipboard.cw_maybe_close (<{clipboard.Clipper;}> IdeState.getClipInfo_68 IdeState.setClipInfo_69) (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 ps_2 in case (select _x_1_0::_Tuple2 0) (True -> select _x_1_0::_Tuple2 1) (False -> let ps_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = StdPSt.accPIO StdWindow.getActiveWindow ps_3_0, active_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = <{edfiles._c;430;16_143}> active_3_2 ps_3_7 win_1, ps_3_4 = select _x_3_3::_Tuple2 1, _x_3_5 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 EdClient.msgGetPathName ps_3_4, nam_3_6 = select _x_3_5::_Tuple2 0, ps_3_7 = select _x_3_1::_Tuple2 1 in case (Data.Maybe.isNothing nam_3_6) (True -> EdWindow.closeEditWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 (ExtNotice.openTimedNotice (ExtNotice.TimedNotice (_predefined._Cons "ed_common_close error 1" _predefined._Nil) 3000 (ExtNotice.NoticeButton "OK" edfiles.anon_49) _predefined._Nil) (select _x_3_5::_Tuple2 1))) (False -> let ps_5_0 = select _x_3_5::_Tuple2 1, _x_5_1 = StdPSt.accPIO (StdWindow.getWindowPos win_1) ps_5_0, pos_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Maybe.isNothing pos_5_2) (True -> EdWindow.closeEditWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 (ExtNotice.openTimedNotice (ExtNotice.TimedNotice (_predefined._Cons "ed_common_close error 2" _predefined._Nil) 3000 (ExtNotice.NoticeButton "OK" edfiles.anon_50) _predefined._Nil) (select _x_5_1::_Tuple2 1))) (False -> let nam_7_0 = Data.Maybe.fromJust nam_3_6, _x_7_1 = StdPSt.accPIO (StdWindow.getWindowViewSize win_1) (select _x_5_1::_Tuple2 1), _x_7_2 = IdeState.getCurrentPaths (select _x_7_1::_Tuple2 1), _x_7_3 = IdeState.getFromProject PmProject.PR_GetPaths (select _x_7_2::_Tuple2 1), pos_7_4 = Data.Maybe.fromJust pos_5_2, siz_7_5 = select _x_7_1::_Tuple2 0 in EdWindow.closeEditWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1 (IdeState.appProject (edfiles.anon_43 (select (select (PmPath.determine_dir_and_filename nam_7_0 (UtilStrictLists.AppendLists (select _x_7_3::_Tuple2 0) (select _x_7_2::_Tuple2 0)))::_Tuple2 0)::PmTypes._ModuleDirAndName 1) (edfiles.anon_42 update_in_project_0 (PmPath.IsDefPathname nam_7_0) (PmTypes.WindowPosAndSize (PmTypes._WindowPos_and_Size (select pos_7_4::StdIOBasic._Vector2 0) (select pos_7_4::StdIOBasic._Vector2 1) (select siz_7_5::StdIOBasic._Size 0) (select siz_7_5::StdIOBasic._Size 1))))) (select _x_7_3::_Tuple2 1))) ) ) 
<{edfiles._c;430;16_143}> !active_0 ps_1 win_2 = case active_0 (Data.Maybe.Nothing -> _Tuple2 active_0 ps_1) (Data.Maybe.Just act_1_0 -> <{edfiles._if;432;33_142}> (<{id.==_27}> act_1_0 win_2) (_Tuple2 active_0 ps_1)) 
<{edfiles._if;432;33_142}> !_x_0::B = case _x_0 (True -> edfiles.ed_deactivate "???") (_ -> StdFunc.id)
edfiles.maybeclose_24 update_in_project_0::B !close_1::B win_2 !ps_3 = case close_1 (True -> edfiles.ed_common_close update_in_project_0 win_2 ps_3) (False -> ps_3) 
edfiles.anon_54 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_53 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_52 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_51 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_56 !x_0 = x_0
edfiles.anon_55 !x_0 = x_0
<{edfiles.c;54;25_21}> !g_l_0 = <{edfiles.g_c1;54;32_144}> g_l_0
<{edfiles.g_c1;54;32_144}> !g_l_0 = case g_l_0 (_predefined._Cons txt_1_0 g_t_1_1 -> _predefined._Cons (StdControlDef.TextControl txt_1_0 (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (<{edfiles.c;54;25_21}> g_t_1_1)) (_ -> _predefined._Nil)
edfiles.anon_123 !g_0 x_1 = menubar.mb_update_undoinfo (g_0 x_1)
edfiles.anon_121 update_in_project_0::B !close_1::B win_2 !g_3 x_4 = edfiles.maybeclose_24 update_in_project_0 close_1 win_2 (g_3 x_4)
edfiles.anon_120 !g_0 x_1 = menubar.mb_update_undoinfo (g_0 x_1)
edfiles.anon_126 !_x_0 !x_1 = menubar.mb_update_undoinfo (StdWindow.closeWindow _x_0 x_1)
edfiles.anon_125 update_in_project_0::B !close_1::B win_2 !_x_3 !x_4 = edfiles.maybeclose_24 update_in_project_0 close_1 win_2 (StdWindow.closeWindow _x_3 x_4)
edfiles.anon_124 !_x_0 !x_1 = menubar.mb_update_undoinfo (StdWindow.closeWindow _x_0 x_1)
edfiles.anon_122 update_in_project_0::B close_1::B cont_2 !_x_3 g_4 x_5 = edfiles.doall_25 update_in_project_0 close_1 cont_2 _x_3 (g_4 x_5)
edfiles.try_save_23 cont_0 update_in_project_1::B close_2::B res_3 !win_4 !s_5 !ps_6 = let ps_1_0 = StdWindow.closeWindow s_5 ps_6, _x_1_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_4 EdClient.msgSave ps_1_0, reply_1_2 = select _x_1_1::_Tuple2 0 in case (Data.Maybe.isNothing reply_1_2) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons "Internal error [edfiles:ed_ask_save_all]" (_predefined._Cons "Aborting quit" _predefined._Nil))) (ExtNotice.NoticeButton "OK" edfiles.anon_55) _predefined._Nil) (select _x_1_1::_Tuple2 1)) (False -> let error_3_0 = Data.Maybe.fromJust reply_1_2 in case (Data.Maybe.isJust error_3_0) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons (Data.Maybe.fromJust error_3_0) (_predefined._Cons "Aborting quit" _predefined._Nil))) (ExtNotice.NoticeButton "OK" edfiles.anon_56) _predefined._Nil) (select _x_1_1::_Tuple2 1)) (False -> edfiles.doall_25 update_in_project_1 close_2 cont_0 res_3 (edfiles.maybeclose_24 update_in_project_1 close_2 win_4 (select _x_1_1::_Tuple2 1))) ) 
edfiles.sdef_22 cont_0 update_in_project_1::B close_2::B texts_3 res_4 win_5 s_6 ok_7 cancel_8 = StdWindowDef.Dialog "Save changes?" (<{StdIOBasic.:+:}> (StdIOBasic.ListLS (<{edfiles.c;54;25_21}> texts_3)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "&Cancel" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.anon_124 s_6))) (_predefined._Cons (StdControlDef.ControlId cancel_8) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Cancel")) _predefined._Nil))))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "&No" (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.anon_122 update_in_project_1 close_2 cont_0 res_4 (edfiles.anon_125 update_in_project_1 close_2 win_5 s_6)))) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Cancel")) _predefined._Nil))) (StdControlDef.ButtonControl "&Yes" (_predefined._Cons (StdControlDef.ControlId ok_7) (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.try_save_23 cont_0 update_in_project_1 close_2 res_4 win_5 s_6))) (_predefined._Cons (StdControlDef.ControlWidth (StdControlDef.ContentWidth "Cancel")) _predefined._Nil))))))) (_predefined._Cons (StdWindowDef.WindowId s_6) (_predefined._Cons (StdWindowDef.WindowOk ok_7) (_predefined._Cons (StdWindowDef.WindowCancel cancel_8) (_predefined._Cons (StdWindowDef.WindowClose (StdIOBasic.noLS (edfiles.anon_126 s_6))) (_predefined._Cons (StdWindowDef.WindowInitActive ok_7) _predefined._Nil)))))
edfiles.ask_26 cont_0 update_in_project_1::B close_2::B texts_3 win_4 res_5 ps_6 = let Controls_1_0 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_4 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)) (StdControlClass.getControlType_5 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)), Controls_1_1 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_2 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_3 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_4 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_2 Controls_1_3) (StdControlClass.getControlType_9 Controls_1_2 Controls_1_3), Controls_1_5 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_1 Controls_1_4) (StdControlClass.getControlType_9 Controls_1_1 Controls_1_4), _x_1_6 = StdId.openId_13 ps_6, s_1_7 = select _x_1_6::_Tuple2 0, ps_1_8 = select _x_1_6::_Tuple2 1, _x_1_9 = StdId.openId_13 ps_1_8, ok_1_10 = select _x_1_9::_Tuple2 0, ps_1_11 = select _x_1_9::_Tuple2 1, _x_1_12 = StdId.openId_13 ps_1_11, cancel_1_13 = select _x_1_12::_Tuple2 0, ps_1_14 = select _x_1_12::_Tuple2 1, _x_1_15 = StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_0 Controls_1_5) (StdControlClass.getControlType_9 Controls_1_0 Controls_1_5)) StdIOBasic.Void (edfiles.sdef_22 cont_0 update_in_project_1 close_2 texts_3 res_5 win_4 s_1_7 ok_1_10 cancel_1_13) ps_1_14 in case (StdBool.not (<{StdIOCommon.==_42}> (select (select _x_1_15::_Tuple2 0)::_Tuple2 0) StdIOCommon.NoError)) (True -> select _x_1_15::_Tuple2 1) (False -> select _x_1_15::_Tuple2 1) 
edfiles.doall_25 update_in_project_0::B close_1::B cont_2 !_x_3 ps_4 = case _x_3 (_predefined._Nil -> cont_2 ps_4) (_predefined._Cons win_1_0 res_1_1 -> let _x_2_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 EdClient.msgGetNeedSave ps_4, ns_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing ns_2_1) (True -> edfiles.doall_25 update_in_project_0 close_1 cont_2 res_1_1 (select _x_2_0::_Tuple2 1)) (False -> case (StdBool.not (Data.Maybe.fromJust ns_2_1)) (True -> edfiles.doall_25 update_in_project_0 close_1 cont_2 res_1_1 (edfiles.maybeclose_24 update_in_project_0 close_1 win_1_0 (select _x_2_0::_Tuple2 1))) (False -> let ps_5_0 = select _x_2_0::_Tuple2 1, _x_5_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 EdClient.msgGetPathName ps_5_0, mr_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Maybe.isNothing mr_5_2) (True -> edfiles.doall_25 update_in_project_0 close_1 cont_2 res_1_1 (select _x_5_1::_Tuple2 1)) (False -> edfiles.ask_26 cont_2 update_in_project_0 close_1 (_predefined._Cons "Save changes to" (_predefined._Cons (<{StdString.+++_11}> "\"" (<{StdString.+++_11}> (StdPathname.RemovePath (Data.Maybe.fromJust mr_5_2)) "\"?")) _predefined._Nil)) win_1_0 res_1_1 (select _x_5_1::_Tuple2 1)) ) ) ) 
edfiles.ed_ask_save_all !close_0::B !update_in_project_1::B cont_2 !pstate_3 = let _x_1_0 = StdPSt.accPIO StdWindow.getWindowsStack pstate_3 in edfiles.doall_25 update_in_project_1 close_0 cont_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
edfiles.cont_28 _x_0 _x_1 !ps_2 = ps_2
edfiles.anon_64 !x_0 = x_0
edfiles.doall_30 !_vEditor_0 pathName_1 !_x_2 ps_3 = case _x_2 (_predefined._Nil -> _Tuple2 Data.Maybe.Nothing ps_3) (_predefined._Cons win_1_0 res_1_1 -> let _x_2_0 = EdClient.message _vEditor_0 win_1_0 EdClient.msgGetPathName ps_3, mr_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing mr_2_1) (True -> edfiles.doall_30 _vEditor_0 pathName_1 res_1_1 (select _x_2_0::_Tuple2 1)) (False -> case (<{StdString.==_2}> pathName_1 (Data.Maybe.fromJust mr_2_1)) (True -> _Tuple2 (Data.Maybe.Just win_1_0) (StdWindow.setActiveWindow win_1_0 (select _x_2_0::_Tuple2 1))) (False -> edfiles.doall_30 _vEditor_0 pathName_1 res_1_1 (select _x_2_0::_Tuple2 1)) ) ) 
edfiles.giveError_31 !_x_0 = case _x_0 (StdError.Error s_1_0 -> s_1_0) (_ -> "")
edfiles.my_keyboard ks_0 !_x_1 = case _x_1 (_Tuple2 es_1_0 ps_1_1 -> let _x_2_0 = EdState.getEditorState_6 (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) ps_1_1 in EdKeyboard.editWindowKeyboard (EdState.getKeyMapping (select _x_2_0::_Tuple2 0)) ks_0 (_Tuple2 es_1_0 (select _x_2_0::_Tuple2 1))) 
<{edfiles.my_keyboard`}> ks_0 !_x_1 = case _x_1 (_Tuple2 es_1_0 ps_1_1 -> let _x_2_0 = EdState.getEditorState_6 (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) ps_1_1 in EdKeyboard.noeditWindowKeyboard (EdState.getKeyMapping (select _x_2_0::_Tuple2 0)) ks_0 (_Tuple2 es_1_0 (select _x_2_0::_Tuple2 1))) 
edfiles.anon_63 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_62 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_61 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_60 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_59 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.dofrag_33 !_x_0 = case _x_0 (StrictList.SCons str_1_0 _x_1_1 -> case _x_1_1 (StrictList.SNil -> case (PmParse.CleanModId str_1_0) (True -> Data.Maybe.Just str_1_0) (False -> Data.Maybe.Nothing) ) ) (_ -> Data.Maybe.Nothing)
edfiles.ismodule_32 !s_0 t_1 f_2 = let lengths_1_0::I = _SystemArray.size_20 s_0 in case (<{StdInt.<_17}> lengths_1_0 4) (True -> f_2) (False -> let firsts_3_0::I = <{StdInt.-_7}> lengths_1_0 4, lasts_3_1::I = <{StdInt.-_7}> lengths_1_0 StdInt.one_11 in case (<{StdString.==_2}> (<{StdString.%_10}> s_0 (_Tuple2 firsts_3_0 lasts_3_1)) ".icl") (True -> t_1) (False -> case (<{StdString.==_2}> (<{StdString.%_10}> s_0 (_Tuple2 firsts_3_0 lasts_3_1)) ".dcl") (True -> t_1) (False -> f_2) ) ) 
edfiles.handlefrag_34 !_x_0 m_1 = case _x_0 (Data.Maybe.Just str_1_0 -> _predefined._Cons (_Tuple2 (select m_1::IdeState._MenuIds 5) (<{StdString.+++_11}> "Open " (PmPath.MakeDefPathname str_1_0))) (_predefined._Cons (_Tuple2 (select m_1::IdeState._MenuIds 6) (<{StdString.+++_11}> "Open " (PmPath.MakeImpPathname str_1_0))) _predefined._Nil)) (_ -> _predefined._Cons (_Tuple2 (select m_1::IdeState._MenuIds 5) "Open Definition...") (_predefined._Cons (_Tuple2 (select m_1::IdeState._MenuIds 6) "Open Implementation...") _predefined._Nil))
edfiles.makeOther !pth_0 = case (PmPath.IsDefPathname pth_0) (True -> PmPath.MakeImpPathname pth_0) (False -> PmPath.MakeDefPathname pth_0) 
edfiles.anon_129 !_x_0 !g_1 x_2 = StdMenuElement.enableMenuElements _x_0 (g_1 x_2)
edfiles.anon_128 !_x_0 !g_1 x_2 = StdMenuElement.enableMenuElements _x_0 (g_1 x_2)
edfiles.anon_127 !_x_0 !g_1 x_2 = StdMenuElement.disableMenuElements _x_0 (g_1 x_2)
edfiles.anon_130 !_x_0 !g_1 x_2 = StdMenuElement.setMenuElementTitles _x_0 (g_1 x_2)
edfiles.anon_131 !f_0 _x_1 g_2 x_3 = f_0 (edfiles.anon_130 _x_1 g_2 x_3)
edfiles.anon_134 !_x_0 !_x_1 !x_2 = StdMenuElement.enableMenuElements _x_0 (StdMenuElement.setMenuElementTitles _x_1 x_2)
edfiles.anon_133 !_x_0 !_x_1 !x_2 = StdMenuElement.enableMenuElements _x_0 (StdMenuElement.setMenuElementTitles _x_1 x_2)
edfiles.anon_132 !_x_0 !_x_1 !x_2 = StdMenuElement.disableMenuElements _x_0 (StdMenuElement.setMenuElementTitles _x_1 x_2)
edfiles.anon_136 !_x_0 !_x_1 !x_2 = StdMenuElement.setMenuElementTitles _x_0 (StdMenuElement.enableMenuElements _x_1 x_2)
edfiles.anon_135 !f_0 _x_1 _x_2 x_3 = f_0 (edfiles.anon_136 _x_1 _x_2 x_3)
edfiles.ed_activate !title_0 !_x_1 = case _x_1 (_Tuple2 ls_1_0 ps_1_1 -> let !ps_2_0 = StdPSt.appPIO (edfiles.anon_135 (<{edfiles._c;212;31_145}> (select undo_2_13::EdMonad._UndoInfo 0) menu_2_14 undo_2_13) (_predefined._Cons (_Tuple2 (select menu_2_14::IdeState._MenuIds 0) (<{StdString.+++_11}> "&Save " filename_2_16)) (_predefined._Cons (_Tuple2 (select menu_2_14::IdeState._MenuIds 2) (<{StdString.+++_11}> "&Revert " filename_2_16)) (_predefined._Cons (_Tuple2 (select menu_2_14::IdeState._MenuIds 4) (<{StdString.+++_11}> "Open " (edfiles.makeOther filename_2_16))) (_predefined._Cons (_Tuple2 (select menu_2_14::IdeState._MenuIds 7) (<{StdString.+++_11}> "&Print " filename_2_16)) (edfiles.handlefrag_34 frag_2_10 menu_2_14))))) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 0) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 1) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 2) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 4) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 7) (_predefined._Cons (select menu_2_14::IdeState._MenuIds 28) (edfiles.ismodule_32 pathname_2_15 (select menu_2_14::IdeState._MenuIds 23) _predefined._Nil)))))))) (select _x_2_12::_Tuple2 1), _x_2_1 = IdeState.getMenuIds ps_1_1, ps_2_2 = select _x_2_1::_Tuple2 1, _x_2_3 = EdMonad.getUndoInfo (_Tuple2 ls_1_0 ps_2_2), _x_2_4 = select _x_2_3::_Tuple2 1, _x_2_5 = EdMonad.getPathName (_Tuple2 (select _x_2_4::_Tuple2 0) (select _x_2_4::_Tuple2 1)), _x_2_6 = select _x_2_5::_Tuple2 1, _x_2_7 = EdMonad.getText (_Tuple2 (select _x_2_6::_Tuple2 0) (select _x_2_6::_Tuple2 1)), _x_2_8 = select _x_2_7::_Tuple2 1, _x_2_9 = EdMonad.getSelection (_Tuple2 (select _x_2_8::_Tuple2 0) (select _x_2_8::_Tuple2 1)), frag_2_10 = edfiles.dofrag_33 (select (EdText.getTextFragment (EdSelection.orderSelection (select _x_2_9::_Tuple2 0)) (select _x_2_7::_Tuple2 0))::_Tuple2 0), _x_2_11 = select _x_2_9::_Tuple2 1, _x_2_12 = select (EdMonad.setMenuSelection frag_2_10 (_Tuple2 (select _x_2_11::_Tuple2 0) (select _x_2_11::_Tuple2 1)))::_Tuple2 1, undo_2_13 = select _x_2_3::_Tuple2 0, menu_2_14 = select _x_2_1::_Tuple2 0, pathname_2_15 = select _x_2_5::_Tuple2 0, filename_2_16 = StdPathname.RemovePath pathname_2_15 in _Tuple2 (select _x_2_12::_Tuple2 0) ps_2_0) 
<{edfiles._c;212;31_145}> !_x_0 menu_1 undo_2 = case _x_0 (EdMonad.None -> edfiles.anon_132 (_predefined._Cons (select menu_1::IdeState._MenuIds 9) _predefined._Nil) (_predefined._Cons (_Tuple2 (select menu_1::IdeState._MenuIds 9) "&Undo") _predefined._Nil)) (EdMonad.Undo -> edfiles.anon_133 (_predefined._Cons (select menu_1::IdeState._MenuIds 9) _predefined._Nil) (_predefined._Cons (_Tuple2 (select menu_1::IdeState._MenuIds 9) (<{StdString.+++_11}> "&Undo" (select undo_2::EdMonad._UndoInfo 1))) _predefined._Nil)) (EdMonad.Redo -> edfiles.anon_134 (_predefined._Cons (select menu_1::IdeState._MenuIds 9) _predefined._Nil) (_predefined._Cons (_Tuple2 (select menu_1::IdeState._MenuIds 9) (<{StdString.+++_11}> "Redo" (select undo_2::EdMonad._UndoInfo 1))) _predefined._Nil)) 
edfiles.anon_29::B _x_0 = True
edfiles.anon_58 !f_0 g_1 x_2 = f_0 (g_1 x_2)
edfiles.anon_57 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{edfiles.c;407;13_38}> !g_l_0 = <{edfiles.g_c1;407;20_146}> g_l_0
<{edfiles.g_c1;407;20_146}> !g_l_0 = case g_l_0 (_predefined._Cons txt_1_0 g_t_1_1 -> _predefined._Cons (StdControlDef.TextControl txt_1_0 (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (<{edfiles.c;407;13_38}> g_t_1_1)) (_ -> _predefined._Nil)
edfiles.anon_137 !update_in_project_0::B !win_1 !g_2 x_3 = edfiles.ed_common_close update_in_project_0 win_1 (g_2 x_3)
edfiles.anon_138 !update_in_project_0::B !win_1 !_x_2 !x_3 = edfiles.ed_common_close update_in_project_0 win_1 (StdWindow.closeWindow _x_2 x_3)
edfiles.edef_41 win_0 buttonWidth_1 texts_2 s_3 cn_4 = StdWindowDef.Dialog "" (<{StdIOBasic.:+:}> (StdIOBasic.ListLS (<{edfiles.c;407;13_38}> texts_2)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "Cancel" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (StdWindow.closeWindow s_3))) (_predefined._Cons (StdControlDef.ControlWidth buttonWidth_1) (_predefined._Cons (StdControlDef.ControlId cn_4) _predefined._Nil))))) (StdControlDef.ButtonControl "Close" (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.anon_138 True win_0 s_3))) (_predefined._Cons (StdControlDef.ControlWidth buttonWidth_1) _predefined._Nil))))) (_predefined._Cons (StdWindowDef.WindowCancel cn_4) (_predefined._Cons (StdWindowDef.WindowId s_3) _predefined._Nil))
edfiles.save_cont_39 win_0 buttonWidth_1 !win_2 !s_3 !ps_4 = let ps_1_0 = StdWindow.closeWindow s_3 ps_4, _x_1_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_2 EdClient.msgSave ps_1_0, reply_1_2 = select _x_1_1::_Tuple2 0 in case (Data.Maybe.isNothing reply_1_2) (True -> let Controls_3_0 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_4 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)) (StdControlClass.getControlType_5 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)), Controls_3_1 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_2 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_3_3 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_1 Controls_3_2) (StdControlClass.getControlType_9 Controls_3_1 Controls_3_2), _x_3_4 = StdId.openId_13 (select _x_1_1::_Tuple2 1) in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_3_0 Controls_3_3) (StdControlClass.getControlType_9 Controls_3_0 Controls_3_3)) StdIOBasic.Void (edfiles.edef_41 win_0 buttonWidth_1 (_predefined._Cons "Save failed." (_predefined._Cons "Internal error [edfiles:ed_close]" _predefined._Nil)) s_3 (select _x_3_4::_Tuple2 0)) (select _x_3_4::_Tuple2 1))::_Tuple2 1) (False -> let error_3_0 = Data.Maybe.fromJust reply_1_2 in case (Data.Maybe.isJust error_3_0) (True -> let Controls_5_0 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_4 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)) (StdControlClass.getControlType_5 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)), Controls_5_1 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_5_2 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_5_3 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_5_1 Controls_5_2) (StdControlClass.getControlType_9 Controls_5_1 Controls_5_2), _x_5_4 = StdId.openId_13 (select _x_1_1::_Tuple2 1) in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_5_0 Controls_5_3) (StdControlClass.getControlType_9 Controls_5_0 Controls_5_3)) StdIOBasic.Void (edfiles.edef_41 win_0 buttonWidth_1 (_predefined._Cons "Save failed." (_predefined._Cons (Data.Maybe.fromJust error_3_0) _predefined._Nil)) s_3 (select _x_5_4::_Tuple2 0)) (select _x_5_4::_Tuple2 1))::_Tuple2 1) (False -> edfiles.ed_common_close True win_2 (select _x_1_1::_Tuple2 1)) ) 
<{edfiles.c;383;21_36}> !g_l_0 = <{edfiles.g_c1;383;28_147}> g_l_0
<{edfiles.g_c1;383;28_147}> !g_l_0 = case g_l_0 (_predefined._Cons txt_1_0 g_t_1_1 -> _predefined._Cons (StdControlDef.TextControl txt_1_0 (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) _predefined._Nil)) (<{edfiles.c;383;21_36}> g_t_1_1)) (_ -> _predefined._Nil)
edfiles.anon_139 !update_in_project_0::B !win_1 !g_2 x_3 = edfiles.ed_common_close update_in_project_0 win_1 (g_2 x_3)
edfiles.anon_140 !update_in_project_0::B !win_1 !_x_2 !x_3 = edfiles.ed_common_close update_in_project_0 win_1 (StdWindow.closeWindow _x_2 x_3)
edfiles.sdef_37 win_0 buttonWidth_1 texts_2 win_3 !_x_4 = case _x_4 (_predefined._Cons s_1_0 _x_1_1 -> case _x_1_1 (_predefined._Cons ok_2_0 _x_2_1 -> case _x_2_1 (_predefined._Cons cancel_3_0 _x_3_1 -> StdWindowDef.Dialog "Save changes?" (<{StdIOBasic.:+:}> (StdIOBasic.ListLS (<{edfiles.c;383;21_36}> texts_2)) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "&Cancel" (_predefined._Cons (StdControlDef.ControlPos (_Tuple2 StdIOCommon.Left StdIOCommon.zero_32)) (_predefined._Cons (StdControlDef.ControlId cancel_3_0) (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (StdWindow.closeWindow s_1_0))) _predefined._Nil)))) (<{StdIOBasic.:+:}> (StdControlDef.ButtonControl "&No" (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.anon_140 True win_3 s_1_0))) _predefined._Nil)) (StdControlDef.ButtonControl "&Yes" (_predefined._Cons (StdControlDef.ControlId ok_2_0) (_predefined._Cons (StdControlDef.ControlFunction (StdIOBasic.noLS (edfiles.save_cont_39 win_0 buttonWidth_1 win_3 s_1_0))) _predefined._Nil)))))) (_predefined._Cons (StdWindowDef.WindowOk ok_2_0) (_predefined._Cons (StdWindowDef.WindowCancel cancel_3_0) (_predefined._Cons (StdWindowDef.WindowId s_1_0) (_predefined._Cons (StdWindowDef.WindowClose (StdIOBasic.noLS (StdWindow.closeWindow s_1_0))) (_predefined._Cons (StdWindowDef.WindowInitActive ok_2_0) _predefined._Nil)))))) ) ) (_ -> StdMisc.abort "edfiles: not enough ids")
edfiles.ask_40 win_0 buttonWidth_1 texts_2 win_3 !ps_4 = let Controls_1_0 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_4 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)) (StdControlClass.getControlType_5 (<{StdControlClass.Controls;}> StdControlClass.controlToHandles_30 StdControlClass.getControlType_31)), Controls_1_1 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_2 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_3 = <{StdControlClass.Controls;}> StdControlClass.controlToHandles_10 StdControlClass.getControlType_11, Controls_1_4 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_2 Controls_1_3) (StdControlClass.getControlType_9 Controls_1_2 Controls_1_3), Controls_1_5 = <{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_1 Controls_1_4) (StdControlClass.getControlType_9 Controls_1_1 Controls_1_4), _x_1_6 = StdPSt.accPIO (StdId.openIds_8 3) ps_4 in select (StdWindow.openModalDialog_58 (<{StdControlClass.Controls;}> (StdControlClass.controlToHandles_8 Controls_1_0 Controls_1_5) (StdControlClass.getControlType_9 Controls_1_0 Controls_1_5)) StdMisc.undef (edfiles.sdef_37 win_0 buttonWidth_1 texts_2 win_3 (select _x_1_6::_Tuple2 0)) (select _x_1_6::_Tuple2 1))::_Tuple2 1
edfiles.ed_close !win_0 !ps_1 = let _x_1_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 EdClient.msgGetPathName ps_1, mr_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing mr_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let ps_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 EdClient.msgGetNeedSave ps_3_0, ns_3_2 = select _x_3_1::_Tuple2 0 in case (Data.Maybe.isNothing ns_3_2) (True -> edfiles.ed_common_close True win_0 (select _x_3_1::_Tuple2 1)) (False -> case (StdBool.not (Data.Maybe.fromJust ns_3_2)) (True -> edfiles.ed_common_close True win_0 (select _x_3_1::_Tuple2 1)) (False -> edfiles.ask_40 win_0 (StdControlDef.ContentWidth "Cancel") (_predefined._Cons "Save changes to" (_predefined._Cons (<{StdString.+++_11}> "\"" (<{StdString.+++_11}> (StdPathname.RemovePath (Data.Maybe.fromJust mr_1_1)) "\"")) (_predefined._Cons "before closing?" _predefined._Nil))) win_0 (select _x_3_1::_Tuple2 1)) ) ) 
edfiles.doall_141 pathName_0 !_x_1 ps_2 = case _x_1 (_predefined._Nil -> _Tuple2 Data.Maybe.Nothing ps_2) (_predefined._Cons win_1_0 res_1_1 -> let _x_2_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 EdClient.msgGetPathName ps_2, mr_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing mr_2_1) (True -> edfiles.doall_141 pathName_0 res_1_1 (select _x_2_0::_Tuple2 1)) (False -> case (<{StdString.==_2}> pathName_0 (Data.Maybe.fromJust mr_2_1)) (True -> _Tuple2 (Data.Maybe.Just win_1_0) (StdWindow.setActiveWindow win_1_0 (select _x_2_0::_Tuple2 1))) (False -> edfiles.doall_141 pathName_0 res_1_1 (select _x_2_0::_Tuple2 1)) ) ) 
edfiles.ed_open_cont pathName_0 cont_1 !ps_2 = let _x_1_0 = StdPSt.accPIO StdWindow.getWindowsStack ps_2, windows_1_1 = select _x_1_0::_Tuple2 0, ps_1_2 = select _x_1_0::_Tuple2 1, _x_1_3 = edfiles.doall_141 pathName_0 windows_1_1 ps_1_2, exists_1_4 = select _x_1_3::_Tuple2 0 in case (Data.Maybe.isJust exists_1_4) (True -> cont_1 True (Data.Maybe.fromJust exists_1_4) (select _x_1_3::_Tuple2 1)) (False -> let ps_3_0 = select _x_1_3::_Tuple2 1, _x_3_1 = IdeState.getCurrentPaths ps_3_0, ps_3_2 = select _x_3_1::_Tuple2 1, _x_3_3 = IdeState.getFromProject PmProject.PR_GetPaths ps_3_2, ps_3_4 = select _x_3_3::_Tuple2 1, _x_3_5 = EdFile.readText (<{StdFile.FileSystem;}> StdPStClass.fclose_0 StdPStClass.fopen_1 StdPStClass.sfopen_2 StdPStClass.stdio_3) pathName_0 ps_3_4, _x_3_6 = select _x_3_5::_Tuple2 0, errorText_3_7 = select _x_3_6::_Tuple3 0 in case (StdError.isError errorText_3_7) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Clean Project Manager" (_predefined._Cons "Error while reading file:" (_predefined._Cons pathName_0 (_predefined._Cons (edfiles.giveError_31 errorText_3_7) _predefined._Nil)))) (ExtNotice.NoticeButton "OK" edfiles.anon_64) _predefined._Nil) (select _x_3_5::_Tuple2 1)) (False -> let prjpaths_5_0::B = select _x_3_3::_Tuple2 0, syspaths_5_1 = select _x_3_1::_Tuple2 0, _x_5_2 = PmPath.determine_dir_and_filename pathName_0 (UtilStrictLists.AppendLists prjpaths_5_0 syspaths_5_1), _x_5_3::B = select _x_5_2::_Tuple2 0, modname_5_4 = select _x_5_3::PmTypes._ModuleDirAndName 1, ps_5_5::B = select _x_3_5::_Tuple2 1, _x_5_6 = IdeState.getFromProject (PmProject.PR_GetModuleInfo modname_5_4) ps_5_5, ps_5_7 = select _x_5_6::_Tuple2 1, _x_5_8 = IdeState.getPrefs ps_5_7, prefs_5_9 = select _x_5_8::_Tuple2 0, _x_5_10 = ioutil.accScreenPicture_21 (ioutil.safeOpenFixedFont (select prefs_5_9::PmPrefs._Prefs 8)) (select _x_5_8::_Tuple2 1), _x_5_11 = StdId.openId_13 (select _x_5_10::_Tuple2 1), window_5_12 = select _x_5_11::_Tuple2 0, readOnly_5_13 = select _x_3_6::_Tuple3 2, _x_5_14 = IdeState.getMenuIds (select _x_5_11::_Tuple2 1), isDefMod_5_15 = PmPath.IsDefPathname pathName_0, title_5_16 = EdMonad.pathNameToWindowTitle pathName_0, inf_5_17 = select _x_5_6::_Tuple2 0, is_5_18 = PmPath.IsImpPathname pathName_0 in cont_1 False window_5_12 (select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) window_5_12 (EdMonad.setReadOnly readOnly_5_13) (select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) window_5_12 (EdMonad.setNewlineConvention (select _x_3_6::_Tuple3 1)) (EdWindow.openEditWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) (select (select _x_5_14::_Tuple2 0)::IdeState._MenuIds 9) (<{edfiles._if;164;46_148}> readOnly_5_13 pathName_0 title_5_16) pathName_0 (StdError.fromOk errorText_3_7) (select _x_5_10::_Tuple2 0) (select prefs_5_9::PmPrefs._Prefs 9) (select prefs_5_9::PmPrefs._Prefs 10) (<{edfiles._if;156;23_149}> isDefMod_5_15 prefs_5_9 is_5_18) window_5_12 (<{StdList.++}> (_predefined._Cons (StdWindowDef.WindowClose (StdIOBasic.noLS (edfiles.ed_close window_5_12))) (_predefined._Cons (StdWindowDef.WindowKeyboard edfiles.anon_29 StdIOCommon.Able (<{edfiles._if;154;23_150}> readOnly_5_13)) (_predefined._Cons (StdWindowDef.WindowActivate (edfiles.ed_activate title_5_16)) (_predefined._Cons (StdWindowDef.WindowDeactivate (edfiles.ed_deactivate title_5_16)) (_predefined._Cons (StdWindowDef.WindowInit (StdIOBasic.noLS (IdePlatform.SetWindowIcon window_5_12 (<{edfiles._if;155;23_151}> isDefMod_5_15 is_5_18)))) (_predefined._Cons (StdWindowDef.WindowMouse EdMouse.noMouseMoved StdIOCommon.Able EdMouse.editWindowMouse) _predefined._Nil)))))) (<{edfiles._c;172;30_153}> (<{edfiles._if;159;38_152}> (Data.Maybe.isJust inf_5_17) isDefMod_5_15 inf_5_17))) (select _x_5_14::_Tuple2 1)))::_Tuple2 1))::_Tuple2 1)) ) 
<{edfiles._c;172;30_153}> !_x_0 = case _x_0 (PmTypes.WindowPosAndSize window_pos_and_size_1_0 -> _predefined._Cons (StdWindowDef.WindowViewSize (StdIOBasic._Size (select window_pos_and_size_1_0::PmTypes._WindowPos_and_Size 2) (select window_pos_and_size_1_0::PmTypes._WindowPos_and_Size 3))) (_predefined._Cons (StdWindowDef.WindowPos (_Tuple2 StdIOCommon.Fix (StdIOCommon.OffsetVector (StdIOBasic._Vector2 (select window_pos_and_size_1_0::PmTypes._WindowPos_and_Size 0) (select window_pos_and_size_1_0::PmTypes._WindowPos_and_Size 1))))) _predefined._Nil)) (_ -> _predefined._Nil)
<{edfiles._if;159;38_152}> !_x_0::B isDefMod_1::B inf_2 = case _x_0 (True -> case isDefMod_1 (True -> select (select (select (Data.Maybe.fromJust inf_2)::PmTypes._ModInfo 2)::PmTypes._ModEditOptions 0)::PmTypes._EditWdOptions 1) (False -> select (select (select (Data.Maybe.fromJust inf_2)::PmTypes._ModInfo 2)::PmTypes._ModEditOptions 1)::PmTypes._EditWdOptions 1) ) (_ -> PmTypes.NoWindowPosAndSize)
<{edfiles._if;155;23_151}>::I !isDefMod_0::B is_1::B = case isDefMod_0 (True -> 32515) (_ -> case is_1 (True -> 32516) (False -> 32512) )
<{edfiles._if;154;23_150}> !readOnly_0::B = case readOnly_0 (True -> <{edfiles.my_keyboard`}>) (_ -> edfiles.my_keyboard)
<{edfiles._if;156;23_149}> !isDefMod_0::B !prefs_1 is_2::B = case isDefMod_0 (True -> select prefs_1::PmPrefs._Prefs 16) (_ -> case is_2 (True -> select prefs_1::PmPrefs._Prefs 17) (False -> select prefs_1::PmPrefs._Prefs 15) )
<{edfiles._if;164;46_148}> !readOnly_0::B pathName_1 title_2 = case readOnly_0 (True -> <{EdMonad.pathNameToWindowTitle`}> pathName_1) (_ -> title_2)
edfiles.ed_open_path pathName_0 !ps_1 = let _x_1_0 = IdeState.getFHI ps_1 in edfiles.ed_open_cont pathName_0 edfiles.cont_28 (select (StdReceiver.syncSend2 (select _x_1_0::_Tuple2 0) pathName_0 (select _x_1_0::_Tuple2 1))::_Tuple2 1)
edfiles.cont_27 sel_0 _x_1 !win_2 !ps_3 = select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_2 (EdClient.msgChangeSelection sel_0) ps_3)::_Tuple2 1
edfiles.ed_open_path_sel pathName_0 !sel_1 !ps_2 = let _x_1_0 = IdeState.getFHI ps_2 in edfiles.ed_open_cont pathName_0 (edfiles.cont_27 sel_1) (select (StdReceiver.syncSend2 (select _x_1_0::_Tuple2 0) pathName_0 (select _x_1_0::_Tuple2 1))::_Tuple2 1)
edfiles.anon_66 !x_0 = x_0
edfiles.anon_65 !x_0 = x_0
edfiles.anon_35::B _x_0 = True
edfiles.ed_new !suffix_0 !ps_1 = let _x_1_0 = StdPStClass.selectOutputFile_14 "New..." suffix_0 ps_1, maybeString_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing maybeString_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let ps_3_0::B = select _x_1_0::_Tuple2 1, _x_3_1 = StdPSt.accPIO StdId.openId_7 ps_3_0, window_3_2 = select _x_3_1::_Tuple2 0, ps_3_3 = select _x_3_1::_Tuple2 1, _x_3_4 = IdeState.getMenuIds ps_3_3, ps_3_5 = select _x_3_4::_Tuple2 1, _x_3_6 = IdeState.getPrefs ps_3_5, prefs_3_7 = select _x_3_6::_Tuple2 0, nlConv_3_8::B = <{edfiles._c;325;16_155}> (select prefs_3_7::PmPrefs._Prefs 24), _x_3_9::I = select _x_3_4::_Tuple2 0, mn_und_3_10 = select _x_3_9::IdeState._MenuIds 9, pathName_3_11 = Data.Maybe.fromJust maybeString_1_1, title_3_12 = EdMonad.pathNameToWindowTitle pathName_3_11, text_3_13 = EdLineText.newText, defaultFontdef_3_14 = select prefs_3_7::PmPrefs._Prefs 8, ps_3_15 = select _x_3_6::_Tuple2 1, _x_3_16 = StdPSt.accPIO (StdPSt.accScreenPicture_13 (StdPicture.openFont defaultFontdef_3_14)) ps_3_15, _x_3_17 = select _x_3_16::_Tuple2 0, defaultFont_3_18 = select _x_3_17::_Tuple2 1, defaultTabs_3_19 = select prefs_3_7::PmPrefs._Prefs 9, defaultMargin_3_20 = select prefs_3_7::PmPrefs._Prefs 10, isDefMod_3_21 = PmPath.IsDefPathname pathName_3_11, defaultSync_3_22 = <{edfiles._if;313;31_154}> isDefMod_3_21 prefs_3_7 is_3_29, ps_3_23 = select _x_3_16::_Tuple2 1, ps_3_24 = EdWindow.openEditWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) mn_und_3_10 title_3_12 pathName_3_11 text_3_13 defaultFont_3_18 defaultTabs_3_19 defaultMargin_3_20 defaultSync_3_22 window_3_2 (_predefined._Cons (StdWindowDef.WindowClose (StdIOBasic.noLS (edfiles.ed_close window_3_2))) (_predefined._Cons (StdWindowDef.WindowKeyboard edfiles.anon_35 StdIOCommon.Able edfiles.my_keyboard) (_predefined._Cons (StdWindowDef.WindowActivate (edfiles.ed_activate title_3_12)) (_predefined._Cons (StdWindowDef.WindowDeactivate (edfiles.ed_deactivate title_3_12)) (_predefined._Cons (StdWindowDef.WindowMouse EdMouse.noMouseMoved StdIOCommon.Able EdMouse.editWindowMouse) _predefined._Nil))))) ps_3_23, _x_3_25 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) window_3_2 (EdMonad.setNewlineConvention nlConv_3_8) ps_3_24, ps_3_26 = select _x_3_25::_Tuple2 1, _x_3_27 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) window_3_2 EdClient.msgSave ps_3_26, reply_3_28 = select _x_3_27::_Tuple2 0, is_3_29 = PmPath.IsImpPathname pathName_3_11 in case (Data.Maybe.isNothing reply_3_28) (True -> edfiles.ed_common_close False window_3_2 (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "File creation failed" (_predefined._Cons "Internal error [edfiles:ed_new]" _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_65) _predefined._Nil) (select _x_3_27::_Tuple2 1))) (False -> let error_5_0 = Data.Maybe.fromJust reply_3_28 in case (Data.Maybe.isJust error_5_0) (True -> edfiles.ed_common_close False window_3_2 (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "File creation failed" (_predefined._Cons (Data.Maybe.fromJust error_5_0) _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_66) _predefined._Nil) (select _x_3_27::_Tuple2 1))) (False -> let _x_7_0 = IdeState.getFHI (select _x_3_27::_Tuple2 1) in select (StdReceiver.syncSend2 (select _x_7_0::_Tuple2 0) pathName_3_11 (select _x_7_0::_Tuple2 1))::_Tuple2 1) ) ) 
<{edfiles._c;325;16_155}> !_x_0 = case _x_0 (PmPrefs.LeaveAlone _x_1_0 -> case _x_1_0 (UtilNewlinesFile.NewlineConventionNone -> UtilNewlinesFile.NewlineConventionDos) (_ -> _x_1_0)) (PmPrefs.AlwaysUse _x_1_0 -> case _x_1_0 (UtilNewlinesFile.NewlineConventionNone -> UtilNewlinesFile.NewlineConventionDos) (_ -> _x_1_0)) 
<{edfiles._if;313;31_154}> !isDefMod_0::B !prefs_1 is_2::B = case isDefMod_0 (True -> select prefs_1::PmPrefs._Prefs 16) (_ -> case is_2 (True -> select prefs_1::PmPrefs._Prefs 17) (False -> select prefs_1::PmPrefs._Prefs 15) )
edfiles.anon_68 !x_0 = x_0
edfiles.anon_67 !x_0 = x_0
edfiles.ed_save !win_0 !ps_1 = let _x_1_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 EdClient.msgSave ps_1, reply_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing reply_1_1) (True -> <{_Tuple2!3}> False (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons "Internal error [edfiles:ed_save]" _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_67) _predefined._Nil) (select _x_1_0::_Tuple2 1))) (False -> let error_3_0 = Data.Maybe.fromJust reply_1_1 in case (Data.Maybe.isNothing error_3_0) (True -> <{_Tuple2!3}> True (select _x_1_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons (Data.Maybe.fromJust error_3_0) _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_68) _predefined._Nil) (select _x_1_0::_Tuple2 1))) ) 
edfiles.anon_70 !x_0 = x_0
edfiles.anon_69 !x_0 = x_0
edfiles.fi_update_44 !cols_0 !fi_1 = update fi_1::EdMonad._FontInfo [9:update (select fi_1::EdMonad._FontInfo 9)::EdMonad._SyntaxColours [0:select cols_0::EdMonad._SyntaxColours 0,1:select cols_0::EdMonad._SyntaxColours 1,2:select cols_0::EdMonad._SyntaxColours 2,3:select cols_0::EdMonad._SyntaxColours 3,4:select cols_0::EdMonad._SyntaxColours 4,5:select cols_0::EdMonad._SyntaxColours 5,6:select cols_0::EdMonad._SyntaxColours 6,7:select cols_0::EdMonad._SyntaxColours 7]]
edfiles.ed_save_as !ps_0 = let _x_1_0 = StdPSt.accPIO StdWindow.getActiveWindow ps_0, win_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing win_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let win_3_0 = Data.Maybe.fromJust win_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = EdClient.isEditWin (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 ps_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> select _x_3_2::_Tuple2 1) (False -> let ps_5_0 = select _x_3_2::_Tuple2 1, _x_5_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 EdClient.msgGetPathName ps_5_0, mpath_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Maybe.isNothing mpath_5_2) (True -> select _x_5_1::_Tuple2 1) (False -> let o_pathname_7_0 = Data.Maybe.fromJust mpath_5_2, ps_7_1 = select _x_5_1::_Tuple2 1, _x_7_2 = StdPStClass.selectOutputFile_14 "Save as:" o_pathname_7_0 ps_7_1, maybeString_7_3 = select _x_7_2::_Tuple2 0 in case (Data.Maybe.isNothing maybeString_7_3) (True -> select _x_7_2::_Tuple2 1) (False -> let pathname_9_0 = Data.Maybe.fromJust maybeString_7_3, ps_9_1 = select _x_7_2::_Tuple2 1, _x_9_2 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 (EdMonad.setReadOnly False) ps_9_1, ps_9_3 = select _x_9_2::_Tuple2 1, _x_9_4 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 (EdClient.msgSetPathName pathname_9_0) ps_9_3, ps_9_5 = select _x_9_4::_Tuple2 1, _x_9_6 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 EdClient.msgSave ps_9_5, reply_9_7 = select _x_9_6::_Tuple2 0 in case (Data.Maybe.isNothing reply_9_7) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save as failed:" (_predefined._Cons "Internal error [edfiles:ed_save_as]" _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_69) _predefined._Nil) (select _x_9_6::_Tuple2 1)) (False -> let error_11_0 = Data.Maybe.fromJust reply_9_7 in case (Data.Maybe.isJust error_11_0) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save as failed:" (_predefined._Cons (Data.Maybe.fromJust error_11_0) _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_70) _predefined._Nil) (select _x_9_6::_Tuple2 1)) (False -> let ps_13_0 = select _x_9_6::_Tuple2 1, _x_13_1 = IdeState.getPrefs ps_13_0, _x_13_2 = IdeState.getMenuIds (StdPSt.appPIO (StdWindow.updateWindow win_3_0 Data.Maybe.Nothing) (select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 (EdMonad.appFontInfo (edfiles.fi_update_44 (<{edfiles._if;495;31_156}> (PmPath.IsDefPathname pathname_9_0) prefs_13_6 pathname_9_0))) (select _x_13_1::_Tuple2 1))::_Tuple2 1)), menu_13_3 = select _x_13_2::_Tuple2 0, filename_13_4 = StdPathname.RemovePath pathname_9_0, _x_13_5 = IdeState.getFHI (StdPSt.appPIO (StdMenuElement.setMenuElementTitles (_predefined._Cons (_Tuple2 (select menu_13_3::IdeState._MenuIds 0) (<{StdString.+++_11}> "&Save " filename_13_4)) (_predefined._Cons (_Tuple2 (select menu_13_3::IdeState._MenuIds 2) (<{StdString.+++_11}> "&Revert " filename_13_4)) (_predefined._Cons (_Tuple2 (select menu_13_3::IdeState._MenuIds 4) (<{StdString.+++_11}> "Open " (edfiles.makeOther filename_13_4))) (_predefined._Cons (_Tuple2 (select menu_13_3::IdeState._MenuIds 7) (<{StdString.+++_11}> "&Print " filename_13_4)) _predefined._Nil))))) (select _x_13_2::_Tuple2 1)), prefs_13_6 = select _x_13_1::_Tuple2 0 in select (StdReceiver.syncSend2 (select _x_13_5::_Tuple2 0) pathname_9_0 (select _x_13_5::_Tuple2 1))::_Tuple2 1) ) ) ) ) ) 
<{edfiles._if;495;31_156}> !_x_0::B !prefs_1 pathname_2 = case _x_0 (True -> select prefs_1::PmPrefs._Prefs 16) (_ -> case (PmPath.IsImpPathname pathname_2) (True -> select prefs_1::PmPrefs._Prefs 17) (False -> select prefs_1::PmPrefs._Prefs 15) )
edfiles.anon_72 !x_0 = x_0
edfiles.anon_71 !x_0 = x_0
edfiles.ed_save_copy_as !ps_0 = let _x_1_0 = StdPSt.accPIO StdWindow.getActiveWindow ps_0, win_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing win_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let win_3_0 = Data.Maybe.fromJust win_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = EdClient.isEditWin (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 ps_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> select _x_3_2::_Tuple2 1) (False -> let ps_5_0 = select _x_3_2::_Tuple2 1, _x_5_1 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 EdClient.msgGetPathName ps_5_0, mpath_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Maybe.isNothing mpath_5_2) (True -> select _x_5_1::_Tuple2 1) (False -> let pathname_7_0 = Data.Maybe.fromJust mpath_5_2, ps_7_1 = select _x_5_1::_Tuple2 1, _x_7_2 = StdPStClass.selectOutputFile_14 "Save Copy As:" pathname_7_0 ps_7_1, maybeString_7_3 = select _x_7_2::_Tuple2 0 in case (Data.Maybe.isNothing maybeString_7_3) (True -> select _x_7_2::_Tuple2 1) (False -> let pathName_9_0 = Data.Maybe.fromJust maybeString_7_3, ps_9_1 = select _x_7_2::_Tuple2 1, _x_9_2 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_3_0 (EdClient.msgSaveTo pathName_9_0) ps_9_1, reply_9_3 = select _x_9_2::_Tuple2 0 in case (Data.Maybe.isNothing reply_9_3) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save copy as failed:" (_predefined._Cons "Internal error [edfiles:ed_save_copy_as]" _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_71) _predefined._Nil) (select _x_9_2::_Tuple2 1)) (False -> let error_11_0 = Data.Maybe.fromJust reply_9_3 in case (Data.Maybe.isJust error_11_0) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save copy as failed:" (_predefined._Cons (Data.Maybe.fromJust error_11_0) _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_72) _predefined._Nil) (select _x_9_2::_Tuple2 1)) (False -> select _x_9_2::_Tuple2 1) ) ) ) ) ) 
edfiles.anon_74 !x_0 = x_0
edfiles.anon_73 !x_0 = x_0
edfiles.doall_45 !_x_0 ps_1 = case _x_0 (_predefined._Nil -> ps_1) (_predefined._Cons win_1_0 res_1_1 -> let _x_2_0 = EdClient.isEditWin (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 ps_1 in case (StdBool.not (select _x_2_0::_Tuple2 0)) (True -> edfiles.doall_45 res_1_1 (select _x_2_0::_Tuple2 1)) (False -> let !_x_4_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 EdClient.msgSave (select _x_2_0::_Tuple2 1), reply_4_1 = select _x_4_0::_Tuple2 0 in case (Data.Maybe.isNothing reply_4_1) (True -> edfiles.doall_45 res_1_1 (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons "Internal error [edfiles:ed_save_all]" _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_73) _predefined._Nil) (select _x_4_0::_Tuple2 1))) (False -> let error_6_0 = Data.Maybe.fromJust reply_4_1 in case (Data.Maybe.isJust error_6_0) (True -> edfiles.doall_45 res_1_1 (ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Save failed:" (_predefined._Cons (Data.Maybe.fromJust error_6_0) _predefined._Nil)) (ExtNotice.NoticeButton "OK" edfiles.anon_74) _predefined._Nil) (select _x_4_0::_Tuple2 1))) (False -> edfiles.doall_45 res_1_1 (select _x_4_0::_Tuple2 1)) ) ) ) 
edfiles.ed_save_all !pstate_0 = let _x_1_0 = StdPSt.accPIO StdWindow.getWindowsStack pstate_0 in edfiles.doall_45 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
edfiles.ed_print_setup !ps_0 = let _x_1_0 = IdeState.getPrintSetup ps_0, _x_1_1 = StdPrint.printSetupDialog (<{osprint.PrintEnvironments;}> osprint.os_printpageperpage_7 osprint.os_printsetupdialog_8) (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1) in IdeState.setPrintSetup (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1)
edfiles.ed_print !ps_0 = let _x_1_0 = IdeState.getPrintSetup ps_0, printSetup_1_1 = select _x_1_0::_Tuple2 0, ps_1_2 = select _x_1_0::_Tuple2 1, _x_1_3 = EdClient.sendToActiveWindow (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) (EdClient.msgPrint printSetup_1_1) ps_1_2, res_1_4 = select _x_1_3::_Tuple2 0 in case (Data.Maybe.isJust res_1_4) (True -> IdeState.setPrintSetup (Data.Maybe.fromJust res_1_4) (select _x_1_3::_Tuple2 1)) (False -> select _x_1_3::_Tuple2 1) 
edfiles.doall_46 !printSetup_0 !_x_1 !ps_2 = case _x_1 (_predefined._Nil -> IdeState.setPrintSetup printSetup_0 ps_2) (_predefined._Cons win_1_0 res_1_1 -> let _x_2_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_1_0 (EdClient.msgPrint printSetup_0) ps_2, rep_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing rep_2_1) (True -> edfiles.doall_46 printSetup_0 res_1_1 (select _x_2_0::_Tuple2 1)) (False -> edfiles.doall_46 (Data.Maybe.fromJust rep_2_1) res_1_1 (select _x_2_0::_Tuple2 1)) ) 
edfiles.ed_print_all !pstate_0 = let _x_1_0 = IdeState.getPrintSetup pstate_0, _x_1_1 = StdPSt.accPIO StdWindow.getWindowsStack (select _x_1_0::_Tuple2 1) in edfiles.doall_46 (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1)
edfiles.giveError_47 !_x_0 = case _x_0 (StdError.Error s_1_0 -> s_1_0) (_ -> "")
edfiles.ed_revert_win !win_0 !ps_1 = let _x_1_0 = EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 EdClient.msgGetPathName ps_1, mpath_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing mpath_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> let pathName_3_0 = Data.Maybe.fromJust mpath_1_1, ps_3_1 = select _x_1_0::_Tuple2 1, _x_3_2 = EdFile.readText (<{StdFile.FileSystem;}> StdPStClass.fclose_0 StdPStClass.fopen_1 StdPStClass.sfopen_2 StdPStClass.stdio_3) pathName_3_0 ps_3_1, _x_3_3 = select _x_3_2::_Tuple2 0, errorText_3_4 = select _x_3_3::_Tuple3 0 in case (StdError.isError errorText_3_4) (True -> ExtNotice.openNotice (ExtNotice.Notice (_predefined._Cons "Clean Project Manager" (_predefined._Cons "Error while reading file:" (_predefined._Cons pathName_3_0 (_predefined._Cons (edfiles.giveError_47 errorText_3_4) _predefined._Nil)))) (ExtNotice.NoticeButton "OK" StdFunc.id) _predefined._Nil) (select _x_3_2::_Tuple2 1)) (False -> menubar.mb_update_undoinfo (select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 (EdMonad.setNewlineConvention (select _x_3_3::_Tuple3 1)) (select (EdClient.message (<{EdState.Editor;}> IdeState.getEditorState_66 IdeState.setEditorState_67) win_0 (EdClient.msgRevertText (StdError.fromOk errorText_3_4)) (select _x_3_2::_Tuple2 1))::_Tuple2 1))::_Tuple2 1)) ) 
edfiles.ed_revert !ps_0 = let _x_1_0 = StdPSt.accPIO StdWindow.getActiveWindow ps_0, win_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing win_1_1) (True -> select _x_1_0::_Tuple2 1) (False -> edfiles.ed_revert_win (Data.Maybe.fromJust win_1_1) (select _x_1_0::_Tuple2 1)) 


|| Converted Records
:: <{edfiles.gEq_s;}> = {!edfiles.gEq_s}

:: <{edfiles.gEq_ss;}> = {!edfiles.gEq_ss}

:: <{edfiles.gEq_sss;}> = {!edfiles.gEq_sss}

:: <{edfiles.gEq_ssss;}> = {!edfiles.gEq_ssss}

:: <{edfiles.gEq_sssss;}> = {!edfiles.gEq_sssss}

:: <{edfiles.gEq_ssssss;}> = {!edfiles.gEq_ssssss}

:: <{edfiles.gEq_sssssss;}> = {!edfiles.gEq_sssssss}

:: <{edfiles.gEq_ssssssss;}> = {!edfiles.gEq_ssssssss}

:: <{edfiles.gEq_sssssssss;}> = {!edfiles.gEq_sssssssss}

:: <{edfiles.bimap_s;}> = {edfiles.bimap_s}

:: <{edfiles.bimap_ss;}> = {edfiles.bimap_ss}

:: <{edfiles.bimap_sss;}> = {edfiles.bimap_sss}

