|| ?module? System.Process


System.Process.argvLength_24::I !_vArray_0 !_x_1 !l_2::I = case _x_1 (_predefined._Cons a_1_0 as_1_1 -> System.Process.argvLength_24 _vArray_0 as_1_1 (<{StdInt.+_6}> l_2 (StdInt.bitand (<{StdInt.+_6}> (select _vArray_0::<{_SystemArray.Array;}> 4 a_1_0) 8) -8))) (_predefined._Nil -> l_2) 
System.Process.copyChars_22 !ai_0::I !a_1 !si_2::I !s_3 = case (<{StdInt.<_17}> ai_0 (_SystemArray.size_20 a_1)) (True -> System.Process.copyChars_22 (<{StdInt.+_6}> ai_0 1) a_1 (<{StdInt.+_6}> si_2 1) (_SystemArray.update_21 s_3 si_2 (_SystemArray.select_19 a_1 ai_0))) (False -> s_3) 
System.Process.copyArgs_21 !_x_0 i_1::I !s_2 = case _x_0 (_predefined._Cons a_1_0 as_1_1 -> System.Process.copyArgs_21 as_1_1 (<{StdInt.+_6}> i_1 (StdInt.bitand (<{StdInt.+_6}> (_SystemArray.size_20 a_1_0) 8) -8)) (System.Process.copyChars_22 0 a_1_0 i_1 s_2)) (_predefined._Nil -> s_2) 
System.Process.createArgsString_25 !args_size_0::I !argv_list_1 = System.Process.copyArgs_21 argv_list_1 0 (_SystemArray.createArray_17 args_size_0 '\0')
System.Process.fillArgv_23 !arg_n_0::I !_x_1 !argv_2 !args_memory_3::I = case _x_1 (_predefined._Cons a_1_0 as_1_1 -> System.Process.fillArgv_23 (<{StdInt.+_6}> arg_n_0 1) as_1_1 (_SystemArray.update_13 argv_2 arg_n_0 args_memory_3) (<{StdInt.+_6}> args_memory_3 (StdInt.bitand (<{StdInt.+_6}> (_SystemArray.size_20 a_1_0) 8) -8))) (_predefined._Nil -> _SystemArray.update_13 argv_2 arg_n_0 0) 
System.Process.createArgv_26 !argv_list_0 !args_memory_1::I = System.Process.fillArgv_23 0 argv_list_0 (_SystemArray.createArray_9 (<{StdInt.+_6}> (StdList.length_47 argv_list_0) 1) 0) args_memory_1
System.Process.argvLength_84::I !_x_0 !l_1::I = case _x_0 (_predefined._Cons a_1_0 as_1_1 -> System.Process.argvLength_84 as_1_1 (<{StdInt.+_6}> l_1 (StdInt.bitand (<{StdInt.+_6}> (_SystemArray.size_20 a_1_0) 8) -8))) (_predefined._Nil -> l_1) 
System.Process.runProcessMakeArgv !argv_list_0 world_1 = let args_size_1_0::I = System.Process.argvLength_84 argv_list_0 0, args_memory_1_1::I = System._Posix.malloc args_size_1_0 in case (<{StdInt.==_16}> args_memory_1_1 0) (True -> StdMisc.abort "malloc failed") (False -> <{_Tuple2!1}> (System.Process.createArgv_26 argv_list_0 (System._Posix.memcpy_string_to_pointer args_memory_1_1 (System.Process.createArgsString_25 args_size_1_0 argv_list_0) args_size_1_0)) world_1) 
System.Process.runProcess !path_0 !args_1 !mCurrentDirectory_2 !world_3 = let fullPath_1_0 = <{System.Process._c;50;20_85}> mCurrentDirectory_2 path_0, _x_1_1 = System.File.fileExists fullPath_1_0 world_3 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> _Tuple2 (Data.Error.Error (_Tuple2 1 (<{StdString.+++_11}> "File " (<{StdString.+++_11}> fullPath_1_0 " does not exist")))) (select _x_1_1::_Tuple2 1)) (False -> let world_3_0::I = select _x_1_1::_Tuple2 1, _x_3_1 = System._Posix.fork world_3_0, pid_3_2 = select _x_3_1::_Tuple2 0 in case (<{StdInt.==_16}> pid_3_2 0) (True -> let _x_5_0 = <{System.Process._c;37;25_86}> mCurrentDirectory_2 world_5_1, world_5_1 = select _x_3_1::_Tuple2 1 in case (StdBool.not (<{StdInt.==_16}> (select _x_5_0::_Tuple2 0) 0)) (True -> System.OSError.getLastOSError (select _x_5_0::_Tuple2 1)) (False -> let _x_7_0 = System.Process.runProcessMakeArgv (_predefined._Cons path_0 args_1) (select _x_5_0::_Tuple2 1) in System._Posix.exit 1 (select (System._Posix.execvp (<{StdString.+++_11}> path_0 "\0") (select _x_7_0::_Tuple2 0) (select _x_7_0::_Tuple2 1))::_Tuple2 1)) ) (False -> case (<{StdInt.<_17}> 0 pid_3_2) (True -> _Tuple2 (Data.Error.Ok (System.Process._ProcessHandle pid_3_2)) (select _x_3_1::_Tuple2 1)) (False -> System.OSError.getLastOSError (select _x_3_1::_Tuple2 1)) ) ) 
<{System.Process._c;37;25_86}> !mCurrentDirectory_0 world_1 = case mCurrentDirectory_0 (Data.Maybe.Just dir_1_0 -> System._Posix.chdir (System._Pointer.packString dir_1_0) world_1) (Data.Maybe.Nothing -> _Tuple2 0 world_1) 
<{System.Process._c;50;20_85}> !mCurrentDirectory_0 !path_1 = case mCurrentDirectory_0 (Data.Maybe.Just dir_1_0 -> <{System.FilePath.</>}> dir_1_0 path_1) (Data.Maybe.Nothing -> path_1) 
System.Process.anon_27::I !ptr_0::I = System._Pointer.readInt4S ptr_0 0
System.Process.anon_28::I !ptr_0::I = System._Pointer.readInt4S ptr_0 4
System.Process.openPipe !world_0 = let !ptr_1_0::I = System._Posix.malloc 8 in case (<{StdInt.==_16}> ptr_1_0 0) (True -> StdMisc.abort "malloc failed") (False -> let !_x_3_0 = System._Posix.pipe ptr_1_0 world_0 in case (<{StdInt.==_16}> (select _x_3_0::_Tuple2 0) -1) (True -> let fRes_5_0::I = System._Posix.free ptr_1_0 in case (StdBool.not (<{StdInt.==_16}> fRes_5_0 fRes_5_0)) (True -> StdMisc.undef) (False -> System.OSError.getLastOSError (select _x_3_0::_Tuple2 1)) ) (False -> let !fRes_5_0::I = System._Posix.free (select _x_5_3::_Tuple2 1), _x_5_1 = System._Pointer.readP System.Process.anon_27 ptr_1_0, ptr_5_2::I = select _x_5_1::_Tuple2 1, _x_5_3 = System._Pointer.readP System.Process.anon_28 ptr_5_2 in case (StdBool.not (<{StdInt.==_16}> fRes_5_0 fRes_5_0)) (True -> StdMisc.undef) (False -> <{_Tuple2!2}> (Data.Error.Ok (_Tuple2 (select _x_5_1::_Tuple2 0) (select _x_5_3::_Tuple2 0))) (select _x_3_0::_Tuple2 1)) ) ) 
System.Process.runProcessIO !path_0 !args_1 !mCurrentDirectory_2 !world_3 = let fullPath_1_0 = <{System.Process._c;119;20_87}> mCurrentDirectory_2 path_0, _x_1_1 = System.File.fileExists fullPath_1_0 world_3 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> _Tuple2 (Data.Error.Error (_Tuple2 1 (<{StdString.+++_11}> "File " (<{StdString.+++_11}> fullPath_1_0 " does not exist")))) (select _x_1_1::_Tuple2 1)) (False -> let world_3_0 = select _x_1_1::_Tuple2 1, _x_3_1 = System.Process.openPipe world_3_0, pipeStd_3_2 = select _x_3_1::_Tuple2 0 in case (Data.Error.isError pipeStd_3_2) (True -> _Tuple2 (Data.Error.liftError pipeStd_3_2) (select _x_3_1::_Tuple2 1)) (False -> let world_5_0 = select _x_3_1::_Tuple2 1, _x_5_1 = System.Process.openPipe world_5_0, pipeStdOut_5_2 = select _x_5_1::_Tuple2 0 in case (Data.Error.isError pipeStdOut_5_2) (True -> _Tuple2 (Data.Error.liftError pipeStdOut_5_2) (select _x_5_1::_Tuple2 1)) (False -> let world_7_0 = select _x_5_1::_Tuple2 1, _x_7_1 = System.Process.openPipe world_7_0, pipeStdErr_7_2 = select _x_7_1::_Tuple2 0 in case (Data.Error.isError pipeStdErr_7_2) (True -> _Tuple2 (Data.Error.liftError pipeStdErr_7_2) (select _x_7_1::_Tuple2 1)) (False -> let world_9_0::I = select _x_7_1::_Tuple2 1, _x_9_1 = System._Posix.fork world_9_0, pid_9_2 = select _x_9_1::_Tuple2 0 in case (<{StdInt.==_16}> pid_9_2 0) (True -> let _x_11_0 = <{System.Process._c;76;25_88}> mCurrentDirectory_2 world_11_1, world_11_1 = select _x_9_1::_Tuple2 1 in case (StdBool.not (<{StdInt.==_16}> (select _x_11_0::_Tuple2 0) 0)) (True -> System.OSError.getLastOSError (select _x_11_0::_Tuple2 1)) (False -> let _x_13_0 = Data.Error.fromOk pipeStd_3_2, pipeStd_13_1 = select _x_13_0::_Tuple2 0, world_13_2::I = select _x_11_0::_Tuple2 1, _x_13_3 = System._Posix.dup2 pipeStd_13_1 0 world_13_2 in case (<{StdInt.==_16}> (select _x_13_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_13_3::_Tuple2 1)) (False -> let pipeStd_15_0 = select _x_13_0::_Tuple2 1, world_15_1 = select _x_13_3::_Tuple2 1, _x_15_2::I = System._Posix.close pipeStd_15_0 world_15_1 in case (<{StdInt.==_16}> (select _x_15_2::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_15_2::_Tuple2 1)) (False -> let _x_17_0 = Data.Error.fromOk pipeStdOut_5_2, pipeStdOut_17_1 = select _x_17_0::_Tuple2 1, world_17_2::I = select _x_15_2::_Tuple2 1, _x_17_3 = System._Posix.dup2 pipeStdOut_17_1 1 world_17_2 in case (<{StdInt.==_16}> (select _x_17_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_17_3::_Tuple2 1)) (False -> let pipeStdOutOut_19_0 = select _x_17_0::_Tuple2 0, world_19_1 = select _x_17_3::_Tuple2 1, _x_19_2::I = System._Posix.close pipeStdOutOut_19_0 world_19_1 in case (<{StdInt.==_16}> (select _x_19_2::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_19_2::_Tuple2 1)) (False -> let _x_21_0 = Data.Error.fromOk pipeStdErr_7_2, pipeStdErr_21_1 = select _x_21_0::_Tuple2 1, world_21_2::I = select _x_19_2::_Tuple2 1, _x_21_3 = System._Posix.dup2 pipeStdErr_21_1 2 world_21_2 in case (<{StdInt.==_16}> (select _x_21_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_21_3::_Tuple2 1)) (False -> let pipeStdErrOut_23_0 = select _x_21_0::_Tuple2 0, world_23_1 = select _x_21_3::_Tuple2 1, _x_23_2::I = System._Posix.close pipeStdErrOut_23_0 world_23_1 in case (<{StdInt.==_16}> (select _x_23_2::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_23_2::_Tuple2 1)) (False -> let _x_25_0 = System.Process.runProcessMakeArgv (_predefined._Cons path_0 args_1) (select _x_23_2::_Tuple2 1) in System._Posix.exit 1 (select (System._Posix.execvp (<{StdString.+++_11}> path_0 "\0") (select _x_25_0::_Tuple2 0) (select _x_25_0::_Tuple2 1))::_Tuple2 1)) ) ) ) ) ) ) ) (False -> case (<{StdInt.<_17}> 0 pid_9_2) (True -> let _x_12_0 = Data.Error.fromOk pipeStd_3_2, pipeStd_12_1 = select _x_12_0::_Tuple2 0, world_12_2::I = select _x_9_1::_Tuple2 1, _x_12_3 = System._Posix.close pipeStd_12_1 world_12_2 in case (<{StdInt.==_16}> (select _x_12_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_12_3::_Tuple2 1)) (False -> let _x_14_0 = Data.Error.fromOk pipeStdOut_5_2, pipeStdOut_14_1 = select _x_14_0::_Tuple2 1, world_14_2::I = select _x_12_3::_Tuple2 1, _x_14_3 = System._Posix.close pipeStdOut_14_1 world_14_2 in case (<{StdInt.==_16}> (select _x_14_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_14_3::_Tuple2 1)) (False -> let _x_16_0 = Data.Error.fromOk pipeStdErr_7_2, pipeStdErr_16_1 = select _x_16_0::_Tuple2 1, world_16_2::I = select _x_14_3::_Tuple2 1, _x_16_3 = System._Posix.close pipeStdErr_16_1 world_16_2 in case (<{StdInt.==_16}> (select _x_16_3::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_16_3::_Tuple2 1)) (False -> _Tuple2 (Data.Error.Ok (_Tuple2 (System.Process._ProcessHandle pid_9_2) (System.Process._ProcessIO (System.Process.WritePipe (select _x_12_0::_Tuple2 1)) (System.Process.ReadPipe (select _x_14_0::_Tuple2 0)) (System.Process.ReadPipe (select _x_16_0::_Tuple2 0))))) (select _x_16_3::_Tuple2 1)) ) ) ) (False -> System.OSError.getLastOSError (select _x_9_1::_Tuple2 1)) ) ) ) ) ) 
<{System.Process._c;76;25_88}> !mCurrentDirectory_0 world_1 = case mCurrentDirectory_0 (Data.Maybe.Just dir_1_0 -> System._Posix.chdir (System._Pointer.packString dir_1_0) world_1) (Data.Maybe.Nothing -> _Tuple2 0 world_1) 
<{System.Process._c;119;20_87}> !mCurrentDirectory_0 !path_1 = case mCurrentDirectory_0 (Data.Maybe.Just dir_1_0 -> <{System.FilePath.</>}> dir_1_0 path_1) (Data.Maybe.Nothing -> path_1) 
System.Process.checkProcess !_x_0 !world_1 = case _x_0 (System.Process._ProcessHandle pid_1_0 -> let status_2_0::I = _SystemArray.createArray_9 1 0, _x_2_1 = System._Posix.waitpid pid_1_0 status_2_0 1 world_1, ret_2_2 = select _x_2_1::_Tuple2 0 in case (<{StdInt.==_16}> ret_2_2 0) (True -> _Tuple2 (Data.Error.Ok Data.Maybe.Nothing) (select _x_2_1::_Tuple2 1)) (False -> case (<{StdInt.==_16}> ret_2_2 pid_1_0) (True -> _Tuple2 (Data.Error.Ok (Data.Maybe.Just (StdInt.bitand (<{StdInt.>>}> (_SystemArray.select_11 status_2_0 0) 8) 255))) (select _x_2_1::_Tuple2 1)) (False -> System.OSError.getLastOSError (select _x_2_1::_Tuple2 1)) ) ) 
System.Process.waitForProcess !_x_0 !world_1 = case _x_0 (System.Process._ProcessHandle pid_1_0 -> let status_2_0 = _SystemArray.createArray_9 1 0, _x_2_1 = System._Posix.waitpid pid_1_0 status_2_0 0 world_1 in case (<{StdInt.==_16}> (select _x_2_1::_Tuple2 0) pid_1_0) (True -> <{_Tuple2!3}> (Data.Error.Ok (StdInt.bitand (<{StdInt.>>}> (_SystemArray.select_11 status_2_0 0) 8) 255)) (select _x_2_1::_Tuple2 1)) (False -> System.OSError.getLastOSError (select _x_2_1::_Tuple2 1)) ) 
System.Process.callProcess !path_0 !args_1 !mCurrentDirectory_2 !world_3 = let _x_1_0 = System.Process.runProcess path_0 args_1 mCurrentDirectory_2 world_3, world_1_1 = select _x_1_0::_Tuple2 1 in <{System.Process._c;212;7_89}> (select _x_1_0::_Tuple2 0) world_1_1
<{System.Process._c;212;7_89}> !_x_0 world_1 = case _x_0 (Data.Error.Ok handle_1_0 -> System.Process.waitForProcess handle_1_0 world_1) (Data.Error.Error e_1_0 -> _Tuple2 (Data.Error.Error e_1_0) world_1) 
System.Process.anon_29::I !ptr_0::I = System._Pointer.readInt4Z ptr_0 0
System.Process.anon_30 !n_0::I !ptr_1::I = System._Pointer.derefCharArray ptr_1 n_0
System.Process.readPipeNonBlocking !_x_0 !world_1 = case _x_0 (System.Process.ReadPipe fd_1_0 -> let !_x_2_0 = System._Posix.ioctl fd_1_0 21531 ptr_2_1 world_1, ptr_2_1::I = System._Posix.malloc 4 in case (<{StdInt.==_16}> (select _x_2_0::_Tuple2 0) -1) (True -> let !fRes_4_0::I = System._Posix.free ptr_2_1 in case (StdBool.not (<{StdInt.==_16}> fRes_4_0 fRes_4_0)) (True -> StdMisc.undef) (False -> System.OSError.getLastOSError (select _x_2_0::_Tuple2 1)) ) (False -> let !fRes_4_0::I = System._Posix.free ptr_4_2, _x_4_1::I = System._Pointer.readP System.Process.anon_29 ptr_2_1, ptr_4_2 = select _x_4_1::_Tuple2 1 in case (StdBool.not (<{StdInt.==_16}> fRes_4_0 fRes_4_0)) (True -> StdMisc.undef) (False -> let n_6_0::I = select _x_4_1::_Tuple2 0 in case (<{StdInt.==_16}> n_6_0 0) (True -> <{_Tuple2!3}> (Data.Error.Ok "") (select _x_2_0::_Tuple2 1)) (False -> let !_x_8_0 = System._Posix.read fd_1_0 buffer_8_1 n_6_0 (select _x_2_0::_Tuple2 1), buffer_8_1::I = System._Posix.malloc n_6_0 in case (<{StdInt.==_16}> (select _x_8_0::_Tuple2 0) -1) (True -> let !fRes_10_0::I = System._Posix.free ptr_4_2 in case (StdBool.not (<{StdInt.==_16}> fRes_10_0 fRes_10_0)) (True -> StdMisc.undef) (False -> System.OSError.getLastOSError (select _x_8_0::_Tuple2 1)) ) (False -> let !fRes_10_0::I = System._Posix.free (select _x_10_1::_Tuple2 1), _x_10_1 = System._Pointer.readP (System.Process.anon_30 n_6_0) buffer_8_1 in case (StdBool.not (<{StdInt.==_16}> fRes_10_0 fRes_10_0)) (True -> StdMisc.undef) (False -> <{_Tuple2!3}> (Data.Error.Ok (select _x_10_1::_Tuple2 0)) (select _x_8_0::_Tuple2 1)) ) ) ) ) ) 
System.Process.anon_31::I !i_0::I !ptr_1::I = System._Pointer.writeIntElemOffset ptr_1 i_0 0
<{System.Process.c;243;57_32}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons (System.Process.anon_31 i_0) (<{System.Process.c;243;57_32}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
System.Process.readPipeBlocking !pipe_0 !world_1 = case pipe_0 (System.Process.ReadPipe fd_1_0 -> let !_x_2_0 = System._Posix.select_ (<{StdInt.+_6}> fd_1_0 1) readfds_2_5 0 0 0 world_1, readfds_2_1::I = System._Posix.malloc 128, readfds_2_2::I = StdFunc.seq (<{System.Process.c;243;57_32}> 0 16) readfds_2_1, offset_2_3::I = <{StdInt./_10}> (StdInt.fromInt_24 fd_1_0) 64, val_2_4::I = StdInt.bitor (System._Pointer.readIntElemOffset readfds_2_2 offset_2_3) (<{StdInt.<<}> 1 (StdInt.rem_28 fd_1_0 64)), readfds_2_5::I = System._Pointer.writeIntElemOffset readfds_2_2 offset_2_3 val_2_4 in case (<{StdInt.==_16}> (select _x_2_0::_Tuple2 0) -1) (True -> let !fRes_4_0::I = System._Posix.free readfds_2_5 in case (StdBool.not (<{StdInt.==_16}> fRes_4_0 fRes_4_0)) (True -> StdMisc.undef) (False -> System.OSError.getLastOSError (select _x_2_0::_Tuple2 1)) ) (False -> let !fRes_4_0::I = System._Posix.free readfds_2_5 in case (StdBool.not (<{StdInt.==_16}> fRes_4_0 fRes_4_0)) (True -> StdMisc.undef) (False -> System.Process.readPipeNonBlocking pipe_0 (select _x_2_0::_Tuple2 1)) ) ) 
System.Process.anon_33::I !i_0::I !ptr_1::I = System._Pointer.writeIntElemOffset ptr_1 i_0 0
<{System.Process.c;262;56_34}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons (System.Process.anon_33 i_0) (<{System.Process.c;262;56_34}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
System.Process.setFdBit_40::I !fd_0::I !ptr_1::I = let offset_1_0::I = <{StdInt./_10}> (StdInt.fromInt_24 fd_0) 64 in System._Pointer.writeIntElemOffset ptr_1 offset_1_0 (StdInt.bitor (System._Pointer.readIntElemOffset ptr_1 offset_1_0) (<{StdInt.<<}> 1 (StdInt.rem_28 fd_0 64)))
<{System.Process.c;264;33_35}> !g_l_0 = <{System.Process.g_c1;264;48_91}> g_l_0
<{System.Process.g_c1;264;48_91}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{System.Process.g_c2;264;48_90}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{System.Process.g_c2;264;48_90}> !g_h_0 g_t_1 = case g_h_0 (System.Process.ReadPipe fd_1_0 -> _predefined._Cons (System.Process.setFdBit_40 fd_1_0) (<{System.Process.c;264;33_35}> g_t_1)) (_ -> <{System.Process.c;264;33_35}> g_t_1)
System.Process.anon_36 <{res`_0}> <{r`_1}> = Data.Error.Ok (_predefined._Cons <{r`_1}> <{res`_0}>)
System.Process.anon_37 pipe_0 !_x_1 = case _x_1 (_Tuple2 res_1_0 world_1_1 -> <{System.Process._c;273;30_92}> res_1_0 pipe_0 world_1_1) 
<{System.Process._c;273;30_92}> !res_0 pipe_1 world_2 = case res_0 (Data.Error.Ok res`_1_0 -> let _x_2_0 = System.Process.readPipeNonBlocking pipe_1 world_2 in _Tuple2 (Data.Error.seqErrors (select _x_2_0::_Tuple2 0) (System.Process.anon_36 <{res`_1_0}>)) (select _x_2_0::_Tuple2 1)) (_ -> _Tuple2 res_0 world_2)
<{System.Process.c;278;13_38}> !g_l_0 = <{System.Process.g_c1;278;21_93}> g_l_0
<{System.Process.g_c1;278;21_93}> !g_l_0 = case g_l_0 (_predefined._Cons pipe_1_0 g_t_1_1 -> _predefined._Cons (System.Process.anon_37 pipe_1_0) (<{System.Process.c;278;13_38}> g_t_1_1)) (_ -> _predefined._Nil)
<{System.Process.c;282;25_39}> !g_l_0 = <{System.Process.g_c1;282;40_95}> g_l_0
<{System.Process.g_c1;282;40_95}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{System.Process.g_c2;282;40_94}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{System.Process.g_c2;282;40_94}> !g_h_0 g_t_1 = case g_h_0 (System.Process.ReadPipe fd_1_0 -> _predefined._Cons fd_1_0 (<{System.Process.c;282;25_39}> g_t_1)) (_ -> <{System.Process.c;282;25_39}> g_t_1)
System.Process.readPipeBlockingMulti !pipes_0 !world_1 = let !_x_1_0 = System._Posix.select_ (<{StdInt.+_6}> (Data.List.maximum (<{StdOverloaded.<;}> <{StdInt.<_17}>) (<{System.Process.c;282;25_39}> pipes_0)) 1) readfds_1_3 0 0 0 world_1, readfds_1_1::I = System._Posix.malloc 128, readfds_1_2::I = StdFunc.seq (<{System.Process.c;262;56_34}> 0 16) readfds_1_1, readfds_1_3::I = StdFunc.seq (<{System.Process.c;264;33_35}> pipes_0) readfds_1_2 in case (<{StdInt.==_16}> (select _x_1_0::_Tuple2 0) -1) (True -> let !fRes_3_0::I = System._Posix.free readfds_1_3 in case (StdBool.not (<{StdInt.==_16}> fRes_3_0 fRes_3_0)) (True -> StdMisc.undef) (False -> System.OSError.getLastOSError (select _x_1_0::_Tuple2 1)) ) (False -> let !fRes_3_0::I = System._Posix.free readfds_1_3 in case (StdBool.not (<{StdInt.==_16}> fRes_3_0 fRes_3_0)) (True -> StdMisc.undef) (False -> StdFunc.seq (<{System.Process.c;278;13_38}> (StdList.reverse pipes_0)) (_Tuple2 (Data.Error.Ok _predefined._Nil) (select _x_1_0::_Tuple2 1))) ) 
System.Process.writePipe !str_0 !_x_1 !world_2 = case _x_1 (System.Process.WritePipe fd_1_0 -> let _x_2_0 = System._Posix.write fd_1_0 str_0 (_SystemArray.size_20 str_0) world_2 in case (<{StdInt.==_16}> (select _x_2_0::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_2_0::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_2_0::_Tuple2 1)) ) 
System.Process.terminateProcess !pHandle_0 !world_1 = case pHandle_0 (System.Process._ProcessHandle pid_1_0 -> let _x_2_0 = System._Posix.kill pid_1_0 15 world_1 in case (<{StdInt.==_16}> (select _x_2_0::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_2_0::_Tuple2 1)) (False -> let status_4_0 = _SystemArray.createArray_9 1 0, world_4_1 = select _x_2_0::_Tuple2 1, _x_4_2 = System._Posix.waitpid pid_1_0 status_4_0 0 world_4_1 in case (<{StdInt.==_16}> (select _x_4_2::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_4_2::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_4_2::_Tuple2 1)) ) ) 
System.Process.closeProcessIO !_x_0 !world_1 = case _x_0 (System.Process._ProcessIO _x_1_0 _x_1_1 _x_1_2 -> case _x_1_0 (System.Process.WritePipe fdStd_2_0 -> case _x_1_1 (System.Process.ReadPipe fdStdOut_3_0 -> case _x_1_2 (System.Process.ReadPipe fdStdErr_4_0 -> let _x_5_0 = System._Posix.close fdStd_2_0 world_1 in case (<{StdInt.==_16}> (select _x_5_0::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_5_0::_Tuple2 1)) (False -> let world_7_0 = select _x_5_0::_Tuple2 1, _x_7_1 = System._Posix.close fdStdOut_3_0 world_7_0 in case (<{StdInt.==_16}> (select _x_7_1::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_7_1::_Tuple2 1)) (False -> let world_9_0 = select _x_7_1::_Tuple2 1, _x_9_1 = System._Posix.close fdStdErr_4_0 world_9_0 in case (<{StdInt.==_16}> (select _x_9_1::_Tuple2 0) -1) (True -> System.OSError.getLastOSError (select _x_9_1::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_9_1::_Tuple2 1)) ) ) ) ) ) ) 
<{System.Process.closePipe`}> !pipe_0::I !world_1 = let _x_1_0 = System._Posix.close pipe_0 world_1 in case (StdBool.not (<{StdInt.==_16}> (select _x_1_0::_Tuple2 0) 0)) (True -> System.OSError.getLastOSError (select _x_1_0::_Tuple2 1)) (False -> <{_Tuple2!3}> (Data.Error.Ok _predefined._Unit) (select _x_1_0::_Tuple2 1)) 
System.Process.closePipe_11 !_x_0 !world_1 = case _x_0 (System.Process.WritePipe pipe_1_0 -> <{System.Process.closePipe`}> pipe_1_0 world_1) 
System.Process.closePipe_12 !_x_0 !world_1 = case _x_0 (System.Process.ReadPipe pipe_1_0 -> <{System.Process.closePipe`}> pipe_1_0 world_1) 
<{System.Process.TD;ProcessHandle}> _x_0::B = _predefined._Nil
<{System.Process.TD;ProcessIO}> _x_0::B = _predefined._Nil
<{System.Process.TD;WritePipe}> _x_0::B = _predefined._Nil
<{System.Process.TD;ReadPipe}> _x_0::B = _predefined._Nil
<{System.Process.TD;closePipe;}> _x_0::B = _predefined._Nil

:: System.Process.WritePipe = System.Process.WritePipe !a1::I
:: System.Process.ReadPipe = System.Process.ReadPipe !a1::I

|| Converted Records
:: System.Process._ProcessHandle = {!System.Process.pid::I}

:: System.Process._ProcessIO = {!System.Process.stdIn, !System.Process.stdOut, !System.Process.stdErr}

:: <{System.Process.closePipe;}> = {!System.Process.closePipe}

:: <{System.Process.gEq_s;}> = {!System.Process.gEq_s}

:: <{System.Process.gEq_ss;}> = {!System.Process.gEq_ss}

:: <{System.Process.gEq_sss;}> = {!System.Process.gEq_sss}

:: <{System.Process.gEq_ssss;}> = {!System.Process.gEq_ssss}

:: <{System.Process.gEq_sssss;}> = {!System.Process.gEq_sssss}

:: <{System.Process.gEq_ssssss;}> = {!System.Process.gEq_ssssss}

:: <{System.Process.gEq_sssssss;}> = {!System.Process.gEq_sssssss}

:: <{System.Process.gEq_ssssssss;}> = {!System.Process.gEq_ssssssss}

:: <{System.Process.gEq_sssssssss;}> = {!System.Process.gEq_sssssssss}

:: <{System.Process.bimap_s;}> = {System.Process.bimap_s}

:: <{System.Process.bimap_ss;}> = {System.Process.bimap_ss}

:: <{System.Process.bimap_sss;}> = {System.Process.bimap_sss}

