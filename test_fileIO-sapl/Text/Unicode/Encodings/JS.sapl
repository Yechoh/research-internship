|| ?module? Text.Unicode.Encodings.JS


Text.Unicode.Encodings.JS.anon_20 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.Unicode.Encodings.JS.anon_19 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.Unicode.Encodings.JS.c_14::I !cc_0::I = Text.Unicode.UChar.fromInt_25 cc_0
<{Text.Unicode.Encodings.JS.toHex`_11}> !_x_0::I = case _x_0 (0 -> _predefined._Nil) (_ -> _predefined._Cons (_SystemArray.select_19 "0123456789ABCDEF" (StdInt.bitand _x_0 15)) (<{Text.Unicode.Encodings.JS.toHex`_11}> (<{StdInt.>>}> _x_0 4)))
<{Text.Unicode.Encodings.JS.c;39;27_9}> !<{_v<_0}> !_vone_1 !<{_v+_2}> a_3 g_s_4 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_4 a_3)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;39;27_9}> <{_v<_0}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 a_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_4)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;41;23_10}> !<{_v<_0}> !_vone_1 !<{_v+_2}> a_3 g_s_4 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_4 a_3)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;41;23_10}> <{_v<_0}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 a_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_4)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;39;27_64}> !_vone_0 !<{_v+_1}> !a_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 a_2)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;39;27_64}> _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 a_2 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_3)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;41;23_65}> !_vone_0 !<{_v+_1}> !a_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 a_2)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;41;23_65}> _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 a_2 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_3)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;39;27_66}> !<{_v+_0}> !a_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 a_1)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;39;27_66}> <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 a_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;41;23_67}> !<{_v+_0}> !a_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 a_1)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;41;23_67}> <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 a_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;39;27_68}> !a_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 a_0)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;39;27_68}> (<{StdInt.+_6}> a_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
<{Text.Unicode.Encodings.JS.c;41;23_69}> !a_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 a_0)) (True -> _predefined._Cons '0' (<{Text.Unicode.Encodings.JS.c;41;23_69}> (<{StdInt.+_6}> a_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
Text.Unicode.Encodings.JS.toHex !_x_0::I = case _x_0 (0 -> _predefined._Cons '\\' (_predefined._Cons '0' _predefined._Nil)) (_ -> case (<{StdInt.<_17}> _x_0 256) (True -> <{StdList.++}> (_predefined._Cons '\\' (_predefined._Cons 'x' _predefined._Nil)) (<{StdList.++}> (<{Text.Unicode.Encodings.JS.c;39;27_68}> 1 (<{StdInt.-_7}> 2 (StdList.length_47 (StdList.reverse (<{Text.Unicode.Encodings.JS.toHex`_11}> _x_0))))) (StdList.reverse (<{Text.Unicode.Encodings.JS.toHex`_11}> _x_0)))) (False -> case (StdBool.not (<{StdInt.<_17}> 65535 _x_0)) (True -> <{StdList.++}> (_predefined._Cons '\\' (_predefined._Cons 'u' _predefined._Nil)) (<{StdList.++}> (<{Text.Unicode.Encodings.JS.c;41;23_69}> 1 (<{StdInt.-_7}> 4 (StdList.length_47 (StdList.reverse (<{Text.Unicode.Encodings.JS.toHex`_11}> _x_0))))) (StdList.reverse (<{Text.Unicode.Encodings.JS.toHex`_11}> _x_0)))) (False -> Text.Unicode.Encodings.JS.toHex 65535) ) )
Text.Unicode.Encodings.JS.convert_15 !cc_0::I = case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\n')) (True -> _predefined._Cons '\\' (_predefined._Cons 'n' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\r')) (True -> _predefined._Cons '\\' (_predefined._Cons 'r' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\t')) (True -> _predefined._Cons '\\' (_predefined._Cons 't' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\f')) (True -> _predefined._Cons '\\' (_predefined._Cons 'f' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\v')) (True -> _predefined._Cons '\\' (_predefined._Cons 'v' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\b')) (True -> _predefined._Cons '\\' (_predefined._Cons 'b' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\'')) (True -> _predefined._Cons '\\' (_predefined._Cons '\'' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '"')) (True -> _predefined._Cons '\\' (_predefined._Cons '"' _predefined._Nil)) (False -> case (<{StdInt.==_16}> cc_0 (StdChar.fromChar_22 '\\')) (True -> _predefined._Cons '\\' (_predefined._Cons '\\' _predefined._Nil)) (False -> case (case (StdBool.not (Text.Unicode.UChar.isControl (Text.Unicode.Encodings.JS.c_14 cc_0))) (True -> Text.Unicode.UChar.isAscii (Text.Unicode.Encodings.JS.c_14 cc_0)) (False -> False) ) (True -> _predefined._Cons (StdInt.fromInt_25 cc_0) _predefined._Nil) (False -> Text.Unicode.Encodings.JS.toHex cc_0) ) ) ) ) ) ) ) ) ) 
<{Text.Unicode.Encodings.JS.cu;52;22_13}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{Text.Unicode.Encodings.JS.g_c1;52;27_79}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{Text.Unicode.Encodings.JS.g_c1;52;27_79}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> <{Text.Unicode.Encodings.JS.cu;52;22_13}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{Text.Unicode.Encodings.JS.cu;52;22_12}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{Text.Unicode.Encodings.JS.g_c1;52;27_80}> g_l_3 _vArray_0 c_a_1 c_i_2
<{Text.Unicode.Encodings.JS.g_c1;52;27_80}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> <{Text.Unicode.Encodings.JS.cu;52;22_12}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 c_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
Text.Unicode.Encodings.JS.anon_72 !g_0 x_1 = Text.Unicode.Encodings.JS.convert_15 (g_0 x_1)
Text.Unicode.Encodings.JS.anon_70 !g_0 x_1 = Text.Unicode.Encodings.JS.convert_15 (g_0 x_1)
<{Text.Unicode.Encodings.JS.cu;52;22_71}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{Text.Unicode.Encodings.JS.g_c1;52;27_81}> g_l_2 <{_v+_0}> c_l_i_1
<{Text.Unicode.Encodings.JS.g_c1;52;27_81}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> <{Text.Unicode.Encodings.JS.cu;52;22_71}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{Text.Unicode.Encodings.JS.cu;52;22_73}> !c_a_0 c_i_1::I !g_l_2 = <{Text.Unicode.Encodings.JS.g_c1;52;27_82}> g_l_2 c_a_0 c_i_1
<{Text.Unicode.Encodings.JS.g_c1;52;27_82}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> <{Text.Unicode.Encodings.JS.cu;52;22_73}> (_SystemArray.update_21 c_a_1 c_i_2 c_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
Text.Unicode.Encodings.JS.anon_76 !x_0::I = Text.Unicode.Encodings.JS.convert_15 (Text.Unicode.UChar.toInt_28 x_0)
Text.Unicode.Encodings.JS.anon_74 !x_0::I = Text.Unicode.Encodings.JS.convert_15 (Text.Unicode.UChar.toInt_28 x_0)
<{Text.Unicode.Encodings.JS.cu;52;22_75}>::I !c_l_i_0::I !g_l_1 = <{Text.Unicode.Encodings.JS.g_c1;52;27_83}> g_l_1 c_l_i_0
<{Text.Unicode.Encodings.JS.g_c1;52;27_83}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> <{Text.Unicode.Encodings.JS.cu;52;22_75}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
Text.Unicode.Encodings.JS.encodeString us_0 = <{Text.Unicode.Encodings.JS.cu;52;22_73}> (_SystemArray._createArray_16 (<{Text.Unicode.Encodings.JS.cu;52;22_75}> 0 (Data.List.concatMap Text.Unicode.Encodings.JS.anon_74 us_0))) 0 (Data.List.concatMap Text.Unicode.Encodings.JS.anon_76 us_0)
Text.Unicode.Encodings.JS.toJSLiteral !ustr_0 = Text.Unicode.Encodings.JS.encodeString ustr_0
Text.Unicode.Encodings.JS.dti_18::I !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> StdInt.toInt_20 (<{StdChar.-_15}> c_0 '0')) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'f' c_0)) (False -> False) ) (True -> <{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'a'))) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'F' c_0)) (False -> False) ) (True -> <{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'A'))) ) ) 
Text.Unicode.Encodings.JS.scanBSChar_17 !_vfromChar_0 !_vfrom_1 !_x_2 = case _x_2 (_predefined._Cons _x_1_0 chars_1_1 -> case _x_1_0 ('\\' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\\') chars_1_1) ('0' -> _Tuple2 (select _vfrom_1::<{StdOverloaded.fromInt;}> 0 0) chars_1_1) ('n' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\n') chars_1_1) ('r' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\r') chars_1_1) ('f' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\f') chars_1_1) ('t' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\t') chars_1_1) ('v' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\v') chars_1_1) ('b' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\b') chars_1_1) ('"' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '"') chars_1_1) ('\'' -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 '\'') chars_1_1) ('x' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 chars_4_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> StdChar.isHexDigit h2_4_0) (False -> False) ) (True -> _Tuple2 (select _vfrom_1::<{StdOverloaded.fromInt;}> 0 (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 4) (Text.Unicode.Encodings.JS.dti_18 h2_4_0))) chars_4_1) ) ) ) ('u' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons h3_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons h4_6_0 chars_6_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> case (StdChar.isHexDigit h2_4_0) (True -> case (StdChar.isHexDigit h3_5_0) (True -> StdChar.isHexDigit h4_6_0) (False -> False) ) (False -> False) ) (False -> False) ) (True -> _Tuple2 (select _vfrom_1::<{StdOverloaded.fromInt;}> 0 (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 12) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h2_4_0) 8)) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h3_5_0) 4)) (Text.Unicode.Encodings.JS.dti_18 h4_6_0))) chars_6_1) ) ) ) ) ) (_ -> _Tuple2 (select _vfromChar_0::<{StdOverloaded.fromChar;}> 0 _x_1_0) chars_1_1)) 
Text.Unicode.Encodings.JS.scanBSChar_77 !_vfrom_0 !_x_1 = case _x_1 (_predefined._Cons _x_1_0 chars_1_1 -> case _x_1_0 ('\\' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\\') chars_1_1) ('0' -> _Tuple2 (select _vfrom_0::<{StdOverloaded.fromInt;}> 0 0) chars_1_1) ('n' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\n') chars_1_1) ('r' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\r') chars_1_1) ('f' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\f') chars_1_1) ('t' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\t') chars_1_1) ('v' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\v') chars_1_1) ('b' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\b') chars_1_1) ('"' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '"') chars_1_1) ('\'' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\'') chars_1_1) ('x' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 chars_4_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> StdChar.isHexDigit h2_4_0) (False -> False) ) (True -> _Tuple2 (select _vfrom_0::<{StdOverloaded.fromInt;}> 0 (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 4) (Text.Unicode.Encodings.JS.dti_18 h2_4_0))) chars_4_1) ) ) ) ('u' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons h3_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons h4_6_0 chars_6_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> case (StdChar.isHexDigit h2_4_0) (True -> case (StdChar.isHexDigit h3_5_0) (True -> StdChar.isHexDigit h4_6_0) (False -> False) ) (False -> False) ) (False -> False) ) (True -> _Tuple2 (select _vfrom_0::<{StdOverloaded.fromInt;}> 0 (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 12) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h2_4_0) 8)) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h3_5_0) 4)) (Text.Unicode.Encodings.JS.dti_18 h4_6_0))) chars_6_1) ) ) ) ) ) (_ -> _Tuple2 (Text.Unicode.UChar.fromChar_26 _x_1_0) chars_1_1)) 
Text.Unicode.Encodings.JS.scanBSChar_78 !_x_0 = case _x_0 (_predefined._Cons _x_1_0 chars_1_1 -> case _x_1_0 ('\\' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\\') chars_1_1) ('0' -> _Tuple2 (Text.Unicode.UChar.fromInt_25 0) chars_1_1) ('n' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\n') chars_1_1) ('r' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\r') chars_1_1) ('f' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\f') chars_1_1) ('t' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\t') chars_1_1) ('v' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\v') chars_1_1) ('b' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\b') chars_1_1) ('"' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '"') chars_1_1) ('\'' -> _Tuple2 (Text.Unicode.UChar.fromChar_26 '\'') chars_1_1) ('x' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 chars_4_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> StdChar.isHexDigit h2_4_0) (False -> False) ) (True -> _Tuple2 (Text.Unicode.UChar.fromInt_25 (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 4) (Text.Unicode.Encodings.JS.dti_18 h2_4_0))) chars_4_1) ) ) ) ('u' -> case chars_1_1 (_predefined._Cons h1_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons h2_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons h3_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons h4_6_0 chars_6_1 -> case (case (StdChar.isHexDigit h1_3_0) (True -> case (StdChar.isHexDigit h2_4_0) (True -> case (StdChar.isHexDigit h3_5_0) (True -> StdChar.isHexDigit h4_6_0) (False -> False) ) (False -> False) ) (False -> False) ) (True -> _Tuple2 (Text.Unicode.UChar.fromInt_25 (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h1_3_0) 12) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h2_4_0) 8)) (<{StdInt.<<}> (Text.Unicode.Encodings.JS.dti_18 h3_5_0) 4)) (Text.Unicode.Encodings.JS.dti_18 h4_6_0))) chars_6_1) ) ) ) ) ) (_ -> _Tuple2 (Text.Unicode.UChar.fromChar_26 _x_1_0) chars_1_1)) 
Text.Unicode.Encodings.JS.decode_16 !_x_0 = case _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 chars_1_1 -> case _x_1_0 ('\\' -> let _x_3_0 = Text.Unicode.Encodings.JS.scanBSChar_78 chars_1_1 in _predefined._Cons (select _x_3_0::_Tuple2 0) (Text.Unicode.Encodings.JS.decode_16 (select _x_3_0::_Tuple2 1))) (_ -> _predefined._Cons (Text.Unicode.UChar.fromChar_26 _x_1_0) (Text.Unicode.Encodings.JS.decode_16 chars_1_1))) 
Text.Unicode.Encodings.JS.decodeString !str_0 = Text.Unicode.Encodings.JS.decode_16 (StdList.fromString_78 str_0)
Text.Unicode.Encodings.JS.fromUnicode_1 ustr_0 = Text.Unicode.Encodings.JS.JSLit (Text.Unicode.Encodings.JS.encodeString ustr_0)
Text.Unicode.Encodings.JS.toUnicode_2 !_x_0 = case _x_0 (Text.Unicode.Encodings.JS.JSLit str_1_0 -> Text.Unicode.Encodings.JS.decodeString str_1_0) 
Text.Unicode.Encodings.JS.fromString_3 !str_0 = Text.Unicode.Encodings.JS.JSLit str_0
Text.Unicode.Encodings.JS.toString_4 !_x_0 = case _x_0 (Text.Unicode.Encodings.JS.JSLit str_1_0 -> str_1_0) 
<{Text.Unicode.Encodings.JS.TD;JSLit}> _x_0::B = _predefined._Nil

:: Text.Unicode.Encodings.JS.JSLit = Text.Unicode.Encodings.JS.JSLit !a1

|| Converted Records
:: <{Text.Unicode.Encodings.JS.gEq_s;}> = {!Text.Unicode.Encodings.JS.gEq_s}

:: <{Text.Unicode.Encodings.JS.gEq_ss;}> = {!Text.Unicode.Encodings.JS.gEq_ss}

:: <{Text.Unicode.Encodings.JS.gEq_sss;}> = {!Text.Unicode.Encodings.JS.gEq_sss}

:: <{Text.Unicode.Encodings.JS.gEq_ssss;}> = {!Text.Unicode.Encodings.JS.gEq_ssss}

:: <{Text.Unicode.Encodings.JS.gEq_sssss;}> = {!Text.Unicode.Encodings.JS.gEq_sssss}

:: <{Text.Unicode.Encodings.JS.gEq_ssssss;}> = {!Text.Unicode.Encodings.JS.gEq_ssssss}

:: <{Text.Unicode.Encodings.JS.gEq_sssssss;}> = {!Text.Unicode.Encodings.JS.gEq_sssssss}

:: <{Text.Unicode.Encodings.JS.gEq_ssssssss;}> = {!Text.Unicode.Encodings.JS.gEq_ssssssss}

:: <{Text.Unicode.Encodings.JS.gEq_sssssssss;}> = {!Text.Unicode.Encodings.JS.gEq_sssssssss}

:: <{Text.Unicode.Encodings.JS.bimap_s;}> = {Text.Unicode.Encodings.JS.bimap_s}

:: <{Text.Unicode.Encodings.JS.bimap_ss;}> = {Text.Unicode.Encodings.JS.bimap_ss}

:: <{Text.Unicode.Encodings.JS.bimap_sss;}> = {Text.Unicode.Encodings.JS.bimap_sss}

