|| ?module? Data.Monoid


Data.Monoid.foldr_54 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.Monoid.foldr_54 op_0 r_1 x_1_1)) 
Data.Monoid.mconcat !_vMonoid_0 !xs_1 = Data.Monoid.foldr_54 (select (select _vMonoid_0::<{Data.Monoid.Monoid;}> 1)::<{Data.Monoid.Semigroup;}> 0) (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0) xs_1
<{Data.Monoid.<++>}> !_vSemigroup_0 ma_1 mb_2 = select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 ma_1 mb_2
Data.Monoid.getDual !_x_0 = case _x_0 (Data.Monoid.Dual x_1_0 -> x_1_0) 
Data.Monoid.appEndo !_x_0 = case _x_0 (Data.Monoid.Endo f_1_0 -> f_1_0) 
Data.Monoid.getAll::B !_x_0 = case _x_0 (Data.Monoid.All b_1_0 -> b_1_0) 
Data.Monoid.getAny::B !_x_0 = case _x_0 (Data.Monoid.Any b_1_0 -> b_1_0) 
Data.Monoid.getSum !_x_0 = case _x_0 (Data.Monoid.Sum x_1_0 -> x_1_0) 
Data.Monoid.getProduct !_x_0 = case _x_0 (Data.Monoid.Product x_1_0 -> x_1_0) 
Data.Monoid.getFirst !_x_0 = case _x_0 (Data.Monoid.First x_1_0 -> x_1_0) 
Data.Monoid.getLast !_x_0 = case _x_0 (Data.Monoid.Last x_1_0 -> x_1_0) 
Data.Monoid.mappend_10 !xs_0 ys_1 = <{StdList.++}> xs_0 ys_1
Data.Monoid.anon_52 !_vSemigroup_0 f_1 g_2 x_3 = select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 (f_1 x_3) (g_2 x_3)
Data.Monoid.mappend_11 !_vSemigroup_0 f_1 g_2 = Data.Monoid.anon_52 _vSemigroup_0 f_1 g_2
Data.Monoid.mappend_12 _x_0 _x_1 = _predefined._Unit
Data.Monoid.mappend_13 !_vSemigroup_0 !_vSemigroup_1 !_x_2 !_x_3 = case _x_2 (_Tuple2 a1_1_0 b1_1_1 -> case _x_3 (_Tuple2 a2_2_0 b2_2_1 -> _Tuple2 (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 a1_1_0 a2_2_0) (select _vSemigroup_1::<{Data.Monoid.Semigroup;}> 0 b1_1_1 b2_2_1)) ) 
Data.Monoid.mappend_14 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_x_3 !_x_4 = case _x_3 (_Tuple3 a1_1_0 b1_1_1 c1_1_2 -> case _x_4 (_Tuple3 a2_2_0 b2_2_1 c2_2_2 -> _Tuple3 (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 a1_1_0 a2_2_0) (select _vSemigroup_1::<{Data.Monoid.Semigroup;}> 0 b1_1_1 b2_2_1) (select _vSemigroup_2::<{Data.Monoid.Semigroup;}> 0 c1_1_2 c2_2_2)) ) 
Data.Monoid.mappend_15 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_vSemigroup_3 !_x_4 !_x_5 = case _x_4 (_Tuple4 a1_1_0 b1_1_1 c1_1_2 d1_1_3 -> case _x_5 (_Tuple4 a2_2_0 b2_2_1 c2_2_2 d2_2_3 -> _Tuple4 (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 a1_1_0 a2_2_0) (select _vSemigroup_1::<{Data.Monoid.Semigroup;}> 0 b1_1_1 b2_2_1) (select _vSemigroup_2::<{Data.Monoid.Semigroup;}> 0 c1_1_2 c2_2_2) (select _vSemigroup_3::<{Data.Monoid.Semigroup;}> 0 d1_1_3 d2_2_3)) ) 
Data.Monoid.mappend_16 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_vSemigroup_3 !_vSemigroup_4 !_x_5 !_x_6 = case _x_5 (_Tuple5 a1_1_0 b1_1_1 c1_1_2 d1_1_3 e1_1_4 -> case _x_6 (_Tuple5 a2_2_0 b2_2_1 c2_2_2 d2_2_3 e2_2_4 -> _Tuple5 (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 a1_1_0 a2_2_0) (select _vSemigroup_1::<{Data.Monoid.Semigroup;}> 0 b1_1_1 b2_2_1) (select _vSemigroup_2::<{Data.Monoid.Semigroup;}> 0 c1_1_2 c2_2_2) (select _vSemigroup_3::<{Data.Monoid.Semigroup;}> 0 d1_1_3 d2_2_3) (select _vSemigroup_4::<{Data.Monoid.Semigroup;}> 0 e1_1_4 e2_2_4)) ) 
Data.Monoid.mappend_17 !_vSemigroup_0 !_x_1 !m_2 = case _x_1 (Data.Maybe.Nothing -> m_2) (_ -> case m_2 (Data.Maybe.Nothing -> _x_1) (Data.Maybe.Just m2_1_0 -> case _x_1 (Data.Maybe.Just m1_2_0 -> Data.Maybe.Just (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 m1_2_0 m2_1_0)) ) )
Data.Monoid.mempty_18 = _predefined._Nil
Data.Monoid.anon_53 !_vMonoid_0 _x_1 = select _vMonoid_0::<{Data.Monoid.Monoid;}> 0
Data.Monoid.mempty_19 !_vMonoid_0 = Data.Monoid.anon_53 _vMonoid_0
Data.Monoid.mempty_20 = _predefined._Unit
Data.Monoid.mempty_21 !_vMonoid_0 !_vMonoid_1 = _Tuple2 (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_1::<{Data.Monoid.Monoid;}> 0)
Data.Monoid.mempty_22 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 = _Tuple3 (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_1::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_2::<{Data.Monoid.Monoid;}> 0)
Data.Monoid.mempty_23 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 !_vMonoid_3 = _Tuple4 (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_1::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_2::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_3::<{Data.Monoid.Monoid;}> 0)
Data.Monoid.mempty_24 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 !_vMonoid_3 !_vMonoid_4 = _Tuple5 (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_1::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_2::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_3::<{Data.Monoid.Monoid;}> 0) (select _vMonoid_4::<{Data.Monoid.Monoid;}> 0)
Data.Monoid.mempty_25 = Data.Maybe.Nothing
Data.Monoid.mappend_26 !_vSemigroup_0 !_x_1 !_x_2 = case _x_1 (Data.Monoid.Dual x_1_0 -> case _x_2 (Data.Monoid.Dual y_2_0 -> Data.Monoid.Dual (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 y_2_0 x_1_0)) ) 
Data.Monoid.anon_55 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Data.Monoid.mappend_27 !_x_0 !_x_1 = case _x_0 (Data.Monoid.Endo f_1_0 -> case _x_1 (Data.Monoid.Endo g_2_0 -> Data.Monoid.Endo (Data.Monoid.anon_55 f_1_0 g_2_0)) ) 
Data.Monoid.mappend_28 !_x_0 !_x_1 = case _x_0 (Data.Monoid.All x_1_0 -> case _x_1 (Data.Monoid.All y_2_0 -> Data.Monoid.All (Data.Monoid._f99_99 x_1_0 y_2_0)) ) 
Data.Monoid._f99_99::B !x_0::B y_1::B = case x_0 (True -> y_1) (_ -> False)
Data.Monoid.mappend_29 !_x_0 !_x_1 = case _x_0 (Data.Monoid.Any x_1_0 -> case _x_1 (Data.Monoid.Any y_2_0 -> Data.Monoid.Any (Data.Monoid._f100_100 x_1_0 y_2_0)) ) 
Data.Monoid._f100_100::B !x_0::B y_1::B = case x_0 (True -> True) (_ -> y_1)
Data.Monoid.mappend_30 !<{_v+_0}> !_vzero_1 !_x_2 !_x_3 = case _x_2 (Data.Monoid.Sum x_1_0 -> case _x_3 (Data.Monoid.Sum y_2_0 -> Data.Monoid.Sum (select <{_v+_0}>::<{StdOverloaded.+;}> 0 x_1_0 y_2_0)) ) 
Data.Monoid.mappend_31 !<{_v*_0}> !_vone_1 !_x_2 !_x_3 = case _x_2 (Data.Monoid.Product x_1_0 -> case _x_3 (Data.Monoid.Product y_2_0 -> Data.Monoid.Product (select <{_v*_0}>::<{StdOverloaded.*;}> 0 x_1_0 y_2_0)) ) 
Data.Monoid.mappend_32 !r_0 _x_1 = case r_0 (Data.Monoid.First _x_1_0 -> case _x_1_0 (Data.Maybe.Just _x_2_0 -> r_0) (Data.Maybe.Nothing -> _x_1) ) 
Data.Monoid.mappend_33 _x_0 !r_1 = case r_1 (Data.Monoid.Last _x_1_0 -> case _x_1_0 (Data.Maybe.Just _x_2_0 -> r_1) (Data.Maybe.Nothing -> _x_0) ) 
Data.Monoid.mempty_34 !_vMonoid_0 = Data.Monoid.Dual (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0)
Data.Monoid.mempty_35 = Data.Monoid.Endo StdFunc.id
Data.Monoid.mempty_36 = Data.Monoid.All True
Data.Monoid.mempty_37 = Data.Monoid.Any False
Data.Monoid.mempty_38 !<{_v+_0}> !_vzero_1 = Data.Monoid.Sum (select _vzero_1::<{StdOverloaded.zero;}> 0)
Data.Monoid.mempty_39 !<{_v*_0}> !_vone_1 = Data.Monoid.Product (select _vone_1::<{StdOverloaded.one;}> 0)
Data.Monoid.mempty_40 = Data.Monoid.First Data.Maybe.Nothing
Data.Monoid.mempty_41 = Data.Monoid.Last Data.Maybe.Nothing
<{Data.Monoid.TD;Dual}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Endo}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;All}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Any}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Sum}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Product}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;First}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Last}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Semigroup;}> _x_0::B = _predefined._Nil
<{Data.Monoid.TD;Monoid;}> _x_0::B = _predefined._Nil

:: Data.Monoid.Dual = Data.Monoid.Dual a1
:: Data.Monoid.Endo = Data.Monoid.Endo a1
:: Data.Monoid.All = Data.Monoid.All a1::B
:: Data.Monoid.Any = Data.Monoid.Any a1::B
:: Data.Monoid.Sum = Data.Monoid.Sum a1
:: Data.Monoid.Product = Data.Monoid.Product a1
:: Data.Monoid.First = Data.Monoid.First a1
:: Data.Monoid.Last = Data.Monoid.Last a1

|| Converted Records
:: <{Data.Monoid.Semigroup;}> = {!Data.Monoid.mappend}

:: <{Data.Monoid.Monoid;}> = {!Data.Monoid.mempty, !Data.Monoid.Semigroup}

:: <{Data.Monoid.gEq_s;}> = {!Data.Monoid.gEq_s}

:: <{Data.Monoid.gEq_ss;}> = {!Data.Monoid.gEq_ss}

:: <{Data.Monoid.gEq_sss;}> = {!Data.Monoid.gEq_sss}

:: <{Data.Monoid.gEq_ssss;}> = {!Data.Monoid.gEq_ssss}

:: <{Data.Monoid.gEq_sssss;}> = {!Data.Monoid.gEq_sssss}

:: <{Data.Monoid.gEq_ssssss;}> = {!Data.Monoid.gEq_ssssss}

:: <{Data.Monoid.gEq_sssssss;}> = {!Data.Monoid.gEq_sssssss}

:: <{Data.Monoid.gEq_ssssssss;}> = {!Data.Monoid.gEq_ssssssss}

:: <{Data.Monoid.gEq_sssssssss;}> = {!Data.Monoid.gEq_sssssssss}

:: <{Data.Monoid.bimap_s;}> = {Data.Monoid.bimap_s}

:: <{Data.Monoid.bimap_ss;}> = {Data.Monoid.bimap_ss}

:: <{Data.Monoid.bimap_sss;}> = {Data.Monoid.bimap_sss}

