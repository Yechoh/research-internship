|| ?module? Sapl.Target.JS.Lifting


Sapl.Target.JS.Lifting.inline::B !_x_0 = case _x_0 (Sapl.SaplStruct.SLet _x_1_0 _x_1_1 -> False) (Sapl.SaplStruct.SUpdate _x_1_0 _x_1_1 _x_1_2 -> False) (Sapl.SaplStruct.SCase cond_1_0 _x_1_1 -> case _x_1_1 (_predefined._Cons _x_2_0 _x_2_1 -> case _x_2_0 (_Tuple2 _x_3_0 case1_3_1 -> case _x_3_0 (Sapl.SaplStruct.PLit _x_4_0 -> case _x_4_0 (Sapl.SaplTokenizer.LBool _x_5_0 -> case _x_5_0 (True -> case _x_2_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 (_Tuple2 _x_8_0 case2_8_1 -> case _x_8_0 (Sapl.SaplStruct.PLit _x_9_0 -> case _x_9_0 (Sapl.SaplTokenizer.LBool _x_10_0 -> case _x_10_0 (False -> case _x_7_1 (_predefined._Nil -> case (Sapl.Target.JS.Lifting.inline cond_1_0) (True -> case (Sapl.Target.JS.Lifting.inline case1_3_1) (True -> Sapl.Target.JS.Lifting.inline case2_8_1) (False -> False) ) (False -> False) ) ) ) ) ) ) ) (False -> case _x_2_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 (_Tuple2 _x_8_0 case2_8_1 -> case _x_8_0 (Sapl.SaplStruct.PLit _x_9_0 -> case _x_9_0 (Sapl.SaplTokenizer.LBool _x_10_0 -> case _x_10_0 (True -> case _x_7_1 (_predefined._Nil -> case (Sapl.Target.JS.Lifting.inline cond_1_0) (True -> case (Sapl.Target.JS.Lifting.inline case1_3_1) (True -> Sapl.Target.JS.Lifting.inline case2_8_1) (False -> False) ) (False -> False) ) ) ) ) ) ) ) ) ) ) ) (_ -> False)) (_ -> True)
Sapl.Target.JS.Lifting.snd_18 !tuple_0 = select tuple_0::_Tuple2 1
Sapl.Target.JS.Lifting.genVar_7 !st_0 = case st_0 (Sapl.Target.JS.Lifting._LiftingState varidx_1_0 genfuns_1_1 -> _Tuple2 (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar (<{StdString.+++_11}> "$g" (StdString.toString_5 varidx_1_0)) 0) (Sapl.SaplStruct.Type "B")) (update st_0::Sapl.Target.JS.Lifting._LiftingState [0:<{StdInt.+_6}> varidx_1_0 1])) 
Sapl.Target.JS.Lifting.genVar_8 !st_0 = case st_0 (Sapl.Target.JS.Lifting._LiftingState varidx_1_0 genfuns_1_1 -> _Tuple2 (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar (<{StdString.+++_11}> "$g" (StdString.toString_5 varidx_1_0)) 0) Sapl.SaplStruct.NoType) (update st_0::Sapl.Target.JS.Lifting._LiftingState [0:<{StdInt.+_6}> varidx_1_0 1])) 
Sapl.Target.JS.Lifting.fst_17 !tuple_0 = select tuple_0::_Tuple2 0
<{Sapl.Target.JS.Lifting.c;31;101_5}> !<{_v<_0}> !_vtoString_1 !_vone_2 !<{_v+_3}> i_4 g_s_5 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_5 i_4)) (True -> _predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (select _vtoString_1::<{StdOverloaded.toString;}> 0 i_4)) 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_5}> <{_v<_0}> _vtoString_1 _vone_2 <{_v+_3}> (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_4 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_5)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.Lifting.c;30;93_4}> !<{_v<_0}> !_vtoString_1 !_vone_2 !<{_v+_3}> i_4 g_s_5 g_l_6 = <{Sapl.Target.JS.Lifting.g_c1;30;70_159}> (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_5 i_4)) g_l_6 _vtoString_1 i_4 <{_v<_0}> _vone_2 <{_v+_3}> g_s_5
<{Sapl.Target.JS.Lifting.g_c1;30;70_159}> !_x_0::B g_l_1 _vtoString_2 i_3 <{_v<_4}> _vone_5 <{_v+_6}> g_s_7 = case _x_0 (True -> <{Sapl.Target.JS.Lifting.g_c1;30;99_158}> g_l_1 _vtoString_2 i_3 <{_v<_4}> _vone_5 <{_v+_6}> g_s_7) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.g_c1;30;99_158}> !g_l_0 _vtoString_1 i_2 <{_v<_3}> _vone_4 <{_v+_5}> g_s_6 = case g_l_0 (_predefined._Cons idx_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 idx_1_0 (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (select _vtoString_1::<{StdOverloaded.toString;}> 0 i_2)) 0))) (<{Sapl.Target.JS.Lifting.c;30;93_4}> <{_v<_3}> _vtoString_1 _vone_4 <{_v+_5}> (select <{_v+_5}>::<{StdOverloaded.+;}> 0 i_2 (select _vone_4::<{StdOverloaded.one;}> 0)) g_s_6 g_t_1_1)) (_ -> _predefined._Nil)
Sapl.Target.JS.Lifting.mask_6::I !_x_0 !bits_1::I = case _x_0 (_predefined._Nil -> bits_1) (_predefined._Cons _x_1_0 us_1_1 -> case _x_1_0 (_Tuple2 idx_2_0 _x_2_1 -> Sapl.Target.JS.Lifting.mask_6 us_1_1 (StdInt.bitor (<{StdInt.<<}> 1 idx_2_0) bits_1)) ) 
<{Sapl.Target.JS.Lifting.c;31;101_147}> !_vtoString_0 !_vone_1 !<{_v+_2}> !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> _predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (select _vtoString_0::<{StdOverloaded.toString;}> 0 i_3)) 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_147}> _vtoString_0 _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_4)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.Lifting.c;30;93_146}> !_vtoString_0 !_vone_1 !<{_v+_2}> !i_3::I !g_s_4::I g_l_5 = <{Sapl.Target.JS.Lifting.g_c1;30;70_161}> (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) g_l_5 _vtoString_0 i_3 _vone_1 <{_v+_2}> g_s_4
<{Sapl.Target.JS.Lifting.g_c1;30;70_161}> !_x_0::B g_l_1 _vtoString_2 i_3::I _vone_4 <{_v+_5}> g_s_6::I = case _x_0 (True -> <{Sapl.Target.JS.Lifting.g_c1;30;99_160}> g_l_1 _vtoString_2 i_3 _vone_4 <{_v+_5}> g_s_6) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.g_c1;30;99_160}> !g_l_0 _vtoString_1 i_2::I _vone_3 <{_v+_4}> g_s_5::I = case g_l_0 (_predefined._Cons idx_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 idx_1_0 (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (select _vtoString_1::<{StdOverloaded.toString;}> 0 i_2)) 0))) (<{Sapl.Target.JS.Lifting.c;30;93_146}> _vtoString_1 _vone_3 <{_v+_4}> (select <{_v+_4}>::<{StdOverloaded.+;}> 0 i_2 (select _vone_3::<{StdOverloaded.one;}> 0)) g_s_5 g_t_1_1)) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.c;31;101_149}> !_vone_0 !<{_v+_1}> !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> _predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_2)) 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_149}> _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_2 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_3)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.Lifting.c;30;93_148}> !_vone_0 !<{_v+_1}> !i_2::I !g_s_3::I g_l_4 = <{Sapl.Target.JS.Lifting.g_c1;30;70_163}> (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) g_l_4 i_2 _vone_0 <{_v+_1}> g_s_3
<{Sapl.Target.JS.Lifting.g_c1;30;70_163}> !_x_0::B g_l_1 i_2::I _vone_3 <{_v+_4}> g_s_5::I = case _x_0 (True -> <{Sapl.Target.JS.Lifting.g_c1;30;99_162}> g_l_1 i_2 _vone_3 <{_v+_4}> g_s_5) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.g_c1;30;99_162}> !g_l_0 i_1::I _vone_2 <{_v+_3}> g_s_4::I = case g_l_0 (_predefined._Cons idx_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 idx_1_0 (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_1)) 0))) (<{Sapl.Target.JS.Lifting.c;30;93_148}> _vone_2 <{_v+_3}> (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_1 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_4 g_t_1_1)) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.c;31;101_151}> !<{_v+_0}> !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_1)) 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_151}> <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.Lifting.c;30;93_150}> !<{_v+_0}> !i_1::I !g_s_2::I g_l_3 = <{Sapl.Target.JS.Lifting.g_c1;30;70_165}> (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) g_l_3 i_1 <{_v+_0}> g_s_2
<{Sapl.Target.JS.Lifting.g_c1;30;70_165}> !_x_0::B g_l_1 i_2::I <{_v+_3}> g_s_4::I = case _x_0 (True -> <{Sapl.Target.JS.Lifting.g_c1;30;99_164}> g_l_1 i_2 <{_v+_3}> g_s_4) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.g_c1;30;99_164}> !g_l_0 i_1::I <{_v+_2}> g_s_3::I = case g_l_0 (_predefined._Cons idx_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 idx_1_0 (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_1)) 0))) (<{Sapl.Target.JS.Lifting.c;30;93_150}> <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_1 StdInt.one_11) g_s_3 g_t_1_1)) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.c;31;101_153}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_0)) 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_153}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.Lifting.c;30;93_152}> !i_0::I !g_s_1::I g_l_2 = <{Sapl.Target.JS.Lifting.g_c1;30;70_167}> (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) g_l_2 i_0 g_s_1
<{Sapl.Target.JS.Lifting.g_c1;30;70_167}> !_x_0::B g_l_1 i_2::I g_s_3::I = case _x_0 (True -> <{Sapl.Target.JS.Lifting.g_c1;30;99_166}> g_l_1 i_2 g_s_3) (_ -> _predefined._Nil)
<{Sapl.Target.JS.Lifting.g_c1;30;99_166}> !g_l_0 i_1::I g_s_2::I = case g_l_0 (_predefined._Cons idx_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 idx_1_0 (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "a" (StdString.toString_5 i_1)) 0))) (<{Sapl.Target.JS.Lifting.c;30;93_152}> (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2 g_t_1_1)) (_ -> _predefined._Nil)
Sapl.Target.JS.Lifting.genUpdateFun !_x_0 = case _x_0 (Sapl.SaplStruct.SUpdate _x_1_0 ty_1_1 updates_1_2 -> Sapl.SaplStruct.FTFunc (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar (<{Sapl.Target.JS.Lifting._c;33;15_168}> ty_1_1 updates_1_2) 0) Sapl.SaplStruct.NoType) (Sapl.SaplStruct.SUpdate (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar "e" 0)) ty_1_1 (<{Sapl.Target.JS.Lifting.c;30;93_152}> 1 (StdList.length_47 updates_1_2) (StdList.map Sapl.Target.JS.Lifting.fst_17 updates_1_2))) (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar "e" 0) Sapl.SaplStruct.NoType) (<{Sapl.Target.JS.Lifting.c;31;101_153}> 1 (StdList.length_47 updates_1_2)))) 
<{Sapl.Target.JS.Lifting._c;33;15_168}> !ty_0 !updates_1 = case ty_0 (Sapl.SaplStruct.NoType -> <{StdString.+++_11}> "update$" (StdString.toString_5 (Sapl.Target.JS.Lifting.mask_6 updates_1 0))) (Sapl.SaplStruct.Type tn_1_0 -> <{StdString.+++_11}> "update$" (<{StdString.+++_11}> tn_1_0 (<{StdString.+++_11}> "_" (StdString.toString_5 (Sapl.Target.JS.Lifting.mask_6 updates_1 0))))) 
Sapl.Target.JS.Lifting.extractName_9 !_x_0 = case _x_0 (Sapl.SaplStruct.FTFunc _x_1_0 _x_1_1 _x_1_2 -> case _x_1_0 (Sapl.SaplStruct.TypedVar name_2_0 _x_2_1 -> name_2_0) ) 
<{Sapl.Target.JS.Lifting.c;107;76_10}> !_vunpackVar_0 !_vlength_1 !_vone_2 !<{_v+_3}> sf_4 name_5 args_6 i_7 = _predefined._Cons (sf_4 (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_5) (select _vlength_1::<{StdOverloaded.length;}> 0 args_6) i_7) (<{Sapl.Target.JS.Lifting.c;107;76_10}> _vunpackVar_0 _vlength_1 _vone_2 <{_v+_3}> sf_4 name_5 args_6 (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_7 (select _vone_2::<{StdOverloaded.one;}> 0)))
<{Sapl.Target.JS.Lifting.c;107;76_154}> !_vlength_0 !_vone_1 !<{_v+_2}> sf_3 name_4 args_5 i_6 = _predefined._Cons (sf_3 (Sapl.SaplStruct.unpackVar_20 name_4) (select _vlength_0::<{StdOverloaded.length;}> 0 args_5) i_6) (<{Sapl.Target.JS.Lifting.c;107;76_154}> _vlength_0 _vone_1 <{_v+_2}> sf_3 name_4 args_5 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_6 (select _vone_1::<{StdOverloaded.one;}> 0)))
<{Sapl.Target.JS.Lifting.c;107;76_155}> !_vone_0 !<{_v+_1}> sf_2 name_3 args_4 i_5 = _predefined._Cons (sf_2 (Sapl.SaplStruct.unpackVar_20 name_3) (StdList.length_47 args_4) i_5) (<{Sapl.Target.JS.Lifting.c;107;76_155}> _vone_0 <{_v+_1}> sf_2 name_3 args_4 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_5 (select _vone_0::<{StdOverloaded.one;}> 0)))
<{Sapl.Target.JS.Lifting.c;107;76_156}> !<{_v+_0}> sf_1 name_2 args_3 i_4::I = _predefined._Cons (sf_1 (Sapl.SaplStruct.unpackVar_20 name_2) (StdList.length_47 args_3) i_4) (<{Sapl.Target.JS.Lifting.c;107;76_156}> <{_v+_0}> sf_1 name_2 args_3 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_4 StdInt.one_11))
<{Sapl.Target.JS.Lifting.c;107;76_157}> sf_0 name_1 args_2 i_3::I = _predefined._Cons (sf_0 (Sapl.SaplStruct.unpackVar_20 name_1) (StdList.length_47 args_2) i_3) (<{Sapl.Target.JS.Lifting.c;107;76_157}> sf_0 name_1 args_2 (<{StdInt.+_6}> i_3 StdInt.one_11))
Sapl.Target.JS.Lifting.walkPatterns_13 sf_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> _Tuple2 _predefined._Nil st_2) (_predefined._Cons _x_1_0 ps_1_1 -> case _x_1_0 (_Tuple2 p_2_0 t_2_1 -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 t_2_1 False True st_2, defs_3_1 = select _x_3_0::_Tuple3 2, _x_3_2 = Sapl.Target.JS.Lifting.walkPatterns_13 sf_0 ps_1_1 (select _x_3_0::_Tuple3 1), t_3_3 = select _x_3_0::_Tuple3 0 in _Tuple2 (_predefined._Cons (_Tuple2 p_2_0 (<{Sapl.Target.JS.Lifting._c;125;15_173}> defs_3_1 t_3_3)) (select _x_3_2::_Tuple2 0)) (select _x_3_2::_Tuple2 1)) ) 
Sapl.Target.JS.Lifting.walkBindings_14 sf_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> _Tuple3 _predefined._Nil st_2 _predefined._Nil) (_predefined._Cons _x_1_0 bs_1_1 -> case _x_1_0 (Sapl.SaplStruct.SaplLetDef var_2_0 expr_2_1 -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_2_1 True (Sapl.SaplStruct.isStrictVar_15 var_2_0) st_2, _x_3_1 = Sapl.Target.JS.Lifting.walkBindings_14 sf_0 bs_1_1 (select _x_3_0::_Tuple3 1) in _Tuple3 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef var_2_0 (select _x_3_0::_Tuple3 0)) (select _x_3_1::_Tuple3 0)) (select _x_3_1::_Tuple3 1) (<{StdList.++}> (select _x_3_0::_Tuple3 2) (select _x_3_1::_Tuple3 2))) ) 
Sapl.Target.JS.Lifting.walkUpdates_15 sf_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> _Tuple3 _predefined._Nil st_2 _predefined._Nil) (_predefined._Cons _x_1_0 us_1_1 -> case _x_1_0 (_Tuple2 idx_2_0 expr_2_1 -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_2_1 True False st_2, _x_3_1 = Sapl.Target.JS.Lifting.walkUpdates_15 sf_0 us_1_1 (select _x_3_0::_Tuple3 1) in _Tuple3 (_predefined._Cons (_Tuple2 idx_2_0 (select _x_3_0::_Tuple3 0)) (select _x_3_1::_Tuple3 0)) (select _x_3_1::_Tuple3 1) (<{StdList.++}> (select _x_3_0::_Tuple3 2) (select _x_3_1::_Tuple3 2))) ) 
Sapl.Target.JS.Lifting.walkArgs_12 sf_0 _x_1 !_x_2 st_3 = case _x_2 (_predefined._Nil -> _Tuple3 _predefined._Nil st_3 _predefined._Nil) (_predefined._Cons t_1_0 ts_1_1 -> case _x_1 (_predefined._Cons isStrict_2_0 si_2_1 -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 t_1_0 False isStrict_2_0 st_3, _x_3_1 = Sapl.Target.JS.Lifting.walkArgs_12 sf_0 si_2_1 ts_1_1 (select _x_3_0::_Tuple3 1) in _Tuple3 (_predefined._Cons (select _x_3_0::_Tuple3 0) (select _x_3_1::_Tuple3 0)) (select _x_3_1::_Tuple3 1) (<{StdList.++}> (select _x_3_0::_Tuple3 2) (select _x_3_1::_Tuple3 2))) ) 
Sapl.Target.JS.Lifting.walkTerm_11 sf_0 !_x_1 !_x_2::B !_x_3::B !st_4 = case _x_1 (Sapl.SaplStruct.SCase cond_1_0 patterns_1_1 -> case (StdBool.not (Sapl.Target.JS.Lifting.inline cond_1_0)) (True -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 cond_1_0 True True st_4, st_3_1 = select _x_3_0::_Tuple3 1, _x_3_2 = Sapl.Target.JS.Lifting.genVar_7 st_3_1, letvar_3_3 = select _x_3_2::_Tuple2 0, cond_3_4 = select _x_3_0::_Tuple3 0, cdefs_3_5 = select _x_3_0::_Tuple3 2, defs_3_6 = _predefined._Cons (Sapl.SaplStruct.SaplLetDef letvar_3_3 cond_3_4) cdefs_3_5, st_3_7 = select _x_3_2::_Tuple2 1 in <{Sapl.Target.JS.Lifting._c;54;11_170}> defs_3_6 sf_0 patterns_1_1 st_3_7 letvar_3_3) (False -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 cond_1_0 False True st_4, cdefs_3_1 = select _x_3_0::_Tuple3 2, st_3_2 = select _x_3_0::_Tuple3 1, cond_3_3 = select _x_3_0::_Tuple3 0 in <{Sapl.Target.JS.Lifting._c;64;11_171}> cdefs_3_1 sf_0 patterns_1_1 st_3_2 cond_3_3) ) (Sapl.SaplStruct.SLet expr_1_0 bindings_1_1 -> let _x_2_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_1_0 False True st_4, edefs_2_1 = select _x_2_0::_Tuple3 2, st_2_2 = select _x_2_0::_Tuple3 1, _x_2_3 = Sapl.Target.JS.Lifting.walkBindings_14 sf_0 bindings_1_1 st_2_2, bdefs_2_4 = select _x_2_3::_Tuple3 2, defs_2_5 = <{StdList.++}> edefs_2_1 bdefs_2_4, st_2_6 = select _x_2_3::_Tuple3 1, bindings_2_7 = select _x_2_3::_Tuple3 0, expr_2_8 = select _x_2_0::_Tuple3 0 in <{Sapl.Target.JS.Lifting._c;72;12_172}> defs_2_5 expr_2_8 bindings_2_7 st_2_6) (Sapl.SaplStruct.SSelect expr_1_0 ty_1_1 idx_1_2 -> let _x_2_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_1_0 False _x_3 st_4 in <{_Tuple3!7}> (Sapl.SaplStruct.SSelect (select _x_2_0::_Tuple3 0) ty_1_1 idx_1_2) (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) (Sapl.SaplStruct.SUpdate expr_1_0 ty_1_1 updates_1_2 -> case _x_2 (False -> case _x_3 (True -> let _x_4_0 = Sapl.Target.JS.Lifting.genVar_8 st_4, letvar_4_1 = select _x_4_0::_Tuple2 0, _x_4_2 = Sapl.Target.JS.Lifting.walkUpdates_15 sf_0 updates_1_2 (select _x_4_0::_Tuple2 1), _x_4_3 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_1_0 False True (select _x_4_2::_Tuple3 1) in <{_Tuple3!7}> (Sapl.SaplStruct.SVar (Sapl.SaplStruct.removeTypeInfo letvar_4_1)) (select _x_4_3::_Tuple3 1) (_predefined._Cons (Sapl.SaplStruct.SaplLetDef letvar_4_1 (Sapl.SaplStruct.SUpdate (select _x_4_3::_Tuple3 0) ty_1_1 (select _x_4_2::_Tuple3 0))) (<{StdList.++}> (select _x_4_3::_Tuple3 2) (select _x_4_2::_Tuple3 2)))) ) (_ -> case _x_3 (False -> let _x_3_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_1_0 _x_2 False st_4, expr_3_1 = select _x_3_0::_Tuple3 0, _x_3_2 = Sapl.Target.JS.Lifting.walkUpdates_15 sf_0 updates_1_2 (select _x_3_0::_Tuple3 1), updates_3_3 = select _x_3_2::_Tuple3 0, genfun_3_4 = select (Sapl.Target.JS.Lifting.prepareFun sf_0 (Sapl.Target.JS.Lifting.genUpdateFun (Sapl.SaplStruct.SUpdate expr_3_1 ty_1_1 updates_3_3)) Data.Map.newMap)::_Tuple2 0, funname_3_5 = Sapl.Target.JS.Lifting.extractName_9 genfun_3_4, st_3_6 = select _x_3_2::_Tuple3 1 in <{_Tuple3!7}> (Sapl.SaplStruct.SApplication (Sapl.SaplStruct.SVar funname_3_5) (_predefined._Cons expr_3_1 (StdList.map Sapl.Target.JS.Lifting.snd_18 updates_3_3))) (update st_3_6::Sapl.Target.JS.Lifting._LiftingState [1:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 funname_3_5) genfun_3_4 (select st_3_6::Sapl.Target.JS.Lifting._LiftingState 1)]) (<{StdList.++}> (select _x_3_0::_Tuple3 2) (select _x_3_2::_Tuple3 2))) (True -> case _x_2 (True -> let _x_4_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 expr_1_0 False True st_4, _x_4_1 = Sapl.Target.JS.Lifting.walkUpdates_15 sf_0 updates_1_2 (select _x_4_0::_Tuple3 1) in <{_Tuple3!7}> (Sapl.SaplStruct.SUpdate (select _x_4_0::_Tuple3 0) ty_1_1 (select _x_4_1::_Tuple3 0)) (select _x_4_1::_Tuple3 1) (<{StdList.++}> (select _x_4_0::_Tuple3 2) (select _x_4_1::_Tuple3 2))) ) )) (Sapl.SaplStruct.SApplication v_1_0 args_1_1 -> case v_1_0 (Sapl.SaplStruct.SVar name_2_0 -> let _x_3_0 = Sapl.Target.JS.Lifting.walkArgs_12 sf_0 (<{Sapl.Target.JS.Lifting.c;107;76_157}> sf_0 name_2_0 args_1_1 0) args_1_1 st_4 in <{_Tuple3!7}> (Sapl.SaplStruct.SApplication v_1_0 (select _x_3_0::_Tuple3 0)) (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)) (_ -> let _x_2_0 = Sapl.Target.JS.Lifting.walkArgs_12 sf_0 (StdList.repeat False) args_1_1 st_4 in <{_Tuple3!7}> (Sapl.SaplStruct.SApplication v_1_0 (select _x_2_0::_Tuple3 0)) (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2))) (_ -> <{_Tuple3!7}> _x_1 st_4 _predefined._Nil)
Sapl.Target.JS.Lifting.prepareExpr sf_0 !t_1 genfuns_2 = let _x_1_0 = Sapl.Target.JS.Lifting.walkTerm_11 sf_0 t_1 False True (Sapl.Target.JS.Lifting._LiftingState 1 genfuns_2), defs_1_1 = select _x_1_0::_Tuple3 2, st_1_2 = select _x_1_0::_Tuple3 1, t_1_3 = select _x_1_0::_Tuple3 0 in <{Sapl.Target.JS.Lifting._c;43;7_169}> defs_1_1 t_1_3 st_1_2
Sapl.Target.JS.Lifting.prepareFun sf_0 !_x_1 genfuns_2 = case _x_1 (Sapl.SaplStruct.FTFunc name_1_0 body_1_1 args_1_2 -> let _x_2_0 = Sapl.Target.JS.Lifting.prepareExpr sf_0 body_1_1 genfuns_2 in _Tuple2 (Sapl.SaplStruct.FTFunc name_1_0 (select _x_2_0::_Tuple2 0) args_1_2) (select _x_2_0::_Tuple2 1)) (Sapl.SaplStruct.FTCAF name_1_0 body_1_1 -> let _x_2_0 = Sapl.Target.JS.Lifting.prepareExpr sf_0 body_1_1 genfuns_2 in _Tuple2 (Sapl.SaplStruct.FTCAF name_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (_ -> _Tuple2 _x_1 genfuns_2)
<{Sapl.Target.JS.Lifting._c;125;15_173}> !defs_0 t_1 = case defs_0 (_predefined._Nil -> t_1) (_ -> Sapl.SaplStruct.SLet t_1 defs_0)
<{Sapl.Target.JS.Lifting._c;72;12_172}> !defs_0 expr_1 bindings_2 !st_3 = case defs_0 (_predefined._Nil -> <{_Tuple3!7}> (Sapl.SaplStruct.SLet expr_1 (<{StdList.++}> bindings_2 defs_0)) st_3 _predefined._Nil) (_ -> <{_Tuple3!7}> (Sapl.SaplStruct.SLet expr_1 (<{StdList.++}> bindings_2 defs_0)) st_3 _predefined._Nil)
<{Sapl.Target.JS.Lifting._c;64;11_171}> !cdefs_0 sf_1 !patterns_2 st_3 cond_4 = case cdefs_0 (_predefined._Nil -> let _x_2_0 = Sapl.Target.JS.Lifting.walkPatterns_13 sf_1 patterns_2 st_3 in <{_Tuple3!7}> (Sapl.SaplStruct.SCase cond_4 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1) _predefined._Nil) (_ -> let _x_1_0 = Sapl.Target.JS.Lifting.walkPatterns_13 sf_1 patterns_2 st_3 in <{_Tuple3!7}> (Sapl.SaplStruct.SLet (Sapl.SaplStruct.SCase cond_4 (select _x_1_0::_Tuple2 0)) cdefs_0) (select _x_1_0::_Tuple2 1) _predefined._Nil)
<{Sapl.Target.JS.Lifting._c;54;11_170}> !defs_0 sf_1 !patterns_2 st_3 letvar_4 = case defs_0 (_predefined._Nil -> let _x_2_0 = Sapl.Target.JS.Lifting.walkPatterns_13 sf_1 patterns_2 st_3 in <{_Tuple3!7}> (Sapl.SaplStruct.SCase (Sapl.SaplStruct.SVar (Sapl.SaplStruct.removeTypeInfo letvar_4)) (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1) _predefined._Nil) (_ -> let _x_1_0 = Sapl.Target.JS.Lifting.walkPatterns_13 sf_1 patterns_2 st_3 in <{_Tuple3!7}> (Sapl.SaplStruct.SLet (Sapl.SaplStruct.SCase (Sapl.SaplStruct.SVar (Sapl.SaplStruct.removeTypeInfo letvar_4)) (select _x_1_0::_Tuple2 0)) defs_0) (select _x_1_0::_Tuple2 1) _predefined._Nil)
<{Sapl.Target.JS.Lifting._c;43;7_169}> !defs_0 t_1 st_2 = case defs_0 (_predefined._Nil -> _Tuple2 t_1 (select st_2::Sapl.Target.JS.Lifting._LiftingState 1)) (_ -> _Tuple2 (Sapl.SaplStruct.SLet t_1 defs_0) (select st_2::Sapl.Target.JS.Lifting._LiftingState 1))
<{Sapl.Target.JS.Lifting.TD;LiftingState}> _x_0::B = _predefined._Nil


|| Converted Records
:: Sapl.Target.JS.Lifting._LiftingState = {Sapl.Target.JS.Lifting.varidx::I, Sapl.Target.JS.Lifting.genfuns}

:: <{Sapl.Target.JS.Lifting.gEq_s;}> = {!Sapl.Target.JS.Lifting.gEq_s}

:: <{Sapl.Target.JS.Lifting.gEq_ss;}> = {!Sapl.Target.JS.Lifting.gEq_ss}

:: <{Sapl.Target.JS.Lifting.gEq_sss;}> = {!Sapl.Target.JS.Lifting.gEq_sss}

:: <{Sapl.Target.JS.Lifting.gEq_ssss;}> = {!Sapl.Target.JS.Lifting.gEq_ssss}

:: <{Sapl.Target.JS.Lifting.gEq_sssss;}> = {!Sapl.Target.JS.Lifting.gEq_sssss}

:: <{Sapl.Target.JS.Lifting.gEq_ssssss;}> = {!Sapl.Target.JS.Lifting.gEq_ssssss}

:: <{Sapl.Target.JS.Lifting.gEq_sssssss;}> = {!Sapl.Target.JS.Lifting.gEq_sssssss}

:: <{Sapl.Target.JS.Lifting.gEq_ssssssss;}> = {!Sapl.Target.JS.Lifting.gEq_ssssssss}

:: <{Sapl.Target.JS.Lifting.gEq_sssssssss;}> = {!Sapl.Target.JS.Lifting.gEq_sssssssss}

:: <{Sapl.Target.JS.Lifting.bimap_s;}> = {Sapl.Target.JS.Lifting.bimap_s}

:: <{Sapl.Target.JS.Lifting.bimap_ss;}> = {Sapl.Target.JS.Lifting.bimap_ss}

:: <{Sapl.Target.JS.Lifting.bimap_sss;}> = {Sapl.Target.JS.Lifting.bimap_sss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_s;}> = {!Sapl.Target.JS.Lifting.JSONEncode_s}

:: <{Sapl.Target.JS.Lifting.JSONEncode_ss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_ss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_sss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_sss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_s;}> = {!Sapl.Target.JS.Lifting.JSONDecode_s}

:: <{Sapl.Target.JS.Lifting.JSONDecode_ss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_ss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_sss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_sss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_ssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_ssss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_sssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_sssss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_ssssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_ssssss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_sssssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_sssssss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_ssssssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_ssssssss}

:: <{Sapl.Target.JS.Lifting.JSONEncode_sssssssss;}> = {!Sapl.Target.JS.Lifting.JSONEncode_sssssssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_ssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_ssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_sssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_sssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_ssssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_ssssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_sssssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_sssssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_ssssssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_ssssssss}

:: <{Sapl.Target.JS.Lifting.JSONDecode_sssssssss;}> = {!Sapl.Target.JS.Lifting.JSONDecode_sssssssss}

