|| ?module? Sapl.SaplParser


Sapl.SaplParser.anon_125 !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken _x_1_0 _x_1_1 t_1_2 -> t_1_2) 
Sapl.SaplParser.defaultState = Sapl.SaplParser._ParserState 0 Data.Map.newMap Data.Map.newMap Data.Map.newMap _predefined._Nil
Sapl.SaplParser.anon_253 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_33 g_0 !f_1 st0_2 = <{Sapl.SaplParser._c;11;9_394}> (f_1 st0_2) g_0
<{Sapl.SaplParser._c;11;9_394}> !_x_0 g_1 = case _x_0 (Data.Error.Ok _x_1_0 -> case _x_1_0 (_Tuple2 r_2_0 st1_2_1 -> g_1 r_2_0 st1_2_1) ) (Data.Error.Error str_1_0 -> Data.Error.Error str_1_0) 
<{Sapl.SaplParser.>>=}> f_0 g_1 = Sapl.SaplParser.anon_33 g_1 f_0
Sapl.SaplParser.anon_150 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.skip_newlines !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TEndOfLine -> Sapl.SaplParser.skip_newlines ts_1_1) ) (_ -> Sapl.SaplParser.anon_150 _x_0)
Sapl.SaplParser.anon_252 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_251 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_250 !_vunpackVar_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (update s_2::Sapl.SaplParser._ParserState [3:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_1) Data.Void.Void (select s_2::Sapl.SaplParser._ParserState 3)]))
Sapl.SaplParser.anon_249 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_113 type_0 ts_1 t_2 tname_3 = Sapl.SaplParser.anon_249 (_Tuple2 (Sapl.SaplStruct.FTCAF (Sapl.SaplStruct.TypedVar tname_3 type_0) t_2) ts_1)
Sapl.SaplParser.anon_383 name_0 s_1 = Data.Error.Ok (_Tuple2 name_0 (update s_1::Sapl.SaplParser._ParserState [3:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_0) Data.Void.Void (select s_1::Sapl.SaplParser._ParserState 3)]))
Sapl.SaplParser.anon_114 type_0 name_1 level_2::I !_x_3 = case _x_3 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_383 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_113 type_0 ts_1_1 t_1_0)) 
Sapl.SaplParser.anon_228 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (update s_1::Sapl.SaplParser._ParserState [0:<{StdInt.+_6}> (select s_1::Sapl.SaplParser._ParserState 0) 1]))
Sapl.SaplParser.anon_227 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_226 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_75 !_x_0 = case _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;166;28_395}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;166;28_395}> !_x_0 t_1 ts_2 = case _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_226 (_Tuple2 t_1 (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_227 (_Tuple2 ts_2 "Missing close parenthesis"))
Sapl.SaplParser.anon_240 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_239 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_225 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (update s_1::Sapl.SaplParser._ParserState [0:<{StdInt.-_7}> (select s_1::Sapl.SaplParser._ParserState 0) 1]))
Sapl.SaplParser.decLevel_224 a_0 = Sapl.SaplParser.anon_225 a_0
Sapl.SaplParser.anon_223 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_76 ds_0 !_x_1 = case _x_1 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_223 (_Tuple2 (Sapl.SaplStruct.SLet t_1_0 ds_0) ts_1_1)) Sapl.SaplParser.decLevel_224) 
Sapl.SaplParser.anon_237 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_236 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_235 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_234 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_233 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_238 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_222 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_221 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_80 expr_0 !_x_1 = case _x_1 (_Tuple2 ps_1_0 ts_1_1 -> case (StdList.isEmpty ps_1_0) (True -> Sapl.SaplParser.anon_221 (_Tuple2 ts_1_1 "Missing case patterns")) (False -> Sapl.SaplParser.anon_222 (_Tuple2 (Sapl.SaplStruct.SCase expr_0 ps_1_0) ts_1_1)) ) 
Sapl.SaplParser.anon_231 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_230 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (update s_1::Sapl.SaplParser._ParserState [0:<{StdInt.+_6}> (select s_1::Sapl.SaplParser._ParserState 0) 1]))
Sapl.SaplParser.anon_229 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_220 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_219 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_85 lit_0 !_x_1 = case _x_1 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;209;24_396}> (StdList.hd ts_1_1) lit_0 t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;209;24_396}> !_x_0 lit_1 t_2 ts_3 = case _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_219 (_Tuple2 (Data.Maybe.Just (_Tuple2 (Sapl.SaplStruct.PLit lit_1) t_2)) (StdList.tl ts_3))) (_ -> Sapl.SaplParser.anon_220 (_Tuple2 ts_3 "Missing close parenthesis3"))
Sapl.SaplParser.anon_232 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_218 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (update s_1::Sapl.SaplParser._ParserState [0:<{StdInt.-_7}> (select s_1::Sapl.SaplParser._ParserState 0) 1]))
Sapl.SaplParser.decLevel_217 a_0 = Sapl.SaplParser.anon_218 a_0
Sapl.SaplParser.anon_216 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_215 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.mbCons_90 !cons_0 as_1 = case (<{StdString.==_2}> cons_0 "_") (True -> Sapl.SaplStruct.PDefault) (False -> Sapl.SaplStruct.PCons cons_0 as_1) 
Sapl.SaplParser.anon_86 cons_0 as_1 !_x_2 = case _x_2 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;220;24_397}> (StdList.hd ts_1_1) cons_0 as_1 t_1_0 ts_1_1) Sapl.SaplParser.decLevel_217) 
<{Sapl.SaplParser._c;220;24_397}> !_x_0 cons_1 as_2 t_3 ts_4 = case _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_215 (_Tuple2 (Data.Maybe.Just (_Tuple2 (Sapl.SaplParser.mbCons_90 cons_1 as_2) t_3)) (StdList.tl ts_4))) (_ -> Sapl.SaplParser.anon_216 (_Tuple2 ts_4 "Missing close parenthesis4"))
Sapl.SaplParser.anon_214 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_213 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_91 !ts_0 name_1 as_2 level_3::I = Sapl.SaplParser.args__92 ts_0 (_predefined._Cons (Sapl.SaplStruct.NormalVar name_1 level_3) as_2)
Sapl.SaplParser.args__92 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_213 (Sapl.SaplParser.anon_91 ts_1_1 name_2_0 as_1)) ) (_ -> Sapl.SaplParser.anon_214 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.args !ts_0 = Sapl.SaplParser.args__92 ts_0 _predefined._Nil
Sapl.SaplParser.anon_180 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
<{Sapl.SaplParser.get`_179}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.SaplParser.get`_179}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.SaplParser.get`_179}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.SaplParser.get`_384}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.SaplParser.get`_384}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.SaplParser.get`_384}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.SaplParser.anon_178 name_0 s_1 = Data.Error.Ok (_Tuple2 (Data.Maybe.isJust (<{Sapl.SaplParser.get`_384}> name_0 (select s_1::Sapl.SaplParser._ParserState 1))) s_1)
Sapl.SaplParser.anon_177 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_176 fun_0 s_1 = Data.Error.Ok (_Tuple2 fun_0 (update s_1::Sapl.SaplParser._ParserState [4:_predefined._Cons fun_0 (select s_1::Sapl.SaplParser._ParserState 4)]))
Sapl.SaplParser.anon_175 !_vunpackVar_0 def_1 name_2 s_3 = Data.Error.Ok (_Tuple2 name_2 (update s_3::Sapl.SaplParser._ParserState [1:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_2) def_1 (select s_3::Sapl.SaplParser._ParserState 1)]))
Sapl.SaplParser.anon_174 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_34 !g_0 _x_1 = g_0
<{Sapl.SaplParser.>>|}> f_0 g_1 = <{Sapl.SaplParser.>>=}> f_0 (Sapl.SaplParser.anon_34 g_1)
Sapl.SaplParser.anon_385 def_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (update s_2::Sapl.SaplParser._ParserState [1:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_1) def_0 (select s_2::Sapl.SaplParser._ParserState 1)]))
Sapl.SaplParser.anon_37 name_0 newdef_1 newadt_2 !b_3::B = case b_3 (True -> Sapl.SaplParser.anon_174 Data.Void.Void) (False -> <{Sapl.SaplParser.>>|}> (<{Sapl.SaplParser.>>|}> (Sapl.SaplParser.anon_385 newdef_1 (Sapl.SaplStruct.NormalVar name_0 0)) (Sapl.SaplParser.anon_176 newadt_2)) (Sapl.SaplParser.anon_177 Data.Void.Void)) 
Sapl.SaplParser.genarg_43 !i_0::I !s_1::I = case (<{StdInt.<_17}> 0 (StdInt.bitand s_1 (<{StdInt.<<}> 1 (<{StdInt.-_7}> i_0 1)))) (True -> Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar "_" 0) Sapl.SaplStruct.NoType) (False -> Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar "_" 0) Sapl.SaplStruct.NoType) 
<{Sapl.SaplParser.c;58;98_39}> s_0::I !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (Sapl.SaplParser.genarg_43 i_1 s_0) (<{Sapl.SaplParser.c;58;98_39}> s_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
Sapl.SaplParser.genadt_42 name_0 nrargs_1::I s_2::I = Sapl.SaplStruct.FTADT (Sapl.SaplStruct.NormalVar name_0 0) (_predefined._Cons (Sapl.SaplStruct.SaplConstructor (Sapl.SaplStruct.NormalVar name_0 0) 0 (<{Sapl.SaplParser.c;58;98_39}> s_2 1 nrargs_1)) _predefined._Nil)
<{Sapl.SaplParser.c;57;85_38}> s_0::I !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (Sapl.SaplParser.genarg_43 i_1 s_0) (<{Sapl.SaplParser.c;57;85_38}> s_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
Sapl.SaplParser.genrec_41 !nrargs_0::I s_1::I = Sapl.SaplParser._ConstructorDef 0 1 nrargs_0 (<{Sapl.SaplParser.c;57;85_38}> s_1 1 nrargs_0)
Sapl.SaplParser.gendefs_40 name_0 name_1 = let idxpart_1_0::I = <{StdString.%_10}> name_1 (_Tuple2 6 (_SystemArray.size_20 name_1)), _x_1_1::I = <{Sapl.SaplParser._c;52;19_398}> (Sapl.FastString.charIndex idxpart_1_0 1 '!') idxpart_1_0, l_1_2 = select _x_1_1::_Tuple2 0, r_1_3 = select _x_1_1::_Tuple2 1 in _Tuple2 (Sapl.SaplParser.genadt_42 name_0 l_1_2 r_1_3) (Sapl.SaplParser.genrec_41 l_1_2 r_1_3)
<{Sapl.SaplParser._c;52;19_398}> !_x_0 idxpart_1 = case _x_0 (_Tuple2 _x_1_0 idx_1_1 -> case _x_1_0 (True -> _Tuple2 (StdInt.toInt_23 (<{StdString.%_10}> idxpart_1 (_Tuple2 0 (<{StdInt.-_7}> idx_1_1 1)))) (StdInt.toInt_23 (<{StdString.%_10}> idxpart_1 (_Tuple2 (<{StdInt.+_6}> idx_1_1 1) (_SystemArray.size_20 idxpart_1))))) (False -> _Tuple2 (StdInt.toInt_23 idxpart_1) 0) ) 
Sapl.SaplParser.addTupleCons !name_0 = case (case (Sapl.FastString.startsWith "_Tuple" name_0) (True -> <{StdInt.<_17}> 6 (_SystemArray.size_20 name_0)) (False -> False) ) (True -> let _x_2_0 = Sapl.SaplParser.gendefs_40 name_0 name_0 in <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_178 name_0) (Sapl.SaplParser.anon_37 name_0 (select _x_2_0::_Tuple2 1) (select _x_2_0::_Tuple2 0))) (False -> Sapl.SaplParser.anon_180 Data.Void.Void) 
Sapl.SaplParser.anon_192 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_83 f_0 as_1 !_x_2 = case _x_2 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;201;32_399}> t_1_0 f_0 ts_1_1 as_1) 
<{Sapl.SaplParser.args`_84}> f_0 ts_1 as_2 = <{Sapl.SaplParser.>>=}> (f_0 ts_1) (Sapl.SaplParser.anon_83 f_0 as_2)
<{Sapl.SaplParser._c;201;32_399}> !t_0 f_1 ts_2 as_3 = case t_0 (Data.Maybe.Just r_1_0 -> <{Sapl.SaplParser.args`_84}> f_1 ts_2 (_predefined._Cons r_1_0 as_3)) (_ -> Sapl.SaplParser.anon_192 (_Tuple2 (StdList.reverse as_3) ts_2))
Sapl.SaplParser.args_ f_0 ts_1 = <{Sapl.SaplParser.args`_84}> f_0 ts_1 _predefined._Nil
Sapl.SaplParser.anon_212 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_211 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.skip_82 !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TCloseBracket -> Sapl.SaplParser.anon_211 (_Tuple2 Sapl.SaplStruct.SAbortBody ts_1_1)) (_ -> Sapl.SaplParser.skip_82 ts_1_1)) (_predefined._Nil -> Sapl.SaplParser.anon_212 (_Tuple2 _predefined._Nil "Missing close bracket in ABC code definition")) 
Sapl.SaplParser.anon_186 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_185 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.mandatory errmsg_0 !_x_1 = case _x_1 (_Tuple2 _x_1_0 ts_1_1 -> case _x_1_0 (Data.Maybe.Just t_2_0 -> Sapl.SaplParser.anon_185 (_Tuple2 t_2_0 ts_1_1)) (Data.Maybe.Nothing -> Sapl.SaplParser.anon_186 (_Tuple2 ts_1_1 errmsg_0)) ) 
Sapl.SaplParser.anon_206 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_205 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_204 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_198 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_197 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_44 !_x_0 = case _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;74;28_400}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;74;28_400}> !_x_0 t_1 ts_2 = case _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_197 (_Tuple2 (Data.Maybe.Just t_1) (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_198 (_Tuple2 ts_2 "Missing close parenthesisx"))
Sapl.SaplParser.anon_210 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_196 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_195 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_45 t_0 !_x_1 = case _x_1 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser._c;85;29_401}> as_1_0 t_0 ts_1_1) 
<{Sapl.SaplParser._c;85;29_401}> !as_0 t_1 ts_2 = case as_0 (_predefined._Nil -> Sapl.SaplParser.anon_195 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SVar t_1)) ts_2)) (_ -> Sapl.SaplParser.anon_196 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SApplication (Sapl.SaplStruct.SVar t_1) as_0)) ts_2))
Sapl.SaplParser.anon_203 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_202 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_201 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_200 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_199 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_61 !_x_0 = case _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;126;28_402}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;126;28_402}> !_x_0 t_1 ts_2 = case _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_199 (_Tuple2 (Data.Maybe.Just t_1) (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_200 (_Tuple2 ts_2 "Missing close parenthesisx"))
Sapl.SaplParser.anon_182 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_181 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_62 ts_0 t_1 _x_2 = Sapl.SaplParser.anon_181 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SVar t_1)) ts_0)
Sapl.SaplParser.anon_63 ts_0 name_1 t_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addTupleCons name_1) (Sapl.SaplParser.anon_62 ts_0 t_2)
Sapl.SaplParser.anon_64 ts_0 name_1 level_2::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_182 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_63 ts_0 name_1)
Sapl.SaplParser.anon_194 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_193 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_49 expr_0 ty_1 idx_2::I !_x_3 = case _x_3 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser._c;96;29_403}> as_1_0 expr_0 ty_1 idx_2 ts_1_1) 
<{Sapl.SaplParser._c;96;29_403}> !as_0 expr_1 ty_2 idx_3::I ts_4 = case as_0 (_predefined._Nil -> Sapl.SaplParser.anon_193 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SSelect expr_1 ty_2 idx_3)) ts_4)) (_ -> Sapl.SaplParser.anon_194 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SApplication (Sapl.SaplStruct.SSelect expr_1 ty_2 idx_3) as_0)) ts_4))
Sapl.SaplParser.anon_191 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_190 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.read_int !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TLit _x_2_0 -> case _x_2_0 (Sapl.SaplTokenizer.LInt lit_3_0 -> Sapl.SaplParser.anon_190 (_Tuple2 (Data.Maybe.Just lit_3_0) ts_1_1)) ) ) (_ -> Sapl.SaplParser.anon_191 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.anon_184 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_183 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.type !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TIdentifier type_4_0 -> Sapl.SaplParser.anon_183 (_Tuple2 (Sapl.SaplStruct.Type type_4_0) ts_3_1)) ) ) ) (_ -> Sapl.SaplParser.anon_184 (_Tuple2 Sapl.SaplStruct.NoType _x_0))
Sapl.SaplParser.anon_189 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_53 expr_0 ty_1 !_x_2 = case _x_2 (_Tuple2 upds_1_0 ts_1_1 -> Sapl.SaplParser.anon_189 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SUpdate expr_0 ty_1 upds_1_0)) ts_1_1)) 
Sapl.SaplParser.anon_207 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_188 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_187 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_56 !_x_0 = case _x_0 (_Tuple2 us_1_0 ts_1_1 -> <{Sapl.SaplParser._c;109;29_404}> (StdList.hd ts_1_1) us_1_0 ts_1_1) 
<{Sapl.SaplParser._c;109;29_404}> !_x_0 us_1 ts_2 = case _x_0 (Sapl.SaplTokenizer.TCloseSquareBracket -> Sapl.SaplParser.anon_187 (_Tuple2 us_1 (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_188 (_Tuple2 ts_2 "Missing close square bracket"))
Sapl.SaplParser.anon_208 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_209 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.update_2_60 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TComma -> Sapl.SaplParser.update_1_59 ts_1_1 as_1) ) (_ -> Sapl.SaplParser.anon_209 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.anon_57 idx_0::I as_1 !_x_2 = case _x_2 (_Tuple2 expr_1_0 ts_1_1 -> Sapl.SaplParser.update_2_60 ts_1_1 (_predefined._Cons (_Tuple2 idx_0 expr_1_0) as_1)) 
Sapl.SaplParser.update_1_59 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TLit _x_2_0 -> case _x_2_0 (Sapl.SaplTokenizer.LInt idx_3_0 -> case _x_1_1 (_predefined._Cons _x_4_0 ts_4_1 -> case _x_4_0 (Sapl.SaplTokenizer.TColon -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.expr ts_4_1) (Sapl.SaplParser.mandatory "Missing field update expression")) (Sapl.SaplParser.anon_57 idx_3_0 as_1)) ) ) ) ) (_ -> Sapl.SaplParser.anon_208 (_Tuple2 _x_0 "Invalid field \"update\""))
Sapl.SaplParser.upd_list_58 !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TOpenSquareBracket -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.update_1_59 ts_1_1 _predefined._Nil) Sapl.SaplParser.anon_56) ) (_ -> Sapl.SaplParser.anon_207 (_Tuple2 _x_0 "Missing open bracket"))
Sapl.SaplParser.anon_54 expr_0 !_x_1 = case _x_1 (_Tuple2 ty_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.upd_list_58 ts_1_1) (Sapl.SaplParser.anon_53 expr_0 ty_1_0)) 
Sapl.SaplParser.anon_55 !_x_0 = case _x_0 (_Tuple2 expr_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.type ts_1_1) (Sapl.SaplParser.anon_54 expr_1_0)) 
Sapl.SaplParser.anon_50 expr_0 ty_1 !_x_2 = case _x_2 (_Tuple2 idx_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_expr ts_1_1) (Sapl.SaplParser.anon_49 expr_0 ty_1 idx_1_0)) 
Sapl.SaplParser.anon_51 expr_0 !_x_1 = case _x_1 (_Tuple2 ty_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.read_int ts_1_1) (Sapl.SaplParser.mandatory "Missing select index")) (Sapl.SaplParser.anon_50 expr_0 ty_1_0)) 
Sapl.SaplParser.anon_52 !_x_0 = case _x_0 (_Tuple2 expr_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.type ts_1_1) (Sapl.SaplParser.anon_51 expr_1_0)) 
Sapl.SaplParser.sexpr !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.mexpr ts_1_1) Sapl.SaplParser.anon_61) (Sapl.SaplTokenizer.TLit lit_2_0 -> Sapl.SaplParser.anon_201 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SLit lit_2_0)) ts_1_1)) (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_202 (Sapl.SaplParser.anon_64 ts_1_1 name_2_0)) ) (_ -> Sapl.SaplParser.anon_203 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.args_expr ts_0 = Sapl.SaplParser.args_ Sapl.SaplParser.sexpr ts_0
Sapl.SaplParser.anon_46 ts_0 t_1 _x_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_expr ts_0) (Sapl.SaplParser.anon_45 t_1)
Sapl.SaplParser.anon_47 ts_0 name_1 t_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addTupleCons name_1) (Sapl.SaplParser.anon_46 ts_0 t_2)
Sapl.SaplParser.anon_48 ts_0 name_1 level_2::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_210 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_47 ts_0 name_1)
Sapl.SaplParser.mexpr ts_0 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.expr ts_0) (Sapl.SaplParser.mandatory "Missing expression")
Sapl.SaplParser.expr !_x_0 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.mexpr ts_1_1) Sapl.SaplParser.anon_44) (Sapl.SaplTokenizer.TLit lit_2_0 -> Sapl.SaplParser.anon_204 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SLit lit_2_0)) ts_1_1)) (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_205 (Sapl.SaplParser.anon_48 ts_1_1 name_2_0)) (Sapl.SaplTokenizer.TSelectKeyword -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.sexpr ts_1_1) (Sapl.SaplParser.mandatory "Missing select expression")) Sapl.SaplParser.anon_52) (Sapl.SaplTokenizer.TUpdateKeyword -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.sexpr ts_1_1) (Sapl.SaplParser.mandatory "Missing update expression")) Sapl.SaplParser.anon_55) ) (_ -> Sapl.SaplParser.anon_206 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.anon_87 cons_0 !_x_1 = case _x_1 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;217;25_408}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_86 cons_0 as_1_0)) 
Sapl.SaplParser.anon_88 cons_0 ts_1 _x_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args ts_1) (Sapl.SaplParser.anon_87 cons_0)
Sapl.SaplParser.anon_89 cons_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addTupleCons cons_0) (Sapl.SaplParser.anon_88 cons_0 ts_1)
Sapl.SaplParser.arg_pattern !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> case _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TLit lit_4_0 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;206;13_407}> (StdList.hd ts_3_1) ts_3_1) (Sapl.SaplParser.anon_85 lit_4_0)) (Sapl.SaplTokenizer.TIdentifier cons_4_0 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_230 ts_3_1) (Sapl.SaplParser.anon_89 cons_4_0)) ) ) ) (_ -> Sapl.SaplParser.anon_231 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.args_pattern ts_0 = Sapl.SaplParser.args_ Sapl.SaplParser.arg_pattern ts_0
Sapl.SaplParser.anon_81 !_x_0 = case _x_0 (_Tuple2 expr_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_pattern ts_1_1) (Sapl.SaplParser.anon_80 expr_1_0)) 
Sapl.SaplParser.anon_71 name_0 as_1 level_2::I !_x_3 = case _x_3 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_74 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_0 level_2) Sapl.SaplStruct.NoType) t_1_0) as_1)) 
Sapl.SaplParser.anon_72 name_0 as_1 ts_2 level_3::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_2) (Sapl.SaplParser.anon_71 name_0 as_1 level_3)
Sapl.SaplParser.anon_69 name_0 type_1 as_2 level_3::I !_x_4 = case _x_4 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_74 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_0 level_3) (Sapl.SaplStruct.Type type_1)) t_1_0) as_2)) 
Sapl.SaplParser.anon_70 name_0 type_1 as_2 ts_3 level_4::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_3) (Sapl.SaplParser.anon_69 name_0 type_1 as_2 level_4)
Sapl.SaplParser.anon_67 name_0 as_1 level_2::I !_x_3 = case _x_3 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_74 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_0 level_2) Sapl.SaplStruct.NoType) t_1_0) as_1)) 
Sapl.SaplParser.anon_68 name_0 as_1 ts_2 level_3::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_2) (Sapl.SaplParser.anon_67 name_0 as_1 level_3)
Sapl.SaplParser.letdef_2_74 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TComma -> Sapl.SaplParser.letdef_1_73 ts_1_1 as_1) ) (_ -> Sapl.SaplParser.anon_238 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.anon_65 name_0 type_1 as_2 level_3::I !_x_4 = case _x_4 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_74 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_0 level_3) (Sapl.SaplStruct.Type type_1)) t_1_0) as_2)) 
Sapl.SaplParser.anon_66 name_0 type_1 as_2 ts_3 level_4::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_3) (Sapl.SaplParser.anon_65 name_0 type_1 as_2 level_4)
Sapl.SaplParser.letdef_1_73 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> case _x_5_1 (_predefined._Cons _x_7_0 ts_7_1 -> case _x_7_0 (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_233 (Sapl.SaplParser.anon_66 name_2_0 type_6_0 as_1 ts_7_1)) ) ) ) ) (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_234 (Sapl.SaplParser.anon_68 name_2_0 as_1 _x_3_1)) ) ) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> case _x_5_1 (_predefined._Cons _x_7_0 ts_7_1 -> case _x_7_0 (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_235 (Sapl.SaplParser.anon_70 name_2_0 type_6_0 as_1 ts_7_1)) ) ) ) ) (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_236 (Sapl.SaplParser.anon_72 name_2_0 as_1 _x_3_1)) ) ) ) (_ -> Sapl.SaplParser.anon_237 (_Tuple2 _x_0 "Invalid \"let\" definition"))
Sapl.SaplParser.letdefinitions !ts_0 = Sapl.SaplParser.letdef_1_73 ts_0 _predefined._Nil
Sapl.SaplParser.anon_77 ds_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_1) (Sapl.SaplParser.anon_76 ds_0)
Sapl.SaplParser.anon_78 !_x_0 = case _x_0 (_Tuple2 ds_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;173;29_406}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_77 ds_1_0)) 
Sapl.SaplParser.anon_79 ts_0 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.letdefinitions ts_0) Sapl.SaplParser.anon_78
Sapl.SaplParser.body simple_0::B !_x_1 = case _x_1 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_1_1) Sapl.SaplParser.anon_75) (Sapl.SaplTokenizer.TLetKeyword -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_228 ts_1_1) Sapl.SaplParser.anon_79) (Sapl.SaplTokenizer.TCaseKeyword -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body True ts_1_1) Sapl.SaplParser.anon_81) (Sapl.SaplTokenizer.TOpenBracket -> Sapl.SaplParser.skip_82 ts_1_1) ) (_ -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._if;193;20_405}> simple_0 _x_1) (Sapl.SaplParser.mandatory "Missing expression"))
<{Sapl.SaplParser._c;217;25_408}> !_x_0 ts_1 = case _x_0 (Sapl.SaplTokenizer.TCaseAssignmentOp -> Sapl.SaplParser.body False (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_232 (_Tuple2 ts_1 "Missing select assignment operator"))
<{Sapl.SaplParser._c;206;13_407}> !_x_0 ts_1 = case _x_0 (Sapl.SaplTokenizer.TCaseAssignmentOp -> Sapl.SaplParser.body False (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_229 (_Tuple2 ts_1 "Missing select assignment operator"))
<{Sapl.SaplParser._c;173;29_406}> !_x_0 ts_1 = case _x_0 (Sapl.SaplTokenizer.TInKeyword -> Sapl.SaplParser.anon_239 (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_240 (_Tuple2 ts_1 "Missing \"in\" keyword"))
<{Sapl.SaplParser._if;193;20_405}> !simple_0::B = case simple_0 (True -> Sapl.SaplParser.sexpr) (_ -> Sapl.SaplParser.expr)
Sapl.SaplParser.anon_115 type_0 name_1 ts_2 level_3::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_2) (Sapl.SaplParser.anon_114 type_0 name_1 level_3)
Sapl.SaplParser.typed_caf name_0 type_1 ts_2 = <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_251 (Sapl.SaplParser.anon_115 type_1 name_0 ts_2)
Sapl.SaplParser.anon_248 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_247 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_246 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_245 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_244 !_vunpackVar_0 args_1 name_2 s_3 = Data.Error.Ok (_Tuple2 name_2 (update s_3::Sapl.SaplParser._ParserState [2:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_2) args_1 (select s_3::Sapl.SaplParser._ParserState 2)]))
Sapl.SaplParser.anon_243 !_vunpackVar_0 args_1 name_2 s_3 = Data.Error.Ok (_Tuple2 name_2 (update s_3::Sapl.SaplParser._ParserState [2:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_2) args_1 (select s_3::Sapl.SaplParser._ParserState 2)]))
Sapl.SaplParser.anon_242 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_117 type_0 as_1 ts_2 t_3 tname_4 = Sapl.SaplParser.anon_242 (_Tuple2 (Sapl.SaplStruct.FTMacro (Sapl.SaplStruct.TypedVar tname_4 type_0) t_3 as_1) ts_2)
Sapl.SaplParser.anon_241 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_116 type_0 as_1 ts_2 t_3 tname_4 = Sapl.SaplParser.anon_241 (_Tuple2 (Sapl.SaplStruct.FTFunc (Sapl.SaplStruct.TypedVar tname_4 type_0) t_3 as_1) ts_2)
Sapl.SaplParser.anon_386 args_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (update s_2::Sapl.SaplParser._ParserState [2:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_1) args_0 (select s_2::Sapl.SaplParser._ParserState 2)]))
Sapl.SaplParser.anon_387 args_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (update s_2::Sapl.SaplParser._ParserState [2:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_1) args_0 (select s_2::Sapl.SaplParser._ParserState 2)]))
Sapl.SaplParser.anon_118 type_0 name_1 level_2::I as_3 !func_4::B !_x_5 = case _x_5 (_Tuple2 t_1_0 ts_1_1 -> case func_4 (True -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_386 as_3 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_116 type_0 as_3 ts_1_1 t_1_0)) (False -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_387 as_3 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_117 type_0 as_3 ts_1_1 t_1_0)) ) 
Sapl.SaplParser.anon_119 type_0 name_1 level_2::I as_3 !_x_4 = case _x_4 (_Tuple2 func_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body False ts_1_1) (Sapl.SaplParser.anon_118 type_0 name_1 level_2 as_3 func_1_0)) 
Sapl.SaplParser.anon_120 type_0 name_1 level_2::I !_x_3 = case _x_3 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;297;29_409}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_119 type_0 name_1 level_2 as_1_0)) 
<{Sapl.SaplParser._c;297;29_409}> !_x_0 ts_1 = case _x_0 (Sapl.SaplTokenizer.TAssignmentOp -> Sapl.SaplParser.anon_245 (_Tuple2 True (StdList.tl ts_1))) (Sapl.SaplTokenizer.TMacroAssignmentOp -> Sapl.SaplParser.anon_246 (_Tuple2 False (StdList.tl ts_1))) (_ -> Sapl.SaplParser.anon_247 (_Tuple2 ts_1 "Missing assignment operator"))
Sapl.SaplParser.anon_153 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_152 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_151 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_94 !ts_0 name_1 as_2 level_3::I = Sapl.SaplParser.args__95 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_1 level_3) Sapl.SaplStruct.NoType) as_2)
Sapl.SaplParser.anon_93 !ts_0 name_1 type_2 as_3 level_4::I = Sapl.SaplParser.args__95 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_1 level_4) (Sapl.SaplStruct.Type type_2)) as_3)
Sapl.SaplParser.args__95 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 ts_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_151 (Sapl.SaplParser.anon_93 ts_5_1 name_2_0 type_6_0 as_1)) ) ) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_152 (Sapl.SaplParser.anon_94 _x_1_1 name_2_0 as_1))) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 ts_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> Sapl.SaplParser.args__95 ts_5_1 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_2_0 0) (Sapl.SaplStruct.Type type_6_0)) as_1)) ) ) ) (_ -> Sapl.SaplParser.args__95 _x_1_1 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_2_0 0) Sapl.SaplStruct.NoType) as_1))) ) (_ -> Sapl.SaplParser.anon_153 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.args_annotated !ts_0 = Sapl.SaplParser.args__95 ts_0 _predefined._Nil
Sapl.SaplParser.anon_121 type_0 name_1 ts_2 level_3::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_annotated ts_2) (Sapl.SaplParser.anon_120 type_0 name_1 level_3)
Sapl.SaplParser.typed_fun name_0 type_1 ts_2 = <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_248 (Sapl.SaplParser.anon_121 type_1 name_0 ts_2)
Sapl.SaplParser.anon_172 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_112 !_x_0 = case _x_0 (_Tuple2 f_1_0 ts_1_1 -> Sapl.SaplParser.anon_172 (_Tuple2 f_1_0 ts_1_1)) 
Sapl.SaplParser.anon_171 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_170 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_169 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_168 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_167 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_166 !_vunpackVar_0 def_1 name_2 s_3 = Data.Error.Ok (_Tuple2 name_2 (update s_3::Sapl.SaplParser._ParserState [1:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_2) def_1 (select s_3::Sapl.SaplParser._ParserState 1)]))
Sapl.SaplParser.anon_165 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_106 ts_0 as_1 tname_2 = Sapl.SaplParser.anon_165 (_Tuple2 (Sapl.SaplStruct.FTRecord tname_2 as_1) (StdList.tl ts_0))
Sapl.SaplParser.anon_388 def_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (update s_2::Sapl.SaplParser._ParserState [1:Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_1) def_0 (select s_2::Sapl.SaplParser._ParserState 1)]))
Sapl.SaplParser.anon_107 name_0 level_1::I !_x_2 = case _x_2 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser._c;267;29_410}> (StdList.hd ts_1_1) as_1_0 name_0 level_1 ts_1_1) 
<{Sapl.SaplParser._c;267;29_410}> !_x_0 as_1 name_2 level_3::I ts_4 = case _x_0 (Sapl.SaplTokenizer.TCloseBracket -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_388 (Sapl.SaplParser._ConstructorDef 0 1 (StdList.length_47 as_1) as_1) (Sapl.SaplStruct.NormalVar name_2 level_3)) (Sapl.SaplParser.anon_106 ts_4 as_1)) (_ -> Sapl.SaplParser.anon_167 (_Tuple2 ts_4 "Missing close parenthesis3"))
Sapl.SaplParser.anon_163 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_162 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_161 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_160 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_159 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_164 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_99 !ts_0 name_1 as_2 level_3::I = Sapl.SaplParser.args_2_101 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_1 level_3) Sapl.SaplStruct.NoType) as_2)
Sapl.SaplParser.anon_98 !ts_0 name_1 type_2 as_3 level_4::I = Sapl.SaplParser.args_2_101 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.StrictVar name_1 level_4) (Sapl.SaplStruct.Type type_2)) as_3)
Sapl.SaplParser.anon_97 !ts_0 name_1 as_2 level_3::I = Sapl.SaplParser.args_2_101 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_1 level_3) Sapl.SaplStruct.NoType) as_2)
Sapl.SaplParser.args_2_101 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TComma -> Sapl.SaplParser.args_1_100 ts_1_1 as_1) ) (_ -> Sapl.SaplParser.anon_164 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.anon_96 !ts_0 name_1 type_2 as_3 level_4::I = Sapl.SaplParser.args_2_101 ts_0 (_predefined._Cons (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar name_1 level_4) (Sapl.SaplStruct.Type type_2)) as_3)
Sapl.SaplParser.args_1_100 !_x_0 as_1 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 ts_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_159 (Sapl.SaplParser.anon_96 ts_5_1 name_2_0 type_6_0 as_1)) ) ) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_160 (Sapl.SaplParser.anon_97 _x_1_1 name_2_0 as_1))) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 ts_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_161 (Sapl.SaplParser.anon_98 ts_5_1 name_2_0 type_6_0 as_1)) ) ) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_162 (Sapl.SaplParser.anon_99 _x_1_1 name_2_0 as_1))) ) (_ -> Sapl.SaplParser.anon_163 (_Tuple2 _x_0 "Missing argument"))
Sapl.SaplParser.args_record !ts_0 = Sapl.SaplParser.args_1_100 ts_0 _predefined._Nil
Sapl.SaplParser.anon_108 name_0 ts_1 level_2::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_record ts_1) (Sapl.SaplParser.anon_107 name_0 level_2)
Sapl.SaplParser.anon_158 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_109 name_0 level_1::I ts_2 as_3 _x_4 = Sapl.SaplParser.anon_158 (_Tuple2 (Sapl.SaplStruct.FTADT (Sapl.SaplStruct.NormalVar name_0 level_1) as_3) ts_2)
Sapl.SaplParser.foldl_157 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.SaplParser.foldl_157 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.SaplParser.adddef_36 !nr_cons_0::I !m_1 !_x_2 = case _x_2 (Sapl.SaplStruct.SaplConstructor name_1_0 idx_1_1 as_1_2 -> Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar_20 name_1_0) (Sapl.SaplParser._ConstructorDef idx_1_1 nr_cons_0 (StdList.length_47 as_1_2) as_1_2) m_1) 
Sapl.SaplParser.foldl_389 nr_cons_0::I !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.SaplParser.foldl_389 nr_cons_0 (Sapl.SaplParser.adddef_36 nr_cons_0 r_1 a_1_0) x_1_1) 
Sapl.SaplParser.anon_35 conses_0 nr_cons_1::I s_2 = Data.Error.Ok (_Tuple2 conses_0 (update s_2::Sapl.SaplParser._ParserState [1:Sapl.SaplParser.foldl_389 nr_cons_1 (select s_2::Sapl.SaplParser._ParserState 1) conses_0]))
Sapl.SaplParser.addConstructors conses_0 = Sapl.SaplParser.anon_35 conses_0 (StdList.length_47 conses_0)
Sapl.SaplParser.anon_110 name_0 level_1::I !_x_2 = case _x_2 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addConstructors as_1_0) (Sapl.SaplParser.anon_109 name_0 level_1 ts_1_1 as_1_0)) 
Sapl.SaplParser.anon_155 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_154 s_0 = Data.Error.Ok (_Tuple2 (select s_0::Sapl.SaplParser._ParserState 0) s_0)
Sapl.SaplParser.anon_156 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.args_2_105 !_x_0 cs_1 i_2::I = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TVerticalBar -> Sapl.SaplParser.args_1_104 ts_1_1 cs_1 (<{StdInt.+_6}> i_2 1)) ) (_ -> Sapl.SaplParser.anon_156 (_Tuple2 (StdList.reverse cs_1) _x_0))
Sapl.SaplParser.anon_102 name_0 cs_1 i_2::I level_3::I !_x_4 = case _x_4 (_Tuple2 ss_1_0 ts_1_1 -> Sapl.SaplParser.args_2_105 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplConstructor (Sapl.SaplStruct.NormalVar name_0 level_3) i_2 ss_1_0) cs_1) i_2) 
Sapl.SaplParser.anon_103 name_0 cs_1 i_2::I ts_3 level_4::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_annotated ts_3) (Sapl.SaplParser.anon_102 name_0 cs_1 i_2 level_4)
Sapl.SaplParser.args_1_104 !_x_0 cs_1 i_2::I = case _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_154 (Sapl.SaplParser.anon_103 name_2_0 cs_1 i_2 ts_1_1)) ) (_ -> Sapl.SaplParser.anon_155 (_Tuple2 _x_0 "Missing argument"))
Sapl.SaplParser.args_adt !ts_0 = Sapl.SaplParser.args_1_104 ts_0 _predefined._Nil 0
Sapl.SaplParser.anon_111 name_0 ts_1 level_2::I = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_adt ts_1) (Sapl.SaplParser.anon_110 name_0 level_2)
Sapl.SaplParser.constr !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TIdentifier name_4_0 -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TAssignmentOp -> case _x_5_1 (_predefined._Cons _x_7_0 ts_7_1 -> case _x_7_0 (Sapl.SaplTokenizer.TOpenBracket -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_168 (Sapl.SaplParser.anon_108 name_4_0 ts_7_1)) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_169 (Sapl.SaplParser.anon_111 name_4_0 _x_5_1))) ) ) ) (_ -> Sapl.SaplParser.anon_170 (_Tuple2 _x_1_1 "Invalid type definition"))) ) (_ -> Sapl.SaplParser.anon_171 (_Tuple2 _x_0 "Not a type definition"))
Sapl.SaplParser.func !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplTokenizer.TTypeDef -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (Sapl.SaplTokenizer.TIdentifier type_6_0 -> case _x_5_1 (_predefined._Cons _x_7_0 ts_7_1 -> case _x_7_0 (Sapl.SaplTokenizer.TCAFAssignmentOp -> Sapl.SaplParser.typed_caf name_2_0 (Sapl.SaplStruct.Type type_6_0) ts_7_1) ) (_ -> Sapl.SaplParser.typed_fun name_2_0 (Sapl.SaplStruct.Type type_6_0) _x_5_1)) ) ) (Sapl.SaplTokenizer.TCAFAssignmentOp -> Sapl.SaplParser.typed_caf name_2_0 Sapl.SaplStruct.NoType _x_3_1) ) (_ -> Sapl.SaplParser.typed_fun name_2_0 Sapl.SaplStruct.NoType _x_1_1)) (Sapl.SaplTokenizer.TTypeDef -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.constr _x_0) Sapl.SaplParser.anon_112) ) (_ -> Sapl.SaplParser.anon_252 (_Tuple2 _x_0 "Not a function or type definition"))
Sapl.SaplParser.anon_122 fs_0 f_1 !ts_2 = case (<{StdInt.==_16}> (StdList.length_47 ts_2) 0) (True -> Sapl.SaplParser.anon_253 (_Tuple2 (_predefined._Cons f_1 fs_0) ts_2)) (False -> Sapl.SaplParser.program ts_2 (_predefined._Cons f_1 fs_0)) 
Sapl.SaplParser.anon_123 fs_0 !_x_1 = case _x_1 (_Tuple2 f_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.skip_newlines ts_1_1) (Sapl.SaplParser.anon_122 fs_0 f_1_0)) 
Sapl.SaplParser.anon_124 fs_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.func ts_1) (Sapl.SaplParser.anon_123 fs_0)
Sapl.SaplParser.program ts_0 fs_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.skip_newlines ts_0) (Sapl.SaplParser.anon_124 fs_1)
Sapl.SaplParser.findpos_126 !_vlength_0 !pts_1 rest_ts_2 = <{Sapl.SaplParser._c;324;11_411}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_1) (select _vlength_0::<{StdOverloaded.length;}> 0 rest_ts_2)) 1) pts_1))
<{Sapl.SaplParser._c;324;11_411}> !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.findpos_390 !pts_0 !rest_ts_1 = <{Sapl.SaplParser._c;324;11_412}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_0) (StdList.length_47 rest_ts_1)) 1) pts_0))
<{Sapl.SaplParser._c;324;11_412}> !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.parse !pts_0 = <{Sapl.SaplParser._c;318;7_413}> (Sapl.SaplParser.program (StdList.map Sapl.SaplParser.anon_125 pts_0) _predefined._Nil Sapl.SaplParser.defaultState) pts_0
<{Sapl.SaplParser._c;318;7_413}> !_x_0 pts_1 = case _x_0 (Data.Error.Ok _x_1_0 -> case _x_1_0 (_Tuple2 _x_2_0 ps_2_1 -> case _x_2_0 (_Tuple2 fts_3_0 _x_3_1 -> Data.Error.Ok (_Tuple2 (<{StdList.++}> (select ps_2_1::Sapl.SaplParser._ParserState 4) fts_3_0) ps_2_1)) ) ) (Data.Error.Error _x_1_0 -> case _x_1_0 (_Tuple2 ts_2_0 msg_2_1 -> let _x_3_0 = Sapl.SaplParser.findpos_390 pts_1 ts_2_0 in Data.Error.Error (<{StdString.+++_11}> msg_2_1 (<{StdString.+++_11}> " at line " (<{StdString.+++_11}> (StdString.toString_5 (select _x_3_0::_Tuple2 0)) (<{StdString.+++_11}> " before character " (StdString.toString_5 (select _x_3_0::_Tuple2 1))))))) ) 
Sapl.SaplParser.anon_127 !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken _x_1_0 _x_1_1 t_1_2 -> t_1_2) 
Sapl.SaplParser.findpos_128 !_vlength_0 !pts_1 rest_ts_2 = <{Sapl.SaplParser._c;336;11_414}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_1) (select _vlength_0::<{StdOverloaded.length;}> 0 rest_ts_2)) 1) pts_1))
<{Sapl.SaplParser._c;336;11_414}> !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.findpos_391 !pts_0 !rest_ts_1 = <{Sapl.SaplParser._c;336;11_415}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_0) (StdList.length_47 rest_ts_1)) 1) pts_0))
<{Sapl.SaplParser._c;336;11_415}> !_x_0 = case _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.parseExpr !pts_0 = <{Sapl.SaplParser._c;330;7_416}> (Sapl.SaplParser.body False (StdList.map Sapl.SaplParser.anon_127 pts_0) Sapl.SaplParser.defaultState) pts_0
<{Sapl.SaplParser._c;330;7_416}> !_x_0 pts_1 = case _x_0 (Data.Error.Ok _x_1_0 -> case _x_1_0 (_Tuple2 _x_2_0 ps_2_1 -> case _x_2_0 (_Tuple2 fts_3_0 _x_3_1 -> Data.Error.Ok (_Tuple2 fts_3_0 ps_2_1)) ) ) (Data.Error.Error _x_1_0 -> case _x_1_0 (_Tuple2 ts_2_0 msg_2_1 -> let _x_3_0 = Sapl.SaplParser.findpos_391 pts_1 ts_2_0 in Data.Error.Error (<{StdString.+++_11}> msg_2_1 (<{StdString.+++_11}> " at line " (<{StdString.+++_11}> (StdString.toString_5 (select _x_3_0::_Tuple2 0)) (<{StdString.+++_11}> " before character " (StdString.toString_5 (select _x_3_0::_Tuple2 1))))))) ) 
Sapl.SaplParser.anon_255 k_0 x_1 xs_2 = _predefined._Cons (_Tuple2 k_0 x_1) xs_2
Sapl.SaplParser.mergeMaps_129 !<{_v==_0}> !<{_v<_1}> !m1_2 !m2_3 = Data.Map.union <{_v<_1}> (Data.Map.fromList <{_v==_0}> <{_v<_1}> (Data.Map.foldrWithKey Sapl.SaplParser.anon_255 _predefined._Nil m2_3)) m1_2
Sapl.SaplParser.mergeMaps_392 !<{_v<_0}> !m1_1 !m2_2 = Data.Map.union <{_v<_0}> (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) <{_v<_0}> (Data.Map.foldrWithKey Sapl.SaplParser.anon_255 _predefined._Nil m2_2)) m1_1
Sapl.SaplParser.mergeMaps_393 !m1_0 !m2_1 = Data.Map.union (<{StdOverloaded.<;}> <{StdString.<_3}>) (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) (<{StdOverloaded.<;}> <{StdString.<_3}>) (Data.Map.foldrWithKey Sapl.SaplParser.anon_255 _predefined._Nil m2_1)) m1_0
Sapl.SaplParser.mergeParserStates !pst1_0 !_x_1 = case _x_1 (Data.Maybe.Just pst2_1_0 -> update pst1_0::Sapl.SaplParser._ParserState [1:Sapl.SaplParser.mergeMaps_393 (select pst2_1_0::Sapl.SaplParser._ParserState 1) (select pst1_0::Sapl.SaplParser._ParserState 1),2:Sapl.SaplParser.mergeMaps_393 (select pst2_1_0::Sapl.SaplParser._ParserState 2) (select pst1_0::Sapl.SaplParser._ParserState 2),3:Sapl.SaplParser.mergeMaps_393 (select pst2_1_0::Sapl.SaplParser._ParserState 3) (select pst1_0::Sapl.SaplParser._ParserState 3),4:_predefined._Nil]) (Data.Maybe.Nothing -> pst1_0) 
<{Sapl.SaplParser.TD;ParserState}> _x_0::B = _predefined._Nil
<{Sapl.SaplParser.TD;ConstructorDef}> _x_0::B = _predefined._Nil
<{Sapl.SaplParser.TD;ErrorMsg}> _x_0::B = _predefined._Nil


|| Converted Records
:: Sapl.SaplParser._ParserState = {Sapl.SaplParser.ps_level::I, Sapl.SaplParser.ps_constructors, Sapl.SaplParser.ps_functions, Sapl.SaplParser.ps_CAFs, Sapl.SaplParser.ps_genFuns}

:: Sapl.SaplParser._ConstructorDef = {!Sapl.SaplParser.index::I, !Sapl.SaplParser.nr_cons::I, !Sapl.SaplParser.nr_args::I, Sapl.SaplParser.args}

:: <{Sapl.SaplParser.gEq_s;}> = {!Sapl.SaplParser.gEq_s}

:: <{Sapl.SaplParser.gEq_ss;}> = {!Sapl.SaplParser.gEq_ss}

:: <{Sapl.SaplParser.gEq_sss;}> = {!Sapl.SaplParser.gEq_sss}

:: <{Sapl.SaplParser.gEq_ssss;}> = {!Sapl.SaplParser.gEq_ssss}

:: <{Sapl.SaplParser.gEq_sssss;}> = {!Sapl.SaplParser.gEq_sssss}

:: <{Sapl.SaplParser.gEq_ssssss;}> = {!Sapl.SaplParser.gEq_ssssss}

:: <{Sapl.SaplParser.gEq_sssssss;}> = {!Sapl.SaplParser.gEq_sssssss}

:: <{Sapl.SaplParser.gEq_ssssssss;}> = {!Sapl.SaplParser.gEq_ssssssss}

:: <{Sapl.SaplParser.gEq_sssssssss;}> = {!Sapl.SaplParser.gEq_sssssssss}

:: <{Sapl.SaplParser.bimap_s;}> = {Sapl.SaplParser.bimap_s}

:: <{Sapl.SaplParser.bimap_ss;}> = {Sapl.SaplParser.bimap_ss}

:: <{Sapl.SaplParser.bimap_sss;}> = {Sapl.SaplParser.bimap_sss}

:: <{Sapl.SaplParser.JSONEncode_s;}> = {!Sapl.SaplParser.JSONEncode_s}

:: <{Sapl.SaplParser.JSONEncode_ss;}> = {!Sapl.SaplParser.JSONEncode_ss}

:: <{Sapl.SaplParser.JSONEncode_sss;}> = {!Sapl.SaplParser.JSONEncode_sss}

:: <{Sapl.SaplParser.JSONEncode_ssss;}> = {!Sapl.SaplParser.JSONEncode_ssss}

:: <{Sapl.SaplParser.JSONEncode_sssss;}> = {!Sapl.SaplParser.JSONEncode_sssss}

:: <{Sapl.SaplParser.JSONEncode_ssssss;}> = {!Sapl.SaplParser.JSONEncode_ssssss}

:: <{Sapl.SaplParser.JSONEncode_sssssss;}> = {!Sapl.SaplParser.JSONEncode_sssssss}

:: <{Sapl.SaplParser.JSONEncode_ssssssss;}> = {!Sapl.SaplParser.JSONEncode_ssssssss}

:: <{Sapl.SaplParser.JSONEncode_sssssssss;}> = {!Sapl.SaplParser.JSONEncode_sssssssss}

:: <{Sapl.SaplParser.JSONDecode_s;}> = {!Sapl.SaplParser.JSONDecode_s}

:: <{Sapl.SaplParser.JSONDecode_ss;}> = {!Sapl.SaplParser.JSONDecode_ss}

:: <{Sapl.SaplParser.JSONDecode_sss;}> = {!Sapl.SaplParser.JSONDecode_sss}

:: <{Sapl.SaplParser.JSONDecode_ssss;}> = {!Sapl.SaplParser.JSONDecode_ssss}

:: <{Sapl.SaplParser.JSONDecode_sssss;}> = {!Sapl.SaplParser.JSONDecode_sssss}

:: <{Sapl.SaplParser.JSONDecode_ssssss;}> = {!Sapl.SaplParser.JSONDecode_ssssss}

:: <{Sapl.SaplParser.JSONDecode_sssssss;}> = {!Sapl.SaplParser.JSONDecode_sssssss}

:: <{Sapl.SaplParser.JSONDecode_ssssssss;}> = {!Sapl.SaplParser.JSONDecode_ssssssss}

:: <{Sapl.SaplParser.JSONDecode_sssssssss;}> = {!Sapl.SaplParser.JSONDecode_sssssssss}

