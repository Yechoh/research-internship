|| ?module? Data.Queue


Data.Queue.newQueue = Data.Queue.Queue _predefined._Nil _predefined._Nil
Data.Queue.enqueue x_0 !_x_1 = case _x_1 (Data.Queue.Queue front_1_0 rear_1_1 -> Data.Queue.Queue front_1_0 (_predefined._Cons x_0 rear_1_1)) 
Data.Queue.dequeue !_x_0 = case _x_0 (Data.Queue.Queue _x_1_0 _x_1_1 -> case _x_1_0 (_predefined._Nil -> case _x_1_1 (_predefined._Nil -> <{_Tuple2!3}> Data.Maybe.Nothing (Data.Queue.Queue _predefined._Nil _predefined._Nil)) (_ -> let _x_3_0 = StdList.reverse _x_1_1 in <{_Tuple2!3}> (Data.Maybe.Just (select _x_3_0::_Tuple2 0)) (Data.Queue.Queue (select _x_3_0::_Tuple2 1) _predefined._Nil))) (_predefined._Cons x_2_0 xs_2_1 -> <{_Tuple2!3}> (Data.Maybe.Just x_2_0) (Data.Queue.Queue xs_2_1 _x_1_1)) ) 
Data.Queue.length_3::I !_x_0 = case _x_0 (Data.Queue.Queue front_1_0 rear_1_1 -> <{StdInt.+_6}> (StdList.length_47 front_1_0) (StdList.length_47 rear_1_1)) 
<{Data.Queue.TD;Queue}> _x_0::B = _predefined._Nil

:: Data.Queue.Queue = Data.Queue.Queue a1 a2

|| Converted Records
:: <{Data.Queue.gEq_s;}> = {!Data.Queue.gEq_s}

:: <{Data.Queue.gEq_ss;}> = {!Data.Queue.gEq_ss}

:: <{Data.Queue.gEq_sss;}> = {!Data.Queue.gEq_sss}

:: <{Data.Queue.gEq_ssss;}> = {!Data.Queue.gEq_ssss}

:: <{Data.Queue.gEq_sssss;}> = {!Data.Queue.gEq_sssss}

:: <{Data.Queue.gEq_ssssss;}> = {!Data.Queue.gEq_ssssss}

:: <{Data.Queue.gEq_sssssss;}> = {!Data.Queue.gEq_sssssss}

:: <{Data.Queue.gEq_ssssssss;}> = {!Data.Queue.gEq_ssssssss}

:: <{Data.Queue.gEq_sssssssss;}> = {!Data.Queue.gEq_sssssssss}

:: <{Data.Queue.bimap_s;}> = {Data.Queue.bimap_s}

:: <{Data.Queue.bimap_ss;}> = {Data.Queue.bimap_ss}

:: <{Data.Queue.bimap_sss;}> = {Data.Queue.bimap_sss}

