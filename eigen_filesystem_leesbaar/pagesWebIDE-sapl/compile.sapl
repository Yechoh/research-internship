|| ?module? compile


compile.InitialCoclOptions = compile._CoclOptions "" "" "" "_stderr_" 1 "_stderr_" 1 (scanner._SearchPaths _predefined._Nil _predefined._Nil) (frontend._ListTypesOption True frontend.ListTypesNone) False False False False True False
<{compile.splitBy`_20}> !<{_v%_0}> !_vArray_1 !<{_v==_2}> char_3 string_4 !stringSize_5::I frm_6::I !to_7::I = case (StdBool.not (<{StdInt.<_17}> to_7 stringSize_5)) (True -> _predefined._Cons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_4 (_Tuple2 frm_6 (<{StdInt.-_7}> to_7 1))) _predefined._Nil) (False -> case (select <{_v==_2}>::<{StdOverloaded.==;}> 0 (select _vArray_1::<{_SystemArray.Array;}> 3 string_4 to_7) char_3) (True -> _predefined._Cons (select <{_v%_0}>::<{StdOverloaded.%;}> 0 string_4 (_Tuple2 frm_6 (<{StdInt.-_7}> to_7 1))) (<{compile.splitBy`_20}> <{_v%_0}> _vArray_1 <{_v==_2}> char_3 string_4 stringSize_5 (<{StdInt.+_6}> to_7 1) (<{StdInt.+_6}> to_7 1))) (False -> <{compile.splitBy`_20}> <{_v%_0}> _vArray_1 <{_v==_2}> char_3 string_4 stringSize_5 frm_6 (<{StdInt.+_6}> to_7 1)) ) 
<{compile.splitBy`_61}> !_vArray_0 !<{_v==_1}> char_2::C string_3 !stringSize_4::I frm_5::I !to_6::I = case (StdBool.not (<{StdInt.<_17}> to_6 stringSize_4)) (True -> _predefined._Cons (<{StdString.%_10}> string_3 (_Tuple2 frm_5 (<{StdInt.-_7}> to_6 1))) _predefined._Nil) (False -> case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 (select _vArray_0::<{_SystemArray.Array;}> 3 string_3 to_6) char_2) (True -> _predefined._Cons (<{StdString.%_10}> string_3 (_Tuple2 frm_5 (<{StdInt.-_7}> to_6 1))) (<{compile.splitBy`_61}> _vArray_0 <{_v==_1}> char_2 string_3 stringSize_4 (<{StdInt.+_6}> to_6 1) (<{StdInt.+_6}> to_6 1))) (False -> <{compile.splitBy`_61}> _vArray_0 <{_v==_1}> char_2 string_3 stringSize_4 frm_5 (<{StdInt.+_6}> to_6 1)) ) 
<{compile.splitBy`_62}> !<{_v==_0}> char_1::C string_2 !stringSize_3::I frm_4::I !to_5::I = case (StdBool.not (<{StdInt.<_17}> to_5 stringSize_3)) (True -> _predefined._Cons (<{StdString.%_10}> string_2 (_Tuple2 frm_4 (<{StdInt.-_7}> to_5 1))) _predefined._Nil) (False -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 (_SystemArray.select_19 string_2 to_5) char_1) (True -> _predefined._Cons (<{StdString.%_10}> string_2 (_Tuple2 frm_4 (<{StdInt.-_7}> to_5 1))) (<{compile.splitBy`_62}> <{_v==_0}> char_1 string_2 stringSize_3 (<{StdInt.+_6}> to_5 1) (<{StdInt.+_6}> to_5 1))) (False -> <{compile.splitBy`_62}> <{_v==_0}> char_1 string_2 stringSize_3 frm_4 (<{StdInt.+_6}> to_5 1)) ) 
<{compile.splitBy`_63}> char_0::C string_1 !stringSize_2::I frm_3::I !to_4::I = case (StdBool.not (<{StdInt.<_17}> to_4 stringSize_2)) (True -> _predefined._Cons (<{StdString.%_10}> string_1 (_Tuple2 frm_3 (<{StdInt.-_7}> to_4 1))) _predefined._Nil) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_1 to_4) char_0) (True -> _predefined._Cons (<{StdString.%_10}> string_1 (_Tuple2 frm_3 (<{StdInt.-_7}> to_4 1))) (<{compile.splitBy`_63}> char_0 string_1 stringSize_2 (<{StdInt.+_6}> to_4 1) (<{StdInt.+_6}> to_4 1))) (False -> <{compile.splitBy`_63}> char_0 string_1 stringSize_2 frm_3 (<{StdInt.+_6}> to_4 1)) ) 
compile.splitBy char_0::C !string_1 = <{compile.splitBy`_63}> char_0 string_1 (_SystemArray.size_20 string_1) 0 0
<{compile.c;248;40_28}> !_vArray_0 !<{_v+++_1}> !g_l_2 = <{compile.g_c1;248;48_87}> g_l_2 <{_v+++_1}> _vArray_0
<{compile.g_c1;248;48_87}> !g_l_0 <{_v+++_1}> _vArray_2 = case g_l_0 (_predefined._Cons path_1_0 g_t_1_1 -> _predefined._Cons (select <{_v+++_1}>::<{StdOverloaded.+++;}> 0 path_1_0 (select _vArray_2::<{_SystemArray.Array;}> 5 (select _vArray_2::<{_SystemArray.Array;}> 0 1) 0 '/')) (<{compile.c;248;40_28}> _vArray_2 <{_v+++_1}> g_t_1_1)) (_ -> _predefined._Nil)
<{compile.c;248;40_64}> !<{_v+++_0}> !g_l_1 = <{compile.g_c1;248;48_88}> g_l_1 <{_v+++_0}>
<{compile.g_c1;248;48_88}> !g_l_0 <{_v+++_1}> = case g_l_0 (_predefined._Cons path_1_0 g_t_1_1 -> _predefined._Cons (select <{_v+++_1}>::<{StdOverloaded.+++;}> 0 path_1_0 (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/')) (<{compile.c;248;40_64}> <{_v+++_1}> g_t_1_1)) (_ -> _predefined._Nil)
<{compile.c;248;40_65}> !g_l_0 = <{compile.g_c1;248;48_89}> g_l_0
<{compile.g_c1;248;48_89}> !g_l_0 = case g_l_0 (_predefined._Cons path_1_0 g_t_1_1 -> _predefined._Cons (<{StdString.+++_11}> path_1_0 (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/')) (<{compile.c;248;40_65}> g_t_1_1)) (_ -> _predefined._Nil)
compile.splitPaths !paths_0 = <{compile.c;248;40_65}> (compile.splitBy ':' paths_0)
compile.stripQuotes !string_0 = let stringSize_1_0::I = _SystemArray.size_20 string_0 in case (case (<{StdInt.<_17}> 1 stringSize_1_0) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_0 0) '"') (True -> <{StdChar.==_18}> (_SystemArray.select_19 string_0 (<{StdInt.-_7}> stringSize_1_0 1)) '"') (False -> False) ) (False -> False) ) (True -> <{StdString.%_10}> string_0 (_Tuple2 1 (<{StdInt.-_7}> stringSize_1_0 2))) (False -> string_0) 
compile.parseCommandLine !_x_0 options_1 = case _x_0 (_predefined._Nil -> _Tuple3 _predefined._Nil _predefined._Nil options_1) (_predefined._Cons arg1_1_0 _x_1_1 -> case arg1_1_0 ("-o" -> case _x_1_1 (_predefined._Cons outputPathName_3_0 args_3_1 -> case options_1 (compile._CoclOptions moduleName_4_0 pathName_4_1 outputPathName_4_2 errorPath_4_3 errorMode_4_4 outPath_4_5 outMode_4_6 searchPaths_4_7 listTypes_4_8 compile_for_dynamics_4_9 compile_with_fusion_4_10 dump_core_4_11 strip_unused_4_12 compile_with_generics_4_13 generate_sapl_4_14 -> compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [2:outputPathName_3_0])) ) ) ("-P" -> case _x_1_1 (_predefined._Cons searchPathsString_3_0 args_3_1 -> case options_1 (compile._CoclOptions moduleName_4_0 pathName_4_1 outputPathName_4_2 errorPath_4_3 errorMode_4_4 outPath_4_5 outMode_4_6 searchPaths_4_7 listTypes_4_8 compile_for_dynamics_4_9 compile_with_fusion_4_10 dump_core_4_11 strip_unused_4_12 compile_with_generics_4_13 generate_sapl_4_14 -> let _x_5_0 = compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [7:update (select options_1::compile._CoclOptions 7)::scanner._SearchPaths [1:compile.splitPaths searchPathsString_3_0]]) in _Tuple3 (_predefined._Cons arg1_1_0 (_predefined._Cons searchPathsString_3_0 (select _x_5_0::_Tuple3 0))) (select _x_5_0::_Tuple3 1) (select _x_5_0::_Tuple3 2)) ) ) ("-RO" -> case _x_1_1 (_predefined._Cons outPath_3_0 args_3_1 -> let _x_4_0 = compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [5:compile.stripQuotes outPath_3_0,6:1]) in _Tuple3 (_predefined._Cons arg1_1_0 (_predefined._Cons outPath_3_0 (select _x_4_0::_Tuple3 0))) (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)) ) ("-RAO" -> case _x_1_1 (_predefined._Cons outPath_3_0 args_3_1 -> let _x_4_0 = compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [5:compile.stripQuotes outPath_3_0,6:2]) in _Tuple3 (_predefined._Cons arg1_1_0 (_predefined._Cons outPath_3_0 (select _x_4_0::_Tuple3 0))) (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)) ) ("-RE" -> case _x_1_1 (_predefined._Cons errorPath_3_0 args_3_1 -> let _x_4_0 = compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [3:compile.stripQuotes errorPath_3_0,4:1]) in _Tuple3 (_predefined._Cons arg1_1_0 (_predefined._Cons errorPath_3_0 (select _x_4_0::_Tuple3 0))) (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)) ) ("-RAE" -> case _x_1_1 (_predefined._Cons errorPath_3_0 args_3_1 -> let _x_4_0 = compile.parseCommandLine args_3_1 (update options_1::compile._CoclOptions [3:compile.stripQuotes errorPath_3_0,4:2]) in _Tuple3 (_predefined._Cons arg1_1_0 (_predefined._Cons errorPath_3_0 (select _x_4_0::_Tuple3 0))) (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)) ) ("-id" -> case _x_1_1 (_predefined._Cons compiler_id_string_3_0 args_3_1 -> let compiler_id_4_0::I = StdInt.toInt_23 compiler_id_string_3_0 in case (<{StdInt.==_16}> (CoclSystemDependent.set_compiler_id compiler_id_4_0) compiler_id_4_0) (True -> compile.parseCommandLine args_3_1 options_1) ) ) ("-dynamics" -> let _x_3_0 = compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [9:True]) in _Tuple3 (_predefined._Cons arg1_1_0 (select _x_3_0::_Tuple3 0)) (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)) ("-fusion" -> let _x_3_0 = compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [10:True]) in _Tuple3 (_predefined._Cons arg1_1_0 (select _x_3_0::_Tuple3 0)) (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)) ("-dump" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [11:True])) ("-strip" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [12:True])) ("-generics" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [13:True])) ("-lattr" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [8:update (select options_1::compile._CoclOptions 8)::frontend._ListTypesOption [0:False]])) ("-lt" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [8:update (select options_1::compile._CoclOptions 8)::frontend._ListTypesOption [1:frontend.ListTypesInferred]])) ("-lset" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [8:update (select options_1::compile._CoclOptions 8)::frontend._ListTypesOption [1:frontend.ListTypesStrictExports]])) ("-lat" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [8:update (select options_1::compile._CoclOptions 8)::frontend._ListTypesOption [1:frontend.ListTypesAll]])) ("-sapl" -> compile.parseCommandLine _x_1_1 (update options_1::compile._CoclOptions [14:True])) (_ -> case (<{StdChar.==_18}> (_SystemArray.select_19 arg1_1_0 0) '-') (True -> let _x_3_0 = compile.parseCommandLine _x_1_1 options_1 in _Tuple3 (_predefined._Cons arg1_1_0 (select _x_3_0::_Tuple3 0)) (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)) (False -> let _x_3_0 = compile.parseCommandLine _x_1_1 options_1 in _Tuple3 (select _x_3_0::_Tuple3 0) (_predefined._Cons arg1_1_0 (select _x_3_0::_Tuple3 1)) (select _x_3_0::_Tuple3 2)) )) 
compile.stripExtension !extension_0 !string_1 = let stringSize_1_0::I = _SystemArray.size_20 string_1, extensionSize_1_1::I = _SystemArray.size_20 extension_0 in case (case (StdBool.not (<{StdInt.<_17}> stringSize_1_0 extensionSize_1_1)) (True -> <{StdString.==_2}> (<{StdString.%_10}> string_1 (_Tuple2 (<{StdInt.-_7}> stringSize_1_0 extensionSize_1_1) (<{StdInt.-_7}> stringSize_1_0 1))) extension_0) (False -> False) ) (True -> <{StdString.%_10}> string_1 (_Tuple2 0 (<{StdInt.-_7}> (<{StdInt.-_7}> stringSize_1_0 extensionSize_1_1) 1))) (False -> string_1) 
compile.baseName !path_0 = StdList.last (compile.splitBy '/' path_0)
compile.prependModulePath_29 !options_0 = case options_0 (compile._CoclOptions moduleName_1_0 pathName_1_1 outputPathName_1_2 errorPath_1_3 errorMode_1_4 outPath_1_5 outMode_1_6 searchPaths_1_7 listTypes_1_8 compile_for_dynamics_1_9 compile_with_fusion_1_10 dump_core_1_11 strip_unused_1_12 compile_with_generics_1_13 generate_sapl_1_14 -> update options_0::compile._CoclOptions [0:compile.baseName pathName_1_1]) 
compile.openPath !path_0 mode_1::I files_2 = case (<{StdString.==_2}> path_0 "_stderr_") (True -> _Tuple3 True StdFile.stderr files_2) (False -> case (<{StdString.==_2}> path_0 "_stderr_") (True -> let _x_3_0 = StdFile.stdio_29 files_2 in _Tuple3 True (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) (False -> StdFile.fopen_27 path_0 mode_1 files_2) ) 
compile.find_last_dir_separator_i_24::I !_vArray_0 s_1 !i_2::I = case (case (StdBool.not (<{StdInt.<_17}> i_2 0)) (True -> StdBool.not (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 s_1 i_2) '/')) (False -> False) ) (True -> compile.find_last_dir_separator_i_24 _vArray_0 s_1 (<{StdInt.-_7}> i_2 1)) (False -> i_2) 
compile.find_last_dir_separator_i_26::I !_vArray_0 s_1 = compile.find_last_dir_separator_i_24 _vArray_0 s_1 (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_1) 1)
compile.find_last_dot_i_25::I !_vArray_0 !last_dir_separator_i_1::I s_2 !i_3::I = case (case (<{StdInt.<_17}> last_dir_separator_i_1 i_3) (True -> StdBool.not (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 s_2 i_3) '.')) (False -> False) ) (True -> compile.find_last_dot_i_25 _vArray_0 last_dir_separator_i_1 s_2 (<{StdInt.-_7}> i_3 1)) (False -> i_3) 
compile.find_last_dot_i_27::I !_vArray_0 !last_dir_separator_i_1::I s_2 = compile.find_last_dot_i_25 _vArray_0 last_dir_separator_i_1 s_2 (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_2) 1)
<{compile.cu;41;92_21}> !_vArray_0 !_vArray_1 dir_and_module_name_2 c_a_3 !c_i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> let c_2_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 dir_and_module_name_2 c_i_4 in <{compile.cu;41;92_21}> _vArray_0 _vArray_1 dir_and_module_name_2 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{compile._if;41;59_90}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5) (False -> c_a_3) 
<{compile._if;41;59_90}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{compile.cu;46;92_23}> !<{_v<_0}> !_vone_1 !<{_v+_2}> !_vone_3 !<{_v+_4}> c_l_i_5 i_6 g_s_7 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_7 i_6)) (True -> <{compile.cu;46;92_23}> <{_v<_0}> _vone_1 <{_v+_2}> _vone_3 <{_v+_4}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_5 (select _vone_1::<{StdOverloaded.one;}> 0)) (select <{_v+_4}>::<{StdOverloaded.+;}> 0 i_6 (select _vone_3::<{StdOverloaded.one;}> 0)) g_s_7) (False -> c_l_i_5) 
<{compile.cu;46;92_22}> !_vArray_0 !_vArray_1 dir_and_module_name_2 c_a_3 c_i_4::I !i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 i_5)) (True -> let c_2_0::C = select _vArray_0::<{_SystemArray.Array;}> 3 dir_and_module_name_2 i_5 in <{compile.cu;46;92_22}> _vArray_0 _vArray_1 dir_and_module_name_2 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{compile._if;46;59_91}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) (<{StdInt.+_6}> i_5 StdInt.one_11) g_s_6) (False -> c_a_3) 
<{compile._if;46;59_91}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
compile.find_last_dir_separator_i_67::I s_0 !i_1::I = case (case (StdBool.not (<{StdInt.<_17}> i_1 0)) (True -> StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 s_0 i_1) '/')) (False -> False) ) (True -> compile.find_last_dir_separator_i_67 s_0 (<{StdInt.-_7}> i_1 1)) (False -> i_1) 
compile.find_last_dir_separator_i_66::I !s_0 = compile.find_last_dir_separator_i_67 s_0 (<{StdInt.-_7}> (_SystemArray.size_20 s_0) 1)
compile.find_last_dot_i_69::I !last_dir_separator_i_0::I s_1 !i_2::I = case (case (<{StdInt.<_17}> last_dir_separator_i_0 i_2) (True -> StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 s_1 i_2) '.')) (False -> False) ) (True -> compile.find_last_dot_i_69 last_dir_separator_i_0 s_1 (<{StdInt.-_7}> i_2 1)) (False -> i_2) 
compile.find_last_dot_i_68::I !last_dir_separator_i_0::I !s_1 = compile.find_last_dot_i_69 last_dir_separator_i_0 s_1 (<{StdInt.-_7}> (_SystemArray.size_20 s_1) 1)
<{compile.cu;41;92_70}> !_vArray_0 dir_and_module_name_1 c_a_2 !c_i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let c_2_0::C = _SystemArray.select_19 dir_and_module_name_1 c_i_3 in <{compile.cu;41;92_70}> _vArray_0 dir_and_module_name_1 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (<{compile._if;41;59_92}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4) (False -> c_a_2) 
<{compile._if;41;59_92}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{compile.cu;46;92_71}> !_vone_0 !<{_v+_1}> !_vone_2 !<{_v+_3}> c_l_i_4 !i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 i_5)) (True -> <{compile.cu;46;92_71}> _vone_0 <{_v+_1}> _vone_2 <{_v+_3}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_4 (select _vone_0::<{StdOverloaded.one;}> 0)) (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_5 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_6) (False -> c_l_i_4) 
<{compile.cu;46;92_72}> !_vArray_0 dir_and_module_name_1 c_a_2 c_i_3::I !i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 i_4)) (True -> let c_2_0::C = _SystemArray.select_19 dir_and_module_name_1 i_4 in <{compile.cu;46;92_72}> _vArray_0 dir_and_module_name_1 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (<{compile._if;46;59_93}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) (<{StdInt.+_6}> i_4 StdInt.one_11) g_s_5) (False -> c_a_2) 
<{compile._if;46;59_93}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{compile.cu;41;92_73}> dir_and_module_name_0 !c_a_1 !c_i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let c_2_0::C = _SystemArray.select_19 dir_and_module_name_0 c_i_2 in <{compile.cu;41;92_73}> dir_and_module_name_0 (_SystemArray.update_21 c_a_1 c_i_2 (<{compile._if;41;59_94}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3) (False -> c_a_1) 
<{compile._if;41;59_94}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{compile.cu;46;92_74}>::I !<{_v+_0}> !_vone_1 !<{_v+_2}> c_l_i_3::I !i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 i_4)) (True -> <{compile.cu;46;92_74}> <{_v+_0}> _vone_1 <{_v+_2}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 c_l_i_3 StdInt.one_11) (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_4 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_5) (False -> c_l_i_3) 
<{compile.cu;46;92_75}> dir_and_module_name_0 !c_a_1 c_i_2::I !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> let c_2_0::C = _SystemArray.select_19 dir_and_module_name_0 i_3 in <{compile.cu;46;92_75}> dir_and_module_name_0 (_SystemArray.update_21 c_a_1 c_i_2 (<{compile._if;46;59_95}> (<{StdChar.==_18}> c_2_0 '.') c_2_0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) (<{StdInt.+_6}> i_3 StdInt.one_11) g_s_4) (False -> c_a_1) 
<{compile._if;46;59_95}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{compile.cu;46;92_76}>::I !_vone_0 !<{_v+_1}> !c_l_i_2::I !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> <{compile.cu;46;92_76}> _vone_0 <{_v+_1}> (<{StdInt.+_6}> c_l_i_2 StdInt.one_11) (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_3 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_4) (False -> c_l_i_2) 
<{compile.cu;46;92_77}>::I !<{_v+_0}> !c_l_i_1::I !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> <{compile.cu;46;92_77}> <{_v+_0}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_2 StdInt.one_11) g_s_3) (False -> c_l_i_1) 
<{compile.cu;46;92_78}>::I !c_l_i_0::I !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> <{compile.cu;46;92_78}> (<{StdInt.+_6}> c_l_i_0 StdInt.one_11) (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2) (False -> c_l_i_0) 
compile.make_clean_system_files_dir_and_file_name !dir_and_module_name_0 = let last_dir_separator_i_1_0::I = compile.find_last_dir_separator_i_66 dir_and_module_name_0, last_dot_i_1_1::I = compile.find_last_dot_i_68 last_dir_separator_i_1_0 dir_and_module_name_0 in case (<{StdInt.<_17}> last_dot_i_1_1 0) (True -> <{_Tuple2!3}> "Clean System Files" dir_and_module_name_0) (False -> case (<{StdInt.<_17}> last_dir_separator_i_1_0 0) (True -> let g_s_4_0::I = <{StdInt.-_7}> last_dot_i_1_1 1 in <{_Tuple2!3}> (<{StdString.+++_11}> (<{compile.cu;41;92_73}> dir_and_module_name_0 (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s_4_0 StdInt.one_11)) 0 g_s_4_0) (<{StdString.+++_11}> (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') "Clean System Files")) (<{StdString.%_10}> dir_and_module_name_0 (_Tuple2 (<{StdInt.+_6}> last_dot_i_1_1 1) (<{StdInt.-_7}> (_SystemArray.size_20 dir_and_module_name_0) 1)))) (False -> case (<{StdInt.==_16}> last_dot_i_1_1 last_dir_separator_i_1_0) (True -> <{_Tuple2!3}> (<{StdString.+++_11}> (<{StdString.%_10}> dir_and_module_name_0 (_Tuple2 0 last_dir_separator_i_1_0)) "Clean System Files") (<{StdString.%_10}> dir_and_module_name_0 (_Tuple2 (<{StdInt.+_6}> last_dot_i_1_1 1) (<{StdInt.-_7}> (_SystemArray.size_20 dir_and_module_name_0) 1)))) (False -> <{_Tuple2!3}> (<{StdString.+++_11}> (<{StdString.%_10}> dir_and_module_name_0 (_Tuple2 0 last_dir_separator_i_1_0)) (<{StdString.+++_11}> (<{compile.cu;46;92_75}> dir_and_module_name_0 (_SystemArray._createArray_16 (<{compile.cu;46;92_78}> 0 (<{StdInt.+_6}> last_dir_separator_i_1_0 1) (<{StdInt.-_7}> last_dot_i_1_1 1))) 0 (<{StdInt.+_6}> last_dir_separator_i_1_0 1) (<{StdInt.-_7}> last_dot_i_1_1 1)) (<{StdString.+++_11}> (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') "Clean System Files"))) (<{StdString.%_10}> dir_and_module_name_0 (_Tuple2 (<{StdInt.+_6}> last_dot_i_1_1 1) (<{StdInt.-_7}> (_SystemArray.size_20 dir_and_module_name_0) 1)))) ) ) 
compile.open_file_in_clean_system_files_folder !mod_dir_0 !mod_name_1 !file_extension_2 !file_mode_3::I !error_4 !files_5 = let icl_mod_pathname_1_0 = <{StdString.+++_11}> mod_dir_0 (<{StdString.+++_11}> (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') mod_name_1), _x_1_1 = compile.make_clean_system_files_dir_and_file_name icl_mod_pathname_1_0, csf_dirictory_path_1_2 = select _x_1_1::_Tuple2 0, file_name_1_3 = select _x_1_1::_Tuple2 1, file_path_1_4 = <{StdString.+++_11}> csf_dirictory_path_1_2 (<{StdString.+++_11}> (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') (<{StdString.+++_11}> file_name_1_3 file_extension_2)), _x_1_5 = StdFile.fopen_27 file_path_1_4 file_mode_3 files_5 in case (select _x_1_5::_Tuple3 0) (True -> <{_Tuple4!15}> True (general.Yes (select _x_1_5::_Tuple3 1)) error_4 (select _x_1_5::_Tuple3 2)) (False -> let files_3_0 = select _x_1_5::_Tuple3 2, _x_3_1 = CoclSystemDependent.ensureCleanSystemFilesExists csf_dirictory_path_1_2 files_3_0 in case (StdBool.not (select _x_3_1::_Tuple2 0)) (True -> <{_Tuple4!15}> False general.No (StdFile.fwrites (<{StdString.+++_11}> "can't create folder \"" (<{StdString.+++_11}> csf_dirictory_path_1_2 "\"\n")) error_4) (select _x_3_1::_Tuple2 1)) (False -> let files_5_0 = select _x_3_1::_Tuple2 1, _x_5_1 = StdFile.fopen_27 file_path_1_4 file_mode_3 files_5_0 in case (StdBool.not (select _x_5_1::_Tuple3 0)) (True -> <{_Tuple4!15}> False general.No (StdFile.fwrites (<{StdString.+++_11}> "couldn't open file \"" (<{StdString.+++_11}> file_path_1_4 "\"\n")) error_4) (select _x_5_1::_Tuple3 2)) (False -> <{_Tuple4!15}> True (general.Yes (select _x_5_1::_Tuple3 1)) error_4 (select _x_5_1::_Tuple3 2)) ) ) 
compile.openTclFile !mod_dir_0 !mod_name_1 !error_2 !files_3 = compile.open_file_in_clean_system_files_folder mod_dir_0 mod_name_1 ".tcl" 4 error_2 files_3
compile.openSaplFile !mod_dir_0 !mod_name_1 !error_2 !files_3 = compile.open_file_in_clean_system_files_folder mod_dir_0 mod_name_1 ".sapl" 4 error_2 files_3
<{compile.cu;335;51_30}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{compile.cu;335;51_30}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
compile.closeFile !_x_0 files_1 = case _x_0 (general.Yes file_1_0 -> StdFile.fclose_26 file_1_0 files_1) (_ -> <{_Tuple2!1}> True files_1)
compile.appendRedirection_31 !arg_0 = <{compile._c;354;27_96}> arg_0
<{compile._c;354;27_96}> !arg_0 = case arg_0 ("-RE" -> "-RAE") ("-RO" -> "-RAO") (_ -> arg_0)
<{compile.cu;387;36_32}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{compile.cu;387;36_32}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{compile.cu;335;51_79}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = compile.uselect_43 g_a_4 c_i_2 in <{compile.cu;335;51_79}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{compile.cu;387;36_80}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = compile.uselect_59 g_a_4 c_i_2 in <{compile.cu;387;36_80}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{compile.cu;335;51_81}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = compile.uselect_43 g_a_3 c_i_1 in <{compile.cu;335;51_81}> (compile.update_42 c_a_0 c_i_1 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
<{compile.cu;387;36_82}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = compile.uselect_59 g_a_3 c_i_1 in <{compile.cu;387;36_82}> (compile.update_58 c_a_0 c_i_1 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
compile.compileModule !options_0 backendArgs_1 !cache_2 files_3 = case cache_2 (compile._DclCache dcl_modules_1_0 functions_and_macros_1_1 predef_symbols_1_2 hash_table_1_3 heaps_1_4 -> let _x_2_0 = compile.openPath (select options_0::compile._CoclOptions 3) (select options_0::compile._CoclOptions 4) files_3 in case (StdBool.not (select _x_2_0::_Tuple3 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't open error file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 3) "\"\n"))) (False -> let files_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = compile.openPath (select options_0::compile._CoclOptions 5) (select options_0::compile._CoclOptions 6) files_4_0 in case (StdBool.not (select _x_4_1::_Tuple3 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't open out file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 5) "\"\n"))) (False -> let files_6_0 = select _x_4_1::_Tuple3 2, _x_6_1 = scanner.fopenInSearchPaths (select options_0::compile._CoclOptions 0) ".icl" (select options_0::compile._CoclOptions 7) 3 (filesystem.fmodificationtime (<{StdFile.FileSystem;}> StdFile.fclose_26 StdFile.fopen_27 StdFile.sfopen_28 StdFile.stdio_29)) files_6_0, opt_file_dir_time_6_2 = select _x_6_1::_Tuple2 0, _x_6_3 = <{compile._c;293;13_99}> opt_file_dir_time_6_2, mbModPath_6_4 = select _x_6_3::_Tuple2 1, _x_6_5 = <{compile._c;298;11_98}> mbModPath_6_4 options_0 error_6_10 files_6_9, _x_6_6 = <{compile._c;306;11_97}> (_Tuple2 (select options_0::compile._CoclOptions 14) mbModPath_6_4) options_0 error_6_8 files_6_7, files_6_7 = select _x_6_5::_Tuple4 3, error_6_8 = select _x_6_5::_Tuple4 2, files_6_9 = select _x_6_1::_Tuple2 1, error_6_10 = select _x_2_0::_Tuple3 1 in case (StdBool.not (compile._f100_100 (select _x_6_5::_Tuple4 0) _x_6_6)) (True -> let out_8_0 = select _x_4_1::_Tuple3 1, files_8_1 = select _x_6_6::_Tuple4 3, _x_8_2 = StdFile.fclose_26 out_8_0 files_8_1 in case (StdBool.not (select _x_8_2::_Tuple2 0)) (True -> StdMisc.abort "couldn't close stdio") (False -> let error_10_0 = select _x_6_6::_Tuple4 2, files_10_1 = select _x_8_2::_Tuple2 1, _x_10_2 = StdFile.fclose_26 error_10_0 files_10_1 in case (StdBool.not (select _x_10_2::_Tuple2 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't close out file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 5) "\"\n"))) (False -> <{_Tuple3!7}> False cache_2 (select _x_10_2::_Tuple2 1)) ) ) (False -> let opt_file_dir_time_8_0 = select _x_6_3::_Tuple2 0, _x_8_1 = hashtable.putIdentInHashTable (select options_0::compile._CoclOptions 0) (hashtable.IC_Module hashtable.NoQualifiedIdents) hash_table_1_3, module_8_2 = select (select _x_8_1::_Tuple2 0)::hashtable._BoxedIdent 0, list_inferred_types_8_3 = <{compile._if;323;13_101}> (<{frontend.==_1}> (select (select options_0::compile._CoclOptions 8)::frontend._ListTypesOption 1) frontend.ListTypesInferred) options_0, hash_table_8_4 = select _x_8_1::_Tuple2 1, files_8_5 = select _x_6_6::_Tuple4 3, _x_8_6 = StdFile.stdio_29 files_8_5, files_8_7 = select _x_8_6::_Tuple2 1, error_8_8 = select _x_6_6::_Tuple4 2, io_8_9 = select _x_8_6::_Tuple2 0, out_8_10 = select _x_4_1::_Tuple3 1, tcl_file_8_11 = select _x_6_5::_Tuple4 1, _x_8_12 = frontend.frontEndInterface opt_file_dir_time_8_0 (frontend._FrontEndOptions frontend.FrontEndPhaseAll (select options_0::compile._CoclOptions 13) (select options_0::compile._CoclOptions 10) (select options_0::compile._CoclOptions 12) (select options_0::compile._CoclOptions 14)) module_8_2 (select options_0::compile._CoclOptions 7) dcl_modules_1_0 functions_and_macros_1_1 list_inferred_types_8_3 predef_symbols_1_2 hash_table_8_4 (filesystem.fmodificationtime (<{StdFile.FileSystem;}> StdFile.fclose_26 StdFile.fopen_27 StdFile.sfopen_28 StdFile.stdio_29)) files_8_7 error_8_8 io_8_9 out_8_10 tcl_file_8_11 heaps_1_4, tcl_file_8_13 = select _x_8_12::_Tuple12 10, files_8_14 = select _x_8_12::_Tuple12 6, _x_8_15 = compile.closeFile tcl_file_8_13 files_8_14 in case (StdBool.not (select _x_8_15::_Tuple2 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't close tcl file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 1) "tcl\"\n"))) (False -> let io_10_0 = select _x_8_12::_Tuple12 8, files_10_1 = select _x_8_15::_Tuple2 1, _x_10_2 = StdFile.fclose_26 io_10_0 files_10_1 in case (StdBool.not (select _x_10_2::_Tuple2 0)) (True -> StdMisc.abort "couldn't close stdio") (False -> let optionalSyntaxTree_12_0 = select _x_8_12::_Tuple12 0, _x_12_1 = <{compile._c;346;11_102}> optionalSyntaxTree_12_0 options_0 backendArgs_1 predef_symbols_12_6 main_dcl_module_n_12_5 heaps_12_7 sapl_file_12_8 error_12_9 out_12_10, sapl_file_12_2 = select _x_12_1::_Tuple6 3, files_12_3 = select _x_10_2::_Tuple2 1, _x_12_4 = compile.closeFile sapl_file_12_2 files_12_3, main_dcl_module_n_12_5::I = select _x_8_12::_Tuple12 3, predef_symbols_12_6 = select _x_8_12::_Tuple12 4, heaps_12_7 = select _x_8_12::_Tuple12 11, sapl_file_12_8 = select _x_6_6::_Tuple4 1, error_12_9 = select _x_8_12::_Tuple12 7, out_12_10 = select _x_8_12::_Tuple12 9 in case (StdBool.not (select _x_12_4::_Tuple2 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't close sapl file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 1) "sapl\"\n"))) (False -> let out_14_0 = select _x_12_1::_Tuple6 5, files_14_1 = select _x_12_4::_Tuple2 1, _x_14_2 = StdFile.fclose_26 out_14_0 files_14_1 in case (StdBool.not (select _x_14_2::_Tuple2 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't close out file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 5) "\"\n"))) (False -> let error_16_0 = select _x_12_1::_Tuple6 4, files_16_1 = select _x_14_2::_Tuple2 1, _x_16_2 = StdFile.fclose_26 error_16_0 files_16_1 in case (StdBool.not (select _x_16_2::_Tuple2 0)) (True -> StdMisc.abort (<{StdString.+++_11}> "couldn't close error file \"" (<{StdString.+++_11}> (select options_0::compile._CoclOptions 3) "\"\n"))) (False -> let success_18_0::B = select _x_12_1::_Tuple6 0 in case success_18_0 (True -> let _x_20_0::I = compile.usize_60 (select _x_8_12::_Tuple12 2), g_s2_20_1 = <{StdInt.-_7}> (select _x_20_0::_Tuple2 0) 1, _x_20_2 = compile.uselect_59 (<{compile.cu;387;36_82}> (compile._createArray_53 (<{StdInt.+_6}> g_s2_20_1 StdInt.one_11)) 0 g_s2_20_1 (select _x_20_0::_Tuple2 1)) main_dcl_module_n_12_5, _x_20_3::I = compile.usize_44 predef_symbols_12_6, g_s2_20_4 = <{StdInt.-_7}> (select _x_20_3::_Tuple2 0) 1 in <{_Tuple3!7}> success_18_0 (compile._DclCache (compile.update_58 (select _x_20_2::_Tuple2 1) main_dcl_module_n_12_5 (update (select _x_20_2::_Tuple2 0)::syntax._DclModule [11:False])) (select _x_8_12::_Tuple12 1) (<{compile.cu;335;51_81}> (compile._createArray_37 (<{StdInt.+_6}> g_s2_20_4 StdInt.one_11)) 0 g_s2_20_4 (select _x_20_3::_Tuple2 1)) (select _x_8_12::_Tuple12 5) (select _x_12_1::_Tuple6 2)) (select _x_16_2::_Tuple2 1)) (False -> let _x_20_0::I = compile.usize_44 predef_symbols_12_6, g_s2_20_1 = <{StdInt.-_7}> (select _x_20_0::_Tuple2 0) 1 in <{_Tuple3!7}> success_18_0 (compile._DclCache (select _x_8_12::_Tuple12 2) (select _x_8_12::_Tuple12 1) (<{compile.cu;335;51_81}> (compile._createArray_37 (<{StdInt.+_6}> g_s2_20_1 StdInt.one_11)) 0 g_s2_20_1 (select _x_20_0::_Tuple2 1)) (select _x_8_12::_Tuple12 5) (select _x_12_1::_Tuple6 2)) (select _x_16_2::_Tuple2 1)) ) ) ) ) ) ) ) ) ) 
<{compile._c;346;11_102}> !optionalSyntaxTree_0 options_1 backendArgs_2 predef_symbols_3 main_dcl_module_n_4::I heaps_5 sapl_file_6 error_7 out_8 = case optionalSyntaxTree_0 (general.Yes syntaxTree_1_0 -> let _x_2_0 = backendinterface.backEndInterface (compile.baseName (select options_1::compile._CoclOptions 1)) (StdList.map compile.appendRedirection_31 backendArgs_2) (select options_1::compile._CoclOptions 8) (select options_1::compile._CoclOptions 5) predef_symbols_3 syntaxTree_1_0 main_dcl_module_n_4 heaps_5 sapl_file_6 error_7 out_8 in _Tuple6 (select _x_2_0::_Tuple5 0) (select (select syntaxTree_1_0::frontend._FrontEndSyntaxTree 0)::syntax._IclModule 1) (select _x_2_0::_Tuple5 1) (select _x_2_0::_Tuple5 2) (select _x_2_0::_Tuple5 3) (select _x_2_0::_Tuple5 4)) (general.No -> _Tuple6 False (compile._createArray_45 0) heaps_5 sapl_file_6 error_7 out_8) 
<{compile._if;323;13_101}> !_x_0::B options_1 = case _x_0 (True -> general.Yes (select (select options_1::compile._CoclOptions 8)::frontend._ListTypesOption 0)) (_ -> general.No)
compile._f100_100::B !_x_0::B _x_1 = case _x_0 (True -> select _x_1::_Tuple4 0) (_ -> False)
<{compile._c;293;13_99}> !opt_file_dir_time_0 = case opt_file_dir_time_0 (general.Yes _x_1_0 -> case _x_1_0 (_Tuple3 _x_2_0 mod_path_2_1 _x_2_2 -> _Tuple2 opt_file_dir_time_0 (general.Yes mod_path_2_1)) ) (general.No -> _Tuple2 opt_file_dir_time_0 general.No) 
<{compile._c;298;11_98}> !mbModPath_0 options_1 error_2 files_3 = case mbModPath_0 (general.Yes mod_path_1_0 -> case (select options_1::compile._CoclOptions 9) (True -> compile.openTclFile mod_path_1_0 (select options_1::compile._CoclOptions 0) error_2 files_3) ) (_ -> _Tuple4 True general.No error_2 files_3)
<{compile._c;306;11_97}> !_x_0 options_1 error_2 files_3 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (True -> case _x_1_1 (general.Yes mod_path_3_0 -> compile.openSaplFile mod_path_3_0 (select options_1::compile._CoclOptions 0) error_2 files_3) ) ) (_ -> _Tuple4 True general.No error_2 files_3)
compile.compile_modules !_x_0 n_compiles_1::I cocl_options_2 args_without_modules_3 cache_4 files_5 = case _x_0 (_predefined._Cons module__1_0 modules_1_1 -> let cocl_options_2_0::B = compile.prependModulePath_29 (update cocl_options_2::compile._CoclOptions [1:compile.stripExtension ".icl" (compile.stripQuotes module__1_0)]), _x_2_1 = compile.compileModule cocl_options_2_0 (<{StdList.++}> args_without_modules_3 (_predefined._Cons module__1_0 _predefined._Nil)) cache_4 files_5, ok_2_2 = select _x_2_1::_Tuple3 0 in case ok_2_2 (True -> compile.compile_modules modules_1_1 (<{StdInt.+_6}> n_compiles_1 1) cocl_options_2_0 args_without_modules_3 (select _x_2_1::_Tuple3 1) (select _x_2_1::_Tuple3 2)) (False -> _Tuple3 ok_2_2 (select _x_2_1::_Tuple3 1) (select _x_2_1::_Tuple3 2)) ) (_predefined._Nil -> _Tuple3 True cache_4 files_5) 
compile.compile !args_0 !cache_1 !files_2 = let _x_1_0 = compile.parseCommandLine args_0 compile.InitialCoclOptions in compile.compile_modules (select _x_1_0::_Tuple3 1) 0 (select _x_1_0::_Tuple3 2) (select _x_1_0::_Tuple3 0) cache_1 files_2
compile.empty_cache !symbol_heap_0 = let _x_1_0 = predef.buildPredefinedSymbols (hashtable.newHashTable symbol_heap_0) in compile._DclCache (compile._createArray_53 0) (_SystemArray._createArray_40 0) (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1) (checksupport._Heaps Heap.newHeap Heap.newHeap (syntax._TypeHeaps Heap.newHeap Heap.newHeap) Heap.newHeap)
compile.foldr_36 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (compile.foldr_36 op_0 r_1 x_1_1)) 
compile.anon_19 !_vArray_0 !<{_v+++_1}> p_2 ps_3 = select <{_v+++_1}>::<{StdOverloaded.+++;}> 0 p_2 (select <{_v+++_1}>::<{StdOverloaded.+++;}> 0 (select _vArray_0::<{_SystemArray.Array;}> 5 (select _vArray_0::<{_SystemArray.Array;}> 0 1) 0 '/') ps_3)
compile.anon_83 !<{_v+++_0}> p_1 ps_2 = select <{_v+++_0}>::<{StdOverloaded.+++;}> 0 p_1 (select <{_v+++_0}>::<{StdOverloaded.+++;}> 0 (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') ps_2)
compile.foldr_84 !<{_v+++_0}> r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> compile.anon_83 <{_v+++_0}> a_1_0 (compile.foldr_84 <{_v+++_0}> r_1 x_1_1)) 
compile.anon_86 !p_0 !ps_1 = <{StdString.+++_11}> p_0 (<{StdString.+++_11}> (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 '/') ps_1)
compile.foldr_85 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> compile.anon_86 a_1_0 (compile.foldr_85 r_0 x_1_1)) 
compile.directoryName !path_0 = compile.foldr_85 "" (StdList.init (compile.splitBy '/' path_0))
<{compile.TD;DclCache}> _x_0::B = _predefined._Nil
<{compile.TD;CoclOptions}> _x_0::B = _predefined._Nil


|| Converted Records
:: compile._DclCache = {!compile.dcl_modules, !compile.functions_and_macros, !compile.predef_symbols, !compile.hash_table, !compile.heaps}

:: compile._CoclOptions = {compile.moduleName, compile.pathName, compile.outputPathName, compile.errorPath, compile.errorMode::I, compile.outPath, compile.outMode::I, compile.searchPaths, compile.listTypes, !compile.compile_for_dynamics::B, !compile.compile_with_fusion::B, !compile.dump_core::B, !compile.strip_unused::B, !compile.compile_with_generics::B, !compile.generate_sapl::B}

