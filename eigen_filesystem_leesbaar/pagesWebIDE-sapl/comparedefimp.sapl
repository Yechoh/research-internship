|| ?module? comparedefimp


comparedefimp.i_fold_st_200 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_200 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.initialyseATypeVars !_x_0 !_x_1 !type_var_heap_2 = case _x_0 (_predefined._Cons _x_1_0 dcl_type_vars_1_1 -> case _x_1_0 (syntax._ATypeVar atv_attribute_2_0 _x_2_1 -> case _x_2_1 (syntax._TypeVar tv_ident_3_0 dcl_tv_info_ptr_3_1 -> case _x_1 (_predefined._Cons _x_4_0 icl_type_vars_4_1 -> case _x_4_0 (syntax._ATypeVar atv_attribute_5_0 _x_5_1 -> case _x_5_1 (syntax._TypeVar tv_ident_6_0 icl_tv_info_ptr_6_1 -> let ptr_and_val_7_0 = _Tuple2 dcl_tv_info_ptr_3_1 (syntax.TVI_TypeVar icl_tv_info_ptr_6_1), ptr_and_val_7_1 = _Tuple2 icl_tv_info_ptr_6_1 (syntax.TVI_TypeVar dcl_tv_info_ptr_3_1) in comparedefimp.initialyseATypeVars dcl_type_vars_1_1 icl_type_vars_4_1 (Heap.writePtr (select ptr_and_val_7_0::_Tuple2 0) (select ptr_and_val_7_0::_Tuple2 1) (Heap.writePtr (select ptr_and_val_7_1::_Tuple2 0) (select ptr_and_val_7_1::_Tuple2 1) type_var_heap_2))) ) ) (_predefined._Nil -> let ptr_and_val_5_0 = _Tuple2 dcl_tv_info_ptr_3_1 syntax.TVI_Empty in comparedefimp.initialyseATypeVars dcl_type_vars_1_1 _predefined._Nil (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) type_var_heap_2)) ) ) ) (_predefined._Nil -> case _x_1 (_predefined._Cons _x_2_0 icl_type_vars_2_1 -> case _x_2_0 (syntax._ATypeVar atv_attribute_3_0 _x_3_1 -> case _x_3_1 (syntax._TypeVar tv_ident_4_0 tv_info_ptr_4_1 -> let ptr_and_val_5_0 = _Tuple2 tv_info_ptr_4_1 syntax.TVI_Empty in comparedefimp.initialyseATypeVars _predefined._Nil icl_type_vars_2_1 (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) type_var_heap_2)) ) ) (_predefined._Nil -> type_var_heap_2) ) 
comparedefimp.initialyseAttributeVars !_x_0 !_x_1 !type_var_heap_2 = case _x_0 (_predefined._Cons _x_1_0 dcl_type_vars_1_1 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 dcl_av_info_ptr_2_1 -> case _x_1 (_predefined._Cons _x_3_0 icl_type_vars_3_1 -> case _x_3_0 (syntax._AttributeVar av_ident_4_0 icl_av_info_ptr_4_1 -> let ptr_and_val_5_0 = _Tuple2 dcl_av_info_ptr_2_1 (syntax.AVI_AttrVar icl_av_info_ptr_4_1), ptr_and_val_5_1 = _Tuple2 icl_av_info_ptr_4_1 (syntax.AVI_AttrVar dcl_av_info_ptr_2_1) in comparedefimp.initialyseAttributeVars dcl_type_vars_1_1 icl_type_vars_3_1 (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) type_var_heap_2))) ) (_predefined._Nil -> let ptr_and_val_4_0 = _Tuple2 dcl_av_info_ptr_2_1 syntax.AVI_Empty in comparedefimp.initialyseAttributeVars dcl_type_vars_1_1 _predefined._Nil (Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) type_var_heap_2)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Cons _x_2_0 icl_type_vars_2_1 -> case _x_2_0 (syntax._AttributeVar av_ident_3_0 av_info_ptr_3_1 -> let ptr_and_val_4_0 = _Tuple2 av_info_ptr_3_1 syntax.AVI_Empty in comparedefimp.initialyseAttributeVars _predefined._Nil icl_type_vars_2_1 (Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) type_var_heap_2)) ) (_predefined._Nil -> type_var_heap_2) ) 
comparedefimp.compare_99 !_vcompare_0 !_vcompare_1 !_x_2 !_x_3 !comp_st_4 = case _x_2 (_Tuple2 x1_1_0 y1_1_1 -> case _x_3 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = select _vcompare_0::<{comparedefimp.compare;}> 0 x1_1_0 x2_2_0 comp_st_4 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_1::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_495 !_vcompare_0 !_vcompare_1 !_x_2 !_x_3 !comp_st_4 = case _x_2 (_Tuple2 x1_1_0 y1_1_1 -> case _x_3 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = select _vcompare_0::<{comparedefimp.compare;}> 0 x1_1_0 x2_2_0 comp_st_4 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_1 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_101 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> case _x_2 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_495 _vcompare_0 _vcompare_0 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_3) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_3) ) (_ -> <{_Tuple2!3}> False comp_st_3)
comparedefimp.fold_st_203 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_203 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.clear_attr_var_57 !_x_0 !attr_var_heap_1 = case _x_0 (syntax.TA_Var _x_1_0 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 av_info_ptr_2_1 -> let ptr_and_val_3_0 = _Tuple2 av_info_ptr_2_1 syntax.AVI_Empty in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) attr_var_heap_1) ) (syntax.TA_RootVar _x_1_0 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 av_info_ptr_2_1 -> let ptr_and_val_3_0 = _Tuple2 av_info_ptr_2_1 syntax.AVI_Empty in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) attr_var_heap_1) ) (_ -> attr_var_heap_1)
comparedefimp.clear_type_var_56 !_x_0 !_x_1 = case _x_0 (syntax._ATypeVar atv_attribute_1_0 _x_1_1 -> case _x_1_1 (syntax._TypeVar tv_ident_2_0 tv_info_ptr_2_1 -> case _x_1 (_Tuple2 type_var_heap_3_0 attr_var_heap_3_1 -> let ptr_and_val_4_0 = _Tuple2 tv_info_ptr_2_1 syntax.TVI_Empty in _Tuple2 (Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) type_var_heap_3_0) (comparedefimp.clear_attr_var_57 atv_attribute_1_0 attr_var_heap_3_1)) ) ) 
comparedefimp.fold_st_496 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_496 x_1_1 (comparedefimp.clear_type_var_56 a_1_0 st_1)) 
comparedefimp.clear_type_vars !vars_0 !type_and_attr_var_heaps_1 = comparedefimp.fold_st_496 vars_0 type_and_attr_var_heaps_1
comparedefimp.compare_100 !<{_v==_0}> !g1_1 !g2_2 !comp_st_3 = <{_Tuple2!3}> (comparedefimp._f718_718 (<{StdInt.==_16}> (select g1_1::syntax._Global 1) (select g2_2::syntax._Global 1)) <{_v==_0}> g1_1 g2_2) comp_st_3
comparedefimp._f718_718::B !_x_0::B <{_v==_1}> g1_2 g2_3 = case _x_0 (True -> select <{_v==_1}>::<{StdOverloaded.==;}> 0 (select g1_2::syntax._Global 0) (select g2_3::syntax._Global 0)) (_ -> False)
comparedefimp.compare_106 !strictness1_0 !strictness2_1 !comp_st_2 = <{_Tuple2!3}> (containers.equal_strictness_lists strictness1_0 strictness2_1) comp_st_2
comparedefimp.compare_vars_74 !_x_0 _x_1 dcl_tv_info_ptr_2 icl_tv_info_ptr_3 type_var_heap_4 = case _x_0 (syntax.TVI_Empty -> case _x_1 (syntax.TVI_Empty -> let ptr_and_val_3_0 = _Tuple2 icl_tv_info_ptr_3 (syntax.TVI_TypeVar dcl_tv_info_ptr_2), ptr_and_val_3_1 = _Tuple2 dcl_tv_info_ptr_2 (syntax.TVI_TypeVar icl_tv_info_ptr_3) in _Tuple2 True (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) (Heap.writePtr (select ptr_and_val_3_1::_Tuple2 0) (select ptr_and_val_3_1::_Tuple2 1) type_var_heap_4))) ) (syntax.TVI_TypeVar dcl_forward_1_0 -> case _x_1 (syntax.TVI_TypeVar icl_forward_2_0 -> _Tuple2 (comparedefimp._f719_719 (<{Heap.==_10}> dcl_forward_1_0 icl_tv_info_ptr_3) icl_forward_2_0 dcl_tv_info_ptr_2) type_var_heap_4) ) (_ -> _Tuple2 True type_var_heap_4)
comparedefimp._f719_719::B !_x_0::B icl_forward_1 dcl_tv_info_ptr_2 = case _x_0 (True -> <{Heap.==_10}> icl_forward_1 dcl_tv_info_ptr_2) (_ -> False)
comparedefimp.compare_108 !_x_0 !_x_1 !comp_st_2 = case _x_0 (syntax._TypeVar tv_ident_1_0 dcl_info_ptr_1_1 -> case _x_1 (syntax._TypeVar tv_ident_2_0 icl_info_ptr_2_1 -> case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_3_0 comp_attr_var_heap_3_1 comp_error_3_2 -> let _x_4_0 = Heap.readPtr dcl_info_ptr_1_1 comp_type_var_heap_3_0, _x_4_1 = Heap.readPtr icl_info_ptr_2_1 (select _x_4_0::_Tuple2 1), _x_4_2 = comparedefimp.compare_vars_74 (select _x_4_0::_Tuple2 0) (select _x_4_1::_Tuple2 0) dcl_info_ptr_1_1 icl_info_ptr_2_1 (select _x_4_1::_Tuple2 1) in <{_Tuple2!3}> (select _x_4_2::_Tuple2 0) (update comp_st_2::comparedefimp._CompareState [0:select _x_4_2::_Tuple2 1])) ) ) 
comparedefimp.compare_vars_73 !_x_0 _x_1 dcl_av_info_ptr_2 icl_av_info_ptr_3 comp_attr_var_heap_4 = case _x_0 (syntax.AVI_Empty -> case _x_1 (syntax.AVI_Empty -> let ptr_and_val_3_0 = _Tuple2 icl_av_info_ptr_3 (syntax.AVI_AttrVar dcl_av_info_ptr_2), ptr_and_val_3_1 = _Tuple2 dcl_av_info_ptr_2 (syntax.AVI_AttrVar icl_av_info_ptr_3) in _Tuple2 True (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) (Heap.writePtr (select ptr_and_val_3_1::_Tuple2 0) (select ptr_and_val_3_1::_Tuple2 1) comp_attr_var_heap_4))) ) (syntax.AVI_AttrVar dcl_forward_1_0 -> case _x_1 (syntax.AVI_AttrVar icl_forward_2_0 -> _Tuple2 (comparedefimp._f720_720 (<{Heap.==_10}> dcl_forward_1_0 icl_av_info_ptr_3) icl_forward_2_0 dcl_av_info_ptr_2) comp_attr_var_heap_4) ) (_ -> _Tuple2 True comp_attr_var_heap_4)
comparedefimp._f720_720::B !_x_0::B icl_forward_1 dcl_av_info_ptr_2 = case _x_0 (True -> <{Heap.==_10}> icl_forward_1 dcl_av_info_ptr_2) (_ -> False)
comparedefimp.compare_107 !_x_0 !_x_1 !comp_st_2 = case _x_0 (syntax._AttributeVar av_ident_1_0 dcl_info_ptr_1_1 -> case _x_1 (syntax._AttributeVar av_ident_2_0 icl_info_ptr_2_1 -> case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_3_0 comp_attr_var_heap_3_1 comp_error_3_2 -> let _x_4_0 = Heap.readPtr dcl_info_ptr_1_1 comp_attr_var_heap_3_1, _x_4_1 = Heap.readPtr icl_info_ptr_2_1 (select _x_4_0::_Tuple2 1), _x_4_2 = comparedefimp.compare_vars_73 (select _x_4_0::_Tuple2 0) (select _x_4_1::_Tuple2 0) dcl_info_ptr_1_1 icl_info_ptr_2_1 (select _x_4_1::_Tuple2 1) in <{_Tuple2!3}> (select _x_4_2::_Tuple2 0) (update comp_st_2::comparedefimp._CompareState [1:select _x_4_2::_Tuple2 1])) ) ) 
comparedefimp.compare_equal_constructor_72 !_x_0 _x_1 comp_st_2 = case _x_0 (syntax.TA_Var dclDef_1_0 -> case _x_1 (syntax.TA_Var iclDef_2_0 -> comparedefimp.compare_107 dclDef_1_0 iclDef_2_0 comp_st_2) ) (syntax.TA_RootVar dclDef_1_0 -> case _x_1 (syntax.TA_RootVar iclDef_2_0 -> comparedefimp.compare_107 dclDef_1_0 iclDef_2_0 comp_st_2) ) (_ -> _Tuple2 True comp_st_2)
comparedefimp.compare_104 !ta1_0 !ta2_1 !comp_st_2 = case (compare_constructor.equal_constructor ta1_0 ta2_1) (True -> comparedefimp.compare_equal_constructor_72 ta1_0 ta2_1 comp_st_2) (False -> <{_Tuple2!3}> False comp_st_2) 
comparedefimp.compare_504 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_108 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_498 !g1_0 !g2_1 !comp_st_2 = <{_Tuple2!3}> (comparedefimp._f721_721 (<{StdInt.==_16}> (select g1_0::syntax._Global 1) (select g2_1::syntax._Global 1)) g1_0 g2_1) comp_st_2
comparedefimp._f721_721::B !_x_0::B g1_1 g2_2 = case _x_0 (True -> <{StdInt.==_16}> (select g1_1::syntax._Global 0) (select g2_2::syntax._Global 0)) (_ -> False)
comparedefimp.compare_501 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_498 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_497 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_104 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_511 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_498 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_499 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_512 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_499 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_106 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_513 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_498 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_512 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_514 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_103 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_103 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_519 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_103 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_499 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_499 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_519 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_515 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_108 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_499 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_518 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_102 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_508 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_508 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_518 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_112 !dcl_tc_0 !icl_tc_1 !comp_st_2 = case (<{compare_types.==_27}> (select dcl_tc_0::syntax._TypeContext 0) (select icl_tc_1::syntax._TypeContext 0)) (True -> comparedefimp.compare_508 (select dcl_tc_0::syntax._TypeContext 1) (select icl_tc_1::syntax._TypeContext 1) comp_st_2) (False -> <{_Tuple2!3}> False comp_st_2) 
comparedefimp.compare_517 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_112 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_505 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_505 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_517 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_516 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_102 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_505 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_102 !_x_0 !_x_1 !comp_st_2 = case _x_0 (syntax.TA dcl_1_0 dclArgs_1_1 -> case _x_1 (syntax.TA icl_2_0 iclArgs_2_1 -> comparedefimp.compare_511 (_Tuple2 (select dcl_1_0::syntax._TypeSymbIdent 2) dclArgs_1_1) (_Tuple2 (select icl_2_0::syntax._TypeSymbIdent 2) iclArgs_2_1) comp_st_2) (syntax.TAS icl_2_0 iclArgs_2_1 iclStrictness_2_2 -> comparedefimp.compare_513 (_Tuple2 (select dcl_1_0::syntax._TypeSymbIdent 2) (_Tuple2 dclArgs_1_1 syntax.NotStrict)) (_Tuple2 (select icl_2_0::syntax._TypeSymbIdent 2) (_Tuple2 iclArgs_2_1 iclStrictness_2_2)) comp_st_2) ) (syntax.TAS dcl_1_0 dclArgs_1_1 dclStrictness_1_2 -> case _x_1 (syntax.TA icl_2_0 iclArgs_2_1 -> comparedefimp.compare_513 (_Tuple2 (select dcl_1_0::syntax._TypeSymbIdent 2) (_Tuple2 dclArgs_1_1 dclStrictness_1_2)) (_Tuple2 (select icl_2_0::syntax._TypeSymbIdent 2) (_Tuple2 iclArgs_2_1 syntax.NotStrict)) comp_st_2) (syntax.TAS icl_2_0 iclArgs_2_1 iclStrictness_2_2 -> comparedefimp.compare_513 (_Tuple2 (select dcl_1_0::syntax._TypeSymbIdent 2) (_Tuple2 dclArgs_1_1 dclStrictness_1_2)) (_Tuple2 (select icl_2_0::syntax._TypeSymbIdent 2) (_Tuple2 iclArgs_2_1 iclStrictness_2_2)) comp_st_2) ) (<{syntax.-->}> dclFun_1_0 dclArg_1_1 -> case _x_1 (<{syntax.-->}> iclFun_2_0 iclArg_2_1 -> comparedefimp.compare_514 (_Tuple2 dclFun_1_0 dclArg_1_1) (_Tuple2 iclFun_2_0 iclArg_2_1) comp_st_2) ) (syntax.TArrow1 dclArg_1_0 -> case _x_1 (syntax.TArrow1 iclArg_2_0 -> comparedefimp.compare_103 dclArg_1_0 iclArg_2_0 comp_st_2) ) (syntax.TArrow -> case _x_1 (syntax.TArrow -> <{_Tuple2!3}> True comp_st_2) ) (<{syntax.:@:}> _x_1_0 dclArgs_1_1 -> case _x_1_0 (syntax.CV dclVar_2_0 -> case _x_1 (<{syntax.:@:}> _x_3_0 iclArgs_3_1 -> case _x_3_0 (syntax.CV iclVar_4_0 -> comparedefimp.compare_515 (_Tuple2 dclVar_2_0 dclArgs_1_1) (_Tuple2 iclVar_4_0 iclArgs_3_1) comp_st_2) ) ) ) (syntax.TB dclDef_1_0 -> case _x_1 (syntax.TB iclDef_2_0 -> <{_Tuple2!3}> (<{compare_types.==_11}> dclDef_1_0 iclDef_2_0) comp_st_2) ) (syntax.GTV dclDef_1_0 -> case _x_1 (syntax.GTV iclDef_2_0 -> comparedefimp.compare_108 dclDef_1_0 iclDef_2_0 comp_st_2) ) (syntax.TV dclVar_1_0 -> case _x_1 (syntax.TV iclVar_2_0 -> comparedefimp.compare_108 dclVar_1_0 iclVar_2_0 comp_st_2) ) (syntax.TFA dclvars_1_0 dcltype_1_1 -> case _x_1 (syntax.TFA iclvars_2_0 icltype_2_1 -> case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_3_0 comp_attr_var_heap_3_1 comp_error_3_2 -> let _x_4_0 = comparedefimp.compare_102 dcltype_1_1 icltype_2_1 (update comp_st_2::comparedefimp._CompareState [0:comparedefimp.initialyseATypeVars dclvars_1_0 iclvars_2_0 comp_type_var_heap_3_0]), comp_st_4_1 = select _x_4_0::_Tuple2 1, _x_4_2 = comparedefimp.clear_type_vars iclvars_2_0 (comparedefimp.clear_type_vars dclvars_1_0 (_Tuple2 (select comp_st_4_1::comparedefimp._CompareState 0) (select comp_st_4_1::comparedefimp._CompareState 1))) in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (update comp_st_4_1::comparedefimp._CompareState [0:select _x_4_2::_Tuple2 0,1:select _x_4_2::_Tuple2 1])) ) ) (syntax.TFAC dclvars_1_0 dcltype_1_1 dcl_contexts_1_2 -> case _x_1 (syntax.TFAC iclvars_2_0 icltype_2_1 icl_contexts_2_2 -> case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_3_0 comp_attr_var_heap_3_1 comp_error_3_2 -> let _x_4_0 = comparedefimp.compare_516 (_Tuple2 dcltype_1_1 dcl_contexts_1_2) (_Tuple2 icltype_2_1 icl_contexts_2_2) (update comp_st_2::comparedefimp._CompareState [0:comparedefimp.initialyseATypeVars dclvars_1_0 iclvars_2_0 comp_type_var_heap_3_0]), comp_st_4_1 = select _x_4_0::_Tuple2 1, _x_4_2 = comparedefimp.clear_type_vars iclvars_2_0 (comparedefimp.clear_type_vars dclvars_1_0 (_Tuple2 (select comp_st_4_1::comparedefimp._CompareState 0) (select comp_st_4_1::comparedefimp._CompareState 1))) in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (update comp_st_4_1::comparedefimp._CompareState [0:select _x_4_2::_Tuple2 0,1:select _x_4_2::_Tuple2 1])) ) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_510 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_104 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_102 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_103 !at1_0 !at2_1 !comp_st_2 = comparedefimp.compare_510 (_Tuple2 (select at1_0::syntax._AType 0) (select at1_0::syntax._AType 1)) (_Tuple2 (select at2_1::syntax._AType 0) (select at2_1::syntax._AType 1)) comp_st_2
comparedefimp.compare_509 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_102 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_506 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_112 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_507 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_102 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_500 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_103 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_503 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_103 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_502 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_499 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_cons_def_types_46 do_compare_result_types_0::B !icl_cons_def_1 !dcl_cons_def_2 !comp_st_3 = case comp_st_3 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> case (StdBool.not (<{compare_types.==_21}> (select dcl_cons_def_2::syntax._ConsDef 2) (select icl_cons_def_1::syntax._ConsDef 2))) (True -> <{_Tuple2!3}> False comp_st_3) (False -> let dcl_cons_type_3_0 = select dcl_cons_def_2::syntax._ConsDef 1, icl_cons_type_3_1 = select icl_cons_def_1::syntax._ConsDef 1, comp_type_var_heap_3_2 = comparedefimp.initialyseATypeVars (select dcl_cons_def_2::syntax._ConsDef 5) (select icl_cons_def_1::syntax._ConsDef 5) comp_type_var_heap_1_0, comp_st_3_3 = update comp_st_3::comparedefimp._CompareState [0:comp_type_var_heap_3_2], _x_3_4 = comparedefimp.compare_512 (_Tuple2 (select dcl_cons_type_3_0::syntax._SymbolType 1) (select dcl_cons_type_3_0::syntax._SymbolType 2)) (_Tuple2 (select icl_cons_type_3_1::syntax._SymbolType 1) (select icl_cons_type_3_1::syntax._SymbolType 2)) comp_st_3_3 in case (StdBool.not (select _x_3_4::_Tuple2 0)) (True -> <{_Tuple2!3}> False (select _x_3_4::_Tuple2 1)) (False -> case do_compare_result_types_0 (True -> let comp_st_6_0 = select _x_3_4::_Tuple2 1, _x_6_1 = comparedefimp.compare_103 (select dcl_cons_type_3_0::syntax._SymbolType 4) (select icl_cons_type_3_1::syntax._SymbolType 4) comp_st_6_0 in case (select _x_6_1::_Tuple2 0) (True -> comparedefimp.compare_505 (select dcl_cons_type_3_0::syntax._SymbolType 5) (select icl_cons_type_3_1::syntax._SymbolType 5) (select _x_6_1::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_6_1::_Tuple2 1)) ) (False -> comparedefimp.compare_505 (select dcl_cons_type_3_0::syntax._SymbolType 5) (select icl_cons_type_3_1::syntax._SymbolType 5) (select _x_3_4::_Tuple2 1)) ) ) ) 
comparedefimp.compare_constructors_45 !_vArray_0 !_vArray_1 do_compare_result_types_2::B cons_index_3::I dcl_cons_defs_4 icl_cons_defs_5 comp_st_6 = let _x_1_0 = select _vArray_1::<{_SystemArray.Array;}> 6 icl_cons_defs_5 cons_index_3, _x_1_1 = comparedefimp.compare_cons_def_types_46 do_compare_result_types_2 (select _x_1_0::_Tuple2 0) (select _vArray_0::<{_SystemArray.Array;}> 3 dcl_cons_defs_4 cons_index_3) comp_st_6 in _Tuple3 (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 1) (select _x_1_1::_Tuple2 1)
comparedefimp.compare_constructor_lists_44 !_vArray_0 !_vArray_1 !_x_2 _x_3 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6 = case _x_2 (_predefined._Cons dcl_cons_1_0 dcl_conses_1_1 -> case _x_3 (_predefined._Cons icl_cons_2_0 icl_conses_2_1 -> case (<{StdInt.==_16}> (select dcl_cons_1_0::syntax._DefinedSymbol 2) (select icl_cons_2_0::syntax._DefinedSymbol 2)) (True -> let last_cons_4_0 = StdList.isEmpty dcl_conses_1_1, _x_4_1::B = comparedefimp.compare_constructors_45 _vArray_0 _vArray_1 last_cons_4_0 (select dcl_cons_1_0::syntax._DefinedSymbol 2) dcl_cons_defs_4 icl_cons_defs_5 comp_st_6 in case (select _x_4_1::_Tuple3 0) (True -> case last_cons_4_0 (True -> _Tuple3 (StdList.isEmpty icl_conses_2_1) (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) (False -> comparedefimp.compare_constructor_lists_44 _vArray_0 _vArray_1 dcl_conses_1_1 icl_conses_2_1 dcl_cons_defs_4 (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False icl_cons_defs_5 comp_st_6) ) ) (_ -> _Tuple3 False icl_cons_defs_5 comp_st_6)
comparedefimp.compare_fields_41::B !_vArray_0 !_vArray_1 !field_nr_2::I dcl_fields_3 icl_fields_4 = case (<{StdInt.==_16}> field_nr_2 0) (True -> True) (False -> let field_nr_2_0::I = <{StdInt.-_7}> field_nr_2 StdInt.one_11 in case (<{StdInt.==_16}> (select (select _vArray_0::<{_SystemArray.Array;}> 3 dcl_fields_3 field_nr_2_0)::syntax._FieldSymbol 2) (select (select _vArray_1::<{_SystemArray.Array;}> 3 icl_fields_4 field_nr_2_0)::syntax._FieldSymbol 2)) (True -> comparedefimp.compare_fields_41 _vArray_0 _vArray_1 field_nr_2_0 dcl_fields_3 icl_fields_4) (False -> False) ) 
comparedefimp.compare_fields_520::B !_vArray_0 !field_nr_1::I dcl_fields_2 icl_fields_3 = case (<{StdInt.==_16}> field_nr_1 0) (True -> True) (False -> let field_nr_2_0::I = <{StdInt.-_7}> field_nr_1 StdInt.one_11 in case (<{StdInt.==_16}> (select (comparedefimp.select_474 dcl_fields_2 field_nr_2_0)::syntax._FieldSymbol 2) (select (select _vArray_0::<{_SystemArray.Array;}> 3 icl_fields_3 field_nr_2_0)::syntax._FieldSymbol 2)) (True -> comparedefimp.compare_fields_520 _vArray_0 field_nr_2_0 dcl_fields_2 icl_fields_3) (False -> False) ) 
comparedefimp.compare_fields_521::B !field_nr_0::I dcl_fields_1 icl_fields_2 = case (<{StdInt.==_16}> field_nr_0 0) (True -> True) (False -> let field_nr_2_0::I = <{StdInt.-_7}> field_nr_0 StdInt.one_11 in case (<{StdInt.==_16}> (select (comparedefimp.select_474 dcl_fields_1 field_nr_2_0)::syntax._FieldSymbol 2) (select (comparedefimp.select_474 icl_fields_2 field_nr_2_0)::syntax._FieldSymbol 2)) (True -> comparedefimp.compare_fields_521 field_nr_2_0 dcl_fields_1 icl_fields_2) (False -> False) ) 
comparedefimp.compare_records_40 !_vArray_0 !_vArray_1 !dcl_rec_2 !icl_rec_3 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6 = let nr_of_dcl_fields_1_0::I = comparedefimp.size_475 (select dcl_rec_2::syntax._RecordType 1) in case (case (<{StdInt.==_16}> nr_of_dcl_fields_1_0 (comparedefimp.size_475 (select icl_rec_3::syntax._RecordType 1))) (True -> case (comparedefimp.compare_fields_521 nr_of_dcl_fields_1_0 (select dcl_rec_2::syntax._RecordType 1) (select icl_rec_3::syntax._RecordType 1)) (True -> <{StdBool.==_3}> (select icl_rec_3::syntax._RecordType 2) (select dcl_rec_2::syntax._RecordType 2)) (False -> False) ) (False -> False) ) (True -> comparedefimp.compare_constructors_45 _vArray_0 _vArray_1 True (select (select dcl_rec_2::syntax._RecordType 0)::syntax._DefinedSymbol 2) dcl_cons_defs_4 icl_cons_defs_5 comp_st_6) (False -> _Tuple3 False icl_cons_defs_5 comp_st_6) 
comparedefimp.compare_rhs_of_types_43 !_vArray_0 !_vArray_1 !_x_2 _x_3 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6 = case _x_2 (syntax.AlgType dclConstructors_1_0 -> case _x_3 (syntax.AlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_44 _vArray_0 _vArray_1 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6) ) (syntax.SynType dclType_1_0 -> case _x_3 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_0 iclType_2_0 comp_st_6 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_5 (select _x_3_0::_Tuple2 1)) ) (syntax.RecordType dclRecord_1_0 -> case _x_3 (syntax.RecordType iclRecord_2_0 -> comparedefimp.compare_records_40 _vArray_0 _vArray_1 dclRecord_1_0 iclRecord_2_0 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6) ) (syntax.NewType dclConstructor_1_0 -> case _x_3 (syntax.NewType iclConstructor_2_0 -> case (StdBool.not (<{StdInt.==_16}> (select dclConstructor_1_0::syntax._DefinedSymbol 2) (select iclConstructor_2_0::syntax._DefinedSymbol 2))) (True -> _Tuple3 False icl_cons_defs_5 comp_st_6) (False -> let _x_4_0 = select _vArray_1::<{_SystemArray.Array;}> 6 icl_cons_defs_5 (select iclConstructor_2_0::syntax._DefinedSymbol 2), _x_4_1 = comparedefimp.compare_cons_def_types_46 True (select _x_4_0::_Tuple2 0) (select _vArray_0::<{_SystemArray.Array;}> 3 dcl_cons_defs_4 (select dclConstructor_1_0::syntax._DefinedSymbol 2)) comp_st_6 in _Tuple3 (select _x_4_1::_Tuple2 0) (select _x_4_0::_Tuple2 1) (select _x_4_1::_Tuple2 1)) ) ) (syntax.AbstractType _x_1_0 -> case _x_3 (syntax.NewType _x_2_0 -> _Tuple3 False icl_cons_defs_5 comp_st_6) (_ -> _Tuple3 True icl_cons_defs_5 comp_st_6)) (syntax.AbstractSynType _x_1_0 dclType_1_1 -> case _x_3 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_1 iclType_2_0 comp_st_6 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_5 (select _x_3_0::_Tuple2 1)) ) (syntax.ExtensibleAlgType _x_1_0 -> case _x_1_0 (_predefined._Nil -> case _x_3 (syntax.ExtensibleAlgType _x_3_0 -> case _x_3_0 (_predefined._Nil -> _Tuple3 True icl_cons_defs_5 comp_st_6) ) ) (_ -> case _x_3 (syntax.ExtensibleAlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_44 _vArray_0 _vArray_1 _x_1_0 iclConstructors_2_0 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6) )) (syntax.AlgConses dclConstructors_1_0 dcl_type_index_1_1 -> case _x_3 (syntax.AlgConses iclConstructors_2_0 icl_type_index_2_1 -> case (<{syntax.==_74}> dcl_type_index_1_1 icl_type_index_2_1) (True -> comparedefimp.compare_constructor_lists_44 _vArray_0 _vArray_1 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_4 icl_cons_defs_5 comp_st_6) (False -> _Tuple3 False icl_cons_defs_5 comp_st_6) ) ) (_ -> _Tuple3 False icl_cons_defs_5 comp_st_6)
comparedefimp.type_def_error = "type definition in the impl module conflicts with the def module"
comparedefimp.compareError !<{_v<<<_0}> message_1 pos_2 error_admin_3 = checksupport.popErrorAdmin_31 (checksupport.checkError (<{StdFile.<<<;}> <{StdFile.<<<_38}>) <{_v<<<_0}> "" message_1 (checksupport.pushErrorAdmin_32 pos_2 error_admin_3))
comparedefimp.compare_constructors_524 !_vArray_0 do_compare_result_types_1::B cons_index_2::I dcl_cons_defs_3 icl_cons_defs_4 comp_st_5 = let _x_1_0 = select _vArray_0::<{_SystemArray.Array;}> 6 icl_cons_defs_4 cons_index_2, _x_1_1 = comparedefimp.compare_cons_def_types_46 do_compare_result_types_1 (select _x_1_0::_Tuple2 0) (comparedefimp.select_490 dcl_cons_defs_3 cons_index_2) comp_st_5 in _Tuple3 (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 1) (select _x_1_1::_Tuple2 1)
comparedefimp.compare_constructor_lists_523 !_vArray_0 !_x_1 _x_2 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5 = case _x_1 (_predefined._Cons dcl_cons_1_0 dcl_conses_1_1 -> case _x_2 (_predefined._Cons icl_cons_2_0 icl_conses_2_1 -> case (<{StdInt.==_16}> (select dcl_cons_1_0::syntax._DefinedSymbol 2) (select icl_cons_2_0::syntax._DefinedSymbol 2)) (True -> let last_cons_4_0 = StdList.isEmpty dcl_conses_1_1, _x_4_1::B = comparedefimp.compare_constructors_524 _vArray_0 last_cons_4_0 (select dcl_cons_1_0::syntax._DefinedSymbol 2) dcl_cons_defs_3 icl_cons_defs_4 comp_st_5 in case (select _x_4_1::_Tuple3 0) (True -> case last_cons_4_0 (True -> _Tuple3 (StdList.isEmpty icl_conses_2_1) (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) (False -> comparedefimp.compare_constructor_lists_523 _vArray_0 dcl_conses_1_1 icl_conses_2_1 dcl_cons_defs_3 (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False icl_cons_defs_4 comp_st_5) ) ) (_ -> _Tuple3 False icl_cons_defs_4 comp_st_5)
comparedefimp.compare_records_525 !_vArray_0 !dcl_rec_1 !icl_rec_2 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5 = let nr_of_dcl_fields_1_0::I = comparedefimp.size_475 (select dcl_rec_1::syntax._RecordType 1) in case (case (<{StdInt.==_16}> nr_of_dcl_fields_1_0 (comparedefimp.size_475 (select icl_rec_2::syntax._RecordType 1))) (True -> case (comparedefimp.compare_fields_521 nr_of_dcl_fields_1_0 (select dcl_rec_1::syntax._RecordType 1) (select icl_rec_2::syntax._RecordType 1)) (True -> <{StdBool.==_3}> (select icl_rec_2::syntax._RecordType 2) (select dcl_rec_1::syntax._RecordType 2)) (False -> False) ) (False -> False) ) (True -> comparedefimp.compare_constructors_524 _vArray_0 True (select (select dcl_rec_1::syntax._RecordType 0)::syntax._DefinedSymbol 2) dcl_cons_defs_3 icl_cons_defs_4 comp_st_5) (False -> _Tuple3 False icl_cons_defs_4 comp_st_5) 
comparedefimp.compare_rhs_of_types_522 !_vArray_0 !_x_1 _x_2 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5 = case _x_1 (syntax.AlgType dclConstructors_1_0 -> case _x_2 (syntax.AlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_523 _vArray_0 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5) ) (syntax.SynType dclType_1_0 -> case _x_2 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_0 iclType_2_0 comp_st_5 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_4 (select _x_3_0::_Tuple2 1)) ) (syntax.RecordType dclRecord_1_0 -> case _x_2 (syntax.RecordType iclRecord_2_0 -> comparedefimp.compare_records_525 _vArray_0 dclRecord_1_0 iclRecord_2_0 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5) ) (syntax.NewType dclConstructor_1_0 -> case _x_2 (syntax.NewType iclConstructor_2_0 -> case (StdBool.not (<{StdInt.==_16}> (select dclConstructor_1_0::syntax._DefinedSymbol 2) (select iclConstructor_2_0::syntax._DefinedSymbol 2))) (True -> _Tuple3 False icl_cons_defs_4 comp_st_5) (False -> let _x_4_0 = select _vArray_0::<{_SystemArray.Array;}> 6 icl_cons_defs_4 (select iclConstructor_2_0::syntax._DefinedSymbol 2), _x_4_1 = comparedefimp.compare_cons_def_types_46 True (select _x_4_0::_Tuple2 0) (comparedefimp.select_490 dcl_cons_defs_3 (select dclConstructor_1_0::syntax._DefinedSymbol 2)) comp_st_5 in _Tuple3 (select _x_4_1::_Tuple2 0) (select _x_4_0::_Tuple2 1) (select _x_4_1::_Tuple2 1)) ) ) (syntax.AbstractType _x_1_0 -> case _x_2 (syntax.NewType _x_2_0 -> _Tuple3 False icl_cons_defs_4 comp_st_5) (_ -> _Tuple3 True icl_cons_defs_4 comp_st_5)) (syntax.AbstractSynType _x_1_0 dclType_1_1 -> case _x_2 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_1 iclType_2_0 comp_st_5 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_4 (select _x_3_0::_Tuple2 1)) ) (syntax.ExtensibleAlgType _x_1_0 -> case _x_1_0 (_predefined._Nil -> case _x_2 (syntax.ExtensibleAlgType _x_3_0 -> case _x_3_0 (_predefined._Nil -> _Tuple3 True icl_cons_defs_4 comp_st_5) ) ) (_ -> case _x_2 (syntax.ExtensibleAlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_523 _vArray_0 _x_1_0 iclConstructors_2_0 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5) )) (syntax.AlgConses dclConstructors_1_0 dcl_type_index_1_1 -> case _x_2 (syntax.AlgConses iclConstructors_2_0 icl_type_index_2_1 -> case (<{syntax.==_74}> dcl_type_index_1_1 icl_type_index_2_1) (True -> comparedefimp.compare_constructor_lists_523 _vArray_0 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_3 icl_cons_defs_4 comp_st_5) (False -> _Tuple3 False icl_cons_defs_4 comp_st_5) ) ) (_ -> _Tuple3 False icl_cons_defs_4 comp_st_5)
comparedefimp.compareError_526 message_0 pos_1 error_admin_2 = checksupport.popErrorAdmin_31 (checksupport.checkError (<{StdFile.<<<;}> <{StdFile.<<<_38}>) (<{StdFile.<<<;}> <{StdFile.<<<_38}>) "" message_0 (checksupport.pushErrorAdmin_32 pos_1 error_admin_2))
comparedefimp.compare_constructors_529 do_compare_result_types_0::B cons_index_1::I dcl_cons_defs_2 icl_cons_defs_3 comp_st_4 = let _x_1_0 = comparedefimp.uselect_493 icl_cons_defs_3 cons_index_1, _x_1_1 = comparedefimp.compare_cons_def_types_46 do_compare_result_types_0 (select _x_1_0::_Tuple2 0) (comparedefimp.select_490 dcl_cons_defs_2 cons_index_1) comp_st_4 in _Tuple3 (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 1) (select _x_1_1::_Tuple2 1)
comparedefimp.compare_constructor_lists_528 !_x_0 _x_1 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4 = case _x_0 (_predefined._Cons dcl_cons_1_0 dcl_conses_1_1 -> case _x_1 (_predefined._Cons icl_cons_2_0 icl_conses_2_1 -> case (<{StdInt.==_16}> (select dcl_cons_1_0::syntax._DefinedSymbol 2) (select icl_cons_2_0::syntax._DefinedSymbol 2)) (True -> let last_cons_4_0 = StdList.isEmpty dcl_conses_1_1, _x_4_1::B = comparedefimp.compare_constructors_529 last_cons_4_0 (select dcl_cons_1_0::syntax._DefinedSymbol 2) dcl_cons_defs_2 icl_cons_defs_3 comp_st_4 in case (select _x_4_1::_Tuple3 0) (True -> case last_cons_4_0 (True -> _Tuple3 (StdList.isEmpty icl_conses_2_1) (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) (False -> comparedefimp.compare_constructor_lists_528 dcl_conses_1_1 icl_conses_2_1 dcl_cons_defs_2 (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2)) ) (False -> _Tuple3 False icl_cons_defs_3 comp_st_4) ) ) (_ -> _Tuple3 False icl_cons_defs_3 comp_st_4)
comparedefimp.compare_records_530 !dcl_rec_0 !icl_rec_1 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4 = let nr_of_dcl_fields_1_0::I = comparedefimp.size_475 (select dcl_rec_0::syntax._RecordType 1) in case (case (<{StdInt.==_16}> nr_of_dcl_fields_1_0 (comparedefimp.size_475 (select icl_rec_1::syntax._RecordType 1))) (True -> case (comparedefimp.compare_fields_521 nr_of_dcl_fields_1_0 (select dcl_rec_0::syntax._RecordType 1) (select icl_rec_1::syntax._RecordType 1)) (True -> <{StdBool.==_3}> (select icl_rec_1::syntax._RecordType 2) (select dcl_rec_0::syntax._RecordType 2)) (False -> False) ) (False -> False) ) (True -> comparedefimp.compare_constructors_529 True (select (select dcl_rec_0::syntax._RecordType 0)::syntax._DefinedSymbol 2) dcl_cons_defs_2 icl_cons_defs_3 comp_st_4) (False -> _Tuple3 False icl_cons_defs_3 comp_st_4) 
comparedefimp.compare_rhs_of_types_527 !_x_0 _x_1 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4 = case _x_0 (syntax.AlgType dclConstructors_1_0 -> case _x_1 (syntax.AlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_528 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4) ) (syntax.SynType dclType_1_0 -> case _x_1 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_0 iclType_2_0 comp_st_4 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_3 (select _x_3_0::_Tuple2 1)) ) (syntax.RecordType dclRecord_1_0 -> case _x_1 (syntax.RecordType iclRecord_2_0 -> comparedefimp.compare_records_530 dclRecord_1_0 iclRecord_2_0 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4) ) (syntax.NewType dclConstructor_1_0 -> case _x_1 (syntax.NewType iclConstructor_2_0 -> case (StdBool.not (<{StdInt.==_16}> (select dclConstructor_1_0::syntax._DefinedSymbol 2) (select iclConstructor_2_0::syntax._DefinedSymbol 2))) (True -> _Tuple3 False icl_cons_defs_3 comp_st_4) (False -> let _x_4_0 = comparedefimp.uselect_493 icl_cons_defs_3 (select iclConstructor_2_0::syntax._DefinedSymbol 2), _x_4_1 = comparedefimp.compare_cons_def_types_46 True (select _x_4_0::_Tuple2 0) (comparedefimp.select_490 dcl_cons_defs_2 (select dclConstructor_1_0::syntax._DefinedSymbol 2)) comp_st_4 in _Tuple3 (select _x_4_1::_Tuple2 0) (select _x_4_0::_Tuple2 1) (select _x_4_1::_Tuple2 1)) ) ) (syntax.AbstractType _x_1_0 -> case _x_1 (syntax.NewType _x_2_0 -> _Tuple3 False icl_cons_defs_3 comp_st_4) (_ -> _Tuple3 True icl_cons_defs_3 comp_st_4)) (syntax.AbstractSynType _x_1_0 dclType_1_1 -> case _x_1 (syntax.SynType iclType_2_0 -> let _x_3_0 = comparedefimp.compare_103 dclType_1_1 iclType_2_0 comp_st_4 in _Tuple3 (select _x_3_0::_Tuple2 0) icl_cons_defs_3 (select _x_3_0::_Tuple2 1)) ) (syntax.ExtensibleAlgType _x_1_0 -> case _x_1_0 (_predefined._Nil -> case _x_1 (syntax.ExtensibleAlgType _x_3_0 -> case _x_3_0 (_predefined._Nil -> _Tuple3 True icl_cons_defs_3 comp_st_4) ) ) (_ -> case _x_1 (syntax.ExtensibleAlgType iclConstructors_2_0 -> comparedefimp.compare_constructor_lists_528 _x_1_0 iclConstructors_2_0 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4) )) (syntax.AlgConses dclConstructors_1_0 dcl_type_index_1_1 -> case _x_1 (syntax.AlgConses iclConstructors_2_0 icl_type_index_2_1 -> case (<{syntax.==_74}> dcl_type_index_1_1 icl_type_index_2_1) (True -> comparedefimp.compare_constructor_lists_528 dclConstructors_1_0 iclConstructors_2_0 dcl_cons_defs_2 icl_cons_defs_3 comp_st_4) (False -> _Tuple3 False icl_cons_defs_3 comp_st_4) ) ) (_ -> _Tuple3 False icl_cons_defs_3 comp_st_4)
comparedefimp.compare_type_defs_42 !copied_from_dcl_0 !dcl_type_defs_1 !dcl_cons_defs_2 !type_index_3::I !_x_4 = case _x_4 (_Tuple3 icl_type_defs_1_0 icl_cons_defs_1_1 comp_st_1_2 -> case comp_st_1_2 (comparedefimp._CompareState comp_type_var_heap_2_0 comp_attr_var_heap_2_1 comp_error_2_2 -> case (StdBool.not (_SystemArray.select_35 copied_from_dcl_0 type_index_3)) (True -> let dcl_type_def_4_0 = comparedefimp.select_482 dcl_type_defs_1 type_index_3, _x_4_1 = comparedefimp.uselect_485 icl_type_defs_1_0 type_index_3, icl_type_def_4_2 = select _x_4_1::_Tuple2 0, comp_type_var_heap_4_3 = comparedefimp.initialyseATypeVars (select dcl_type_def_4_0::syntax._TypeDef 3) (select icl_type_def_4_2::syntax._TypeDef 3) comp_type_var_heap_2_0, comp_attr_var_heap_4_4 = comparedefimp.initialyseAttributeVars (select dcl_type_def_4_0::syntax._TypeDef 4) (select icl_type_def_4_2::syntax._TypeDef 4) comp_attr_var_heap_2_1, comp_st_4_5 = update comp_st_1_2::comparedefimp._CompareState [0:comp_type_var_heap_4_3,1:comp_attr_var_heap_4_4], _x_4_6 = comparedefimp.compare_rhs_of_types_527 (select dcl_type_def_4_0::syntax._TypeDef 5) (select icl_type_def_4_2::syntax._TypeDef 5) dcl_cons_defs_2 icl_cons_defs_1_1 comp_st_4_5 in case (case (select _x_4_6::_Tuple3 0) (True -> case (<{StdInt.==_16}> (select dcl_type_def_4_0::syntax._TypeDef 2) (select icl_type_def_4_2::syntax._TypeDef 2)) (True -> <{syntax.==_72}> (select dcl_type_def_4_0::syntax._TypeDef 6) (select icl_type_def_4_2::syntax._TypeDef 6)) (False -> False) ) (False -> False) ) (True -> <{_Tuple3!7}> (select _x_4_1::_Tuple2 1) (select _x_4_6::_Tuple3 1) (select _x_4_6::_Tuple3 2)) (False -> let comp_st_6_0 = select _x_4_6::_Tuple3 2 in <{_Tuple3!7}> (select _x_4_1::_Tuple2 1) (select _x_4_6::_Tuple3 1) (update comp_st_6_0::comparedefimp._CompareState [2:comparedefimp.compareError_526 comparedefimp.type_def_error (checksupport.newPosition (select icl_type_def_4_2::syntax._TypeDef 0) (select icl_type_def_4_2::syntax._TypeDef 7)) (select comp_st_6_0::comparedefimp._CompareState 2)])) ) (False -> <{_Tuple3!7}> icl_type_defs_1_0 icl_cons_defs_1_1 comp_st_1_2) ) ) 
comparedefimp.i_fold_st_531 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_531 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_532 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_532 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_533 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_533 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_534 copied_from_dcl_0 dcl_type_defs_1 dcl_cons_defs_2 !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_534 copied_from_dcl_0 dcl_type_defs_1 dcl_cons_defs_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (comparedefimp.compare_type_defs_42 copied_from_dcl_0 dcl_type_defs_1 dcl_cons_defs_2 fr_3 st_5)) 
comparedefimp.compareTypeDefs !dcl_sizes_0 !copied_from_dcl_1 !dcl_type_defs_2 !dcl_cons_defs_3 !icl_type_defs_4 !icl_cons_defs_5 !comp_st_6 = comparedefimp.i_fold_st_534 copied_from_dcl_1 dcl_type_defs_2 dcl_cons_defs_3 0 (_SystemArray.select_11 dcl_sizes_0 0) (_Tuple3 icl_type_defs_4 icl_cons_defs_5 comp_st_6)
comparedefimp.i_fold_st_199 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_199 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.initialyseTypeVars !_x_0 !_x_1 !type_var_heap_2 = case _x_0 (_predefined._Cons _x_1_0 dcl_type_vars_1_1 -> case _x_1_0 (syntax._TypeVar tv_ident_2_0 dcl_tv_info_ptr_2_1 -> case _x_1 (_predefined._Cons _x_3_0 icl_type_vars_3_1 -> case _x_3_0 (syntax._TypeVar tv_ident_4_0 icl_tv_info_ptr_4_1 -> let ptr_and_val_5_0 = _Tuple2 dcl_tv_info_ptr_2_1 (syntax.TVI_TypeVar icl_tv_info_ptr_4_1), ptr_and_val_5_1 = _Tuple2 icl_tv_info_ptr_4_1 (syntax.TVI_TypeVar dcl_tv_info_ptr_2_1) in comparedefimp.initialyseTypeVars dcl_type_vars_1_1 icl_type_vars_3_1 (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) type_var_heap_2))) ) (_predefined._Nil -> let ptr_and_val_4_0 = _Tuple2 dcl_tv_info_ptr_2_1 syntax.TVI_Empty in comparedefimp.initialyseTypeVars dcl_type_vars_1_1 _predefined._Nil (Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) type_var_heap_2)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Cons _x_2_0 icl_type_vars_2_1 -> case _x_2_0 (syntax._TypeVar tv_ident_3_0 tv_info_ptr_3_1 -> let ptr_and_val_4_0 = _Tuple2 tv_info_ptr_3_1 syntax.TVI_Empty in comparedefimp.initialyseTypeVars _predefined._Nil icl_type_vars_2_1 (Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) type_var_heap_2)) ) (_predefined._Nil -> type_var_heap_2) ) 
comparedefimp.compare_535 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_107 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_536 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_107 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_107 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_109 !dcl_ineq_0 !icl_ineq_1 !comp_st_2 = comparedefimp.compare_536 (_Tuple2 (select dcl_ineq_0::syntax._AttrInequality 0) (select dcl_ineq_0::syntax._AttrInequality 1)) (_Tuple2 (select icl_ineq_1::syntax._AttrInequality 0) (select icl_ineq_1::syntax._AttrInequality 1)) comp_st_2
comparedefimp.compare_538 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_109 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_543 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_109 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_537 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_537 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_543 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_539 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_505 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_544 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_505 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_537 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_540 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_103 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_544 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_541 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_106 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_545 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_106 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_540 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_542 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_499 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_545 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_110 !dcl_st_0 !icl_st_1 !comp_st_2 = case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> comparedefimp.compare_542 (_Tuple2 (select dcl_st_0::syntax._SymbolType 1) (_Tuple2 (select dcl_st_0::syntax._SymbolType 2) (_Tuple2 (select dcl_st_0::syntax._SymbolType 4) (_Tuple2 (select dcl_st_0::syntax._SymbolType 5) (select dcl_st_0::syntax._SymbolType 7))))) (_Tuple2 (select icl_st_1::syntax._SymbolType 1) (_Tuple2 (select icl_st_1::syntax._SymbolType 2) (_Tuple2 (select icl_st_1::syntax._SymbolType 4) (_Tuple2 (select icl_st_1::syntax._SymbolType 5) (select icl_st_1::syntax._SymbolType 7))))) (update comp_st_2::comparedefimp._CompareState [0:comparedefimp.initialyseTypeVars (select dcl_st_0::syntax._SymbolType 0) (select icl_st_1::syntax._SymbolType 0) comp_type_var_heap_1_0,1:comparedefimp.initialyseAttributeVars (select dcl_st_0::syntax._SymbolType 6) (select icl_st_1::syntax._SymbolType 6) comp_attr_var_heap_1_1])) 
comparedefimp.compare_array_of_class_members_49 !_vArray_0 !_vArray_1 !_vArray_2 !_vArray_3 !loc_member_index_4::I dcl_members_5 icl_members_6 dcl_member_defs_7 icl_member_defs_8 comp_st_9 = case (<{StdInt.==_16}> loc_member_index_4 0) (True -> _Tuple3 True icl_member_defs_8 comp_st_9) (False -> let loc_member_index_2_0 = <{StdInt.-_7}> loc_member_index_4 StdInt.one_11, dcl_member_2_1::I = select _vArray_0::<{_SystemArray.Array;}> 3 dcl_members_5 loc_member_index_2_0 in case (<{compare_types.==_16}> dcl_member_2_1 (select _vArray_1::<{_SystemArray.Array;}> 3 icl_members_6 loc_member_index_2_0)) (True -> let glob_member_index_4_0 = select dcl_member_2_1::syntax._DefinedSymbol 2, dcl_member_def_4_1 = select _vArray_2::<{_SystemArray.Array;}> 3 dcl_member_defs_7 glob_member_index_4_0, _x_4_2 = select _vArray_3::<{_SystemArray.Array;}> 6 icl_member_defs_8 glob_member_index_4_0, icl_member_def_4_3 = select _x_4_2::_Tuple2 0, _x_4_4::I = comparedefimp.compare_110 (select dcl_member_def_4_1::syntax._MemberDef 3) (select icl_member_def_4_3::syntax._MemberDef 3) comp_st_9 in case (case (select _x_4_4::_Tuple2 0) (True -> <{compare_types.==_21}> (select dcl_member_def_4_1::syntax._MemberDef 7) (select icl_member_def_4_3::syntax._MemberDef 7)) (False -> False) ) (True -> comparedefimp.compare_array_of_class_members_49 _vArray_0 _vArray_1 _vArray_2 _vArray_3 loc_member_index_2_0 dcl_members_5 icl_members_6 dcl_member_defs_7 (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) (False -> _Tuple3 False (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_8 comp_st_9) ) 
comparedefimp.compare_array_of_class_members_546 !_vArray_0 !_vArray_1 !_vArray_2 !loc_member_index_3::I dcl_members_4 icl_members_5 dcl_member_defs_6 icl_member_defs_7 comp_st_8 = case (<{StdInt.==_16}> loc_member_index_3 0) (True -> _Tuple3 True icl_member_defs_7 comp_st_8) (False -> let loc_member_index_2_0 = <{StdInt.-_7}> loc_member_index_3 StdInt.one_11, dcl_member_2_1::I = comparedefimp.select_450 dcl_members_4 loc_member_index_2_0 in case (<{compare_types.==_16}> dcl_member_2_1 (select _vArray_0::<{_SystemArray.Array;}> 3 icl_members_5 loc_member_index_2_0)) (True -> let glob_member_index_4_0 = select dcl_member_2_1::syntax._DefinedSymbol 2, dcl_member_def_4_1 = select _vArray_1::<{_SystemArray.Array;}> 3 dcl_member_defs_6 glob_member_index_4_0, _x_4_2 = select _vArray_2::<{_SystemArray.Array;}> 6 icl_member_defs_7 glob_member_index_4_0, icl_member_def_4_3 = select _x_4_2::_Tuple2 0, _x_4_4::I = comparedefimp.compare_110 (select dcl_member_def_4_1::syntax._MemberDef 3) (select icl_member_def_4_3::syntax._MemberDef 3) comp_st_8 in case (case (select _x_4_4::_Tuple2 0) (True -> <{compare_types.==_21}> (select dcl_member_def_4_1::syntax._MemberDef 7) (select icl_member_def_4_3::syntax._MemberDef 7)) (False -> False) ) (True -> comparedefimp.compare_array_of_class_members_546 _vArray_0 _vArray_1 _vArray_2 loc_member_index_2_0 dcl_members_4 icl_members_5 dcl_member_defs_6 (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) (False -> _Tuple3 False (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_7 comp_st_8) ) 
comparedefimp.compare_array_of_class_members_547 !_vArray_0 !_vArray_1 !loc_member_index_2::I dcl_members_3 icl_members_4 dcl_member_defs_5 icl_member_defs_6 comp_st_7 = case (<{StdInt.==_16}> loc_member_index_2 0) (True -> _Tuple3 True icl_member_defs_6 comp_st_7) (False -> let loc_member_index_2_0 = <{StdInt.-_7}> loc_member_index_2 StdInt.one_11, dcl_member_2_1::I = comparedefimp.select_450 dcl_members_3 loc_member_index_2_0 in case (<{compare_types.==_16}> dcl_member_2_1 (comparedefimp.select_450 icl_members_4 loc_member_index_2_0)) (True -> let glob_member_index_4_0 = select dcl_member_2_1::syntax._DefinedSymbol 2, dcl_member_def_4_1 = select _vArray_0::<{_SystemArray.Array;}> 3 dcl_member_defs_5 glob_member_index_4_0, _x_4_2 = select _vArray_1::<{_SystemArray.Array;}> 6 icl_member_defs_6 glob_member_index_4_0, icl_member_def_4_3 = select _x_4_2::_Tuple2 0, _x_4_4::I = comparedefimp.compare_110 (select dcl_member_def_4_1::syntax._MemberDef 3) (select icl_member_def_4_3::syntax._MemberDef 3) comp_st_7 in case (case (select _x_4_4::_Tuple2 0) (True -> <{compare_types.==_21}> (select dcl_member_def_4_1::syntax._MemberDef 7) (select icl_member_def_4_3::syntax._MemberDef 7)) (False -> False) ) (True -> comparedefimp.compare_array_of_class_members_547 _vArray_0 _vArray_1 loc_member_index_2_0 dcl_members_3 icl_members_4 dcl_member_defs_5 (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) (False -> _Tuple3 False (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_6 comp_st_7) ) 
comparedefimp.compare_classes_48 !_vArray_0 !_vArray_1 !dcl_class_def_2 dcl_member_defs_3 !icl_class_def_4 icl_member_defs_5 !comp_st_6 = case comp_st_6 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> let comp_type_var_heap_2_0 = comparedefimp.initialyseTypeVars (select dcl_class_def_2::syntax._ClassDef 2) (select icl_class_def_4::syntax._ClassDef 2) comp_type_var_heap_1_0, comp_st_2_1 = update comp_st_6::comparedefimp._CompareState [0:comp_type_var_heap_2_0], _x_2_2 = comparedefimp.compare_505 (select dcl_class_def_2::syntax._ClassDef 3) (select icl_class_def_4::syntax._ClassDef 3) comp_st_2_1 in case (select _x_2_2::_Tuple2 0) (True -> let nr_of_dcl_members_4_0::I = comparedefimp.size_451 (select dcl_class_def_2::syntax._ClassDef 4) in case (<{StdInt.==_16}> nr_of_dcl_members_4_0 (comparedefimp.size_451 (select icl_class_def_4::syntax._ClassDef 4))) (True -> comparedefimp.compare_array_of_class_members_547 _vArray_0 _vArray_1 nr_of_dcl_members_4_0 (select dcl_class_def_2::syntax._ClassDef 4) (select icl_class_def_4::syntax._ClassDef 4) dcl_member_defs_3 icl_member_defs_5 (select _x_2_2::_Tuple2 1)) (False -> _Tuple3 False icl_member_defs_5 (select _x_2_2::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_5 (select _x_2_2::_Tuple2 1)) ) 
comparedefimp.class_def_error = "class definition in the impl module conflicts with the def module"
comparedefimp.compare_array_of_class_members_549 !_vArray_0 !loc_member_index_1::I dcl_members_2 icl_members_3 dcl_member_defs_4 icl_member_defs_5 comp_st_6 = case (<{StdInt.==_16}> loc_member_index_1 0) (True -> _Tuple3 True icl_member_defs_5 comp_st_6) (False -> let loc_member_index_2_0 = <{StdInt.-_7}> loc_member_index_1 StdInt.one_11, dcl_member_2_1::I = comparedefimp.select_450 dcl_members_2 loc_member_index_2_0 in case (<{compare_types.==_16}> dcl_member_2_1 (comparedefimp.select_450 icl_members_3 loc_member_index_2_0)) (True -> let glob_member_index_4_0 = select dcl_member_2_1::syntax._DefinedSymbol 2, dcl_member_def_4_1 = comparedefimp.select_466 dcl_member_defs_4 glob_member_index_4_0, _x_4_2 = select _vArray_0::<{_SystemArray.Array;}> 6 icl_member_defs_5 glob_member_index_4_0, icl_member_def_4_3 = select _x_4_2::_Tuple2 0, _x_4_4::I = comparedefimp.compare_110 (select dcl_member_def_4_1::syntax._MemberDef 3) (select icl_member_def_4_3::syntax._MemberDef 3) comp_st_6 in case (case (select _x_4_4::_Tuple2 0) (True -> <{compare_types.==_21}> (select dcl_member_def_4_1::syntax._MemberDef 7) (select icl_member_def_4_3::syntax._MemberDef 7)) (False -> False) ) (True -> comparedefimp.compare_array_of_class_members_549 _vArray_0 loc_member_index_2_0 dcl_members_2 icl_members_3 dcl_member_defs_4 (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) (False -> _Tuple3 False (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_5 comp_st_6) ) 
comparedefimp.compare_classes_548 !_vArray_0 !dcl_class_def_1 dcl_member_defs_2 !icl_class_def_3 icl_member_defs_4 !comp_st_5 = case comp_st_5 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> let comp_type_var_heap_2_0 = comparedefimp.initialyseTypeVars (select dcl_class_def_1::syntax._ClassDef 2) (select icl_class_def_3::syntax._ClassDef 2) comp_type_var_heap_1_0, comp_st_2_1 = update comp_st_5::comparedefimp._CompareState [0:comp_type_var_heap_2_0], _x_2_2 = comparedefimp.compare_505 (select dcl_class_def_1::syntax._ClassDef 3) (select icl_class_def_3::syntax._ClassDef 3) comp_st_2_1 in case (select _x_2_2::_Tuple2 0) (True -> let nr_of_dcl_members_4_0::I = comparedefimp.size_451 (select dcl_class_def_1::syntax._ClassDef 4) in case (<{StdInt.==_16}> nr_of_dcl_members_4_0 (comparedefimp.size_451 (select icl_class_def_3::syntax._ClassDef 4))) (True -> comparedefimp.compare_array_of_class_members_549 _vArray_0 nr_of_dcl_members_4_0 (select dcl_class_def_1::syntax._ClassDef 4) (select icl_class_def_3::syntax._ClassDef 4) dcl_member_defs_2 icl_member_defs_4 (select _x_2_2::_Tuple2 1)) (False -> _Tuple3 False icl_member_defs_4 (select _x_2_2::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_4 (select _x_2_2::_Tuple2 1)) ) 
comparedefimp.compare_array_of_class_members_551 !loc_member_index_0::I dcl_members_1 icl_members_2 dcl_member_defs_3 icl_member_defs_4 comp_st_5 = case (<{StdInt.==_16}> loc_member_index_0 0) (True -> _Tuple3 True icl_member_defs_4 comp_st_5) (False -> let loc_member_index_2_0 = <{StdInt.-_7}> loc_member_index_0 StdInt.one_11, dcl_member_2_1::I = comparedefimp.select_450 dcl_members_1 loc_member_index_2_0 in case (<{compare_types.==_16}> dcl_member_2_1 (comparedefimp.select_450 icl_members_2 loc_member_index_2_0)) (True -> let glob_member_index_4_0 = select dcl_member_2_1::syntax._DefinedSymbol 2, dcl_member_def_4_1 = comparedefimp.select_466 dcl_member_defs_3 glob_member_index_4_0, _x_4_2 = comparedefimp.uselect_469 icl_member_defs_4 glob_member_index_4_0, icl_member_def_4_3 = select _x_4_2::_Tuple2 0, _x_4_4::I = comparedefimp.compare_110 (select dcl_member_def_4_1::syntax._MemberDef 3) (select icl_member_def_4_3::syntax._MemberDef 3) comp_st_5 in case (case (select _x_4_4::_Tuple2 0) (True -> <{compare_types.==_21}> (select dcl_member_def_4_1::syntax._MemberDef 7) (select icl_member_def_4_3::syntax._MemberDef 7)) (False -> False) ) (True -> comparedefimp.compare_array_of_class_members_551 loc_member_index_2_0 dcl_members_1 icl_members_2 dcl_member_defs_3 (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) (False -> _Tuple3 False (select _x_4_2::_Tuple2 1) (select _x_4_4::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_4 comp_st_5) ) 
comparedefimp.compare_classes_550 !dcl_class_def_0 dcl_member_defs_1 !icl_class_def_2 icl_member_defs_3 !comp_st_4 = case comp_st_4 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> let comp_type_var_heap_2_0 = comparedefimp.initialyseTypeVars (select dcl_class_def_0::syntax._ClassDef 2) (select icl_class_def_2::syntax._ClassDef 2) comp_type_var_heap_1_0, comp_st_2_1 = update comp_st_4::comparedefimp._CompareState [0:comp_type_var_heap_2_0], _x_2_2 = comparedefimp.compare_505 (select dcl_class_def_0::syntax._ClassDef 3) (select icl_class_def_2::syntax._ClassDef 3) comp_st_2_1 in case (select _x_2_2::_Tuple2 0) (True -> let nr_of_dcl_members_4_0::I = comparedefimp.size_451 (select dcl_class_def_0::syntax._ClassDef 4) in case (<{StdInt.==_16}> nr_of_dcl_members_4_0 (comparedefimp.size_451 (select icl_class_def_2::syntax._ClassDef 4))) (True -> comparedefimp.compare_array_of_class_members_551 nr_of_dcl_members_4_0 (select dcl_class_def_0::syntax._ClassDef 4) (select icl_class_def_2::syntax._ClassDef 4) dcl_member_defs_1 icl_member_defs_3 (select _x_2_2::_Tuple2 1)) (False -> _Tuple3 False icl_member_defs_3 (select _x_2_2::_Tuple2 1)) ) (False -> _Tuple3 False icl_member_defs_3 (select _x_2_2::_Tuple2 1)) ) 
comparedefimp.compare_class_defs_47 !copied_from_dcl_0 dcl_class_defs_1 dcl_member_defs_2 !class_index_3::I !_x_4 = case _x_4 (_Tuple3 icl_class_defs_1_0 icl_member_defs_1_1 comp_st_1_2 -> case (StdBool.not (_SystemArray.select_35 copied_from_dcl_0 class_index_3)) (True -> let dcl_class_def_3_0 = comparedefimp.select_458 dcl_class_defs_1 class_index_3, _x_3_1 = comparedefimp.uselect_461 icl_class_defs_1_0 class_index_3, icl_class_def_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = comparedefimp.compare_classes_550 dcl_class_def_3_0 dcl_member_defs_2 icl_class_def_3_2 icl_member_defs_1_1 comp_st_1_2 in case (select _x_3_3::_Tuple3 0) (True -> <{_Tuple3!5}> (select _x_3_1::_Tuple2 1) (select _x_3_3::_Tuple3 1) (select _x_3_3::_Tuple3 2)) (False -> let comp_st_5_0 = select _x_3_3::_Tuple3 2 in <{_Tuple3!5}> (select _x_3_1::_Tuple2 1) (select _x_3_3::_Tuple3 1) (update comp_st_5_0::comparedefimp._CompareState [2:comparedefimp.compareError_526 comparedefimp.class_def_error (checksupport.newPosition (select icl_class_def_3_2::syntax._ClassDef 0) (select icl_class_def_3_2::syntax._ClassDef 6)) (select comp_st_5_0::comparedefimp._CompareState 2)])) ) (False -> <{_Tuple3!5}> icl_class_defs_1_0 icl_member_defs_1_1 comp_st_1_2) ) 
comparedefimp.i_fold_st_552 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_552 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_553 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_553 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_554 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_554 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_555 copied_from_dcl_0 dcl_class_defs_1 dcl_member_defs_2 !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_555 copied_from_dcl_0 dcl_class_defs_1 dcl_member_defs_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (comparedefimp.compare_class_defs_47 copied_from_dcl_0 dcl_class_defs_1 dcl_member_defs_2 fr_3 st_5)) 
comparedefimp.compareClassDefs !dcl_sizes_0 copied_from_dcl_1 !dcl_class_defs_2 !dcl_member_defs_3 !icl_class_defs_4 !icl_member_defs_5 !comp_st_6 = comparedefimp.i_fold_st_555 copied_from_dcl_1 dcl_class_defs_2 dcl_member_defs_3 0 (_SystemArray.select_11 dcl_sizes_0 3) (_Tuple3 icl_class_defs_4 icl_member_defs_5 comp_st_6)
comparedefimp.i_fold_st_198 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_198 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.instance_def_error = "instance definition in the impl module conflicts with the def module"
comparedefimp.instance_def_conflicts_error_53 ident_0 pos_1 !comp_st_2 = update comp_st_2::comparedefimp._CompareState [2:comparedefimp.compareError_526 comparedefimp.instance_def_error (checksupport.newPosition ident_0 pos_1) (select comp_st_2::comparedefimp._CompareState 2)]
comparedefimp.initial_hwn !hwn_heap_0 = comparedefimp._HeapWithNumber hwn_heap_0 0
comparedefimp.fold_st_194 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_194 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.fold_st_193 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_193 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.init_attr_var_67 !_x_0 !attr_heap_1 = case _x_0 (syntax._AttributeVar av_ident_1_0 av_info_ptr_1_1 -> Heap.writePtr av_info_ptr_1_1 syntax.AVI_Empty attr_heap_1) 
comparedefimp.fold_st_556 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_556 x_1_1 (comparedefimp.init_attr_var_67 a_1_0 st_1)) 
comparedefimp.fold_st_557 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_557 x_1_1 (comparedefimp.init_attr_var_67 a_1_0 st_1)) 
comparedefimp.init_attr_vars !attr_vars1_0 !attr_vars2_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case tc_attr_vars_1_1 (comparedefimp._HeapWithNumber hwn_heap_2_0 hwn_number_2_1 -> update tc_state_2::comparedefimp._TypesCorrespondState [1:update tc_attr_vars_1_1::comparedefimp._HeapWithNumber [0:comparedefimp.fold_st_557 attr_vars2_1 (comparedefimp.fold_st_556 attr_vars1_0 hwn_heap_2_0)]]) ) 
comparedefimp.fold_st_192 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_192 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.fold_st_191 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_191 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.init_type_var_59 !_x_0 !heap_1 = case _x_0 (syntax._TypeVar tv_ident_1_0 tv_info_ptr_1_1 -> Heap.writePtr tv_info_ptr_1_1 syntax.TVI_Empty heap_1) 
comparedefimp.fold_st_558 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_558 x_1_1 (comparedefimp.init_type_var_59 a_1_0 st_1)) 
comparedefimp.fold_st_559 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_559 x_1_1 (comparedefimp.init_type_var_59 a_1_0 st_1)) 
comparedefimp.init_type_vars !type_vars1_0 !type_vars2_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case tc_type_vars_1_0 (comparedefimp._HeapWithNumber hwn_heap_2_0 hwn_number_2_1 -> update tc_state_2::comparedefimp._TypesCorrespondState [0:update tc_type_vars_1_0::comparedefimp._HeapWithNumber [0:comparedefimp.fold_st_559 type_vars2_1 (comparedefimp.fold_st_558 type_vars1_0 hwn_heap_2_0)]]) ) 
comparedefimp.init_symbol_type_vars !symbol_type_1_0 !symbol_type_2_1 !tc_state_2 = comparedefimp.init_type_vars (select symbol_type_1_0::syntax._SymbolType 0) (select symbol_type_2_1::syntax._SymbolType 0) (comparedefimp.init_attr_vars (select symbol_type_1_0::syntax._SymbolType 6) (select symbol_type_2_1::syntax._SymbolType 6) tc_state_2)
comparedefimp.anon_334 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_333 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_334 False) 
comparedefimp.anon_332 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_331 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_330 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_331 False) 
comparedefimp.anon_329 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_328 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_327 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_328 False) 
comparedefimp.anon_326 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_325 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_324 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_325 False) 
comparedefimp.anon_323 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_213 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_212 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_211 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_212 False) 
comparedefimp.anon_210 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_209 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_560 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_211 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_127 !_vt_corresponds_0 !_x_1 !_x_2 = case _x_1 (_predefined._Nil -> case _x_2 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_2 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_127 _vt_corresponds_0 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.anon_229 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_228 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_229 False) 
comparedefimp.anon_227 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_233 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_232 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_231 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_232 False) 
comparedefimp.anon_230 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_206 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.equal !<{_v==_0}> a_1 b_2 = comparedefimp.anon_206 (select <{_v==_0}>::<{StdOverloaded.==;}> 0 a_1 b_2)
comparedefimp.anon_226 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_225 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_226 False) 
comparedefimp.anon_224 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.equal_561 a_0 b_1 = comparedefimp.anon_206 (<{syntax.==_15}> a_0 b_1)
comparedefimp.t_corresponds_135 !dclDef_0 !iclDef_1 = comparedefimp.equal_561 (select dclDef_0::syntax._DefinedSymbol 0) (select iclDef_1::syntax._DefinedSymbol 0)
comparedefimp.equal_562 a_0::I b_1::I = comparedefimp.anon_206 (<{StdInt.==_16}> a_0 b_1)
comparedefimp.anon_563 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_225 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_131 !dclDef_0 !iclDef_1 = comparedefimp.anon_563 (comparedefimp.t_corresponds_135 (select dclDef_0::syntax._Global 0) (select iclDef_1::syntax._Global 0)) (comparedefimp.equal_562 (select dclDef_0::syntax._Global 1) (select iclDef_1::syntax._Global 1))
comparedefimp.equal_564 a_0 b_1 = comparedefimp.anon_206 (<{syntax.==_11}> a_0 b_1)
comparedefimp.anon_565 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_231 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_134 !_x_0 !_x_1 = case _x_0 (syntax.TCClass class1_1_0 -> case _x_1 (syntax.TCClass class2_2_0 -> comparedefimp.t_corresponds_131 class1_1_0 class2_2_0) ) (syntax.TCGeneric _x_1_0 -> case _x_1_0 (syntax._GenericTypeContext gen1_2_0 kind1_2_1 gtc_class_2_2 gtc_generic_dict_2_3 -> case _x_1 (syntax.TCGeneric _x_3_0 -> case _x_3_0 (syntax._GenericTypeContext gen2_4_0 kind2_4_1 gtc_class_4_2 gtc_generic_dict_4_3 -> comparedefimp.anon_565 (comparedefimp.t_corresponds_131 gen1_2_0 gen2_4_0) (comparedefimp.equal_564 kind1_2_1 kind2_4_1)) ) ) ) (_ -> comparedefimp.anon_233 False)
comparedefimp.anon_297 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_296 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_295 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_296 False) 
comparedefimp.anon_294 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_293 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_292 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_293 False) 
comparedefimp.anon_291 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_290 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_289 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_290 False) 
comparedefimp.anon_288 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_287 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_286 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_287 False) 
comparedefimp.anon_285 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_284 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_283 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_284 False) 
comparedefimp.anon_282 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_281 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_280 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_281 False) 
comparedefimp.anon_279 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_278 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_277 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_278 False) 
comparedefimp.anon_276 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_275 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_274 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_275 False) 
comparedefimp.anon_273 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_272 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_271 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_272 False) 
comparedefimp.anon_270 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_269 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_268 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_269 False) 
comparedefimp.anon_267 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_266 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_265 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_266 False) 
comparedefimp.anon_264 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_263 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_262 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_263 False) 
comparedefimp.anon_261 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_260 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_259 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_260 False) 
comparedefimp.anon_258 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_257 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_256 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_257 False) 
comparedefimp.anon_255 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_254 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_253 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_252 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_253 False) 
comparedefimp.anon_251 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_250 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_249 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_250 False) 
comparedefimp.anon_248 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.compare_strictness_80 dclStrictness_0 !tc_state_1 = case tc_state_1 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 1) 0) (True -> _Tuple2 (containers.equal_strictness_lists dclStrictness_0 syntax.NotStrict) tc_state_1) (False -> case (case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 2) 0)) (True -> True) (False -> containers.equal_strictness_lists dclStrictness_0 syntax.NotStrict) ) (True -> _Tuple2 True tc_state_1) (False -> _Tuple2 True (update tc_state_1::comparedefimp._TypesCorrespondState [2:StdInt.bitor tc_strictness_flags_1_2 2])) ) ) 
comparedefimp.compare_strictness_81 dclStrictness_0 iclStrictness_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 1) 0) (True -> _Tuple2 (containers.equal_strictness_lists dclStrictness_0 iclStrictness_1) tc_state_2) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 2) 0)) (True -> _Tuple2 (containers.more_or_equal_strictness_lists dclStrictness_0 iclStrictness_1) tc_state_2) (False -> case (containers.equal_strictness_lists dclStrictness_0 iclStrictness_1) (True -> _Tuple2 True tc_state_2) (False -> case (containers.more_or_equal_strictness_lists dclStrictness_0 iclStrictness_1) (True -> _Tuple2 True (update tc_state_2::comparedefimp._TypesCorrespondState [2:StdInt.bitor tc_strictness_flags_1_2 2])) (False -> _Tuple2 False tc_state_2) ) ) ) ) 
comparedefimp.fold_st_205 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_205 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.fold_st_204 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_204 op_0 x_1_1 (op_0 a_1_0 st_2)) 
comparedefimp.init_type_var_63 !_x_0 !type_heap_1 = case _x_0 (syntax._ATypeVar atv_attribute_1_0 atv_variable_1_1 -> Heap.writePtr (select atv_variable_1_1::syntax._TypeVar 1) syntax.TVI_Empty type_heap_1) 
comparedefimp.fold_st_566 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_566 x_1_1 (comparedefimp.init_type_var_63 a_1_0 st_1)) 
comparedefimp.fold_st_567 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> comparedefimp.fold_st_567 x_1_1 (comparedefimp.init_type_var_63 a_1_0 st_1)) 
comparedefimp.init_atype_vars !atype_vars1_0 !atype_vars2_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case tc_type_vars_1_0 (comparedefimp._HeapWithNumber hwn_heap_2_0 hwn_number_2_1 -> update tc_state_2::comparedefimp._TypesCorrespondState [0:update tc_type_vars_1_0::comparedefimp._HeapWithNumber [0:comparedefimp.fold_st_567 atype_vars2_1 (comparedefimp.fold_st_566 atype_vars1_0 hwn_heap_2_0)]]) ) 
comparedefimp.anon_68 f_0 state_1 = _Tuple2 True (f_0 state_1)
comparedefimp.do f_0 = comparedefimp.anon_68 f_0
comparedefimp.anon_239 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_238 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_239 False) 
comparedefimp.anon_237 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_247 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_246 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_245 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_244 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_243 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_242 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_241 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_240 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.assignCorrespondenceNumber !_vCorrespondenceNumber_0 !ptr1_1 !ptr2_2 !_x_3 = case _x_3 (comparedefimp._HeapWithNumber hwn_heap_1_0 hwn_number_1_1 -> let var_info_2_0 = select _vCorrespondenceNumber_0::<{comparedefimp.CorrespondenceNumber;}> 0 hwn_number_1_1 in comparedefimp._HeapWithNumber (Heap.writePtr ptr1_1 var_info_2_0 (Heap.writePtr ptr2_2 var_info_2_0 hwn_heap_1_0)) (<{StdInt.+_6}> hwn_number_1_1 1)) 
comparedefimp.tryToUnifyVars !_vCorrespondenceNumber_0 !ptr1_1 !ptr2_2 !heapWithNumber_3 = let !info1_1_0 = Heap.sreadPtr ptr1_1 (select heapWithNumber_3::comparedefimp._HeapWithNumber 0), !info2_1_1 = Heap.sreadPtr ptr2_2 (select heapWithNumber_3::comparedefimp._HeapWithNumber 0) in <{comparedefimp._c;800;9_722}> (_Tuple2 (select _vCorrespondenceNumber_0::<{comparedefimp.CorrespondenceNumber;}> 1 info1_1_0) (select _vCorrespondenceNumber_0::<{comparedefimp.CorrespondenceNumber;}> 1 info2_1_1)) heapWithNumber_3 _vCorrespondenceNumber_0 ptr1_1 ptr2_2
<{comparedefimp._c;800;9_722}> !_x_0 heapWithNumber_1 _vCorrespondenceNumber_2 ptr1_3 ptr2_4 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (comparedefimp.CorrespondenceNumber number1_2_0 -> case _x_1_1 (comparedefimp.CorrespondenceNumber number2_3_0 -> _Tuple2 (<{StdInt.==_16}> number1_2_0 number2_3_0) heapWithNumber_1) ) (comparedefimp.Unbound -> case _x_1_1 (comparedefimp.Unbound -> _Tuple2 True (comparedefimp.assignCorrespondenceNumber _vCorrespondenceNumber_2 ptr1_3 ptr2_4 heapWithNumber_1)) ) ) (_ -> _Tuple2 False heapWithNumber_1)
comparedefimp.fromCorrespondenceNumber_125 !number_0::I = syntax.AVI_CorrespondenceNumber number_0
comparedefimp.toCorrespondenceNumber_126 !_x_0 = case _x_0 (syntax.AVI_CorrespondenceNumber number_1_0 -> comparedefimp.CorrespondenceNumber number_1_0) (syntax.AVI_Empty -> comparedefimp.Unbound) 
comparedefimp.assignCorrespondenceNumber_569 !ptr1_0 !ptr2_1 !_x_2 = case _x_2 (comparedefimp._HeapWithNumber hwn_heap_1_0 hwn_number_1_1 -> let var_info_2_0 = comparedefimp.fromCorrespondenceNumber_125 hwn_number_1_1 in comparedefimp._HeapWithNumber (Heap.writePtr ptr1_0 var_info_2_0 (Heap.writePtr ptr2_1 var_info_2_0 hwn_heap_1_0)) (<{StdInt.+_6}> hwn_number_1_1 1)) 
comparedefimp.tryToUnifyVars_568 !ptr1_0 !ptr2_1 !heapWithNumber_2 = let !info1_1_0 = Heap.sreadPtr ptr1_0 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0), !info2_1_1 = Heap.sreadPtr ptr2_1 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0) in <{comparedefimp._c;800;9_723}> (_Tuple2 (comparedefimp.toCorrespondenceNumber_126 info1_1_0) (comparedefimp.toCorrespondenceNumber_126 info2_1_1)) heapWithNumber_2 ptr1_0 ptr2_1
<{comparedefimp._c;800;9_723}> !_x_0 heapWithNumber_1 ptr1_2 ptr2_3 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (comparedefimp.CorrespondenceNumber number1_2_0 -> case _x_1_1 (comparedefimp.CorrespondenceNumber number2_3_0 -> _Tuple2 (<{StdInt.==_16}> number1_2_0 number2_3_0) heapWithNumber_1) ) (comparedefimp.Unbound -> case _x_1_1 (comparedefimp.Unbound -> _Tuple2 True (comparedefimp.assignCorrespondenceNumber_569 ptr1_2 ptr2_3 heapWithNumber_1)) ) ) (_ -> _Tuple2 False heapWithNumber_1)
<{comparedefimp.corresponds`_79}> dclDef_0 iclDef_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> let _x_2_0 = comparedefimp.tryToUnifyVars_568 (select dclDef_0::syntax._AttributeVar 1) (select iclDef_1::syntax._AttributeVar 1) tc_attr_vars_1_1 in _Tuple2 (select _x_2_0::_Tuple2 0) (update tc_state_2::comparedefimp._TypesCorrespondState [1:select _x_2_0::_Tuple2 1])) 
comparedefimp.t_corresponds_141 !dclDef_0 !iclDef_1 = <{comparedefimp.corresponds`_79}> dclDef_0 iclDef_1
comparedefimp.t_corresponds_140 !_x_0 !_x_1 = case _x_0 (syntax.TA_Unique -> case _x_1 (syntax.TA_Unique -> comparedefimp.anon_240 True) ) (syntax.TA_Multi -> <{comparedefimp._c;925;11_724}> _x_1) (syntax.TA_Var dclDef_1_0 -> case _x_1 (syntax.TA_Var iclDef_2_0 -> comparedefimp.t_corresponds_141 dclDef_1_0 iclDef_2_0) ) (syntax.TA_RootVar dclDef_1_0 -> case _x_1 (syntax.TA_RootVar iclDef_2_0 -> comparedefimp.t_corresponds_141 dclDef_1_0 iclDef_2_0) ) (syntax.TA_None -> <{comparedefimp._c;934;11_725}> _x_1) (_ -> comparedefimp.anon_247 False)
<{comparedefimp._c;934;11_725}> !_x_0 = case _x_0 (syntax.TA_Multi -> comparedefimp.anon_244 True) (syntax.TA_None -> comparedefimp.anon_245 True) (_ -> comparedefimp.anon_246 False)
<{comparedefimp._c;925;11_724}> !_x_0 = case _x_0 (syntax.TA_Multi -> comparedefimp.anon_241 True) (syntax.TA_None -> comparedefimp.anon_242 True) (_ -> comparedefimp.anon_243 False)
comparedefimp.fromCorrespondenceNumber_123 !number_0::I = syntax.TVI_CorrespondenceNumber number_0
comparedefimp.toCorrespondenceNumber_124 !_x_0 = case _x_0 (syntax.TVI_CorrespondenceNumber number_1_0 -> comparedefimp.CorrespondenceNumber number_1_0) (syntax.TVI_Empty -> comparedefimp.Unbound) 
comparedefimp.assignCorrespondenceNumber_571 !ptr1_0 !ptr2_1 !_x_2 = case _x_2 (comparedefimp._HeapWithNumber hwn_heap_1_0 hwn_number_1_1 -> let var_info_2_0 = comparedefimp.fromCorrespondenceNumber_123 hwn_number_1_1 in comparedefimp._HeapWithNumber (Heap.writePtr ptr1_0 var_info_2_0 (Heap.writePtr ptr2_1 var_info_2_0 hwn_heap_1_0)) (<{StdInt.+_6}> hwn_number_1_1 1)) 
comparedefimp.tryToUnifyVars_570 !ptr1_0 !ptr2_1 !heapWithNumber_2 = let !info1_1_0 = Heap.sreadPtr ptr1_0 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0), !info2_1_1 = Heap.sreadPtr ptr2_1 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0) in <{comparedefimp._c;800;9_726}> (_Tuple2 (comparedefimp.toCorrespondenceNumber_124 info1_1_0) (comparedefimp.toCorrespondenceNumber_124 info2_1_1)) heapWithNumber_2 ptr1_0 ptr2_1
<{comparedefimp._c;800;9_726}> !_x_0 heapWithNumber_1 ptr1_2 ptr2_3 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (comparedefimp.CorrespondenceNumber number1_2_0 -> case _x_1_1 (comparedefimp.CorrespondenceNumber number2_3_0 -> _Tuple2 (<{StdInt.==_16}> number1_2_0 number2_3_0) heapWithNumber_1) ) (comparedefimp.Unbound -> case _x_1_1 (comparedefimp.Unbound -> _Tuple2 True (comparedefimp.assignCorrespondenceNumber_571 ptr1_2 ptr2_3 heapWithNumber_1)) ) ) (_ -> _Tuple2 False heapWithNumber_1)
comparedefimp.corresponds_TypeVar_82 dclDef_0 iclDef_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> let _x_2_0 = comparedefimp.tryToUnifyVars_570 (select dclDef_0::syntax._TypeVar 1) (select iclDef_1::syntax._TypeVar 1) tc_type_vars_1_0 in _Tuple2 (select _x_2_0::_Tuple2 0) (update tc_state_2::comparedefimp._TypesCorrespondState [0:select _x_2_0::_Tuple2 1])) 
comparedefimp.t_corresponds_144 !dclDef_0 !iclDef_1 = comparedefimp.corresponds_TypeVar_82 dclDef_0 iclDef_1
comparedefimp.t_corresponds_143 !_x_0 !_x_1 = case _x_0 (syntax.CV dclVar_1_0 -> case _x_1 (syntax.CV iclVar_2_0 -> comparedefimp.t_corresponds_144 dclVar_1_0 iclVar_2_0) ) 
comparedefimp.anon_591 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_292 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_592 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_295 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_589 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_289 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.equal_588 a_0 b_1 = comparedefimp.anon_206 (<{compare_types.==_11}> a_0 b_1)
comparedefimp.anon_593 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_238 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_587 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_286 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_586 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_283 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_583 dclStrictness_0 iclStrictness_1 !g_2 st0_3 = let _x_1_0 = comparedefimp.compare_strictness_81 dclStrictness_0 iclStrictness_1 st0_3 in g_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_584 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_277 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_585 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_280 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_580 dclStrictness_0 !g_1 st0_2 = let _x_1_0 = comparedefimp.compare_strictness_80 dclStrictness_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_581 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_268 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_582 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_271 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_577 r_0 !g_1 st0_2 = let _x_1_0 = comparedefimp.anon_254 r_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_578 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_259 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_579 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_262 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_575 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_249 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_576 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_252 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_573 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_228 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_596 !dclStrictness_0 !iclStrictness_1 m2_2 !st0_3 = let _x_1_0 = comparedefimp.compare_strictness_81 dclStrictness_0 iclStrictness_1 st0_3 in comparedefimp.anon_274 m2_2 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_595 dclStrictness_0 m2_1 !st0_2 = let _x_1_0 = comparedefimp.compare_strictness_80 dclStrictness_0 st0_2 in comparedefimp.anon_265 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_594 !r_0::B m2_1 st0_2 = let _x_1_0 = comparedefimp.anon_254 r_0 st0_2 in comparedefimp.anon_256 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_139 !dclDef_0 !iclDef_1 = comparedefimp.anon_593 (comparedefimp.t_corresponds_140 (select dclDef_0::syntax._AType 0) (select iclDef_1::syntax._AType 0)) (comparedefimp.t_corresponds_142 (select dclDef_0::syntax._AType 1) (select iclDef_1::syntax._AType 1))
comparedefimp.t_corresponds_574 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_139 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_574 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.t_corresponds_590 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_133 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_590 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.t_corresponds_142 !_x_0 !_x_1 = case _x_0 (syntax.TA dcl_1_0 dclArgs_1_1 -> case _x_1 (syntax.TA icl_2_0 iclArgs_2_1 -> comparedefimp.anon_576 (comparedefimp.equal_561 (select dcl_1_0::syntax._TypeSymbIdent 0) (select icl_2_0::syntax._TypeSymbIdent 0)) (comparedefimp.anon_575 (comparedefimp.equal_562 (select (select dcl_1_0::syntax._TypeSymbIdent 2)::syntax._Global 1) (select (select icl_2_0::syntax._TypeSymbIdent 2)::syntax._Global 1)) (comparedefimp.t_corresponds_574 dclArgs_1_1 iclArgs_2_1))) (syntax.TAS icl_2_0 iclArgs_2_1 iclStrictness_2_2 -> comparedefimp.anon_579 (comparedefimp.equal_561 (select dcl_1_0::syntax._TypeSymbIdent 0) (select icl_2_0::syntax._TypeSymbIdent 0)) (comparedefimp.anon_578 (comparedefimp.equal_562 (select (select dcl_1_0::syntax._TypeSymbIdent 2)::syntax._Global 1) (select (select icl_2_0::syntax._TypeSymbIdent 2)::syntax._Global 1)) (comparedefimp.anon_594 (containers.is_not_strict iclStrictness_2_2) (comparedefimp.t_corresponds_574 dclArgs_1_1 iclArgs_2_1)))) ) (syntax.TAS dcl_1_0 dclArgs_1_1 dclStrictness_1_2 -> case _x_1 (syntax.TA icl_2_0 iclArgs_2_1 -> comparedefimp.anon_582 (comparedefimp.equal_561 (select dcl_1_0::syntax._TypeSymbIdent 0) (select icl_2_0::syntax._TypeSymbIdent 0)) (comparedefimp.anon_581 (comparedefimp.equal_562 (select (select dcl_1_0::syntax._TypeSymbIdent 2)::syntax._Global 1) (select (select icl_2_0::syntax._TypeSymbIdent 2)::syntax._Global 1)) (comparedefimp.anon_595 dclStrictness_1_2 (comparedefimp.t_corresponds_574 dclArgs_1_1 iclArgs_2_1)))) (syntax.TAS icl_2_0 iclArgs_2_1 iclStrictness_2_2 -> comparedefimp.anon_585 (comparedefimp.equal_561 (select dcl_1_0::syntax._TypeSymbIdent 0) (select icl_2_0::syntax._TypeSymbIdent 0)) (comparedefimp.anon_584 (comparedefimp.equal_562 (select (select dcl_1_0::syntax._TypeSymbIdent 2)::syntax._Global 1) (select (select icl_2_0::syntax._TypeSymbIdent 2)::syntax._Global 1)) (comparedefimp.anon_596 dclStrictness_1_2 iclStrictness_2_2 (comparedefimp.t_corresponds_574 dclArgs_1_1 iclArgs_2_1)))) ) (<{syntax.-->}> dclFun_1_0 dclArg_1_1 -> case _x_1 (<{syntax.-->}> iclFun_2_0 iclArg_2_1 -> comparedefimp.anon_586 (comparedefimp.t_corresponds_139 dclFun_1_0 iclFun_2_0) (comparedefimp.t_corresponds_139 dclArg_1_1 iclArg_2_1)) ) (<{syntax.:@:}> dclVar_1_0 dclArgs_1_1 -> case _x_1 (<{syntax.:@:}> iclVar_2_0 iclArgs_2_1 -> comparedefimp.anon_587 (comparedefimp.t_corresponds_143 dclVar_1_0 iclVar_2_0) (comparedefimp.t_corresponds_574 dclArgs_1_1 iclArgs_2_1)) ) (syntax.TB dclDef_1_0 -> case _x_1 (syntax.TB iclDef_2_0 -> comparedefimp.equal_588 dclDef_1_0 iclDef_2_0) ) (syntax.TV dclDef_1_0 -> case _x_1 (syntax.TV iclDef_2_0 -> comparedefimp.t_corresponds_144 dclDef_1_0 iclDef_2_0) ) (syntax.GTV dclDef_1_0 -> case _x_1 (syntax.GTV iclDef_2_0 -> comparedefimp.t_corresponds_144 dclDef_1_0 iclDef_2_0) ) (syntax.TFA dclVars_1_0 dclType_1_1 -> case _x_1 (syntax.TFA iclVars_2_0 iclType_2_1 -> comparedefimp.anon_589 (comparedefimp.do (comparedefimp.init_atype_vars dclVars_1_0 iclVars_2_0)) (comparedefimp.t_corresponds_142 dclType_1_1 iclType_2_1)) ) (syntax.TFAC dclVars_1_0 dclType_1_1 dclContexts_1_2 -> case _x_1 (syntax.TFAC iclVars_2_0 iclType_2_1 iclContexts_2_2 -> comparedefimp.anon_592 (comparedefimp.do (comparedefimp.init_atype_vars dclVars_1_0 iclVars_2_0)) (comparedefimp.anon_591 (comparedefimp.t_corresponds_142 dclType_1_1 iclType_2_1) (comparedefimp.t_corresponds_590 dclContexts_1_2 iclContexts_2_2))) ) (_ -> comparedefimp.anon_297 False)
comparedefimp.t_corresponds_572 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_142 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_572 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.t_corresponds_133 !dclDef_0 !iclDef_1 = comparedefimp.anon_573 (comparedefimp.t_corresponds_134 (select dclDef_0::syntax._TypeContext 0) (select iclDef_1::syntax._TypeContext 0)) (comparedefimp.t_corresponds_572 (select dclDef_0::syntax._TypeContext 1) (select iclDef_1::syntax._TypeContext 1))
<{comparedefimp.t_corresponds`_78}> dcl_strictness_0 icl_strictness_1 !tc_state_2 = case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> case (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 1) 0) (True -> _Tuple2 (containers.equal_strictness_lists dcl_strictness_0 icl_strictness_1) tc_state_2) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_1_2 2) 0)) (True -> _Tuple2 (containers.more_or_equal_strictness_lists dcl_strictness_0 icl_strictness_1) tc_state_2) (False -> case (containers.equal_strictness_lists dcl_strictness_0 icl_strictness_1) (True -> _Tuple2 True tc_state_2) (False -> case (containers.more_or_equal_strictness_lists dcl_strictness_0 icl_strictness_1) (True -> _Tuple2 True (update tc_state_2::comparedefimp._TypesCorrespondState [2:StdInt.bitor tc_strictness_flags_1_2 2])) (False -> _Tuple2 False tc_state_2) ) ) ) ) 
comparedefimp.t_corresponds_138 !dcl_strictness_0 !icl_strictness_1 = <{comparedefimp.t_corresponds`_78}> dcl_strictness_0 icl_strictness_1
comparedefimp.anon_337 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_336 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_337 False) 
comparedefimp.anon_335 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_597 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_336 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_152 !dclDef_0 !iclDef_1 = comparedefimp.anon_597 (comparedefimp.t_corresponds_141 (select dclDef_0::syntax._AttrInequality 0) (select iclDef_1::syntax._AttrInequality 0)) (comparedefimp.t_corresponds_141 (select dclDef_0::syntax._AttrInequality 1) (select iclDef_1::syntax._AttrInequality 1))
comparedefimp.t_corresponds_598 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_152 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_598 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.anon_599 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_324 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_600 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_327 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_601 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_330 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_602 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_333 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_151 !dclDef_0 !iclDef_1 = comparedefimp.anon_602 (comparedefimp.t_corresponds_574 (select dclDef_0::syntax._SymbolType 1) (select iclDef_1::syntax._SymbolType 1)) (comparedefimp.anon_601 (comparedefimp.t_corresponds_138 (select dclDef_0::syntax._SymbolType 2) (select iclDef_1::syntax._SymbolType 2)) (comparedefimp.anon_600 (comparedefimp.t_corresponds_139 (select dclDef_0::syntax._SymbolType 4) (select iclDef_1::syntax._SymbolType 4)) (comparedefimp.anon_599 (comparedefimp.t_corresponds_590 (select dclDef_0::syntax._SymbolType 5) (select iclDef_1::syntax._SymbolType 5)) (comparedefimp.t_corresponds_598 (select dclDef_0::syntax._SymbolType 7) (select iclDef_1::syntax._SymbolType 7)))))
comparedefimp.member_type_and_types_equal_50 !instance_member_type_0 !instance_member_types_1 !icl_instance_members_2 !icl_member_n_3::I !icl_functions_4 comp_st_5 = case instance_member_type_0 (syntax._FunType ft_ident_1_0 ft_arity_1_1 ft_priority_1_2 ft_type_1_3 ft_pos_1_4 ft_specials_1_5 ft_type_ptr_1_6 -> case (<{StdInt.<_17}> icl_member_n_3 (comparedefimp.size_435 icl_instance_members_2)) (True -> let _x_3_0 = comparedefimp.select_434 icl_instance_members_2 icl_member_n_3 in case (StdBool.not (<{StdString.==_2}> (select ft_ident_1_0::syntax._Ident 0) (select (select _x_3_0::syntax._ClassInstanceMember 0)::syntax._Ident 0))) (True -> let cim_index_5_0::I = select _x_3_0::syntax._ClassInstanceMember 2 in case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select (comparedefimp.select_402 icl_functions_4 cim_index_5_0)::syntax._FunDef 8)::syntax._FunInfo 6) 16) 0)) (True -> let _x_7_0 = comparedefimp.uselect_405 icl_functions_4 cim_index_5_0, _x_7_1 = select _x_7_0::_Tuple2 0 in comparedefimp.member_type_and_types_equal_50 instance_member_type_0 instance_member_types_1 icl_instance_members_2 (<{StdInt.+_6}> icl_member_n_3 1) (select _x_7_0::_Tuple2 1) (comparedefimp.instance_def_conflicts_error_53 (select _x_7_1::syntax._FunDef 0) (select _x_7_1::syntax._FunDef 5) comp_st_5)) (False -> comparedefimp.member_type_and_types_equal_50 instance_member_type_0 instance_member_types_1 icl_instance_members_2 (<{StdInt.+_6}> icl_member_n_3 1) icl_functions_4 comp_st_5) ) (False -> let cim_index_5_0 = select _x_3_0::syntax._ClassInstanceMember 2, _x_5_1 = comparedefimp.uselect_405 icl_functions_4 cim_index_5_0, _x_5_2 = select _x_5_1::_Tuple2 0, fun_type_5_3 = select _x_5_2::syntax._FunDef 4, icl_instance_member_type_5_4 = select fun_type_5_3::_Tuple1 0, tc_state_5_5 = comparedefimp._TypesCorrespondState (comparedefimp.initial_hwn (select comp_st_5::comparedefimp._CompareState 0)) (comparedefimp.initial_hwn (select comp_st_5::comparedefimp._CompareState 1)) 0, tc_state_5_6 = comparedefimp.init_symbol_type_vars ft_type_1_3 icl_instance_member_type_5_4 tc_state_5_5, _x_5_7 = comparedefimp.t_corresponds_151 ft_type_1_3 icl_instance_member_type_5_4 tc_state_5_6, tc_state_5_8::I = select _x_5_7::_Tuple2 1 in comparedefimp.member_types_equal_52 instance_member_types_1 icl_instance_members_2 (<{StdInt.+_6}> icl_member_n_3 1) (select _x_5_1::_Tuple2 1) (<{comparedefimp._if;222;33_727}> (StdBool.not (select _x_5_7::_Tuple2 0)) ft_ident_1_0 ft_pos_1_4 comp_st_5 tc_state_5_8)) ) (False -> comparedefimp.member_types_equal_52 instance_member_types_1 icl_instance_members_2 icl_member_n_3 icl_functions_4 (comparedefimp.instance_def_conflicts_error_53 ft_ident_1_0 ft_pos_1_4 comp_st_5)) ) 
comparedefimp.member_types_equal_52 !_x_0 !icl_instance_members_1 !icl_member_n_2::I !icl_functions_3 comp_st_4 = case _x_0 (_predefined._Nil -> case (<{StdInt.<_17}> icl_member_n_2 (comparedefimp.size_435 icl_instance_members_1)) (True -> let function_index_3_0::I = select (comparedefimp.select_434 icl_instance_members_1 icl_member_n_2)::syntax._ClassInstanceMember 2 in case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select (comparedefimp.select_402 icl_functions_3 function_index_3_0)::syntax._FunDef 8)::syntax._FunInfo 6) 16) 0)) (True -> let _x_5_0 = comparedefimp.uselect_405 icl_functions_3 function_index_3_0, _x_5_1 = select _x_5_0::_Tuple2 0 in comparedefimp.member_types_equal_52 _predefined._Nil icl_instance_members_1 (<{StdInt.+_6}> icl_member_n_2 1) (select _x_5_0::_Tuple2 1) (comparedefimp.instance_def_conflicts_error_53 (select _x_5_1::syntax._FunDef 0) (select _x_5_1::syntax._FunDef 5) comp_st_4)) (False -> comparedefimp.member_types_equal_52 _predefined._Nil icl_instance_members_1 (<{StdInt.+_6}> icl_member_n_2 1) icl_functions_3 comp_st_4) ) (False -> <{_Tuple2!3}> icl_functions_3 comp_st_4) ) (_predefined._Cons instance_member_type_1_0 instance_member_types_1_1 -> comparedefimp.member_type_and_types_equal_50 instance_member_type_1_0 instance_member_types_1_1 icl_instance_members_1 icl_member_n_2 icl_functions_3 comp_st_4) 
<{comparedefimp._if;222;33_727}> !_x_0::B ft_ident_1 ft_pos_2 !comp_st_3 !tc_state_4 = case _x_0 (True -> comparedefimp.instance_def_conflicts_error_53 ft_ident_1 ft_pos_2 (update comp_st_3::comparedefimp._CompareState [0:select (select tc_state_4::comparedefimp._TypesCorrespondState 0)::comparedefimp._HeapWithNumber 0,1:select (select tc_state_4::comparedefimp._TypesCorrespondState 1)::comparedefimp._HeapWithNumber 0])) (_ -> update comp_st_3::comparedefimp._CompareState [0:select (select tc_state_4::comparedefimp._TypesCorrespondState 0)::comparedefimp._HeapWithNumber 0,1:select (select tc_state_4::comparedefimp._TypesCorrespondState 1)::comparedefimp._HeapWithNumber 0])
comparedefimp.compare_603 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_508 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> select _vcompare_0::<{comparedefimp.compare;}> 0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_604 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_508 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_505 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_111 !dcl_it_0 !icl_it_1 !comp_st_2 = case comp_st_2 (comparedefimp._CompareState comp_type_var_heap_1_0 comp_attr_var_heap_1_1 comp_error_1_2 -> comparedefimp.compare_604 (_Tuple2 (select dcl_it_0::syntax._InstanceType 1) (select dcl_it_0::syntax._InstanceType 3)) (_Tuple2 (select icl_it_1::syntax._InstanceType 1) (select icl_it_1::syntax._InstanceType 3)) (update comp_st_2::comparedefimp._CompareState [0:comparedefimp.initialyseTypeVars (select dcl_it_0::syntax._InstanceType 0) (select icl_it_1::syntax._InstanceType 0) comp_type_var_heap_1_0,1:comparedefimp.initialyseAttributeVars (select dcl_it_0::syntax._InstanceType 2) (select icl_it_1::syntax._InstanceType 2) comp_attr_var_heap_1_1])) 
comparedefimp.compare_instance_defs_51 !dcl_instance_defs_0 !instance_index_1::I !_x_2 = case _x_2 (_Tuple3 icl_instance_defs_1_0 icl_functions_1_1 comp_st_1_2 -> let dcl_instance_def_2_0 = comparedefimp.select_442 dcl_instance_defs_0 instance_index_1, _x_2_1 = comparedefimp.uselect_445 icl_instance_defs_1_0 instance_index_1, icl_instance_def_2_2 = select _x_2_1::_Tuple2 0, _x_2_3 = comparedefimp.compare_111 (select dcl_instance_def_2_0::syntax._ClassInstance 3) (select icl_instance_def_2_2::syntax._ClassInstance 3) comp_st_1_2 in case (StdBool.not (select _x_2_3::_Tuple2 0)) (True -> <{_Tuple3!7}> (select _x_2_1::_Tuple2 1) icl_functions_1_1 (comparedefimp.instance_def_conflicts_error_53 (select icl_instance_def_2_2::syntax._ClassInstance 2) (select icl_instance_def_2_2::syntax._ClassInstance 7) (select _x_2_3::_Tuple2 1))) (False -> let _x_4_0 = comparedefimp.member_types_equal_52 (select dcl_instance_def_2_0::syntax._ClassInstance 4) (select icl_instance_def_2_2::syntax._ClassInstance 5) 0 icl_functions_1_1 (select _x_2_3::_Tuple2 1) in <{_Tuple3!7}> (select _x_2_1::_Tuple2 1) (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)) ) 
comparedefimp.i_fold_st_605 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_605 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_606 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_606 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_607 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_607 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_608 dcl_instance_defs_0 !fr_1::I !to_2::I !st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_608 dcl_instance_defs_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (comparedefimp.compare_instance_defs_51 dcl_instance_defs_0 fr_1 st_3)) 
comparedefimp.compareInstanceDefs !dcl_sizes_0 !dcl_instance_defs_1 !icl_instance_defs_2 !icl_functions_3 !comp_st_4 = comparedefimp.i_fold_st_608 dcl_instance_defs_1 0 (_SystemArray.select_11 dcl_sizes_0 7) (_Tuple3 icl_instance_defs_2 icl_functions_3 comp_st_4)
comparedefimp.i_fold_st_197 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_197 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.generic_def_error = "generic definition in the impl module conflicts with the def module"
comparedefimp.compare_610 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_108 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_611 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_108 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_609 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_609 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_611 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_113 !dcl_gd_0 !icl_gd_1 !comp_st_2 = case (<{syntax.==_74}> (select dcl_gd_0::syntax._GenericDependency 1) (select icl_gd_1::syntax._GenericDependency 1)) (True -> comparedefimp.compare_609 (select dcl_gd_0::syntax._GenericDependency 2) (select icl_gd_1::syntax._GenericDependency 2) comp_st_2) (False -> <{_Tuple2!3}> False comp_st_2) 
comparedefimp.compare_613 !_vcompare_0 !_x_1 !_x_2 !comp_st_3 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_113 x1_1_0 x2_2_0 comp_st_3 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_101 _vcompare_0 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_614 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let _x_3_0 = comparedefimp.compare_113 x1_1_0 x2_2_0 comp_st_2 in case (select _x_3_0::_Tuple2 0) (True -> comparedefimp.compare_612 y1_1_1 y2_2_1 (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> False (select _x_3_0::_Tuple2 1)) ) ) 
comparedefimp.compare_612 !_x_0 !_x_1 !comp_st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> comparedefimp.compare_614 (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1) comp_st_2) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple2!3}> True comp_st_2) ) (_ -> <{_Tuple2!3}> False comp_st_2)
comparedefimp.compare_generic_defs_54 !copied_from_dcl_0 !dcl_generic_defs_1 !generic_index_2::I !_x_3 = case _x_3 (_Tuple2 icl_generic_defs_1_0 comp_st_1_1 -> case (StdBool.not (_SystemArray.select_35 copied_from_dcl_0 generic_index_2)) (True -> let dcl_generic_def_3_0 = comparedefimp.select_426 dcl_generic_defs_1 generic_index_2, _x_3_1 = comparedefimp.uselect_429 icl_generic_defs_1_0 generic_index_2, icl_generic_def_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = comparedefimp.compare_110 (select dcl_generic_def_3_0::syntax._GenericDef 3) (select icl_generic_def_3_2::syntax._GenericDef 3) comp_st_1_1, comp_st_3_4 = select _x_3_3::_Tuple2 1, _x_3_5 = comparedefimp.compare_609 (select dcl_generic_def_3_0::syntax._GenericDef 4) (select icl_generic_def_3_2::syntax._GenericDef 4) comp_st_3_4, comp_st_3_6 = select _x_3_5::_Tuple2 1, _x_3_7 = comparedefimp.compare_612 (select dcl_generic_def_3_0::syntax._GenericDef 5) (select icl_generic_def_3_2::syntax._GenericDef 5) comp_st_3_6 in case (case (select _x_3_3::_Tuple2 0) (True -> case (select _x_3_5::_Tuple2 0) (True -> select _x_3_7::_Tuple2 0) (False -> False) ) (False -> False) ) (True -> <{_Tuple2!3}> (select _x_3_1::_Tuple2 1) (select _x_3_7::_Tuple2 1)) (False -> let comp_st_5_0 = select _x_3_7::_Tuple2 1 in <{_Tuple2!3}> (select _x_3_1::_Tuple2 1) (update comp_st_5_0::comparedefimp._CompareState [2:comparedefimp.compareError_526 comparedefimp.generic_def_error (checksupport.newPosition (select icl_generic_def_3_2::syntax._GenericDef 0) (select icl_generic_def_3_2::syntax._GenericDef 2)) (select comp_st_5_0::comparedefimp._CompareState 2)])) ) (False -> <{_Tuple2!3}> icl_generic_defs_1_0 comp_st_1_1) ) 
comparedefimp.i_fold_st_615 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_615 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_616 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_616 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_617 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_617 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_618 copied_from_dcl_0 dcl_generic_defs_1 !fr_2::I !to_3::I !st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_618 copied_from_dcl_0 dcl_generic_defs_1 (<{StdInt.+_6}> fr_2 StdInt.one_11) to_3 (comparedefimp.compare_generic_defs_54 copied_from_dcl_0 dcl_generic_defs_1 fr_2 st_4)) 
comparedefimp.compareGenericDefs !dcl_sizes_0 !copied_from_dcl_1 !dcl_generic_defs_2 !icl_generic_defs_3 !comp_st_4 = comparedefimp.i_fold_st_618 copied_from_dcl_1 dcl_generic_defs_2 0 (_SystemArray.select_11 dcl_sizes_0 5) (_Tuple2 icl_generic_defs_3 comp_st_4)
<{comparedefimp.c;255;36_55}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = <{comparedefimp.g_c1;255;117_729}> (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) g_a_3 g_i_1 _vArray_0 g_s_2
<{comparedefimp.g_c1;255;117_729}> !_x_0::B g_a_1 g_i_2::I _vArray_3 g_s_4::I = case _x_0 (True -> <{comparedefimp.g_c2;255;117_728}> (select _vArray_3::<{_SystemArray.Array;}> 6 g_a_1 g_i_2) _vArray_3 g_i_2 g_s_4 g_a_1) (_ -> _predefined._Nil)
<{comparedefimp.g_c2;255;117_728}> !_x_0 _vArray_1 g_i_2::I g_s_3::I g_a_4 = case _x_0 (_Tuple2 _x_1_0 g_a_1_1 -> case _x_1_0 (syntax._GenericCaseDef gc_pos_2_0 gc_type_2_1 gc_type_cons_2_2 _x_2_3 -> case _x_2_3 (syntax.GCF _x_3_0 _x_3_1 -> case _x_3_1 (syntax._GCF gcf_gident_4_0 gcf_generic_4_1 gcf_arity_4_2 gcf_generic_info_4_3 gcf_body_4_4 gcf_kind_4_5 gcf_generic_instance_deps_4_6 -> case gcf_body_4_4 (syntax.GCB_FunAndMacroIndex _x_5_0 _x_5_1 -> _predefined._Cons (_Tuple2 gcf_body_4_4 gcf_generic_info_4_3) (<{comparedefimp.c;255;36_55}> _vArray_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_1_1)) ) ) ) ) (_ -> <{comparedefimp.c;255;36_55}> _vArray_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_4)
<{comparedefimp.c;255;36_619}> !g_i_0::I !g_s_1::I g_a_2 = <{comparedefimp.g_c1;255;117_731}> (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) g_a_2 g_i_0 g_s_1
<{comparedefimp.g_c1;255;117_731}> !_x_0::B g_a_1 g_i_2::I g_s_3::I = case _x_0 (True -> <{comparedefimp.g_c2;255;117_730}> (comparedefimp.uselect_421 g_a_1 g_i_2) g_i_2 g_s_3 g_a_1) (_ -> _predefined._Nil)
<{comparedefimp.g_c2;255;117_730}> !_x_0 g_i_1::I g_s_2::I g_a_3 = case _x_0 (_Tuple2 _x_1_0 g_a_1_1 -> case _x_1_0 (syntax._GenericCaseDef gc_pos_2_0 gc_type_2_1 gc_type_cons_2_2 _x_2_3 -> case _x_2_3 (syntax.GCF _x_3_0 _x_3_1 -> case _x_3_1 (syntax._GCF gcf_gident_4_0 gcf_generic_4_1 gcf_arity_4_2 gcf_generic_info_4_3 gcf_body_4_4 gcf_kind_4_5 gcf_generic_instance_deps_4_6 -> case gcf_body_4_4 (syntax.GCB_FunAndMacroIndex _x_5_0 _x_5_1 -> _predefined._Cons (_Tuple2 gcf_body_4_4 gcf_generic_info_4_3) (<{comparedefimp.c;255;36_619}> (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_1_1)) ) ) ) ) (_ -> <{comparedefimp.c;255;36_619}> (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_3)
comparedefimp.collectGenericCaseDefMacros !dcl_generic_case_defs_0 = let _x_1_0 = comparedefimp.usize_422 dcl_generic_case_defs_0 in <{comparedefimp.c;255;36_619}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)
comparedefimp.i_fold_st_196 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_196 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.ErrorMessage = "definition in the impl module conflicts with the def module"
comparedefimp.give_error !<{_v<<<_0}> !s_1 !ec_state_2 = update ec_state_2::comparedefimp._ExpressionsCorrespondState [6:checksupport.checkError <{_v<<<_0}> (<{StdFile.<<<;}> <{StdFile.<<<_38}>) s_1 comparedefimp.ErrorMessage (select ec_state_2::comparedefimp._ExpressionsCorrespondState 6)]
comparedefimp.getIdentPos_120 !_x_0 = case _x_0 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 fun_info_1_8 -> checksupport.newPosition fun_ident_1_0 fun_pos_1_5) 
<{comparedefimp.c;1154;63_64}> !g_l_0 = <{comparedefimp.g_c1;1154;75_733}> g_l_0
<{comparedefimp.g_c1;1154;75_733}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{comparedefimp.g_c2;1154;75_732}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{comparedefimp.g_c2;1154;75_732}> !g_h_0 g_t_1 = case g_h_0 (syntax._CheckedAlternative ca_rhs_1_0 ca_position_1_1 -> _predefined._Cons ca_rhs_1_0 (<{comparedefimp.c;1154;63_64}> g_t_1)) (_ -> <{comparedefimp.c;1154;63_64}> g_t_1)
comparedefimp.from_body !_x_0 = case _x_0 (syntax.TransformedBody _x_1_0 -> case _x_1_0 (syntax._TransformedBody tb_args_2_0 tb_rhs_2_1 -> _Tuple2 tb_args_2_0 (_predefined._Cons tb_rhs_2_1 _predefined._Nil)) ) (syntax.CheckedBody _x_1_0 -> case _x_1_0 (syntax._CheckedBody cb_args_2_0 cb_rhs_2_1 -> _Tuple2 cb_args_2_0 (<{comparedefimp.c;1154;63_64}> cb_rhs_2_1)) ) 
comparedefimp.anon_365 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.e_corresponds_157 !_ve_corresponds_0 !_ve_corresponds_1 !_x_2 !_x_3 = case _x_2 (_Tuple2 a1_1_0 b1_1_1 -> case _x_3 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_365 (select _ve_corresponds_1::<{comparedefimp.e_corresponds;}> 0 b1_1_1 b2_2_1) (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 a1_1_0 a2_2_0)) ) 
comparedefimp.anon_366 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.do_nothing !ec_state_0 = ec_state_0
comparedefimp.give_error_620 !s_0 !ec_state_1 = update ec_state_1::comparedefimp._ExpressionsCorrespondState [6:checksupport.checkError (<{StdFile.<<<;}> <{StdFile.<<<_38}>) (<{StdFile.<<<;}> <{StdFile.<<<_38}>) s_0 comparedefimp.ErrorMessage (select ec_state_1::comparedefimp._ExpressionsCorrespondState 6)]
comparedefimp.e_corresponds_158 !_ve_corresponds_0 !_x_1 !_x_2 = case _x_1 (_predefined._Nil -> case _x_2 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_2 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_158 _ve_corresponds_0 dclDefs_1_1 iclDefs_2_1) (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.fromCorrespondenceNumber_121 !number_0::I = syntax.VI_CorrespondenceNumber number_0
comparedefimp.toCorrespondenceNumber_122 !_x_0 = case _x_0 (syntax.VI_CorrespondenceNumber number_1_0 -> comparedefimp.CorrespondenceNumber number_1_0) (_ -> comparedefimp.Unbound)
comparedefimp.assignCorrespondenceNumber_622 !ptr1_0 !ptr2_1 !_x_2 = case _x_2 (comparedefimp._HeapWithNumber hwn_heap_1_0 hwn_number_1_1 -> let var_info_2_0 = comparedefimp.fromCorrespondenceNumber_121 hwn_number_1_1 in comparedefimp._HeapWithNumber (Heap.writePtr ptr1_0 var_info_2_0 (Heap.writePtr ptr2_1 var_info_2_0 hwn_heap_1_0)) (<{StdInt.+_6}> hwn_number_1_1 1)) 
comparedefimp.tryToUnifyVars_621 !ptr1_0 !ptr2_1 !heapWithNumber_2 = let !info1_1_0 = Heap.sreadPtr ptr1_0 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0), !info2_1_1 = Heap.sreadPtr ptr2_1 (select heapWithNumber_2::comparedefimp._HeapWithNumber 0) in <{comparedefimp._c;800;9_734}> (_Tuple2 (comparedefimp.toCorrespondenceNumber_122 info1_1_0) (comparedefimp.toCorrespondenceNumber_122 info2_1_1)) heapWithNumber_2 ptr1_0 ptr2_1
<{comparedefimp._c;800;9_734}> !_x_0 heapWithNumber_1 ptr1_2 ptr2_3 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (comparedefimp.CorrespondenceNumber number1_2_0 -> case _x_1_1 (comparedefimp.CorrespondenceNumber number2_3_0 -> _Tuple2 (<{StdInt.==_16}> number1_2_0 number2_3_0) heapWithNumber_1) ) (comparedefimp.Unbound -> case _x_1_1 (comparedefimp.Unbound -> _Tuple2 True (comparedefimp.assignCorrespondenceNumber_622 ptr1_2 ptr2_3 heapWithNumber_1)) ) ) (_ -> _Tuple2 False heapWithNumber_1)
comparedefimp.e_corresponds_VarInfoPtr !<{_v<<<_0}> ident_1 !dclPtr_2 !iclPtr_3 !ec_state_4 = case ec_state_4 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> let _x_2_0 = comparedefimp.tryToUnifyVars_621 dclPtr_2 iclPtr_3 ec_var_heap_1_2 in case (StdBool.not (select _x_2_0::_Tuple2 0)) (True -> let ec_state_4_0 = update ec_state_4::comparedefimp._ExpressionsCorrespondState [2:select _x_2_0::_Tuple2 1] in update ec_state_4_0::comparedefimp._ExpressionsCorrespondState [6:checksupport.checkError <{_v<<<_0}> (<{StdFile.<<<;}> <{StdFile.<<<_38}>) ident_1 comparedefimp.ErrorMessage (select ec_state_4_0::comparedefimp._ExpressionsCorrespondState 6)]) (False -> update ec_state_4::comparedefimp._ExpressionsCorrespondState [2:select _x_2_0::_Tuple2 1]) ) 
comparedefimp.e_corresponds_VarInfoPtr_623 ident_0 !dclPtr_1 !iclPtr_2 !ec_state_3 = case ec_state_3 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> let _x_2_0 = comparedefimp.tryToUnifyVars_621 dclPtr_1 iclPtr_2 ec_var_heap_1_2 in case (StdBool.not (select _x_2_0::_Tuple2 0)) (True -> let ec_state_4_0 = update ec_state_3::comparedefimp._ExpressionsCorrespondState [2:select _x_2_0::_Tuple2 1] in update ec_state_4_0::comparedefimp._ExpressionsCorrespondState [6:checksupport.checkError (<{StdFile.<<<;}> <{syntax.<<<_24}>) (<{StdFile.<<<;}> <{StdFile.<<<_38}>) ident_0 comparedefimp.ErrorMessage (select ec_state_4_0::comparedefimp._ExpressionsCorrespondState 6)]) (False -> update ec_state_3::comparedefimp._ExpressionsCorrespondState [2:select _x_2_0::_Tuple2 1]) ) 
comparedefimp.e_corresponds_162 !dclVar_0 !iclVar_1 = comparedefimp.e_corresponds_VarInfoPtr_623 (select iclVar_1::syntax._FreeVar 1) (select dclVar_0::syntax._FreeVar 2) (select iclVar_1::syntax._FreeVar 2)
comparedefimp.anon_381 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_380 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_379 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_378 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_377 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_376 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_375 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_374 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_373 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_372 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_371 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_370 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_369 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_368 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.name_is_location_dependent_65::B !_x_0 = case _x_0 (syntax.FK_Function name_is_loc_dependent_1_0 -> name_is_loc_dependent_1_0) (_ -> False)
comparedefimp.names_are_compatible_66::B !dcl_module_index_0::I !dcl_index_1::I !icl_index_2::I !icl_functions_3 !macro_defs_4 = let dcl_function_1_0 = comparedefimp.select_402 (_SystemArray.select_43 macro_defs_4 dcl_module_index_0) dcl_index_1, dcl_name_is_loc_dependent_1_1::B = comparedefimp.name_is_location_dependent_65 (select dcl_function_1_0::syntax._FunDef 6), icl_function_1_2 = comparedefimp.select_402 icl_functions_3 icl_index_2 in case (<{StdBool.==_3}> dcl_name_is_loc_dependent_1_1 (comparedefimp.name_is_location_dependent_65 (select icl_function_1_2::syntax._FunDef 6))) (True -> case (StdBool.not (StdBool.not dcl_name_is_loc_dependent_1_1)) (True -> True) (False -> <{StdString.==_2}> (select (select dcl_function_1_0::syntax._FunDef 0)::syntax._Ident 0) (select (select icl_function_1_2::syntax._FunDef 0)::syntax._Ident 0)) ) (False -> False) 
comparedefimp.equal2 !<{_v==_0}> a_1 b_2 = case (StdBool.not (select <{_v==_0}>::<{StdOverloaded.==;}> 0 a_1 b_2)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.anon_367 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.equal2_624 !a_0::I !b_1::I = case (StdBool.not (<{StdInt.==_16}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.e_corresponds_159 !_ve_corresponds_0 !dclDef_1 !iclDef_2 = comparedefimp.anon_367 (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 (select dclDef_1::syntax._Global 0) (select iclDef_2::syntax._Global 0)) (comparedefimp.equal2_624 (select dclDef_1::syntax._Global 1) (select iclDef_2::syntax._Global 1))
comparedefimp.equal2_625 !a_0 !b_1 = case (StdBool.not (<{syntax.==_15}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.e_corresponds_160 !dclDef_0 !iclDef_1 = comparedefimp.equal2_625 (select dclDef_0::syntax._DefinedSymbol 0) (select iclDef_1::syntax._DefinedSymbol 0)
comparedefimp.anon_383 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_382 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_384 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_385 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.e_corresponds_166 !_ve_corresponds_0 !_ve_corresponds_1 !dcl_2 !icl_3 = comparedefimp.anon_385 (select _ve_corresponds_1::<{comparedefimp.e_corresponds;}> 0 (select dcl_2::general._Bind 1) (select icl_3::general._Bind 1)) (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 (select dcl_2::general._Bind 0) (select icl_3::general._Bind 0))
comparedefimp.anon_387 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_386 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.e_corresponds_156 !_ve_corresponds_0 !_x_1 !_x_2 = case _x_1 (general.No -> case _x_2 (general.No -> comparedefimp.do_nothing) ) (general.Yes dclYes_1_0 -> case _x_2 (general.Yes iclYes_2_0 -> select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 dclYes_1_0 iclYes_2_0) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.anon_388 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_390 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_389 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_391 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_393 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_392 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.t_corresponds_155 !dclDef_0 !iclDef_1 = comparedefimp.t_corresponds_139 (select dclDef_0::syntax._DynamicType 2) (select iclDef_1::syntax._DynamicType 2)
comparedefimp.e_corresponds_dp_type_83 !dcl_expr_ptr_0 !icl_expr_ptr_1 !ec_state_2 = case ec_state_2 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> let _x_2_0 = Heap.readPtr dcl_expr_ptr_0 ec_expr_heap_1_3, dcl_type_2_1 = select _x_2_0::_Tuple2 0, dcl_dyn_type_2_3 = select dcl_type_2_1::_Tuple3 1, ec_expr_heap_2_4 = select _x_2_0::_Tuple2 1, _x_2_5 = Heap.readPtr icl_expr_ptr_1 ec_expr_heap_2_4, icl_type_2_6 = select _x_2_5::_Tuple2 0, icl_dyn_type_2_8 = select icl_type_2_6::_Tuple3 1, _x_2_9 = comparedefimp.t_corresponds_155 dcl_dyn_type_2_3 icl_dyn_type_2_8 ec_tc_state_1_7 in case (select _x_2_9::_Tuple2 0) (True -> update ec_state_2::comparedefimp._ExpressionsCorrespondState [3:select _x_2_5::_Tuple2 1,7:select _x_2_9::_Tuple2 1]) (False -> comparedefimp.give_error_620 "" (update ec_state_2::comparedefimp._ExpressionsCorrespondState [3:select _x_2_5::_Tuple2 1,7:select _x_2_9::_Tuple2 1])) ) 
comparedefimp.anon_397 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_396 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_395 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.anon_394 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.e_corresponds_176 !dcl_0 !icl_1 = comparedefimp.e_corresponds_VarInfoPtr_623 (select icl_1::syntax._BoundVar 0) (select dcl_0::syntax._BoundVar 1) (select icl_1::syntax._BoundVar 1)
comparedefimp.anon_398 !g_0 f_1 state_2 = g_0 (f_1 state_2)
comparedefimp.e_corresponds_dyn_opt_type_84 !_vt_corresponds_0 dcl_1 icl_2 !ec_state_3 = let _x_1_0 = select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 dcl_1 icl_2 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 7) in case (select _x_1_0::_Tuple2 0) (True -> update ec_state_3::comparedefimp._ExpressionsCorrespondState [7:select _x_1_0::_Tuple2 1]) (False -> comparedefimp.give_error_620 "" (update ec_state_3::comparedefimp._ExpressionsCorrespondState [7:select _x_1_0::_Tuple2 1])) 
comparedefimp.anon_223 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_222 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.t_corresponds_130 !_vt_corresponds_0 !_x_1 !_x_2 = case _x_1 (general.No -> case _x_2 (general.No -> comparedefimp.anon_222 True) ) (general.Yes dclYes_1_0 -> case _x_2 (general.Yes iclYes_2_0 -> select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 dclYes_1_0 iclYes_2_0) ) (_ -> comparedefimp.anon_223 False)
comparedefimp.e_corresponds_174 !_x_0 !_x_1 = case _x_0 (syntax.TCE_Empty -> case _x_1 (syntax.TCE_Empty -> comparedefimp.do_nothing) ) (_ -> StdMisc.abort "comparedefimp:e_corresponds (TypeCodeExpression): currently only TCE_Empty can appear")
comparedefimp.equal2_626 !a_0 !b_1 = case (StdBool.not (<{StdString.==_2}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.e_corresponds_175 !s1_0 !s2_1 = comparedefimp.equal2_626 s1_0 s2_1
comparedefimp.e_corresponds_177 !dclField_0 !iclField_1 = comparedefimp.equal2_625 (select dclField_0::syntax._FieldSymbol 0) (select iclField_1::syntax._FieldSymbol 0)
comparedefimp.give_error_627 !s_0 !ec_state_1 = update ec_state_1::comparedefimp._ExpressionsCorrespondState [6:checksupport.checkError (<{StdFile.<<<;}> <{syntax.<<<_24}>) (<{StdFile.<<<;}> <{StdFile.<<<_38}>) s_0 comparedefimp.ErrorMessage (select ec_state_1::comparedefimp._ExpressionsCorrespondState 6)]
comparedefimp.t_corresponds_659 !_x_0 !_x_1 = case _x_0 (general.No -> case _x_1 (general.No -> comparedefimp.anon_222 True) ) (general.Yes dclYes_1_0 -> case _x_1 (general.Yes iclYes_2_0 -> comparedefimp.t_corresponds_155 dclYes_1_0 iclYes_2_0) ) (_ -> comparedefimp.anon_223 False)
comparedefimp.e_corresponds_dyn_opt_type_660 !dcl_0 !icl_1 !ec_state_2 = let _x_1_0 = comparedefimp.t_corresponds_659 dcl_0 icl_1 (select ec_state_2::comparedefimp._ExpressionsCorrespondState 7) in case (select _x_1_0::_Tuple2 0) (True -> update ec_state_2::comparedefimp._ExpressionsCorrespondState [7:select _x_1_0::_Tuple2 1]) (False -> comparedefimp.give_error_620 "" (update ec_state_2::comparedefimp._ExpressionsCorrespondState [7:select _x_1_0::_Tuple2 1])) 
comparedefimp.anon_661 !g_0 dcl_1 icl_2 state_3 = g_0 (comparedefimp.e_corresponds_dyn_opt_type_660 dcl_1 icl_2 state_3)
comparedefimp.e_corresponds_637 !dclDef_0 !iclDef_1 = comparedefimp.anon_367 (comparedefimp.e_corresponds_160 (select dclDef_0::syntax._Global 0) (select iclDef_1::syntax._Global 0)) (comparedefimp.equal2_624 (select dclDef_0::syntax._Global 1) (select iclDef_1::syntax._Global 1))
comparedefimp.equal2_641 !a_0 !b_1 = case (StdBool.not (<{StdList.==_45}> (<{StdOverloaded.==;}> <{StdString.==_2}>) a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.equal2_646 !a_0::B !b_1::B = case (StdBool.not (<{StdBool.==_3}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.e_corresponds_642 !_ve_corresponds_0 !dcl_1 !icl_2 = comparedefimp.anon_385 (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 (select dcl_1::general._Bind 1) (select icl_2::general._Bind 1)) (comparedefimp.e_corresponds_175 (select dcl_1::general._Bind 0) (select icl_2::general._Bind 0))
comparedefimp.e_corresponds_662 !dcl_0 !icl_1 = comparedefimp.anon_385 (comparedefimp.e_corresponds_176 (select dcl_0::general._Bind 1) (select icl_1::general._Bind 1)) (comparedefimp.e_corresponds_175 (select dcl_0::general._Bind 0) (select icl_1::general._Bind 0))
comparedefimp.e_corresponds_644 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_644 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_662 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_663 !dcl_0 !icl_1 = comparedefimp.anon_385 (comparedefimp.e_corresponds_162 (select dcl_0::general._Bind 1) (select icl_1::general._Bind 1)) (comparedefimp.e_corresponds_175 (select dcl_0::general._Bind 0) (select icl_1::general._Bind 0))
comparedefimp.e_corresponds_643 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_643 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_663 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.anon_645 !g_0 f_1 f_2 state_3 = comparedefimp.anon_377 g_0 f_1 (f_2 state_3)
comparedefimp.equal2_640 !a_0 !b_1 = case (StdBool.not (<{compare_types.==_18}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.anon_639 !g_0 f_1 f_2 state_3 = comparedefimp.anon_375 g_0 f_1 (f_2 state_3)
comparedefimp.e_corresponds_634 !dclDef_0 !iclDef_1 = comparedefimp.anon_367 (comparedefimp.e_corresponds_177 (select dclDef_0::syntax._Global 0) (select iclDef_1::syntax._Global 0)) (comparedefimp.equal2_624 (select dclDef_0::syntax._Global 1) (select iclDef_1::syntax._Global 1))
comparedefimp.anon_638 !g_0 f_1 f_2 state_3 = comparedefimp.anon_373 g_0 f_1 (f_2 state_3)
comparedefimp.anon_658 !g_0 f_1 f_2 state_3 = comparedefimp.anon_396 g_0 f_1 (f_2 state_3)
comparedefimp.anon_633 !g_0 f_1 f_2 state_3 = comparedefimp.anon_371 g_0 f_1 (f_2 state_3)
comparedefimp.anon_656 !dcl_expr_ptr_0 !icl_expr_ptr_1 !f_2 state_3 = comparedefimp.e_corresponds_dp_type_83 dcl_expr_ptr_0 icl_expr_ptr_1 (f_2 state_3)
comparedefimp.anon_657 !dcl_expr_ptr_0 !icl_expr_ptr_1 !f_2 f_3 state_4 = comparedefimp.anon_656 dcl_expr_ptr_0 icl_expr_ptr_1 f_2 (f_3 state_4)
comparedefimp.e_corresponds_628 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_628 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_162 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.anon_655 !g_0 f_1 f_2 state_3 = comparedefimp.anon_389 g_0 f_1 (f_2 state_3)
comparedefimp.equal2_653 !a_0 !b_1 = case (StdBool.not (<{compare_types.==_11}> a_0 b_1)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.do_nothing) 
comparedefimp.anon_650 !g_0 f_1 f_2 state_3 = comparedefimp.anon_386 g_0 f_1 (f_2 state_3)
comparedefimp.anon_648 !g_0 f_1 f_2 state_3 = comparedefimp.anon_382 g_0 f_1 (f_2 state_3)
comparedefimp.e_corresponds_630 !_ve_corresponds_0 !_x_1 !_x_2 = case _x_1 (_Tuple2 a1_1_0 b1_1_1 -> case _x_2 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_365 (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 b1_1_1 b2_2_1) (comparedefimp.e_corresponds_628 a1_1_0 a2_2_0)) ) 
comparedefimp.continuation_for_possibly_twice_defined_macros dcl_app_symb_0 !_x_1 icl_app_symb_2 !icl_index_3::I !ec_state_4 = case _x_1 (syntax._Global dcl_index_1_0 dcl_module_index_1_1 -> case (<{StdInt.==_16}> icl_index_3 -1) (True -> ec_state_4) (False -> case (StdBool.not (comparedefimp.names_are_compatible_66 dcl_module_index_1_1 dcl_index_1_0 icl_index_3 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 4) (select ec_state_4::comparedefimp._ExpressionsCorrespondState 5))) (True -> comparedefimp.give_error_627 (select icl_app_symb_2::syntax._SymbIdent 0) ec_state_4) (False -> case (StdBool.not (<{StdInt.==_16}> dcl_module_index_1_1 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 8))) (True -> comparedefimp.give_error_627 (select icl_app_symb_2::syntax._SymbIdent 0) ec_state_4) (False -> case (case (<{StdInt.==_16}> (_SystemArray.select_11 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 1) dcl_index_1_0) icl_index_3) (True -> <{StdInt.==_16}> (_SystemArray.select_11 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 0) icl_index_3) dcl_index_1_0) (False -> False) ) (True -> ec_state_4) (False -> case (case (<{StdInt.==_16}> (_SystemArray.select_11 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 1) dcl_index_1_0) -1) (True -> <{StdInt.==_16}> (_SystemArray.select_11 (select ec_state_4::comparedefimp._ExpressionsCorrespondState 0) icl_index_3) -1) (False -> False) ) (True -> comparedefimp.compareTwoMacroFuns dcl_module_index_1_1 dcl_index_1_0 icl_index_3 ec_state_4) (False -> comparedefimp.give_error_627 (select icl_app_symb_2::syntax._SymbIdent 0) ec_state_4) ) ) ) ) ) 
comparedefimp.e_corresponds_app_symb !_x_0 !_x_1 !ec_state_2 = case _x_0 (syntax._SymbIdent symb_ident_1_0 _x_1_1 -> case _x_1_1 (syntax.SK_Function dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent symb_ident_3_0 _x_3_1 -> case _x_3_1 (syntax.SK_Function icl_glob_index_4_0 -> let !main_dcl_module_n_5_0::I = select ec_state_2::comparedefimp._ExpressionsCorrespondState 8 in case (case (<{StdInt.==_16}> (select dcl_glob_index_2_0::syntax._Global 1) main_dcl_module_n_5_0) (True -> <{StdInt.==_16}> (select icl_glob_index_4_0::syntax._Global 1) main_dcl_module_n_5_0) (False -> False) ) (True -> case (StdBool.not (<{StdInt.==_16}> (select dcl_glob_index_2_0::syntax._Global 0) (select icl_glob_index_4_0::syntax._Global 0))) (True -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) (False -> ec_state_2) ) (False -> case (StdBool.not (<{compare_types.==_20}> (<{StdOverloaded.==;}> <{StdInt.==_16}>) dcl_glob_index_2_0 icl_glob_index_4_0)) (True -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) (False -> ec_state_2) ) ) ) ) (syntax.SK_OverloadedFunction dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent symb_ident_3_0 _x_3_1 -> case _x_3_1 (syntax.SK_OverloadedFunction icl_glob_index_4_0 -> case (StdBool.not (<{compare_types.==_20}> (<{StdOverloaded.==;}> <{StdInt.==_16}>) dcl_glob_index_2_0 icl_glob_index_4_0)) (True -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) (False -> ec_state_2) ) ) ) (syntax.SK_Generic dcl_glob_index_2_0 dcl_kind_2_1 -> case _x_1 (syntax._SymbIdent symb_ident_3_0 _x_3_1 -> case _x_3_1 (syntax.SK_Generic icl_glob_index_4_0 icl_kind_4_1 -> case (case (StdBool.not (<{compare_types.==_20}> (<{StdOverloaded.==;}> <{StdInt.==_16}>) dcl_glob_index_2_0 icl_glob_index_4_0)) (True -> True) (False -> StdBool.not (<{syntax.==_11}> dcl_kind_2_1 icl_kind_4_1)) ) (True -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) (False -> ec_state_2) ) ) ) (syntax.SK_DclMacro dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent symb_ident_3_0 symb_kind_3_1 -> case symb_kind_3_1 (syntax.SK_IclMacro icl_index_4_0 -> comparedefimp.continuation_for_possibly_twice_defined_macros _x_0 dcl_glob_index_2_0 _x_1 icl_index_4_0 ec_state_2) (syntax.SK_DclMacro icl_glob_index_4_0 -> case (<{compare_types.==_20}> (<{StdOverloaded.==;}> <{StdInt.==_16}>) dcl_glob_index_2_0 icl_glob_index_4_0) (True -> ec_state_2) (False -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) ) ) ) (syntax.SK_LocalDclMacroFunction dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent symb_ident_3_0 symb_kind_3_1 -> case symb_kind_3_1 (syntax.SK_LocalMacroFunction icl_index_4_0 -> comparedefimp.continuation_for_possibly_twice_defined_macros _x_0 dcl_glob_index_2_0 _x_1 icl_index_4_0 ec_state_2) (syntax.SK_Function _x_4_0 -> case _x_4_0 (syntax._Global icl_index_5_0 glob_module_5_1 -> case (case (<{StdInt.==_16}> glob_module_5_1 (select ec_state_2::comparedefimp._ExpressionsCorrespondState 8)) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select ec_state_2::comparedefimp._ExpressionsCorrespondState 7)::comparedefimp._TypesCorrespondState 2) 4) 0)) (False -> False) ) (True -> comparedefimp.continuation_for_possibly_twice_defined_macros _x_0 dcl_glob_index_2_0 _x_1 icl_index_5_0 ec_state_2) ) ) ) ) (syntax.SK_Constructor dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent icl_symb_name_3_0 _x_3_1 -> case _x_3_1 (syntax.SK_Constructor icl_glob_index_4_0 -> case (case (<{StdInt.==_16}> (select dcl_glob_index_2_0::syntax._Global 1) (select icl_glob_index_4_0::syntax._Global 1)) (True -> <{StdString.==_2}> (select symb_ident_1_0::syntax._Ident 0) (select icl_symb_name_3_0::syntax._Ident 0)) (False -> False) ) (True -> ec_state_2) (False -> comparedefimp.give_error_627 icl_symb_name_3_0 ec_state_2) ) ) ) (syntax.SK_NewTypeConstructor dcl_glob_index_2_0 -> case _x_1 (syntax._SymbIdent icl_symb_name_3_0 _x_3_1 -> case _x_3_1 (syntax.SK_NewTypeConstructor icl_glob_index_4_0 -> case (case (<{StdInt.==_16}> (select dcl_glob_index_2_0::syntax._GlobalIndex 0) (select icl_glob_index_4_0::syntax._GlobalIndex 0)) (True -> <{StdString.==_2}> (select symb_ident_1_0::syntax._Ident 0) (select icl_symb_name_3_0::syntax._Ident 0)) (False -> False) ) (True -> ec_state_2) (False -> comparedefimp.give_error_627 icl_symb_name_3_0 ec_state_2) ) ) ) (_ -> case _x_1 (syntax._SymbIdent symb_ident_2_0 symb_kind2_2_1 -> comparedefimp.give_error_627 symb_ident_1_0 ec_state_2) )) 
comparedefimp.anon_631 !g_0 _x_1 _x_2 state_3 = g_0 (comparedefimp.e_corresponds_app_symb _x_1 _x_2 state_3)
comparedefimp.e_corresponds_165 !dcl_0 !icl_1 = comparedefimp.anon_384 (comparedefimp.e_corresponds_162 (select dcl_0::syntax._LetBind 0) (select icl_1::syntax._LetBind 0)) (comparedefimp.e_corresponds_163 (select dcl_0::syntax._LetBind 1) (select icl_1::syntax._LetBind 1))
comparedefimp.e_corresponds_647 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_647 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_165 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_164 !dclLet_0 !iclLet_1 = comparedefimp.anon_648 (comparedefimp.e_corresponds_163 (select dclLet_0::syntax._Let 2) (select iclLet_1::syntax._Let 2)) (comparedefimp.e_corresponds_647 (select dclLet_0::syntax._Let 1) (select iclLet_1::syntax._Let 1)) (comparedefimp.e_corresponds_647 (select dclLet_0::syntax._Let 0) (select iclLet_1::syntax._Let 0))
comparedefimp.e_corresponds_649 !_x_0 !_x_1 = case _x_0 (general.No -> case _x_1 (general.No -> comparedefimp.do_nothing) ) (general.Yes dclYes_1_0 -> case _x_1 (general.Yes iclYes_2_0 -> comparedefimp.e_corresponds_163 dclYes_1_0 iclYes_2_0) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_170 !dcl_0 !icl_1 = comparedefimp.anon_391 (comparedefimp.e_corresponds_163 (select dcl_0::syntax._BasicPattern 1) (select icl_1::syntax._BasicPattern 1)) (comparedefimp.equal2_640 (select dcl_0::syntax._BasicPattern 0) (select icl_1::syntax._BasicPattern 0))
comparedefimp.e_corresponds_652 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_652 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_170 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_169 !dcl_0 !icl_1 = comparedefimp.anon_655 (comparedefimp.e_corresponds_163 (select dcl_0::syntax._AlgebraicPattern 2) (select icl_1::syntax._AlgebraicPattern 2)) (comparedefimp.e_corresponds_628 (select dcl_0::syntax._AlgebraicPattern 1) (select icl_1::syntax._AlgebraicPattern 1)) (comparedefimp.e_corresponds_637 (select dcl_0::syntax._AlgebraicPattern 0) (select icl_1::syntax._AlgebraicPattern 0))
comparedefimp.e_corresponds_651 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_651 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_169 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_171 !dcl_0 !icl_1 = comparedefimp.anon_657 (select dcl_0::syntax._DynamicPattern 1) (select icl_1::syntax._DynamicPattern 1) (comparedefimp.e_corresponds_163 (select dcl_0::syntax._DynamicPattern 3) (select icl_1::syntax._DynamicPattern 3)) (comparedefimp.e_corresponds_162 (select dcl_0::syntax._DynamicPattern 0) (select icl_1::syntax._DynamicPattern 0))
comparedefimp.e_corresponds_654 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_654 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_171 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_168 !_x_0 !_x_1 = case _x_0 (syntax.AlgebraicPatterns dcl_alg_type_1_0 dcl_patterns_1_1 -> case _x_1 (syntax.AlgebraicPatterns icl_alg_type_2_0 icl_patterns_2_1 -> comparedefimp.e_corresponds_651 dcl_patterns_1_1 icl_patterns_2_1) ) (syntax.BasicPatterns dcl_basic_type_1_0 dcl_patterns_1_1 -> case _x_1 (syntax.BasicPatterns icl_basic_type_2_0 icl_patterns_2_1 -> comparedefimp.anon_388 (comparedefimp.e_corresponds_652 dcl_patterns_1_1 icl_patterns_2_1) (comparedefimp.equal2_653 dcl_basic_type_1_0 icl_basic_type_2_0)) ) (syntax.NewTypePatterns _x_1_0 dcl_patterns_1_1 -> case _x_1 (syntax.NewTypePatterns _x_2_0 icl_patterns_2_1 -> comparedefimp.e_corresponds_651 dcl_patterns_1_1 icl_patterns_2_1) ) (syntax.OverloadedListPatterns dcl_alg_type_1_0 _x_1_1 dcl_patterns_1_2 -> case _x_1 (syntax.OverloadedListPatterns icl_alg_type_2_0 _x_2_1 icl_patterns_2_2 -> comparedefimp.e_corresponds_651 dcl_patterns_1_2 icl_patterns_2_2) ) (syntax.DynamicPatterns dcl_patterns_1_0 -> case _x_1 (syntax.DynamicPatterns icl_patterns_2_0 -> comparedefimp.e_corresponds_654 dcl_patterns_1_0 icl_patterns_2_0) ) (syntax.NoPattern -> case _x_1 (syntax.NoPattern -> comparedefimp.do_nothing) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_167 !dclCase_0 !iclCase_1 = comparedefimp.anon_650 (comparedefimp.e_corresponds_649 (select dclCase_0::syntax._Case 2) (select iclCase_1::syntax._Case 2)) (comparedefimp.e_corresponds_168 (select dclCase_0::syntax._Case 1) (select iclCase_1::syntax._Case 1)) (comparedefimp.e_corresponds_163 (select dclCase_0::syntax._Case 0) (select iclCase_1::syntax._Case 0))
comparedefimp.e_corresponds_172 !_x_0 !_x_1 = case _x_0 (syntax.RecordSelection dcl_selector_1_0 dcl_field_nr_1_1 -> case _x_1 (syntax.RecordSelection icl_selector_2_0 icl_field_nr_2_1 -> comparedefimp.anon_394 (comparedefimp.equal2_624 dcl_field_nr_1_1 icl_field_nr_2_1) (comparedefimp.e_corresponds_637 dcl_selector_1_0 icl_selector_2_0)) ) (syntax.ArraySelection dcl_selector_1_0 _x_1_1 dcl_index_expr_1_2 -> case _x_1 (syntax.ArraySelection icl_selector_2_0 _x_2_1 icl_index_expr_2_2 -> comparedefimp.anon_395 (comparedefimp.e_corresponds_163 dcl_index_expr_1_2 icl_index_expr_2_2) (comparedefimp.e_corresponds_637 dcl_selector_1_0 icl_selector_2_0)) ) (syntax.DictionarySelection dcl_dict_var_1_0 dcl_selections_1_1 _x_1_2 dcl_index_expr_1_3 -> case _x_1 (syntax.DictionarySelection icl_dict_var_2_0 icl_selections_2_1 _x_2_2 icl_index_expr_2_3 -> comparedefimp.anon_658 (comparedefimp.e_corresponds_163 dcl_index_expr_1_3 icl_index_expr_2_3) (comparedefimp.e_corresponds_632 dcl_selections_1_1 icl_selections_2_1) (comparedefimp.e_corresponds_176 dcl_dict_var_1_0 icl_dict_var_2_0)) ) 
comparedefimp.e_corresponds_632 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_632 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_172 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_665 !dcl_0 !icl_1 = comparedefimp.anon_385 (comparedefimp.e_corresponds_634 (select dcl_0::general._Bind 1) (select icl_1::general._Bind 1)) (comparedefimp.e_corresponds_163 (select dcl_0::general._Bind 0) (select icl_1::general._Bind 0))
comparedefimp.e_corresponds_636 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_636 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_665 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_173 !dcl_0 !icl_1 = comparedefimp.anon_661 (comparedefimp.e_corresponds_163 (select dcl_0::syntax._DynamicExpr 0) (select icl_1::syntax._DynamicExpr 0)) (select dcl_0::syntax._DynamicExpr 1) (select icl_1::syntax._DynamicExpr 1)
comparedefimp.e_corresponds_163 !_x_0 !_x_1 = case _x_0 (syntax.Var dcl_1_0 -> case _x_1 (syntax.Var icl_2_0 -> comparedefimp.e_corresponds_176 dcl_1_0 icl_2_0) ) (syntax.App dcl_app_1_0 -> case _x_1 (syntax.App icl_app_2_0 -> comparedefimp.anon_631 (comparedefimp.e_corresponds_629 (select dcl_app_1_0::syntax._App 1) (select icl_app_2_0::syntax._App 1)) (select dcl_app_1_0::syntax._App 0) (select icl_app_2_0::syntax._App 0)) ) (<{syntax.@}> dclFun_1_0 dclArgs_1_1 -> case _x_1 (<{syntax.@}> iclFun_2_0 iclArgs_2_1 -> comparedefimp.anon_369 (comparedefimp.e_corresponds_629 dclArgs_1_1 iclArgs_2_1) (comparedefimp.e_corresponds_163 dclFun_1_0 iclFun_2_0)) ) (syntax.Let dcl_1_0 -> case _x_1 (syntax.Let icl_2_0 -> comparedefimp.e_corresponds_164 dcl_1_0 icl_2_0) ) (syntax.Case dcl_1_0 -> case _x_1 (syntax.Case icl_2_0 -> comparedefimp.e_corresponds_167 dcl_1_0 icl_2_0) ) (syntax.Selection dcl_is_unique_1_0 dcl_expr_1_1 dcl_selections_1_2 -> case _x_1 (syntax.Selection icl_is_unique_2_0 icl_expr_2_1 icl_selections_2_2 -> case (StdBool.not (compare_constructor.equal_constructor dcl_is_unique_1_0 icl_is_unique_2_0)) (True -> comparedefimp.give_error_620 "") (False -> comparedefimp.anon_370 (comparedefimp.e_corresponds_632 dcl_selections_1_2 icl_selections_2_2) (comparedefimp.e_corresponds_163 dcl_expr_1_1 icl_expr_2_1)) ) ) (syntax.Update dcl_expr_1_1_0 dcl_selections_1_1 dcl_expr_2_1_2 -> case _x_1 (syntax.Update icl_expr_1_2_0 icl_selections_2_1 icl_expr_2_2_2 -> comparedefimp.anon_633 (comparedefimp.e_corresponds_163 dcl_expr_2_1_2 icl_expr_2_2_2) (comparedefimp.e_corresponds_632 dcl_selections_1_1 icl_selections_2_1) (comparedefimp.e_corresponds_163 dcl_expr_1_1_0 icl_expr_1_2_0)) ) (syntax.RecordUpdate dcl_type_1_0 dcl_expr_1_1 dcl_selections_1_2 -> case _x_1 (syntax.RecordUpdate icl_type_2_0 icl_expr_2_1 icl_selections_2_2 -> comparedefimp.anon_638 (comparedefimp.e_corresponds_636 dcl_selections_1_2 icl_selections_2_2) (comparedefimp.e_corresponds_163 dcl_expr_1_1 icl_expr_2_1) (comparedefimp.e_corresponds_637 dcl_type_1_0 icl_type_2_0)) ) (syntax.TupleSelect dcl_ds_1_0 dcl_field_nr_1_1 dcl_expr_1_2 -> case _x_1 (syntax.TupleSelect icl_ds_2_0 icl_field_nr_2_1 icl_expr_2_2 -> comparedefimp.anon_639 (comparedefimp.e_corresponds_163 dcl_expr_1_2 icl_expr_2_2) (comparedefimp.equal2_624 dcl_field_nr_1_1 icl_field_nr_2_1) (comparedefimp.e_corresponds_160 dcl_ds_1_0 icl_ds_2_0)) ) (syntax.BasicExpr dcl_value_1_0 -> case _x_1 (syntax.BasicExpr icl_value_2_0 -> comparedefimp.equal2_640 dcl_value_1_0 icl_value_2_0) ) (syntax.AnyCodeExpr dcl_ins_1_0 dcl_outs_1_1 dcl_code_sequence_1_2 -> case _x_1 (syntax.AnyCodeExpr icl_ins_2_0 icl_outs_2_1 icl_code_sequence_2_2 -> comparedefimp.anon_645 (comparedefimp.equal2_641 dcl_code_sequence_1_2 icl_code_sequence_2_2) (comparedefimp.e_corresponds_643 dcl_outs_1_1 icl_outs_2_1) (comparedefimp.e_corresponds_644 dcl_ins_1_0 icl_ins_2_0)) ) (syntax.ABCCodeExpr dcl_lines_1_0 dcl_do_inline_1_1 -> case _x_1 (syntax.ABCCodeExpr icl_lines_2_0 icl_do_inline_2_1 -> comparedefimp.anon_379 (comparedefimp.equal2_646 dcl_do_inline_1_1 icl_do_inline_2_1) (comparedefimp.equal2_641 dcl_lines_1_0 icl_lines_2_0)) ) (syntax.MatchExpr dcl_cons_symbol_1_0 dcl_src_expr_1_1 -> case _x_1 (syntax.MatchExpr icl_cons_symbol_2_0 icl_src_expr_2_1 -> comparedefimp.anon_380 (comparedefimp.e_corresponds_163 dcl_src_expr_1_1 icl_src_expr_2_1) (comparedefimp.e_corresponds_637 dcl_cons_symbol_1_0 icl_cons_symbol_2_0)) ) (syntax.IsConstructor dcl_src_expr_1_0 dcl_cons_symbol_1_1 _x_1_2 _x_1_3 _x_1_4 _x_1_5 -> case _x_1 (syntax.IsConstructor icl_src_expr_2_0 icl_cons_symbol_2_1 _x_2_2 _x_2_3 _x_2_4 _x_2_5 -> comparedefimp.anon_381 (comparedefimp.e_corresponds_163 dcl_src_expr_1_0 icl_src_expr_2_0) (comparedefimp.e_corresponds_637 dcl_cons_symbol_1_1 icl_cons_symbol_2_1)) ) (syntax.FreeVar dcl_1_0 -> case _x_1 (syntax.FreeVar icl_2_0 -> comparedefimp.e_corresponds_162 dcl_1_0 icl_2_0) ) (syntax.DynamicExpr dcl_1_0 -> case _x_1 (syntax.DynamicExpr icl_2_0 -> comparedefimp.e_corresponds_173 dcl_1_0 icl_2_0) ) (syntax.TypeCodeExpression dcl_1_0 -> case _x_1 (syntax.TypeCodeExpression icl_2_0 -> comparedefimp.e_corresponds_174 dcl_1_0 icl_2_0) ) (syntax.EE -> case _x_1 (syntax.EE -> comparedefimp.do_nothing) ) (syntax.NoBind _x_1_0 -> case _x_1 (syntax.NoBind _x_2_0 -> comparedefimp.do_nothing) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_629 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.do_nothing) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_366 (comparedefimp.e_corresponds_629 dclDefs_1_1 iclDefs_2_1) (comparedefimp.e_corresponds_163 dclDef_1_0 iclDef_2_0)) ) (_ -> comparedefimp.give_error_620 "")
comparedefimp.e_corresponds_664 !_x_0 !_x_1 = case _x_0 (_Tuple2 a1_1_0 b1_1_1 -> case _x_1 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_365 (comparedefimp.e_corresponds_629 b1_1_1 b2_2_1) (comparedefimp.e_corresponds_628 a1_1_0 a2_2_0)) ) 
comparedefimp.e_corresponds_161 !dclDef_0 !iclDef_1 = comparedefimp.e_corresponds_664 (comparedefimp.from_body dclDef_0) (comparedefimp.from_body iclDef_1)
comparedefimp.compareTwoMacroFuns !macro_module_index_0::I !dcl_1::I !icl_2::I !ec_state_3 = case ec_state_3 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> case (StdBool.not (<{StdInt.==_16}> macro_module_index_0 ec_main_dcl_module_n_1_8)) (True -> let _x_3_0 = comparedefimp.select_402 (_SystemArray.select_43 ec_macro_defs_1_5 macro_module_index_0) dcl_1 in update ec_state_3::comparedefimp._ExpressionsCorrespondState [5:select _x_3_0::_Tuple2 1,6:checksupport.checkErrorWithIdentPos (<{StdFile.<<<;}> <{StdFile.<<<_38}>) (comparedefimp.getIdentPos_120 (select _x_3_0::_Tuple2 0)) comparedefimp.ErrorMessage (select ec_state_3::comparedefimp._ExpressionsCorrespondState 6)]) (False -> case (<{StdInt.==_16}> icl_2 -1) (True -> ec_state_3) (False -> let _x_4_0 = comparedefimp.select_402 (_SystemArray.select_43 ec_macro_defs_1_5 macro_module_index_0) dcl_1, dcl_function_4_1 = select _x_4_0::_Tuple2 0, _x_4_2 = comparedefimp.uselect_405 ec_icl_functions_1_4 icl_2, icl_function_4_3 = select _x_4_2::_Tuple2 0 in case (StdBool.not (<{comparedefimp._c;684;15_735}> (_Tuple2 (select dcl_function_4_1::syntax._FunDef 3) (select icl_function_4_3::syntax._FunDef 3)))) (True -> update ec_state_3::comparedefimp._ExpressionsCorrespondState [0:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 0) icl_2 dcl_1,1:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 1) dcl_1 icl_2,4:select _x_4_2::_Tuple2 1,5:select _x_4_0::_Tuple2 1]) (False -> let ec_icl_functions_6_0 = select _x_4_2::_Tuple2 1, ec_macro_defs_6_1 = select _x_4_0::_Tuple2 1, ec_state_6_2 = update ec_state_3::comparedefimp._ExpressionsCorrespondState [0:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 0) icl_2 dcl_1,1:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 1) dcl_1 icl_2,4:ec_icl_functions_6_0,5:ec_macro_defs_6_1], ident_pos_6_3 = comparedefimp.getIdentPos_120 dcl_function_4_1, ec_error_admin_6_4 = checksupport.pushErrorAdmin_32 ident_pos_6_3 (select ec_state_6_2::comparedefimp._ExpressionsCorrespondState 6), ec_state_6_5 = update ec_state_6_2::comparedefimp._ExpressionsCorrespondState [6:ec_error_admin_6_4] in case (case (case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select dcl_function_4_1::syntax._FunDef 8)::syntax._FunInfo 6) 1) (StdInt.bitand (select (select icl_function_4_3::syntax._FunDef 8)::syntax._FunInfo 6) 1))) (True -> case (<{StdInt.==_16}> (StdInt.bitand (select (select ec_state_6_5::comparedefimp._ExpressionsCorrespondState 7)::comparedefimp._TypesCorrespondState 2) 4) 0) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select dcl_function_4_1::syntax._FunDef 8)::syntax._FunInfo 6) 1) 0)) (False -> False) ) (False -> False) ) (True -> True) (False -> StdBool.not (<{compare_types.==_21}> (select dcl_function_4_1::syntax._FunDef 2) (select icl_function_4_3::syntax._FunDef 2))) ) (True -> let ec_state_8_0 = comparedefimp.give_error_627 (select dcl_function_4_1::syntax._FunDef 0) ec_state_6_5 in update ec_state_8_0::comparedefimp._ExpressionsCorrespondState [6:checksupport.popErrorAdmin_31 (select ec_state_8_0::comparedefimp._ExpressionsCorrespondState 6)]) (False -> let ec_state_8_0 = comparedefimp.e_corresponds_161 (select dcl_function_4_1::syntax._FunDef 3) (select icl_function_4_3::syntax._FunDef 3) ec_state_6_5 in update ec_state_8_0::comparedefimp._ExpressionsCorrespondState [6:checksupport.popErrorAdmin_31 (select ec_state_8_0::comparedefimp._ExpressionsCorrespondState 6)]) ) ) ) ) 
<{comparedefimp._c;684;15_735}>::B !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (syntax.TransformedBody _x_2_0 -> case _x_1_1 (syntax.CheckedBody _x_3_0 -> False) ) ) (_ -> True)
comparedefimp.e_corresponds_635 !_ve_corresponds_0 !dcl_1 !icl_2 = comparedefimp.anon_385 (select _ve_corresponds_0::<{comparedefimp.e_corresponds;}> 0 (select dcl_1::general._Bind 1) (select icl_2::general._Bind 1)) (comparedefimp.e_corresponds_163 (select dcl_1::general._Bind 0) (select icl_2::general._Bind 0))
comparedefimp.compareMacroWithConversion_60 !_vArray_0 conversions_1 ir_from_2::I !dcl_3::I !ec_state_4 = case ec_state_4 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> comparedefimp.compareTwoMacroFuns ec_main_dcl_module_n_1_8 dcl_3 (select _vArray_0::<{_SystemArray.Array;}> 3 conversions_1 (<{StdInt.-_7}> dcl_3 ir_from_2)) ec_state_4) 
comparedefimp.remove_generic_info_arg_62 !_x_0 = case _x_0 (_Tuple2 _x_1_0 rhs_1_1 -> case _x_1_0 (_predefined._Cons generic_info_arg_2_0 args_2_1 -> _Tuple2 args_2_1 rhs_1_1) ) (_ -> _x_0)
comparedefimp.compare_generic_case_def_macro_and_function !dcl_0::I !icl_1::I !generic_info_2::I !ec_state_3 = case ec_state_3 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> case (<{StdInt.==_16}> icl_1 -1) (True -> ec_state_3) (False -> let _x_3_0 = comparedefimp.select_402 (_SystemArray.select_43 ec_macro_defs_1_5 ec_main_dcl_module_n_1_8) dcl_0, dcl_function_3_1 = select _x_3_0::_Tuple2 0, _x_3_2 = comparedefimp.uselect_405 ec_icl_functions_1_4 icl_1, ec_state_3_3 = update ec_state_3::comparedefimp._ExpressionsCorrespondState [0:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 0) icl_1 dcl_0,1:_SystemArray.update_13 (select ec_state_3::comparedefimp._ExpressionsCorrespondState 1) dcl_0 icl_1,4:select _x_3_2::_Tuple2 1,5:select _x_3_0::_Tuple2 1], ec_state_3_4 = update ec_state_3_3::comparedefimp._ExpressionsCorrespondState [6:checksupport.pushErrorAdmin_32 (comparedefimp.getIdentPos_120 dcl_function_3_1) (select ec_state_3_3::comparedefimp._ExpressionsCorrespondState 6)], ec_tc_state_3_5 = select ec_state_3_4::comparedefimp._ExpressionsCorrespondState 7, ec_state_3_6 = comparedefimp.e_corresponds_664 (comparedefimp.from_body (select dcl_function_3_1::syntax._FunDef 3)) (<{comparedefimp._if;717;11_736}> (<{StdInt.==_16}> generic_info_2 0) icl_function_3_9) (update ec_state_3_4::comparedefimp._ExpressionsCorrespondState [7:update ec_tc_state_3_5::comparedefimp._TypesCorrespondState [2:StdInt.bitor (select ec_tc_state_3_5::comparedefimp._TypesCorrespondState 2) 4]]), ec_tc_state_3_7 = select ec_state_3_6::comparedefimp._ExpressionsCorrespondState 7, ec_state_3_8 = update ec_state_3_6::comparedefimp._ExpressionsCorrespondState [7:update ec_tc_state_3_7::comparedefimp._TypesCorrespondState [2:StdInt.bitand (select ec_tc_state_3_7::comparedefimp._TypesCorrespondState 2) (StdInt.bitnot 4)]], icl_function_3_9 = select _x_3_2::_Tuple2 0 in update ec_state_3_8::comparedefimp._ExpressionsCorrespondState [6:checksupport.popErrorAdmin_31 (select ec_state_3_8::comparedefimp._ExpressionsCorrespondState 6)]) ) 
<{comparedefimp._if;717;11_736}> !_x_0::B !icl_function_1 = case _x_0 (True -> comparedefimp.remove_generic_info_arg_62 (comparedefimp.from_body (select icl_function_1::syntax._FunDef 3))) (_ -> comparedefimp.from_body (select icl_function_1::syntax._FunDef 3))
comparedefimp.compare_generic_case_def_macros_61 !_x_0 !ec_state_1 = case _x_0 (_predefined._Cons _x_1_0 gcbs_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 generic_info_2_1 -> case _x_2_0 (syntax.GCB_FunAndMacroIndex fun_index_3_0 macro_index_3_1 -> case ec_state_1 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_4_0 ec_dcl_correspondences_4_1 ec_var_heap_4_2 ec_expr_heap_4_3 ec_icl_functions_4_4 ec_macro_defs_4_5 ec_error_admin_4_6 ec_tc_state_4_7 ec_main_dcl_module_n_4_8 -> comparedefimp.compare_generic_case_def_macros_61 gcbs_1_1 (comparedefimp.compare_generic_case_def_macro_and_function macro_index_3_1 fun_index_3_0 generic_info_2_1 ec_state_1)) ) ) ) (_predefined._Nil -> ec_state_1) 
comparedefimp.i_fold_st_666 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_666 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_667 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_667 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_668 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_668 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_669 !_vArray_0 conversions_1 ir_from_2::I !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_669 _vArray_0 conversions_1 ir_from_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (comparedefimp.compareMacroWithConversion_60 _vArray_0 conversions_1 ir_from_2 fr_3 st_5)) 
comparedefimp.compareMacrosWithConversion !_vArray_0 !main_dcl_module_n_1::I conversions_2 macro_range_3 generic_case_def_macros_4 !icl_functions_5 !macro_defs_6 var_heap_7 expr_heap_8 tc_state_9 error_admin_10 = let !n_icl_functions_1_0::I = comparedefimp.size_403 icl_functions_5, !n_dcl_macros_and_functions_1_1::I = comparedefimp.size_403 (_SystemArray.select_43 macro_defs_6 main_dcl_module_n_1), ec_state_1_2 = comparedefimp.compare_generic_case_def_macros_61 generic_case_def_macros_4 (comparedefimp.i_fold_st_669 _vArray_0 conversions_2 (select macro_range_3::syntax._IndexRange 0) (select macro_range_3::syntax._IndexRange 0) (select macro_range_3::syntax._IndexRange 1) (comparedefimp._ExpressionsCorrespondState (_SystemArray.createArray_9 n_icl_functions_1_0 -1) (_SystemArray.createArray_9 n_dcl_macros_and_functions_1_1 -1) (comparedefimp.initial_hwn var_heap_7) expr_heap_8 icl_functions_5 macro_defs_6 error_admin_10 tc_state_9 main_dcl_module_n_1)) in _Tuple6 (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 4) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 5) (select (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 2)::comparedefimp._HeapWithNumber 0) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 3) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 7) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 6)
comparedefimp.i_fold_st_195 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> comparedefimp.i_fold_st_195 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
comparedefimp.generate_error !_vget_0 !<{_v<<<_1}> message_2 iclDef_3 iclDefs_4 tc_state_5 error_admin_6 = let ident_pos_1_0 = select _vget_0::<{comparedefimp.getIdentPos;}> 0 iclDef_3 in _Tuple3 iclDefs_4 tc_state_5 (checksupport.popErrorAdmin_31 (checksupport.checkError (<{StdFile.<<<;}> <{syntax.<<<_24}>) <{_v<<<_1}> (select ident_pos_1_0::syntax._IdentPos 0) message_2 (checksupport.pushErrorAdmin_32 ident_pos_1_0 error_admin_6)))
comparedefimp.generate_error_670 !<{_v<<<_0}> message_1 iclDef_2 iclDefs_3 tc_state_4 error_admin_5 = let ident_pos_1_0 = comparedefimp.getIdentPos_120 iclDef_2 in _Tuple3 iclDefs_3 tc_state_4 (checksupport.popErrorAdmin_31 (checksupport.checkError (<{StdFile.<<<;}> <{syntax.<<<_24}>) <{_v<<<_0}> (select ident_pos_1_0::syntax._IdentPos 0) message_1 (checksupport.pushErrorAdmin_32 ident_pos_1_0 error_admin_5)))
comparedefimp.generate_error_671 message_0 iclDef_1 iclDefs_2 tc_state_3 error_admin_4 = let ident_pos_1_0 = comparedefimp.getIdentPos_120 iclDef_1 in _Tuple3 iclDefs_2 tc_state_3 (checksupport.popErrorAdmin_31 (checksupport.checkError (<{StdFile.<<<;}> <{syntax.<<<_24}>) (<{StdFile.<<<;}> <{StdFile.<<<_38}>) (select ident_pos_1_0::syntax._IdentPos 0) message_0 (checksupport.pushErrorAdmin_32 ident_pos_1_0 error_admin_4)))
comparedefimp.compareTwoFunctionTypes !dcl_fun_types_0 !dcl_1::I !_x_2 = case _x_2 (_Tuple3 icl_functions_1_0 tc_state_1_1 error_admin_1_2 -> let _x_2_0 = comparedefimp.uselect_405 icl_functions_1_0 dcl_1, fun_def_2_1 = select _x_2_0::_Tuple2 0, icl_functions_2_2 = select _x_2_0::_Tuple2 1, fun_priority_2_3 = select fun_def_2_1::syntax._FunDef 2 in <{comparedefimp._c;583;7_737}> (select fun_def_2_1::syntax._FunDef 4) fun_def_2_1 icl_functions_2_2 tc_state_1_1 error_admin_1_2 dcl_fun_types_0 dcl_1 fun_priority_2_3) 
<{comparedefimp._c;583;7_737}> !_x_0 fun_def_1 !icl_functions_2 tc_state_3 error_admin_4 dcl_fun_types_5 dcl_6::I fun_priority_7 = case _x_0 (general.No -> comparedefimp.generate_error_671 "type of exported function is missing" fun_def_1 icl_functions_2 tc_state_3 error_admin_4) (general.Yes icl_symbol_type_1_0 -> let _x_2_0 = comparedefimp.select_410 dcl_fun_types_5 dcl_6, dcl_symbol_type_2_1 = select _x_2_0::syntax._FunType 3, tc_state_2_2 = comparedefimp.init_symbol_type_vars dcl_symbol_type_2_1 icl_symbol_type_1_0 tc_state_3, _x_2_3 = comparedefimp.t_corresponds_151 dcl_symbol_type_2_1 icl_symbol_type_1_0 tc_state_2_2 in case (case (select _x_2_3::_Tuple2 0) (True -> <{compare_types.==_21}> fun_priority_7 (select _x_2_0::syntax._FunType 2)) (False -> False) ) (True -> <{_Tuple3!7}> icl_functions_2 (select _x_2_3::_Tuple2 1) error_admin_4) (False -> comparedefimp.generate_error_671 comparedefimp.ErrorMessage fun_def_1 icl_functions_2 (select _x_2_3::_Tuple2 1) error_admin_4) ) 
comparedefimp.i_fold_st_672 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> comparedefimp.i_fold_st_672 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
comparedefimp.i_fold_st_673 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_673 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
comparedefimp.i_fold_st_674 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_674 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
comparedefimp.i_fold_st_675 dcl_fun_types_0 !fr_1::I !to_2::I !st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> comparedefimp.i_fold_st_675 dcl_fun_types_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (comparedefimp.compareTwoFunctionTypes dcl_fun_types_0 fr_1 st_3)) 
comparedefimp.compareFunctionTypes !n_exported_global_functions_0::I dcl_fun_types_1 !icl_functions_2 !tc_state_3 !error_admin_4 = comparedefimp.i_fold_st_675 dcl_fun_types_1 0 n_exported_global_functions_0 (_Tuple3 icl_functions_2 tc_state_3 error_admin_4)
comparedefimp.compareMacroWithConversion_678 !conversions_0 !ir_from_1::I !dcl_2::I !ec_state_3 = case ec_state_3 (comparedefimp._ExpressionsCorrespondState ec_icl_correspondences_1_0 ec_dcl_correspondences_1_1 ec_var_heap_1_2 ec_expr_heap_1_3 ec_icl_functions_1_4 ec_macro_defs_1_5 ec_error_admin_1_6 ec_tc_state_1_7 ec_main_dcl_module_n_1_8 -> comparedefimp.compareTwoMacroFuns ec_main_dcl_module_n_1_8 dcl_2 (_SystemArray.select_11 conversions_0 (<{StdInt.-_7}> dcl_2 ir_from_1)) ec_state_3) 
comparedefimp.i_fold_st_677 conversions_0 ir_from_1::I !fr_2::I !to_3::I !st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> comparedefimp.i_fold_st_677 conversions_0 ir_from_1 (<{StdInt.+_6}> fr_2 StdInt.one_11) to_3 (comparedefimp.compareMacroWithConversion_678 conversions_0 ir_from_1 fr_2 st_4)) 
comparedefimp.compareMacrosWithConversion_676 !main_dcl_module_n_0::I conversions_1 macro_range_2 generic_case_def_macros_3 !icl_functions_4 !macro_defs_5 var_heap_6 expr_heap_7 tc_state_8 error_admin_9 = let !n_icl_functions_1_0::I = comparedefimp.size_403 icl_functions_4, !n_dcl_macros_and_functions_1_1::I = comparedefimp.size_403 (_SystemArray.select_43 macro_defs_5 main_dcl_module_n_0), ec_state_1_2 = comparedefimp.compare_generic_case_def_macros_61 generic_case_def_macros_3 (comparedefimp.i_fold_st_677 conversions_1 (select macro_range_2::syntax._IndexRange 0) (select macro_range_2::syntax._IndexRange 0) (select macro_range_2::syntax._IndexRange 1) (comparedefimp._ExpressionsCorrespondState (_SystemArray.createArray_9 n_icl_functions_1_0 -1) (_SystemArray.createArray_9 n_dcl_macros_and_functions_1_1 -1) (comparedefimp.initial_hwn var_heap_6) expr_heap_7 icl_functions_4 macro_defs_5 error_admin_9 tc_state_8 main_dcl_module_n_0)) in _Tuple6 (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 4) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 5) (select (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 2)::comparedefimp._HeapWithNumber 0) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 3) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 7) (select ec_state_1_2::comparedefimp._ExpressionsCorrespondState 6)
comparedefimp.compareDefImp !main_dcl_module_n_0::I !main_dcl_module_1 !_x_2 !_x_3 !n_exported_global_functions_4::I !icl_module_5 !macro_defs_6 !heaps_7 !error_admin_8 = case _x_2 (general.No -> <{_Tuple4!15}> icl_module_5 macro_defs_6 heaps_7 error_admin_8) (general.Yes macro_conversion_table_1_0 -> case _x_3 (syntax._CopiedDefinitions copied_type_defs_2_0 copied_class_defs_2_1 copied_generic_defs_2_2 -> let dcl_common_3_0 = select main_dcl_module_1::syntax._DclModule 7, icl_common_3_1 = select icl_module_5::syntax._IclModule 3, _x_3_2 = select heaps_7::checksupport._Heaps 2, _x_3_3 = comparedefimp.compareTypeDefs (select main_dcl_module_1::syntax._DclModule 8) copied_type_defs_2_0 (select dcl_common_3_0::syntax._CommonDefs 0) (select dcl_common_3_0::syntax._CommonDefs 1) (select icl_common_3_1::syntax._CommonDefs 0) (select icl_common_3_1::syntax._CommonDefs 1) (comparedefimp._CompareState (select _x_3_2::syntax._TypeHeaps 0) (select _x_3_2::syntax._TypeHeaps 1) error_admin_8), _x_3_4 = comparedefimp.compareClassDefs (select main_dcl_module_1::syntax._DclModule 8) copied_class_defs_2_1 (select dcl_common_3_0::syntax._CommonDefs 3) (select dcl_common_3_0::syntax._CommonDefs 4) (select icl_common_3_1::syntax._CommonDefs 3) (select icl_common_3_1::syntax._CommonDefs 4) (select _x_3_3::_Tuple3 2), _x_3_5 = comparedefimp.compareInstanceDefs (select main_dcl_module_1::syntax._DclModule 8) (select dcl_common_3_0::syntax._CommonDefs 5) (select icl_common_3_1::syntax._CommonDefs 5) (select icl_module_5::syntax._IclModule 1) (select _x_3_4::_Tuple3 2), _x_3_6 = comparedefimp.compareGenericDefs (select main_dcl_module_1::syntax._DclModule 8) copied_generic_defs_2_2 (select dcl_common_3_0::syntax._CommonDefs 6) (select icl_common_3_1::syntax._CommonDefs 6) (select _x_3_5::_Tuple3 2), comp_st_3_7 = select _x_3_6::_Tuple2 1, _x_3_8 = comparedefimp.compareMacrosWithConversion_676 main_dcl_module_n_0 macro_conversion_table_1_0 (select main_dcl_module_1::syntax._DclModule 3) (comparedefimp.collectGenericCaseDefMacros (select dcl_common_3_0::syntax._CommonDefs 7)) (select _x_3_5::_Tuple3 1) macro_defs_6 (select heaps_7::checksupport._Heaps 0) (select heaps_7::checksupport._Heaps 1) (comparedefimp._TypesCorrespondState (comparedefimp.initial_hwn (select comp_st_3_7::comparedefimp._CompareState 0)) (comparedefimp.initial_hwn (select comp_st_3_7::comparedefimp._CompareState 1)) 0) (select comp_st_3_7::comparedefimp._CompareState 2), _x_3_9 = comparedefimp.compareFunctionTypes n_exported_global_functions_4 (select main_dcl_module_1::syntax._DclModule 1) (select _x_3_8::_Tuple6 0) (select _x_3_8::_Tuple6 4) (select _x_3_8::_Tuple6 5), tc_state_3_10 = select _x_3_9::_Tuple3 1 in <{_Tuple4!15}> (update icl_module_5::syntax._IclModule [1:select _x_3_9::_Tuple3 0,3:update icl_common_3_1::syntax._CommonDefs [0:select _x_3_3::_Tuple3 0,1:select _x_3_3::_Tuple3 1,2:select icl_common_3_1::syntax._CommonDefs 2,3:select _x_3_4::_Tuple3 0,4:select _x_3_4::_Tuple3 1,5:select _x_3_5::_Tuple3 0,6:select _x_3_6::_Tuple2 0]]) (select _x_3_8::_Tuple6 1) (update heaps_7::checksupport._Heaps [0:select _x_3_8::_Tuple6 2,1:select _x_3_8::_Tuple6 3,2:syntax._TypeHeaps (select (select tc_state_3_10::comparedefimp._TypesCorrespondState 0)::comparedefimp._HeapWithNumber 0) (select (select tc_state_3_10::comparedefimp._TypesCorrespondState 1)::comparedefimp._HeapWithNumber 0)]) (select _x_3_9::_Tuple3 2)) ) 
comparedefimp.first_index_202::I p_0 !_x_1 !i_2::I = case _x_1 (_predefined._Nil -> <{StdInt.-_7}> (<{StdInt.-_7}> i_2 i_2) 1) (_predefined._Cons h_1_0 t_1_1 -> case (p_0 h_1_0) (True -> i_2) (False -> comparedefimp.first_index_202 p_0 t_1_1 (<{StdInt.+_6}> i_2 1)) ) 
comparedefimp.map2_st_201 f_0 !_x_1 _x_2 st_3 = case _x_1 (_predefined._Cons h1_1_0 t1_1_1 -> case _x_2 (_predefined._Cons h2_2_0 t2_2_1 -> let !st_3_0 = _predefined._dummyForStrictAlias (select _x_3_2::_Tuple2 1), _x_3_1 = f_0 h1_1_0 h2_2_0 st_3, _x_3_2 = comparedefimp.map2_st_201 f_0 t1_1_1 t2_2_1 (select _x_3_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_3_1::_Tuple2 0) (select _x_3_2::_Tuple2 0)) st_3_0) ) (_ -> let !st_1_0 = _predefined._dummyForStrictAlias st_3 in _Tuple2 _predefined._Nil st_1_0)
comparedefimp.tc_state_to_type_heaps_58 !_x_0 = case _x_0 (comparedefimp._TypesCorrespondState tc_type_vars_1_0 tc_attr_vars_1_1 tc_strictness_flags_1_2 -> syntax._TypeHeaps (select tc_type_vars_1_0::comparedefimp._HeapWithNumber 0) (select tc_attr_vars_1_1::comparedefimp._HeapWithNumber 0)) 
comparedefimp.map2_st_679 !_x_0 _x_1 st_2 = case _x_0 (_predefined._Cons h1_1_0 t1_1_1 -> case _x_1 (_predefined._Cons h2_2_0 t2_2_1 -> let !st_3_0 = _predefined._dummyForStrictAlias (select _x_3_2::_Tuple2 1), _x_3_1 = comparedefimp.t_corresponds_139 h1_1_0 h2_2_0 st_2, _x_3_2 = comparedefimp.map2_st_679 t1_1_1 t2_2_1 (select _x_3_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_3_1::_Tuple2 0) (select _x_3_2::_Tuple2 0)) st_3_0) ) (_ -> let !st_1_0 = _predefined._dummyForStrictAlias st_2 in _Tuple2 _predefined._Nil st_1_0)
comparedefimp.first_index_680::I !_x_0 !i_1::I = case _x_0 (_predefined._Nil -> <{StdInt.-_7}> (<{StdInt.-_7}> i_1 i_1) 1) (_predefined._Cons h_1_0 t_1_1 -> case (StdBool.not h_1_0) (True -> i_1) (False -> comparedefimp.first_index_680 t_1_1 (<{StdInt.+_6}> i_1 1)) ) 
comparedefimp.compare_specified_and_derived_instance_types !specified_instance_type_0 !derived_symbol_type_1 !type_heaps_2 = case type_heaps_2 (syntax._TypeHeaps th_vars_1_0 th_attrs_1_1 -> case (StdBool.not (<{StdInt.==_16}> (StdList.length_47 (select specified_instance_type_0::syntax._SymbolType 1)) (StdList.length_47 (select derived_symbol_type_1::syntax._SymbolType 1)))) (True -> <{_Tuple2!3}> -2 type_heaps_2) (False -> let tc_state_3_0::I = comparedefimp._TypesCorrespondState (comparedefimp.initial_hwn th_vars_1_0) (comparedefimp.initial_hwn th_attrs_1_1) 1, tc_state_3_1 = comparedefimp.init_symbol_type_vars specified_instance_type_0 derived_symbol_type_1 tc_state_3_0, _x_3_2 = comparedefimp.map2_st_679 (_predefined._Cons (select specified_instance_type_0::syntax._SymbolType 4) (select specified_instance_type_0::syntax._SymbolType 1)) (_predefined._Cons (select derived_symbol_type_1::syntax._SymbolType 4) (select derived_symbol_type_1::syntax._SymbolType 1)) tc_state_3_1, correspond_list_3_3 = select _x_3_2::_Tuple2 0, err_code_3_4 = comparedefimp.first_index_680 correspond_list_3_3 0 in case (StdBool.not (<{StdInt.==_16}> err_code_3_4 -1)) (True -> <{_Tuple2!3}> err_code_3_4 (comparedefimp.tc_state_to_type_heaps_58 (select _x_3_2::_Tuple2 1))) (False -> let tc_state_5_0 = select _x_3_2::_Tuple2 1, _x_5_1 = comparedefimp.t_corresponds_138 (select specified_instance_type_0::syntax._SymbolType 2) (select derived_symbol_type_1::syntax._SymbolType 2) tc_state_5_0 in case (StdBool.not (select _x_5_1::_Tuple2 0)) (True -> <{_Tuple2!3}> -3 (comparedefimp.tc_state_to_type_heaps_58 (select _x_5_1::_Tuple2 1))) (False -> let tc_state_7_0 = select _x_5_1::_Tuple2 1, _x_7_1 = comparedefimp.t_corresponds_590 (select specified_instance_type_0::syntax._SymbolType 5) (select derived_symbol_type_1::syntax._SymbolType 5) tc_state_7_0 in case (StdBool.not (select _x_7_1::_Tuple2 0)) (True -> <{_Tuple2!3}> -4 (comparedefimp.tc_state_to_type_heaps_58 (select _x_7_1::_Tuple2 1))) (False -> let tc_state_9_0 = select _x_7_1::_Tuple2 1, _x_9_1 = comparedefimp.t_corresponds_598 (select specified_instance_type_0::syntax._SymbolType 7) (select derived_symbol_type_1::syntax._SymbolType 7) tc_state_9_0 in case (StdBool.not (select _x_9_1::_Tuple2 0)) (True -> <{_Tuple2!3}> -5 (comparedefimp.tc_state_to_type_heaps_58 (select _x_9_1::_Tuple2 1))) (False -> let tc_state_11_0 = select _x_9_1::_Tuple2 1 in case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select tc_state_11_0::comparedefimp._TypesCorrespondState 2) 2) 0)) (True -> <{_Tuple2!3}> -6 (comparedefimp.tc_state_to_type_heaps_58 tc_state_11_0)) (False -> <{_Tuple2!3}> -1 (comparedefimp.tc_state_to_type_heaps_58 tc_state_11_0)) ) ) ) ) ) ) 
comparedefimp.compare_105 !an1_0 !an2_1 !comp_st_2 = <{_Tuple2!3}> (compare_constructor.equal_constructor an1_0 an2_1) comp_st_2
comparedefimp.getIdentPos_114 !_x_0 = case _x_0 (syntax._TypeDef td_ident_1_0 td_index_1_1 td_arity_1_2 td_args_1_3 td_attrs_1_4 td_rhs_1_5 td_attribute_1_6 td_pos_1_7 td_used_types_1_8 td_fun_index_1_9 -> checksupport.newPosition td_ident_1_0 td_pos_1_7) 
comparedefimp.getIdentPos_115 !_x_0 = case _x_0 (syntax._ConsDef cons_ident_1_0 cons_type_1_1 cons_priority_1_2 cons_number_1_3 cons_type_index_1_4 cons_exi_vars_1_5 cons_type_ptr_1_6 cons_pos_1_7 -> checksupport.newPosition cons_ident_1_0 cons_pos_1_7) 
comparedefimp.getIdentPos_116 !_x_0 = case _x_0 (syntax._SelectorDef sd_ident_1_0 sd_field_1_1 sd_type_1_2 sd_exi_vars_1_3 sd_field_nr_1_4 sd_type_index_1_5 sd_type_ptr_1_6 sd_pos_1_7 -> checksupport.newPosition sd_ident_1_0 sd_pos_1_7) 
comparedefimp.getIdentPos_117 !_x_0 = case _x_0 (syntax._ClassDef class_ident_1_0 class_arity_1_1 class_args_1_2 class_context_1_3 class_members_1_4 class_dictionary_1_5 class_pos_1_6 class_cons_vars_1_7 class_fun_dep_vars_1_8 class_lazy_members_1_9 -> checksupport.newPosition class_ident_1_0 class_pos_1_6) 
comparedefimp.getIdentPos_118 !_x_0 = case _x_0 (syntax._MemberDef me_ident_1_0 me_class_1_1 me_offset_1_2 me_type_1_3 me_type_ptr_1_4 me_class_vars_1_5 me_pos_1_6 me_priority_1_7 -> checksupport.newPosition me_ident_1_0 me_pos_1_6) 
comparedefimp.getIdentPos_119 !_x_0 = case _x_0 (syntax._ClassInstance ins_class_index_1_0 ins_class_ident_1_1 ins_ident_1_2 ins_type_1_3 ins_member_types_1_4 ins_members_1_5 ins_specials_1_6 ins_pos_1_7 -> checksupport.newPosition ins_ident_1_2 ins_pos_1_7) 
comparedefimp.anon_216 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_215 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_216 False) 
comparedefimp.anon_214 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_681 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_215 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_128 !_vt_corresponds_0 !_vt_corresponds_1 !_x_2 !_x_3 = case _x_2 (_Tuple2 a1_1_0 b1_1_1 -> case _x_3 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 a1_1_0 a2_2_0) (select _vt_corresponds_1::<{comparedefimp.t_corresponds;}> 0 b1_1_1 b2_2_1)) ) 
comparedefimp.anon_221 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_220 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_219 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_220 False) 
comparedefimp.anon_218 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_217 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_682 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_219 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.loop_75 !_vt_corresponds_0 !_vArray_1 !i_2::I !dclArray_3 !iclArray_4 = case (<{StdInt.<_17}> i_2 0) (True -> comparedefimp.anon_217 True) (False -> comparedefimp.anon_682 (select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 (select _vArray_1::<{_SystemArray.Array;}> 3 dclArray_3 i_2) (select _vArray_1::<{_SystemArray.Array;}> 3 iclArray_4 i_2)) (comparedefimp.loop_75 _vt_corresponds_0 _vArray_1 (<{StdInt.-_7}> i_2 1) dclArray_3 iclArray_4)) 
comparedefimp.t_corresponds_129 !_vt_corresponds_0 !_vArray_1 !dclArray_2 !iclArray_3 = let size_dclArray_1_0::I = select _vArray_1::<{_SystemArray.Array;}> 4 dclArray_2 in case (StdBool.not (<{StdInt.==_16}> size_dclArray_1_0 (select _vArray_1::<{_SystemArray.Array;}> 4 iclArray_3))) (True -> comparedefimp.anon_221 False) (False -> comparedefimp.loop_75 _vt_corresponds_0 _vArray_1 (<{StdInt.-_7}> size_dclArray_1_0 1) dclArray_2 iclArray_3) 
comparedefimp.anon_236 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_235 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_236 False) 
comparedefimp.anon_234 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_683 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_235 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_136 !dclDef_0 !iclDef_1 = comparedefimp.anon_683 (comparedefimp.t_corresponds_140 (select dclDef_0::syntax._ATypeVar 0) (select iclDef_1::syntax._ATypeVar 0)) (comparedefimp.t_corresponds_144 (select dclDef_0::syntax._ATypeVar 1) (select iclDef_1::syntax._ATypeVar 1))
comparedefimp.t_corresponds_685 !_vt_corresponds_0 !_x_1 !_x_2 = case _x_1 (_Tuple2 a1_1_0 b1_1_1 -> case _x_2 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 a1_1_0 a2_2_0) (comparedefimp.t_corresponds_140 b1_1_1 b2_2_1)) ) 
comparedefimp.t_corresponds_684 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_136 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_684 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.t_corresponds_686 !_vt_corresponds_0 !_x_1 !_x_2 = case _x_1 (_Tuple2 a1_1_0 b1_1_1 -> case _x_2 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (comparedefimp.t_corresponds_684 a1_1_0 a2_2_0) (select _vt_corresponds_0::<{comparedefimp.t_corresponds;}> 0 b1_1_1 b2_2_1)) ) 
comparedefimp.t_corresponds_687 !_vt_corresponds_0 !_x_1 !_x_2 = case _x_1 (_Tuple2 a1_1_0 b1_1_1 -> case _x_2 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (comparedefimp.t_corresponds_684 a1_1_0 a2_2_0) (comparedefimp.t_corresponds_685 _vt_corresponds_0 b1_1_1 b2_2_1)) ) 
comparedefimp.t_corresponds_TypeDef_76 !_vt_corresponds_0 !dclDef_1 !iclDef_2 tc_state_3 = comparedefimp.t_corresponds_687 _vt_corresponds_0 (_Tuple2 (select dclDef_1::syntax._TypeDef 3) (_Tuple2 (select dclDef_1::syntax._TypeDef 5) (select dclDef_1::syntax._TypeDef 6))) (_Tuple2 (select iclDef_2::syntax._TypeDef 3) (_Tuple2 (select iclDef_2::syntax._TypeDef 5) (select iclDef_2::syntax._TypeDef 6))) (comparedefimp.init_atype_vars (select dclDef_1::syntax._TypeDef 3) (select iclDef_2::syntax._TypeDef 3) (comparedefimp.init_attr_vars (select dclDef_1::syntax._TypeDef 4) (select iclDef_2::syntax._TypeDef 4) tc_state_3))
comparedefimp.anon_300 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_299 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_298 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_307 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_306 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_307 False) 
comparedefimp.anon_305 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_304 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_303 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_304 False) 
comparedefimp.anon_302 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_301 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.t_corresponds_146 !b1_0::B !b2_1::B = comparedefimp.anon_301 (<{StdBool.==_3}> b1_0 b2_1)
comparedefimp.t_corresponds_148 !dclField_0 !iclField_1 = comparedefimp.equal_561 (select dclField_0::syntax._FieldSymbol 0) (select iclField_1::syntax._FieldSymbol 0)
comparedefimp.loop_689 !_vArray_0 !i_1::I !dclArray_2 !iclArray_3 = case (<{StdInt.<_17}> i_1 0) (True -> comparedefimp.anon_217 True) (False -> comparedefimp.anon_682 (comparedefimp.t_corresponds_148 (select _vArray_0::<{_SystemArray.Array;}> 3 dclArray_2 i_1) (select _vArray_0::<{_SystemArray.Array;}> 3 iclArray_3 i_1)) (comparedefimp.loop_689 _vArray_0 (<{StdInt.-_7}> i_1 1) dclArray_2 iclArray_3)) 
comparedefimp.t_corresponds_688 !_vArray_0 !dclArray_1 !iclArray_2 = let size_dclArray_1_0::I = select _vArray_0::<{_SystemArray.Array;}> 4 dclArray_1 in case (StdBool.not (<{StdInt.==_16}> size_dclArray_1_0 (select _vArray_0::<{_SystemArray.Array;}> 4 iclArray_2))) (True -> comparedefimp.anon_221 False) (False -> comparedefimp.loop_689 _vArray_0 (<{StdInt.-_7}> size_dclArray_1_0 1) dclArray_1 iclArray_2) 
comparedefimp.anon_690 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_303 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_691 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_306 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.loop_693 !i_0::I !dclArray_1 !iclArray_2 = case (<{StdInt.<_17}> i_0 0) (True -> comparedefimp.anon_217 True) (False -> comparedefimp.anon_682 (comparedefimp.t_corresponds_148 (comparedefimp.select_474 dclArray_1 i_0) (comparedefimp.select_474 iclArray_2 i_0)) (comparedefimp.loop_693 (<{StdInt.-_7}> i_0 1) dclArray_1 iclArray_2)) 
comparedefimp.t_corresponds_692 !dclArray_0 !iclArray_1 = let size_dclArray_1_0::I = comparedefimp.size_475 dclArray_0 in case (StdBool.not (<{StdInt.==_16}> size_dclArray_1_0 (comparedefimp.size_475 iclArray_1))) (True -> comparedefimp.anon_221 False) (False -> comparedefimp.loop_693 (<{StdInt.-_7}> size_dclArray_1_0 1) dclArray_0 iclArray_1) 
comparedefimp.t_corresponds_147 !dclRecord_0 !iclRecord_1 = comparedefimp.anon_691 (comparedefimp.t_corresponds_135 (select dclRecord_0::syntax._RecordType 0) (select dclRecord_0::syntax._RecordType 0)) (comparedefimp.anon_690 (comparedefimp.t_corresponds_146 (select dclRecord_0::syntax._RecordType 2) (select dclRecord_0::syntax._RecordType 2)) (comparedefimp.t_corresponds_692 (select dclRecord_0::syntax._RecordType 1) (select iclRecord_1::syntax._RecordType 1)))
comparedefimp.t_corresponds_694 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_135 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_694 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.t_corresponds_145 !_x_0 !_x_1 = case _x_0 (syntax.AlgType dclConstructors_1_0 -> case _x_1 (syntax.AlgType iclConstructors_2_0 -> comparedefimp.t_corresponds_694 dclConstructors_1_0 iclConstructors_2_0) ) (syntax.SynType dclType_1_0 -> case _x_1 (syntax.SynType iclType_2_0 -> comparedefimp.t_corresponds_139 dclType_1_0 iclType_2_0) ) (syntax.RecordType dclRecord_1_0 -> case _x_1 (syntax.RecordType iclRecord_2_0 -> comparedefimp.t_corresponds_147 dclRecord_1_0 iclRecord_2_0) ) (syntax.AbstractType _x_1_0 -> case _x_1 (syntax.NewType _x_2_0 -> comparedefimp.anon_298 False) (_ -> comparedefimp.anon_299 True)) (syntax.AbstractSynType _x_1_0 dclType_1_1 -> case _x_1 (syntax.SynType iclType_2_0 -> comparedefimp.t_corresponds_139 dclType_1_1 iclType_2_0) ) (syntax.NewType dclConstructor_1_0 -> case _x_1 (syntax.NewType iclConstructor_2_0 -> comparedefimp.t_corresponds_135 dclConstructor_1_0 iclConstructor_2_0) ) (syntax.ExtensibleAlgType dclConstructors_1_0 -> case _x_1 (syntax.ExtensibleAlgType iclConstructors_2_0 -> comparedefimp.t_corresponds_694 dclConstructors_1_0 iclConstructors_2_0) ) (syntax.UnknownType -> StdMisc.undef) (_ -> case _x_1 (syntax.UnknownType -> StdMisc.undef) (_ -> comparedefimp.anon_300 False))
comparedefimp.t_corresponds_697 !_x_0 !_x_1 = case _x_0 (_Tuple2 a1_1_0 b1_1_1 -> case _x_1 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (comparedefimp.t_corresponds_145 a1_1_0 a2_2_0) (comparedefimp.t_corresponds_140 b1_1_1 b2_2_1)) ) 
comparedefimp.t_corresponds_696 !_x_0 !_x_1 = case _x_0 (_Tuple2 a1_1_0 b1_1_1 -> case _x_1 (_Tuple2 a2_2_0 b2_2_1 -> comparedefimp.anon_681 (comparedefimp.t_corresponds_684 a1_1_0 a2_2_0) (comparedefimp.t_corresponds_697 b1_1_1 b2_2_1)) ) 
comparedefimp.t_corresponds_TypeDef_695 !dclDef_0 !iclDef_1 tc_state_2 = comparedefimp.t_corresponds_696 (_Tuple2 (select dclDef_0::syntax._TypeDef 3) (_Tuple2 (select dclDef_0::syntax._TypeDef 5) (select dclDef_0::syntax._TypeDef 6))) (_Tuple2 (select iclDef_1::syntax._TypeDef 3) (_Tuple2 (select iclDef_1::syntax._TypeDef 5) (select iclDef_1::syntax._TypeDef 6))) (comparedefimp.init_atype_vars (select dclDef_0::syntax._TypeDef 3) (select iclDef_1::syntax._TypeDef 3) (comparedefimp.init_attr_vars (select dclDef_0::syntax._TypeDef 4) (select iclDef_1::syntax._TypeDef 4) tc_state_2))
comparedefimp.t_corresponds_132 !dclDef_0 !iclDef_1 = comparedefimp.t_corresponds_TypeDef_695 dclDef_0 iclDef_1
<{comparedefimp.t_corresponds`_77}> !_x_0 !_x_1 tc_state_2 = case _x_0 (syntax.AN_Strict -> case _x_1 (syntax.AN_Strict -> _Tuple2 True tc_state_2) (syntax.AN_None -> case tc_state_2 (comparedefimp._TypesCorrespondState tc_type_vars_3_0 tc_attr_vars_3_1 tc_strictness_flags_3_2 -> case (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_3_2 1) 0) (True -> _Tuple2 False tc_state_2) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand tc_strictness_flags_3_2 2) 0)) (True -> _Tuple2 True tc_state_2) (False -> _Tuple2 True (update tc_state_2::comparedefimp._TypesCorrespondState [2:StdInt.bitor tc_strictness_flags_3_2 2])) ) ) ) ) (syntax.AN_None -> case _x_1 (syntax.AN_None -> _Tuple2 True tc_state_2) (syntax.AN_Strict -> _Tuple2 False tc_state_2) ) 
comparedefimp.t_corresponds_137 !dcl_annotation_0 !icl_annotation_1 = <{comparedefimp.t_corresponds`_77}> dcl_annotation_0 icl_annotation_1
comparedefimp.anon_316 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_315 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_316 False) 
comparedefimp.anon_314 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_313 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_312 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_313 False) 
comparedefimp.anon_311 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_310 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_309 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_310 False) 
comparedefimp.anon_308 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.equal_698 a_0 b_1 = comparedefimp.anon_206 (<{compare_types.==_21}> a_0 b_1)
comparedefimp.anon_699 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_309 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_700 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_312 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_701 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_315 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_149 !dclDef_0 !iclDef_1 = comparedefimp.anon_701 (comparedefimp.do (comparedefimp.init_atype_vars (select dclDef_0::syntax._ConsDef 5) (select iclDef_1::syntax._ConsDef 5))) (comparedefimp.anon_700 (comparedefimp.t_corresponds_151 (select dclDef_0::syntax._ConsDef 1) (select iclDef_1::syntax._ConsDef 1)) (comparedefimp.anon_699 (comparedefimp.equal_561 (select dclDef_0::syntax._ConsDef 0) (select iclDef_1::syntax._ConsDef 0)) (comparedefimp.equal_698 (select dclDef_0::syntax._ConsDef 2) (select iclDef_1::syntax._ConsDef 2))))
comparedefimp.anon_322 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_321 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_322 False) 
comparedefimp.anon_320 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_319 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_318 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_319 False) 
comparedefimp.anon_317 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_702 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_318 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_703 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_321 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_150 !dclDef_0 !iclDef_1 = comparedefimp.anon_703 (comparedefimp.do (comparedefimp.init_atype_vars (select dclDef_0::syntax._SelectorDef 3) (select iclDef_1::syntax._SelectorDef 3))) (comparedefimp.anon_702 (comparedefimp.t_corresponds_151 (select dclDef_0::syntax._SelectorDef 2) (select iclDef_1::syntax._SelectorDef 2)) (comparedefimp.equal_562 (select dclDef_0::syntax._SelectorDef 4) (select iclDef_1::syntax._SelectorDef 4)))
comparedefimp.anon_349 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_348 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_349 False) 
comparedefimp.anon_347 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_346 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_345 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_346 False) 
comparedefimp.anon_344 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_343 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_342 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_343 False) 
comparedefimp.anon_341 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_340 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_339 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_340 False) 
comparedefimp.anon_338 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.loop_706 !_vArray_0 !i_1::I !dclArray_2 !iclArray_3 = case (<{StdInt.<_17}> i_1 0) (True -> comparedefimp.anon_217 True) (False -> comparedefimp.anon_682 (comparedefimp.t_corresponds_135 (select _vArray_0::<{_SystemArray.Array;}> 3 dclArray_2 i_1) (select _vArray_0::<{_SystemArray.Array;}> 3 iclArray_3 i_1)) (comparedefimp.loop_706 _vArray_0 (<{StdInt.-_7}> i_1 1) dclArray_2 iclArray_3)) 
comparedefimp.t_corresponds_705 !_vArray_0 !dclArray_1 !iclArray_2 = let size_dclArray_1_0::I = select _vArray_0::<{_SystemArray.Array;}> 4 dclArray_1 in case (StdBool.not (<{StdInt.==_16}> size_dclArray_1_0 (select _vArray_0::<{_SystemArray.Array;}> 4 iclArray_2))) (True -> comparedefimp.anon_221 False) (False -> comparedefimp.loop_706 _vArray_0 (<{StdInt.-_7}> size_dclArray_1_0 1) dclArray_1 iclArray_2) 
comparedefimp.anon_707 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_339 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_704 !_x_0 !_x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> comparedefimp.anon_209 True) ) (_predefined._Cons dclDef_1_0 dclDefs_1_1 -> case _x_1 (_predefined._Cons iclDef_2_0 iclDefs_2_1 -> comparedefimp.anon_560 (comparedefimp.t_corresponds_144 dclDef_1_0 iclDef_2_0) (comparedefimp.t_corresponds_704 dclDefs_1_1 iclDefs_2_1)) ) (_ -> comparedefimp.anon_213 False)
comparedefimp.anon_708 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_342 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_709 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_345 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_710 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_348 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.loop_712 !i_0::I !dclArray_1 !iclArray_2 = case (<{StdInt.<_17}> i_0 0) (True -> comparedefimp.anon_217 True) (False -> comparedefimp.anon_682 (comparedefimp.t_corresponds_135 (comparedefimp.select_450 dclArray_1 i_0) (comparedefimp.select_450 iclArray_2 i_0)) (comparedefimp.loop_712 (<{StdInt.-_7}> i_0 1) dclArray_1 iclArray_2)) 
comparedefimp.t_corresponds_711 !dclArray_0 !iclArray_1 = let size_dclArray_1_0::I = comparedefimp.size_451 dclArray_0 in case (StdBool.not (<{StdInt.==_16}> size_dclArray_1_0 (comparedefimp.size_451 iclArray_1))) (True -> comparedefimp.anon_221 False) (False -> comparedefimp.loop_712 (<{StdInt.-_7}> size_dclArray_1_0 1) dclArray_0 iclArray_1) 
comparedefimp.t_corresponds_153 !dclDef_0 !iclDef_1 = comparedefimp.anon_710 (comparedefimp.do (comparedefimp.init_type_vars (select dclDef_0::syntax._ClassDef 2) (select iclDef_1::syntax._ClassDef 2))) (comparedefimp.anon_709 (comparedefimp.equal_561 (select dclDef_0::syntax._ClassDef 0) (select iclDef_1::syntax._ClassDef 0)) (comparedefimp.anon_708 (comparedefimp.t_corresponds_704 (select dclDef_0::syntax._ClassDef 2) (select iclDef_1::syntax._ClassDef 2)) (comparedefimp.anon_707 (comparedefimp.t_corresponds_590 (select dclDef_0::syntax._ClassDef 3) (select iclDef_1::syntax._ClassDef 3)) (comparedefimp.t_corresponds_711 (select dclDef_0::syntax._ClassDef 4) (select iclDef_1::syntax._ClassDef 4)))))
comparedefimp.anon_364 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_363 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_364 False) 
comparedefimp.anon_362 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_361 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_360 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_361 False) 
comparedefimp.anon_359 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_358 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_357 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_358 False) 
comparedefimp.anon_356 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_355 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_354 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_355 False) 
comparedefimp.anon_353 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_352 r_0 s_1 = _Tuple2 r_0 s_1
comparedefimp.anon_351 m2_0 !b_1::B = case b_1 (True -> m2_0) (False -> comparedefimp.anon_352 False) 
comparedefimp.anon_350 f_0 !g_1 st0_2 = let _x_1_0 = f_0 st0_2 in g_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_713 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_351 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_714 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_354 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_715 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_357 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_716 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_360 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.anon_717 !f_0 m2_1 st0_2 = let _x_1_0 = f_0 st0_2 in comparedefimp.anon_363 m2_1 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)
comparedefimp.t_corresponds_154 !dclDef_0 !iclDef_1 = comparedefimp.anon_717 (comparedefimp.do (comparedefimp.init_type_vars (select (select dclDef_0::syntax._MemberDef 3)::syntax._SymbolType 0) (select (select iclDef_1::syntax._MemberDef 3)::syntax._SymbolType 0))) (comparedefimp.anon_716 (comparedefimp.do (comparedefimp.init_attr_vars (select (select dclDef_0::syntax._MemberDef 3)::syntax._SymbolType 6) (select (select iclDef_1::syntax._MemberDef 3)::syntax._SymbolType 6))) (comparedefimp.anon_715 (comparedefimp.equal_561 (select dclDef_0::syntax._MemberDef 0) (select iclDef_1::syntax._MemberDef 0)) (comparedefimp.anon_714 (comparedefimp.equal_562 (select dclDef_0::syntax._MemberDef 2) (select iclDef_1::syntax._MemberDef 2)) (comparedefimp.anon_713 (comparedefimp.equal_698 (select dclDef_0::syntax._MemberDef 7) (select iclDef_1::syntax._MemberDef 7)) (comparedefimp.t_corresponds_151 (select dclDef_0::syntax._MemberDef 3) (select iclDef_1::syntax._MemberDef 3))))))
<{comparedefimp.TD;ComparisionErrorCode}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;CompareState}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;TypesCorrespondState}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;TypesCorrespondMonad}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;ExpressionsCorrespondState}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;ExpressionsCorrespondMonad}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;Conversions}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;HeapWithNumber}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;OptionalCorrespondenceNumber}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;compare;}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;t_corresponds;}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;e_corresponds;}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;getIdentPos;}> _x_0::B = _predefined._Nil
<{comparedefimp.TD;CorrespondenceNumber;}> _x_0::B = _predefined._Nil

:: comparedefimp.OptionalCorrespondenceNumber = comparedefimp.CorrespondenceNumber !a1::I | comparedefimp.Unbound

|| Converted Records
:: comparedefimp._CompareState = {!comparedefimp.comp_type_var_heap, !comparedefimp.comp_attr_var_heap, !comparedefimp.comp_error}

:: comparedefimp._TypesCorrespondState = {!comparedefimp.tc_type_vars, !comparedefimp.tc_attr_vars, !comparedefimp.tc_strictness_flags::I}

:: comparedefimp._ExpressionsCorrespondState = {!comparedefimp.ec_icl_correspondences, !comparedefimp.ec_dcl_correspondences, !comparedefimp.ec_var_heap, !comparedefimp.ec_expr_heap, !comparedefimp.ec_icl_functions, !comparedefimp.ec_macro_defs, !comparedefimp.ec_error_admin, !comparedefimp.ec_tc_state, !comparedefimp.ec_main_dcl_module_n::I}

:: comparedefimp._HeapWithNumber = {!comparedefimp.hwn_heap, !comparedefimp.hwn_number::I}

:: <{comparedefimp.compare;}> = {!comparedefimp.compare}

:: <{comparedefimp.t_corresponds;}> = {!comparedefimp.t_corresponds}

:: <{comparedefimp.e_corresponds;}> = {!comparedefimp.e_corresponds}

:: <{comparedefimp.getIdentPos;}> = {!comparedefimp.getIdentPos}

:: <{comparedefimp.CorrespondenceNumber;}> = {!comparedefimp.fromCorrespondenceNumber, !comparedefimp.toCorrespondenceNumber}

