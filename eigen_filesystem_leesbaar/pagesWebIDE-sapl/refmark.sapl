|| ?module? refmark


refmark.fold_st_121 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_121 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.get_type_84 !_x_0 = case _x_0 (syntax.VI_Type atype_1_0 _x_1_1 -> atype_1_0) (syntax.VI_FAType _x_1_0 atype_1_1 _x_1_2 -> atype_1_1) (syntax.VI_FATypeC _x_1_0 atype_1_1 _x_1_2 _x_1_3 -> atype_1_1) 
refmark.args_have_observing_type_88::B !_vArray_0 !_vArray_1 !_vArray_2 !_x_3 type_def_infos_4 subst_5 = case _x_3 (_predefined._Cons _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._AType at_attribute_2_0 at_type_2_1 -> case (refmark.has_observing_type_87 _vArray_0 _vArray_1 _vArray_2 at_type_2_1 type_def_infos_4 subst_5) (True -> refmark.args_have_observing_type_88 _vArray_0 _vArray_1 _vArray_2 type_args_1_1 type_def_infos_4 subst_5) (False -> False) ) ) (_predefined._Nil -> True) 
refmark.has_observing_type_87::B !_vArray_0 !_vArray_1 !_vArray_2 !_x_3 type_def_infos_4 subst_5 = case _x_3 (syntax.TB basic_type_1_0 -> True) (syntax.TempV var_number_1_0 -> let subst_type_2_0 = select _vArray_0::<{_SystemArray.Array;}> 3 subst_5 var_number_1_0 in <{refmark._c;874;11_259}> subst_type_2_0 _vArray_0 _vArray_1 _vArray_2 type_def_infos_4 subst_5) (syntax.TA _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_2::<{_SystemArray.Array;}> 3 (select _vArray_1::<{_SystemArray.Array;}> 3 type_def_infos_4 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_88 _vArray_0 _vArray_1 _vArray_2 type_args_1_1 type_def_infos_4 subst_5) (False -> False) ) ) ) (syntax.TAS _x_1_0 type_args_1_1 _x_1_2 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_2::<{_SystemArray.Array;}> 3 (select _vArray_1::<{_SystemArray.Array;}> 3 type_def_infos_4 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_88 _vArray_0 _vArray_1 _vArray_2 type_args_1_1 type_def_infos_4 subst_5) (False -> False) ) ) ) (_ -> False)
<{refmark._c;874;11_259}>::B !subst_type_0 _vArray_1 _vArray_2 _vArray_3 type_def_infos_4 subst_5 = case subst_type_0 (syntax.TE -> True) (_ -> refmark.has_observing_type_87 _vArray_1 _vArray_2 _vArray_3 subst_type_0 type_def_infos_4 subst_5)
refmark.emptyOccurrence type_info_0 = syntax._Occurrence syntax.RC_Unused syntax.OB_Empty _predefined._Nil type_info_0 syntax.EndReferenceCounts
refmark.initial_occurrence_76 !_vArray_0 !_vArray_1 !_vArray_2 !_x_3 !_x_4 = case _x_3 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_4 (_Tuple4 subst_2_0 type_def_infos_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_2, var_info_3_1 = select _x_3_0::_Tuple2 0, _x_3_2 = refmark.get_type_84 var_info_3_1 in case (refmark.has_observing_type_87 _vArray_0 _vArray_1 _vArray_2 (select _x_3_2::syntax._AType 1) type_def_infos_2_1 subst_2_0) (True -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 True (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) (False -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 False (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) ) ) 
refmark.fold_st_175 !_vArray_0 !_vArray_1 !_vArray_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_175 _vArray_0 _vArray_1 _vArray_2 x_1_1 (refmark.initial_occurrence_76 _vArray_0 _vArray_1 _vArray_2 a_1_0 st_4)) 
refmark.clear_occurrences_82 !_vArray_0 !_vArray_1 !_vArray_2 !vars_3 subst_4 type_def_infos_5 var_heap_6 expr_heap_7 = refmark.fold_st_175 _vArray_0 _vArray_1 _vArray_2 vars_3 (_Tuple4 subst_4 type_def_infos_5 var_heap_6 expr_heap_7)
refmark.fold_st_120 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_120 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.open_let_vars_49 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, var_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, var_heap_2_2 = select _x_2_0::_Tuple2 1 in <{refmark._c;434;11_260}> (select var_occ_2_1::syntax._Occurrence 1) fv_info_ptr_1_2 var_occ_2_1 var_heap_2_2) 
<{refmark._c;434;11_260}> !_x_0 !fv_info_ptr_1 !var_occ_2 !var_heap_3 = case _x_0 (syntax.OB_LockedLet occ_bind_1_0 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:occ_bind_1_0])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (_ -> StdMisc.abort "open_let_vars (refmark.icl))")
refmark.fold_st_176 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_176 x_1_1 (refmark.open_let_vars_49 a_1_0 st_1)) 
refmark.openLetVars !let_vars_0 !var_heap_1 = refmark.fold_st_176 let_vars_0 var_heap_1
refmark.fold_st_119 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_119 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_118 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_118 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.par_combine_selections_73 !_x_0 !sels_1 = case _x_0 (_predefined._Nil -> sels_1) (_ -> case sels_1 (_predefined._Nil -> _x_0) (_predefined._Cons sel2_1_0 sels2_1_1 -> case _x_0 (_predefined._Cons sel1_2_0 sels1_2_1 -> case sel1_2_0 (syntax._SelectiveUse su_field_3_0 su_multiply_3_1 su_uniquely_3_2 -> case (<{StdInt.==_16}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons (update sel1_2_0::syntax._SelectiveUse [1:<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 1) (<{StdList.++}> su_multiply_3_1 (<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 2) su_uniquely_3_2)),2:_predefined._Nil]) (refmark.par_combine_selections_73 sels1_2_1 sels2_1_1)) (False -> case (<{StdInt.<_17}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons sel1_2_0 (refmark.par_combine_selections_73 sels1_2_1 sels_1)) (False -> _predefined._Cons sel2_1_0 (refmark.par_combine_selections_73 _x_0 sels2_1_1)) ) ) ) ) )
refmark.collectAllSelections !_x_0 cum_sels_1 = case _x_0 (_predefined._Nil -> cum_sels_1) (_predefined._Cons _x_1_0 sels_1_1 -> case _x_1_0 (syntax._SelectiveUse su_field_2_0 su_multiply_2_1 su_uniquely_2_2 -> refmark.collectAllSelections sels_1_1 (<{StdList.++}> su_uniquely_2_2 (<{StdList.++}> su_multiply_2_1 cum_sels_1))) ) 
refmark.parCombineRefCount !_x_0 !ref_count_1 = case _x_0 (syntax.RC_Unused -> ref_count_1) (_ -> case ref_count_1 (syntax.RC_Unused -> _x_0) (syntax.RC_Used ref_count2_1_0 -> case _x_0 (syntax.RC_Used _x_2_0 -> case _x_2_0 (syntax._RC_Used rcu_multiply_3_0 rcu_selectively_3_1 rcu_uniquely_3_2 -> let rcu_multiply_4_0 = <{StdList.++}> (select ref_count2_1_0::syntax._RC_Used 2) (<{StdList.++}> (select ref_count2_1_0::syntax._RC_Used 0) (<{StdList.++}> rcu_uniquely_3_2 rcu_multiply_3_0)) in case (StdList.isEmpty rcu_multiply_4_0) (True -> syntax.RC_Used (syntax._RC_Used _predefined._Nil (refmark.par_combine_selections_73 rcu_selectively_3_1 (select ref_count2_1_0::syntax._RC_Used 1)) _predefined._Nil)) (False -> syntax.RC_Used (syntax._RC_Used (refmark.collectAllSelections (select ref_count2_1_0::syntax._RC_Used 1) (refmark.collectAllSelections rcu_selectively_3_1 rcu_multiply_4_0)) _predefined._Nil _predefined._Nil)) ) ) ) )
refmark.set_occurrence_46 !_x_0 !var_heap_1 = case _x_0 (syntax._CountedFreeVar _x_1_0 cfv_is_let_1_1 cfv_count_1_2 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_1, occ_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, ptr_and_val_3_2 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_Occurrence (update occ_3_1::syntax._Occurrence [0:refmark.parCombineRefCount (select occ_3_1::syntax._Occurrence 0) cfv_count_1_2])) in Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_177 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_177 x_1_1 (refmark.set_occurrence_46 a_1_0 st_1)) 
refmark.addParRefCounts !ref_counts_0 !var_heap_1 = refmark.fold_st_177 ref_counts_0 var_heap_1
refmark.ref_mark_of_let_45 !fv_0 !_x_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple2 closed_let_vars_2_0 rms_2_1 -> case rms_2_1 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = Heap.readPtr fv_info_ptr_1_2 rms_var_heap_3_0, var_occ_4_1 = select (select _x_4_0::_Tuple2 0)::_Tuple1 0, rms_var_heap_4_2 = select _x_4_0::_Tuple2 1 in <{refmark._c;238;11_265}> (select var_occ_4_1::syntax._Occurrence 1) fv_info_ptr_1_2 var_occ_4_1 rms_2_1 rms_var_heap_4_2 fv_0 closed_let_vars_2_0) ) ) 
refmark.fold_st_178 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_178 x_1_1 (refmark.ref_mark_of_let_45 a_1_0 st_1)) 
refmark.addParRefMarksOfLets !let_vars_0 !closed_vars_and_rms_1 = refmark.fold_st_178 let_vars_0 closed_vars_and_rms_1
<{refmark._c;238;11_265}> !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 = case _x_0 (syntax.OB_OpenLet _x_1_0 _x_1_1 -> refmark._f264_264 _x_1_1 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_0) (_ -> <{refmark._c;238;11_261}> _x_0 closed_let_vars_6 rms_3 rms_var_heap_4)
refmark._f264_264 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_7 = case _x_0 (general.Yes _x_1_0 -> refmark._f263_263 _x_1_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_0 _x_7) (_ -> refmark._f262_262 _x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_6 fv_5 _x_7)
refmark._f263_263 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_7 _x_8 = case _x_0 (_Tuple2 ref_counts_1_0 let_vars_1_1 -> let rms_2_0 = update rms_3::refmark._RMState [0:rms_var_heap_4], ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet (select var_occ_2::syntax._Occurrence 1)])) in refmark.addParRefMarksOfLets let_vars_1_1 (_Tuple2 (_predefined._Cons fv_5 closed_let_vars_6) (update rms_2_0::refmark._RMState [0:refmark.addParRefCounts ref_counts_1_0 (Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select rms_2_0::refmark._RMState 0))]))) (_ -> refmark._f262_262 _x_7 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_6 fv_5 _x_8)
refmark._f262_262 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_5 fv_6 _x_7 = case _x_0 (general.No -> let rms_2_0 = update rms_3::refmark._RMState [0:rms_var_heap_4], ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet (select var_occ_2::syntax._Occurrence 1)])) in _Tuple2 closed_let_vars_5 (update rms_2_0::refmark._RMState [0:Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select rms_2_0::refmark._RMState 0),1:_predefined._Cons fv_6 (select rms_2_0::refmark._RMState 1)])) (_ -> <{refmark._c;238;11_261}> _x_7 closed_let_vars_5 rms_3 rms_var_heap_4)
<{refmark._c;238;11_261}> !_x_0 closed_let_vars_1 rms_2 rms_var_heap_3 = case _x_0 (syntax.OB_LockedLet _x_1_0 -> _Tuple2 closed_let_vars_1 (update rms_2::refmark._RMState [0:rms_var_heap_3])) 
<{refmark.c;287;40_89}> !g_l_0 = <{refmark.g_c1;287;52_267}> g_l_0
<{refmark.g_c1;287;52_267}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{refmark.g_c2;287;52_266}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{refmark.g_c2;287;52_266}> !g_h_0 g_t_1 = case g_h_0 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> _predefined._Cons lb_dst_1_0 (<{refmark.c;287;40_89}> g_t_1)) (_ -> <{refmark.c;287;40_89}> g_t_1)
refmark.binds_are_observing_93::B !_x_0 var_heap_1 = case _x_0 (_predefined._Cons _x_1_0 binds_1_1 -> case _x_1_0 (syntax._LetBind _x_2_0 lb_src_2_1 lb_position_2_2 -> case _x_2_0 (syntax._FreeVar fv_def_level_3_0 fv_ident_3_1 fv_info_ptr_3_2 fv_count_3_3 -> case (select (select (select (Heap.sreadPtr fv_info_ptr_3_2 var_heap_1)::_Tuple1 0)::syntax._Occurrence 3)::_Tuple2 0) (True -> refmark.binds_are_observing_93 binds_1_1 var_heap_1) (False -> False) ) ) ) (_predefined._Nil -> True) 
refmark.fold_st_127 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_127 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_126 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_126 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_125 op_0 !l_1 st_2 = refmark.fold_st_126 op_0 l_1 st_2
refmark.save_occurrence_36 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, old_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, occ_ref_count_2_2 = select old_occ_2_1::syntax._Occurrence 0, var_heap_2_3 = select _x_2_0::_Tuple2 1, occ_previous_2_4 = select old_occ_2_1::syntax._Occurrence 4 in <{refmark._c;101;11_269}> occ_ref_count_2_2 occ_previous_2_4 fv_info_ptr_1_2 old_occ_2_1 var_heap_2_3) 
<{refmark._c;101;11_269}> !occ_ref_count_0 !occ_previous_1 !fv_info_ptr_2 !old_occ_3 !var_heap_4 = case occ_ref_count_0 (syntax.RC_Unused -> <{refmark._c;103;20_268}> occ_previous_1 fv_info_ptr_2 old_occ_3 var_heap_4) (_ -> let ptr_and_val_1_0 = _Tuple2 fv_info_ptr_2 (syntax.VI_Occurrence (update old_occ_3::syntax._Occurrence [0:syntax.RC_Unused,4:syntax.ReferenceCounts occ_ref_count_0 occ_previous_1])) in Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_4)
<{refmark._c;103;20_268}> !occ_previous_0 !fv_info_ptr_1 !old_occ_2 !var_heap_3 = case occ_previous_0 (syntax.ReferenceCountsUnused n_1_0 ref_counts_1_1 -> let !n_2_0::I = <{StdInt.+_6}> n_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused n_2_0 ref_counts_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsAllUnused -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsAllUnused])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.EndReferenceCounts -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsAllUnused])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (_ -> let ptr_and_val_1_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused 1 occ_previous_0])) in Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_3)
refmark.fold_st_180 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_180 x_1_1 (refmark.save_occurrence_36 a_1_0 st_1)) 
refmark.foldSt_179 !l_0 !st_1 = refmark.fold_st_180 l_0 st_1
refmark.fold_st_181 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_181 x_1_1 (refmark.foldSt_179 a_1_0 st_1)) 
refmark.saveOccurrences !free_vars_0 !var_heap_1 = refmark.fold_st_181 free_vars_0 var_heap_1
refmark.fold_st_158 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_158 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_157 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_157 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_156 op_0 !l_1 st_2 = refmark.fold_st_157 op_0 l_1 st_2
refmark.seq_combine_selections_74 !_x_0 !sels_1 = case _x_0 (_predefined._Nil -> sels_1) (_ -> case sels_1 (_predefined._Nil -> _x_0) (_predefined._Cons sel2_1_0 sels2_1_1 -> case _x_0 (_predefined._Cons sel1_2_0 sels1_2_1 -> case sel1_2_0 (syntax._SelectiveUse su_field_3_0 su_multiply_3_1 su_uniquely_3_2 -> case (<{StdInt.==_16}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons (update sel1_2_0::syntax._SelectiveUse [1:<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 1) (<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 2) su_multiply_3_1)]) (refmark.seq_combine_selections_74 sels1_2_1 sels2_1_1)) (False -> case (<{StdInt.<_17}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons sel1_2_0 (refmark.seq_combine_selections_74 sels1_2_1 sels_1)) (False -> _predefined._Cons sel2_1_0 (refmark.seq_combine_selections_74 _x_0 sels2_1_1)) ) ) ) ) )
refmark.make_primary_selections_non_unique_75 !_x_0 = case _x_0 (_predefined._Cons sel_1_0 sels_1_1 -> case sel_1_0 (syntax._SelectiveUse su_field_2_0 su_multiply_2_1 su_uniquely_2_2 -> _predefined._Cons (update sel_1_0::syntax._SelectiveUse [1:<{StdList.++}> su_uniquely_2_2 su_multiply_2_1,2:_predefined._Nil]) (refmark.make_primary_selections_non_unique_75 sels_1_1)) ) (_predefined._Nil -> _predefined._Nil) 
refmark.seqCombineRefCount !_x_0 !ref_count_1 = case _x_0 (syntax.RC_Unused -> ref_count_1) (_ -> case ref_count_1 (syntax.RC_Unused -> _x_0) (syntax.RC_Used prim_ref_1_0 -> case _x_0 (syntax.RC_Used sec_ref_2_0 -> let rcu_multiply_3_0 = <{StdList.++}> (select prim_ref_1_0::syntax._RC_Used 2) (<{StdList.++}> (select prim_ref_1_0::syntax._RC_Used 0) (select sec_ref_2_0::syntax._RC_Used 0)) in case (StdList.isEmpty rcu_multiply_3_0) (True -> case (StdList.isEmpty (select sec_ref_2_0::syntax._RC_Used 2)) (True -> syntax.RC_Used (syntax._RC_Used _predefined._Nil (refmark.seq_combine_selections_74 (select sec_ref_2_0::syntax._RC_Used 1) (select prim_ref_1_0::syntax._RC_Used 1)) _predefined._Nil)) (False -> syntax.RC_Used (update sec_ref_2_0::syntax._RC_Used [1:refmark.seq_combine_selections_74 (select sec_ref_2_0::syntax._RC_Used 1) (refmark.make_primary_selections_non_unique_75 (select prim_ref_1_0::syntax._RC_Used 1))])) ) (False -> syntax.RC_Used (update sec_ref_2_0::syntax._RC_Used [0:refmark.collectAllSelections (select prim_ref_1_0::syntax._RC_Used 1) rcu_multiply_3_0])) ) ) )
refmark.let_combine_ref_count_91 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, old_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, var_heap_2_2 = select _x_2_0::_Tuple2 1, occ_ref_count_2_3 = select old_occ_2_1::syntax._Occurrence 0 in <{refmark._c;321;23_270}> (select old_occ_2_1::syntax._Occurrence 4) fv_info_ptr_1_2 old_occ_2_1 occ_ref_count_2_3 var_heap_2_2) 
<{refmark._c;321;23_270}> !_x_0 fv_info_ptr_1 old_occ_2 occ_ref_count_3 !var_heap_4 = case _x_0 (syntax.ReferenceCounts prev_ref_count_1_0 _x_1_1 -> case _x_1_1 (syntax.ReferenceCounts pre_pref_recount_2_0 occ_previouses_2_1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.parCombineRefCount (refmark.seqCombineRefCount occ_ref_count_3 prev_ref_count_1_0) pre_pref_recount_2_0,4:occ_previouses_2_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_4) (syntax.ReferenceCountsUnused _x_2_0 occ_previouses_2_1 -> case _x_2_0 (1 -> let ptr_and_val_4_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.seqCombineRefCount occ_ref_count_3 prev_ref_count_1_0,4:occ_previouses_2_1])) in Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) var_heap_4) (_ -> let !n_3_0::I = <{StdInt.-_7}> _x_2_0 1, ptr_and_val_3_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.seqCombineRefCount occ_ref_count_3 prev_ref_count_1_0,4:syntax.ReferenceCountsUnused n_3_0 occ_previouses_2_1])) in Heap.writePtr (select ptr_and_val_3_1::_Tuple2 0) (select ptr_and_val_3_1::_Tuple2 1) var_heap_4)) (syntax.ReferenceCountsAllUnused -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.seqCombineRefCount occ_ref_count_3 prev_ref_count_1_0,4:syntax.ReferenceCountsAllUnused])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_4) ) (syntax.ReferenceCountsUnused _x_1_0 _x_1_1 -> case _x_1_0 (1 -> case _x_1_1 (syntax.ReferenceCounts pre_pref_recount_3_0 occ_previouses_3_1 -> let ptr_and_val_4_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.parCombineRefCount occ_ref_count_3 pre_pref_recount_3_0,4:occ_previouses_3_1])) in Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) var_heap_4) ) (2 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:_x_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_4) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 2, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused n_2_0 _x_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_4)) (syntax.ReferenceCountsAllUnused -> var_heap_4) 
refmark.fold_st_183 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_183 x_1_1 (refmark.let_combine_ref_count_91 a_1_0 st_1)) 
refmark.foldSt_182 !l_0 !st_1 = refmark.fold_st_183 l_0 st_1
refmark.fold_st_184 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_184 x_1_1 (refmark.foldSt_182 a_1_0 st_1)) 
refmark.let_combine_94 !free_vars_0 !var_heap_1 = refmark.fold_st_184 free_vars_0 var_heap_1
refmark.fold_st_130 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_130 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_129 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_129 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.mark_bind_33 !fv_info_ptr_0 !var_heap_1 = let _x_1_0 = Heap.readPtr fv_info_ptr_0 var_heap_1, occ_1_1 = select (select _x_1_0::_Tuple2 0)::_Tuple1 0 in Heap.writePtr fv_info_ptr_0 (syntax.VI_Occurrence (update occ_1_1::syntax._Occurrence [1:syntax.OB_MarkedLet (select occ_1_1::syntax._Occurrence 1)])) (select _x_1_0::_Tuple2 1)
refmark.anon_31 !_x_0 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> refmark.mark_bind_33 fv_info_ptr_1_2) 
refmark.remove_marked_local_let_vars_34 !_x_0 var_heap_1 = case _x_0 (_predefined._Cons closed_let_var_1_0 closed_let_vars_1_1 -> <{refmark._c;73;11_271}> (select (select (Heap.sreadPtr (select closed_let_var_1_0::syntax._FreeVar 2) var_heap_1)::_Tuple1 0)::syntax._Occurrence 1) closed_let_vars_1_1 var_heap_1 closed_let_var_1_0) (_predefined._Nil -> _Tuple2 _predefined._Nil var_heap_1) 
<{refmark._c;73;11_271}> !_x_0 closed_let_vars_1 var_heap_2 closed_let_var_3 = case _x_0 (syntax.OB_MarkedLet _x_1_0 -> refmark.remove_marked_local_let_vars_34 closed_let_vars_1 var_heap_2) (_ -> let _x_1_0 = refmark.remove_marked_local_let_vars_34 closed_let_vars_1 var_heap_2 in _Tuple2 (_predefined._Cons closed_let_var_3 (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1))
refmark.unmark_bind_35 !fv_info_ptr_0 !var_heap_1 = let _x_1_0 = Heap.readPtr fv_info_ptr_0 var_heap_1, occ_1_1 = select (select _x_1_0::_Tuple2 0)::_Tuple1 0 in Heap.writePtr fv_info_ptr_0 (syntax.VI_Occurrence (update occ_1_1::syntax._Occurrence [1:select (select occ_1_1::syntax._Occurrence 1)::_Tuple1 0])) (select _x_1_0::_Tuple2 1)
refmark.anon_32 !_x_0 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> refmark.unmark_bind_35 fv_info_ptr_1_2) 
refmark.fold_st_185 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_185 x_1_1 (refmark.anon_31 a_1_0 st_1)) 
refmark.fold_st_186 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_186 x_1_1 (refmark.anon_32 a_1_0 st_1)) 
refmark.remove_local_let_vars_from_counted_let_vars !local_let_vars_0 !counted_let_vars_1 !var_heap_2 = let _x_1_0 = refmark.remove_marked_local_let_vars_34 counted_let_vars_1 (refmark.fold_st_185 local_let_vars_0 var_heap_2) in <{_Tuple2!3}> (select _x_1_0::_Tuple2 0) (refmark.fold_st_186 local_let_vars_0 (select _x_1_0::_Tuple2 1))
<{refmark.c;301;63_90}> !g_l_0 = <{refmark.g_c1;301;75_273}> g_l_0
<{refmark.g_c1;301;75_273}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{refmark.g_c2;301;75_272}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{refmark.g_c2;301;75_272}> !g_h_0 g_t_1 = case g_h_0 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> _predefined._Cons lb_dst_1_0 (<{refmark.c;301;63_90}> g_t_1)) (_ -> <{refmark.c;301;63_90}> g_t_1)
refmark.fold_st_155 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_155 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.bind_variable_92 !fv_0 !var_heap_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (update (select (select _x_2_0::_Tuple2 0)::_Tuple1 0)::syntax._Occurrence [0:syntax.RC_Unused,1:syntax.OB_OpenLet fv_0 general.No])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select _x_2_0::_Tuple2 1)) 
refmark.fold_st_187 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_187 x_1_1 (refmark.bind_variable_92 a_1_0 st_1)) 
refmark.init_let_binds_95 !let_binds_0 !var_heap_1 = refmark.fold_st_187 let_binds_0 var_heap_1
refmark.fold_st_128 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_128 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_124 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_124 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_123 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_123 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_122 op_0 !l_1 st_2 = refmark.fold_st_123 op_0 l_1 st_2
refmark.restore_occurrence_37 !fv_0 !_x_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple2 occurrences_2_0 var_heap_2_1 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_1, old_occ_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, occ_ref_count_3_2 = select old_occ_3_1::syntax._Occurrence 0, var_heap_3_3 = select _x_3_0::_Tuple2 1, occ_previous_3_4 = select old_occ_3_1::syntax._Occurrence 4, occ_bind_3_5 = select old_occ_3_1::syntax._Occurrence 1 in <{refmark._c;122;11_278}> occ_ref_count_3_2 occurrences_2_0 occ_previous_3_4 fv_info_ptr_1_2 old_occ_3_1 var_heap_3_3 occ_bind_3_5 fv_0) ) 
<{refmark._c;122;11_278}> !occ_ref_count_0 occurrences_1 occ_previous_2 fv_info_ptr_3 old_occ_4 var_heap_5 occ_bind_6 fv_7 = case occ_ref_count_0 (syntax.RC_Unused -> _Tuple2 occurrences_1 (<{refmark._c;125;23_274}> occ_previous_2 fv_info_ptr_3 old_occ_4 var_heap_5)) (_ -> <{refmark._c;154;20_277}> occ_bind_6 fv_7 occ_ref_count_0 occurrences_1 occ_previous_2 fv_info_ptr_3 old_occ_4 var_heap_5)
<{refmark._c;154;20_277}> !occ_bind_0 fv_1 occ_ref_count_2 occurrences_3 occ_previous_4 fv_info_ptr_5 old_occ_6 var_heap_7 = case occ_bind_0 (syntax.OB_OpenLet _x_1_0 _x_1_1 -> _Tuple2 (_predefined._Cons (syntax._CountedFreeVar fv_1 True occ_ref_count_2) occurrences_3) (<{refmark._c;141;23_275}> occ_previous_4 fv_info_ptr_5 old_occ_6 var_heap_7)) (_ -> _Tuple2 (_predefined._Cons (syntax._CountedFreeVar fv_1 False occ_ref_count_2) occurrences_3) (<{refmark._c;141;23_276}> occ_previous_4 fv_info_ptr_5 old_occ_6 var_heap_7))
<{refmark._c;141;23_276}> !occ_previous_0 !fv_info_ptr_1 !old_occ_2 !var_heap_3 = case occ_previous_0 (syntax.ReferenceCounts prev_ref_count_1_0 occ_previous_1_1 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:prev_ref_count_1_0,4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsAllUnused -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsUnused _x_1_0 xs_1_1 -> case _x_1_0 (1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused,4:xs_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_3) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused,4:syntax.ReferenceCountsUnused n_2_0 xs_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3)) (_ -> StdMisc.abort "restoreOccurrences")
<{refmark._c;141;23_275}> !occ_previous_0 !fv_info_ptr_1 !old_occ_2 !var_heap_3 = case occ_previous_0 (syntax.ReferenceCounts prev_ref_count_1_0 occ_previous_1_1 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:prev_ref_count_1_0,4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsAllUnused -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsUnused _x_1_0 xs_1_1 -> case _x_1_0 (1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused,4:xs_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_3) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Unused,4:syntax.ReferenceCountsUnused n_2_0 xs_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3)) (_ -> StdMisc.abort "restoreOccurrences")
<{refmark._c;125;23_274}> !occ_previous_0 fv_info_ptr_1 old_occ_2 !var_heap_3 = case occ_previous_0 (syntax.ReferenceCounts prev_ref_count_1_0 occ_previous_1_1 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:prev_ref_count_1_0,4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsAllUnused -> var_heap_3) (syntax.ReferenceCountsUnused _x_1_0 xs_1_1 -> case _x_1_0 (1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:xs_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_3) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused n_2_0 xs_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3)) (_ -> StdMisc.abort "restoreOccurrences")
refmark.fold_st_189 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_189 x_1_1 (refmark.restore_occurrence_37 a_1_0 st_1)) 
refmark.foldSt_188 !l_0 !st_1 = refmark.fold_st_189 l_0 st_1
refmark.fold_st_190 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_190 x_1_1 (refmark.foldSt_188 a_1_0 st_1)) 
refmark.restoreOccurrences !free_vars_0 var_heap_1 = refmark.fold_st_190 free_vars_0 (_Tuple2 _predefined._Nil var_heap_1)
refmark.fold_st_152 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_152 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_151 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_151 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_150 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_150 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_149 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_149 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fullRefMarkOfAlternative !_vrefMark_0 !free_vars_1 !sel_2::I !def_3 !expr_4 !var_heap_5 = let _x_1_0 = select _vrefMark_0::<{refmark.refMark;}> 0 free_vars_1 sel_2 def_3 expr_4 (refmark._RMState var_heap_5 _predefined._Nil _predefined._Nil), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1 in refmark.addParRefMarksOfLets rms_let_vars_1_1 (_Tuple2 _predefined._Nil (refmark._RMState (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) _predefined._Nil (select _x_1_0::refmark._RMState 2)))
refmark.adjust_ref_count_of_variable_pattern_55 !var_occ_in_alts_0 var_info_ptr_1 var_expr_ptr_2 var_heap_3 = case var_occ_in_alts_0 (syntax._Occurrence occ_ref_count_1_0 occ_bind_1_1 occ_pattern_vars_1_2 occ_observing_1_3 occ_previous_1_4 -> case occ_ref_count_1_0 (syntax.RC_Unused -> let var_occ_in_alts_3_0 = update var_occ_in_alts_0::syntax._Occurrence [0:syntax.RC_Used (syntax._RC_Used _predefined._Nil _predefined._Nil (_predefined._Cons var_expr_ptr_2 _predefined._Nil))], ptr_and_val_3_1 = _Tuple2 var_info_ptr_1 (syntax.VI_Occurrence var_occ_in_alts_3_0) in _Tuple2 var_occ_in_alts_3_0 (Heap.writePtr (select ptr_and_val_3_1::_Tuple2 0) (select ptr_and_val_3_1::_Tuple2 1) var_heap_3)) (syntax.RC_Used rcu_2_0 -> let var_occ_in_alts_3_0 = update var_occ_in_alts_0::syntax._Occurrence [0:syntax.RC_Used (update rcu_2_0::syntax._RC_Used [2:_predefined._Cons var_expr_ptr_2 (select rcu_2_0::syntax._RC_Used 2)])], ptr_and_val_3_1 = _Tuple2 var_info_ptr_1 (syntax.VI_Occurrence var_occ_in_alts_3_0) in _Tuple2 var_occ_in_alts_3_0 (Heap.writePtr (select ptr_and_val_3_1::_Tuple2 0) (select ptr_and_val_3_1::_Tuple2 1) var_heap_3)) ) 
refmark.fold_st_134 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_134 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.set_occurrence_47 !_x_0 !var_heap_1 = case _x_0 (syntax._CountedFreeVar _x_1_0 cfv_is_let_1_1 cfv_count_1_2 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_1, occ_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, ptr_and_val_3_2 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_Occurrence (update occ_3_1::syntax._Occurrence [0:refmark.seqCombineRefCount (select occ_3_1::syntax._Occurrence 0) cfv_count_1_2])) in Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_191 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_191 x_1_1 (refmark.set_occurrence_47 a_1_0 st_1)) 
refmark.addSeqRefCounts !ref_counts_0 !var_heap_1 = refmark.fold_st_191 ref_counts_0 var_heap_1
refmark.fold_st_148 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_148 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.ref_mark_of_let_64 !fv_0 !_x_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple2 closed_let_vars_2_0 rms_2_1 -> case rms_2_1 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = Heap.readPtr fv_info_ptr_1_2 rms_var_heap_3_0, var_occ_4_1 = select (select _x_4_0::_Tuple2 0)::_Tuple1 0, rms_var_heap_4_2 = select _x_4_0::_Tuple2 1 in <{refmark._c;613;11_283}> (select var_occ_4_1::syntax._Occurrence 1) fv_info_ptr_1_2 var_occ_4_1 rms_2_1 rms_var_heap_4_2 fv_0 closed_let_vars_2_0) ) ) 
refmark.fold_st_192 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_192 x_1_1 (refmark.ref_mark_of_let_64 a_1_0 st_1)) 
refmark.addSeqRefMarksOfLets !let_vars_0 !closed_vars_and_rms_1 = refmark.fold_st_192 let_vars_0 closed_vars_and_rms_1
<{refmark._c;613;11_283}> !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 = case _x_0 (syntax.OB_OpenLet _x_1_0 _x_1_1 -> refmark._f282_282 _x_1_1 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_1_0 _x_0) (_ -> <{refmark._c;613;11_279}> _x_0 closed_let_vars_6 rms_3 rms_var_heap_4)
refmark._f282_282 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_7 _x_8 = case _x_0 (general.Yes _x_1_0 -> refmark._f281_281 _x_1_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_0 _x_7 _x_8) (_ -> refmark._f280_280 _x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_6 _x_7 _x_8)
refmark._f281_281 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 fv_5 closed_let_vars_6 _x_7 _x_8 _x_9 = case _x_0 (_Tuple2 ref_counts_1_0 let_vars_1_1 -> let rms_2_0 = update rms_3::refmark._RMState [0:rms_var_heap_4], ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet (select var_occ_2::syntax._Occurrence 1)])) in refmark.addSeqRefMarksOfLets let_vars_1_1 (_Tuple2 (_predefined._Cons fv_5 closed_let_vars_6) (update rms_2_0::refmark._RMState [0:refmark.addSeqRefCounts ref_counts_1_0 (Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select rms_2_0::refmark._RMState 0))]))) (_ -> refmark._f280_280 _x_7 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_6 _x_8 _x_9)
refmark._f280_280 !_x_0 fv_info_ptr_1 var_occ_2 rms_3 rms_var_heap_4 closed_let_vars_5 _x_6 _x_7 = case _x_0 (general.No -> let rms_2_0 = update rms_3::refmark._RMState [0:rms_var_heap_4], ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet (select var_occ_2::syntax._Occurrence 1)])) in _Tuple2 closed_let_vars_5 (update rms_2_0::refmark._RMState [0:Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select rms_2_0::refmark._RMState 0),1:_predefined._Cons _x_6 (select rms_2_0::refmark._RMState 1)])) (_ -> <{refmark._c;613;11_279}> _x_7 closed_let_vars_5 rms_3 rms_var_heap_4)
<{refmark._c;613;11_279}> !_x_0 closed_let_vars_1 rms_2 rms_var_heap_3 = case _x_0 (syntax.OB_LockedLet _x_1_0 -> _Tuple2 closed_let_vars_1 (update rms_2::refmark._RMState [0:rms_var_heap_3])) 
refmark.add_let_variable_56 do_seq_combine_0::B var_info_ptr_1 !var_occ_2 !_x_3 = case var_occ_2 (syntax._Occurrence occ_ref_count_1_0 ob_1_1 occ_pattern_vars_1_2 occ_observing_1_3 occ_previous_1_4 -> case ob_1_1 (syntax.OB_OpenLet fv_2_0 _x_2_1 -> case _x_2_1 (general.Yes _x_3_0 -> case _x_3_0 (_Tuple2 ref_counts_4_0 let_vars_4_1 -> case _x_3 (_Tuple2 closed_lets_5_0 rms_5_1 -> case rms_5_1 (refmark._RMState rms_var_heap_6_0 rms_let_vars_6_1 rms_counted_let_vars_6_2 -> case do_seq_combine_0 (True -> let ptr_and_val_8_0 = _Tuple2 var_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet ob_1_1])) in refmark.addSeqRefMarksOfLets let_vars_4_1 (_Tuple2 (_predefined._Cons fv_2_0 closed_lets_5_0) (update rms_5_1::refmark._RMState [0:refmark.addSeqRefCounts ref_counts_4_0 (Heap.writePtr (select ptr_and_val_8_0::_Tuple2 0) (select ptr_and_val_8_0::_Tuple2 1) rms_var_heap_6_0)]))) (False -> let ptr_and_val_8_0 = _Tuple2 var_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet ob_1_1])) in refmark.addParRefMarksOfLets let_vars_4_1 (_Tuple2 (_predefined._Cons fv_2_0 closed_lets_5_0) (update rms_5_1::refmark._RMState [0:refmark.addParRefCounts ref_counts_4_0 (Heap.writePtr (select ptr_and_val_8_0::_Tuple2 0) (select ptr_and_val_8_0::_Tuple2 1) rms_var_heap_6_0)]))) ) ) ) ) (general.No -> case _x_3 (_Tuple2 closed_lets_4_0 rms_4_1 -> case rms_4_1 (refmark._RMState rms_var_heap_5_0 rms_let_vars_5_1 rms_counted_let_vars_5_2 -> let ptr_and_val_6_0 = _Tuple2 var_info_ptr_1 (syntax.VI_Occurrence (update var_occ_2::syntax._Occurrence [1:syntax.OB_LockedLet ob_1_1])) in _Tuple2 closed_lets_4_0 (update rms_4_1::refmark._RMState [0:Heap.writePtr (select ptr_and_val_6_0::_Tuple2 0) (select ptr_and_val_6_0::_Tuple2 1) rms_var_heap_5_0,1:_predefined._Cons fv_2_0 rms_let_vars_5_1])) ) ) ) ) (_ -> _x_3)
refmark.ref_mark_of_variable_pattern_61 do_seq_combine_0::B !_x_1 !_x_2 = case _x_1 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> case _x_2 (_Tuple2 closed_lets_2_0 rms_2_1 -> case rms_2_1 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = Heap.readPtr var_info_ptr_1_1 rms_var_heap_3_0, _x_4_1 = refmark.adjust_ref_count_of_variable_pattern_55 (select (select _x_4_0::_Tuple2 0)::_Tuple1 0) var_info_ptr_1_1 var_expr_ptr_1_2 (select _x_4_0::_Tuple2 1) in refmark.add_let_variable_56 do_seq_combine_0 var_info_ptr_1_1 (select _x_4_1::_Tuple2 0) (_Tuple2 closed_lets_2_0 (update rms_2_1::refmark._RMState [0:select _x_4_1::_Tuple2 1]))) ) ) 
refmark.ref_mark_of_default_57 !_vrefMark_0 case_explicit_1::B free_vars_2 sel_3::I def_4 var_5 !_x_6 rms_7 = case _x_6 (general.Yes expr_1_0 -> case rms_7 (refmark._RMState rms_var_heap_2_0 rms_let_vars_2_1 rms_counted_let_vars_2_2 -> let _x_3_0 = refmark.fullRefMarkOfAlternative _vrefMark_0 free_vars_2 sel_3 general.No expr_1_0 (refmark.saveOccurrences free_vars_2 rms_var_heap_2_0), _x_3_1 = refmark.ref_mark_of_variable_pattern_61 True var_5 (_Tuple2 (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)), rms_3_2 = select _x_3_1::_Tuple2 1, closed_lets_3_3 = select _x_3_1::_Tuple2 0, _x_3_4 = refmark.restoreOccurrences free_vars_2 (refmark.openLetVars (select rms_3_2::refmark._RMState 2) (refmark.openLetVars closed_lets_3_3 (select rms_3_2::refmark._RMState 0))) in _Tuple3 (general.Yes (select _x_3_4::_Tuple2 0)) (_predefined._Cons closed_lets_3_3 (_predefined._Cons (select rms_3_2::refmark._RMState 2) _predefined._Nil)) (update rms_3_2::refmark._RMState [0:select _x_3_4::_Tuple2 1,1:<{StdList.++}> (select rms_3_2::refmark._RMState 1) rms_let_vars_2_1])) ) (general.No -> case case_explicit_1 (True -> _Tuple3 general.No _predefined._Nil rms_7) (False -> _Tuple3 def_4 _predefined._Nil rms_7) ) 
refmark.collect_used_vars_48 !_x_0 arg_nr_1::I collected_vars_2 = case _x_0 (_predefined._Cons fv_1_0 pattern_vars_1_1 -> case fv_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> case (<{StdInt.<_17}> 0 fv_count_2_3) (True -> refmark.collect_used_vars_48 pattern_vars_1_1 (<{StdInt.+_6}> arg_nr_1 StdInt.one_11) (_predefined._Cons (syntax._PatternVar fv_1_0 arg_nr_1) collected_vars_2)) (False -> refmark.collect_used_vars_48 pattern_vars_1_1 (<{StdInt.+_6}> arg_nr_1 StdInt.one_11) collected_vars_2) ) ) (_predefined._Nil -> collected_vars_2) 
refmark.collectPatternsVariables !pattern_vars_0 = refmark.collect_used_vars_48 pattern_vars_0 0 _predefined._Nil
refmark.bind_pattern_variable_59 _x_0 !_x_1 !var_heap_2 = case _x_1 (_predefined._Nil -> var_heap_2) (_ -> case _x_0 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> let _x_2_0 = Heap.readPtr var_info_ptr_1_1 var_heap_2, var_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, ptr_and_val_2_2 = _Tuple2 var_info_ptr_1_1 (syntax.VI_Occurrence (update var_occ_2_1::syntax._Occurrence [2:_predefined._Cons _x_1 (select var_occ_2_1::syntax._Occurrence 2)])) in Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1)) )
<{refmark.c;516;32_54}> !g_l_0 = <{refmark.g_c1;516;44_285}> g_l_0
<{refmark.g_c1;516;44_285}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{refmark.g_c2;516;44_284}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{refmark.g_c2;516;44_284}> !g_h_0 g_t_1 = case g_h_0 (syntax._PatternVar pv_var_1_0 pv_arg_nr_1_1 -> _predefined._Cons pv_var_1_0 (<{refmark.c;516;32_54}> g_t_1)) (_ -> <{refmark.c;516;32_54}> g_t_1)
refmark.restore_binding_of_pattern_variable_60 _x_0 !_x_1 !var_heap_2 = case _x_1 (_predefined._Nil -> var_heap_2) (_ -> case _x_0 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> let _x_2_0 = Heap.readPtr var_info_ptr_1_1 var_heap_2, var_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, ptr_and_val_2_2 = _Tuple2 var_info_ptr_1_1 (syntax.VI_Occurrence (update var_occ_2_1::syntax._Occurrence [2:StdList.tl (select var_occ_2_1::syntax._Occurrence 2)])) in Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1)) )
refmark.fold_st_147 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_147 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.cond_add_65 !cond_0::B var_1 vars_2 = case cond_0 (True -> _predefined._Cons var_1 vars_2) (False -> vars_2) 
refmark.set_occurrence_66 !_x_0 !_x_1 = case _x_0 (syntax._CountedFreeVar fv_1_0 cfv_is_let_1_1 cfv_count_1_2 -> case fv_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> case _x_1 (_Tuple2 open_let_vars_3_0 var_heap_3_1 -> let _x_4_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_3_1, ptr_and_val_4_1 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_Occurrence (update (select (select _x_4_0::_Tuple2 0)::_Tuple1 0)::syntax._Occurrence [0:cfv_count_1_2])) in _Tuple2 (refmark.cond_add_65 cfv_is_let_1_1 fv_1_0 open_let_vars_3_0) (Heap.writePtr (select ptr_and_val_4_1::_Tuple2 0) (select ptr_and_val_4_1::_Tuple2 1) (select _x_4_0::_Tuple2 1))) ) ) 
refmark.fold_st_146 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_146 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_145 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_145 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_144 op_0 !l_1 st_2 = refmark.fold_st_145 op_0 l_1 st_2
refmark.alt_combine_of_selections_69 !_x_0 !sels_1 = case _x_0 (_predefined._Nil -> sels_1) (_ -> case sels_1 (_predefined._Nil -> _x_0) (_predefined._Cons sel2_1_0 sels2_1_1 -> case _x_0 (_predefined._Cons sel1_2_0 sels1_2_1 -> case sel1_2_0 (syntax._SelectiveUse su_field_3_0 su_multiply_3_1 su_uniquely_3_2 -> case (<{StdInt.==_16}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons (update sel1_2_0::syntax._SelectiveUse [1:<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 1) su_multiply_3_1,2:<{StdList.++}> (select sel2_1_0::syntax._SelectiveUse 2) su_uniquely_3_2]) (refmark.alt_combine_of_selections_69 sels1_2_1 sels2_1_1)) (False -> case (<{StdInt.<_17}> su_field_3_0 (select sel2_1_0::syntax._SelectiveUse 0)) (True -> _predefined._Cons sel1_2_0 (refmark.alt_combine_of_selections_69 sels1_2_1 sels_1)) (False -> _predefined._Cons sel2_1_0 (refmark.alt_combine_of_selections_69 _x_0 sels2_1_1)) ) ) ) ) )
refmark.alt_combine_ref_count_72 !_x_0 !ref_count_1 = case _x_0 (syntax.RC_Unused -> ref_count_1) (_ -> case ref_count_1 (syntax.RC_Unused -> _x_0) (syntax.RC_Used ref_count2_1_0 -> case _x_0 (syntax.RC_Used _x_2_0 -> case _x_2_0 (syntax._RC_Used rcu_multiply_3_0 rcu_selectively_3_1 rcu_uniquely_3_2 -> syntax.RC_Used (syntax._RC_Used (<{StdList.++}> rcu_multiply_3_0 (select ref_count2_1_0::syntax._RC_Used 0)) (refmark.alt_combine_of_selections_69 rcu_selectively_3_1 (select ref_count2_1_0::syntax._RC_Used 1)) (<{StdList.++}> rcu_uniquely_3_2 (select ref_count2_1_0::syntax._RC_Used 2)))) ) ) )
refmark.alt_combine_ref_counts_71 comb_ref_count_0 ref_counts_1 !_x_2::I = case _x_2 (0 -> _Tuple2 comb_ref_count_0 ref_counts_1) (_ -> case ref_counts_1 (syntax.ReferenceCounts occ_ref_count_1_0 occ_previous_1_1 -> refmark.alt_combine_ref_counts_71 (refmark.alt_combine_ref_count_72 comb_ref_count_0 occ_ref_count_1_0) occ_previous_1_1 (<{StdInt.-_7}> _x_2 StdInt.one_11)) (syntax.ReferenceCountsUnused n_unused_ref_count_1_0 occ_previous_1_1 -> case (<{StdInt.<_17}> n_unused_ref_count_1_0 _x_2) (True -> refmark.alt_combine_ref_counts_71 comb_ref_count_0 occ_previous_1_1 (<{StdInt.-_7}> _x_2 n_unused_ref_count_1_0)) (False -> case (<{StdInt.==_16}> n_unused_ref_count_1_0 _x_2) (True -> _Tuple2 comb_ref_count_0 occ_previous_1_1) (False -> let !n_unused_ref_count_4_0::I = <{StdInt.-_7}> n_unused_ref_count_1_0 _x_2 in _Tuple2 comb_ref_count_0 (syntax.ReferenceCountsUnused n_unused_ref_count_4_0 occ_previous_1_1)) ) ) (syntax.ReferenceCountsAllUnused -> _Tuple2 comb_ref_count_0 syntax.ReferenceCountsAllUnused) )
refmark.alt_combine_70 !depth_0::I !_x_1 !var_heap_2 = case _x_1 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2, old_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, _x_2_2 = refmark.alt_combine_ref_counts_71 (select old_occ_2_1::syntax._Occurrence 0) (select old_occ_2_1::syntax._Occurrence 4) (<{StdInt.-_7}> depth_0 StdInt.one_11), ptr_and_val_2_3 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (update old_occ_2_1::syntax._Occurrence [0:select _x_2_2::_Tuple2 0,4:select _x_2_2::_Tuple2 1])) in Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_0::_Tuple2 1)) 
refmark.fold_st_194 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_194 depth_0 x_1_1 (refmark.alt_combine_70 depth_0 a_1_0 st_2)) 
refmark.foldSt_193 depth_0::I !l_1 !st_2 = refmark.fold_st_194 depth_0 l_1 st_2
refmark.fold_st_195 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_195 depth_0 x_1_1 (refmark.foldSt_193 depth_0 a_1_0 st_2)) 
refmark.altCombine depth_0::I !free_vars_1 !var_heap_2 = refmark.fold_st_195 depth_0 free_vars_1 var_heap_2
refmark.fold_st_196 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_196 x_1_1 (refmark.set_occurrence_66 a_1_0 st_1)) 
refmark.addRefMarkOfDefault !pattern_depth_0::I !free_vars_1 !_x_2 !var_heap_3 = case _x_2 (general.Yes occurrences_1_0 -> let _x_2_0 = refmark.fold_st_196 occurrences_1_0 (_Tuple2 _predefined._Nil (refmark.saveOccurrences free_vars_1 var_heap_3)) in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (refmark.altCombine (<{StdInt.+_6}> pattern_depth_0 StdInt.one_11) free_vars_1 (select _x_2_0::_Tuple2 1))) (general.No -> <{_Tuple2!3}> _predefined._Nil (refmark.altCombine pattern_depth_0 free_vars_1 var_heap_3)) 
refmark.fold_st_137 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_137 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_136 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_136 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_135 op_0 !l_1 st_2 = refmark.fold_st_136 op_0 l_1 st_2
refmark.set_used_let_var_50 !fv_0 !_x_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple2 counted_let_vars_2_0 var_heap_2_1 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_1, var_occ_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, var_heap_3_2 = select _x_3_0::_Tuple2 1 in <{refmark._c;446;11_286}> (select var_occ_3_1::syntax._Occurrence 1) fv_0 counted_let_vars_2_0 fv_info_ptr_1_2 var_occ_3_1 var_heap_3_2) ) 
<{refmark._c;446;11_286}> !_x_0 fv_1 counted_let_vars_2 fv_info_ptr_3 var_occ_4 var_heap_5 = case _x_0 (syntax.OB_OpenLet _x_1_0 _x_1_1 -> _Tuple2 (_predefined._Cons fv_1 counted_let_vars_2) (Heap.writePtr fv_info_ptr_3 (syntax.VI_Occurrence (update var_occ_4::syntax._Occurrence [1:syntax.OB_LockedLet (select var_occ_4::syntax._Occurrence 1)])) var_heap_5)) (_ -> _Tuple2 counted_let_vars_2 var_heap_5)
refmark.fold_st_198 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_198 x_1_1 (refmark.set_used_let_var_50 a_1_0 st_1)) 
refmark.foldSt_197 !l_0 !st_1 = refmark.fold_st_198 l_0 st_1
refmark.fold_st_199 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_199 x_1_1 (refmark.foldSt_197 a_1_0 st_1)) 
refmark.setUsedLetVars !used_vars_0 counted_let_vars_1 var_heap_2 = refmark.fold_st_199 used_vars_0 (_Tuple2 counted_let_vars_1 var_heap_2)
refmark.fold_st_143 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_143 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_142 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_142 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_141 op_0 !l_1 st_2 = refmark.fold_st_142 op_0 l_1 st_2
refmark.par_combine_67 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, old_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, var_heap_2_2 = select _x_2_0::_Tuple2 1 in <{refmark._c;650;11_287}> (select old_occ_2_1::syntax._Occurrence 4) fv_info_ptr_1_2 old_occ_2_1 var_heap_2_2) 
<{refmark._c;650;11_287}> !_x_0 fv_info_ptr_1 old_occ_2 !var_heap_3 = case _x_0 (syntax.ReferenceCounts glob_ref_count_1_0 occ_previous_1_1 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:refmark.parCombineRefCount (select old_occ_2::syntax._Occurrence 0) glob_ref_count_1_0,4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsUnused _x_1_0 occ_previous_1_1 -> case _x_1_0 (1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_3) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused n_2_0 occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3)) (syntax.ReferenceCountsAllUnused -> var_heap_3) (_ -> StdMisc.abort "inconsistent reference count administration")
refmark.fold_st_201 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_201 x_1_1 (refmark.par_combine_67 a_1_0 st_1)) 
refmark.foldSt_200 !l_0 !st_1 = refmark.fold_st_201 l_0 st_1
refmark.fold_st_202 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_202 x_1_1 (refmark.foldSt_200 a_1_0 st_1)) 
refmark.parCombine !free_vars_0 !var_heap_1 = refmark.fold_st_202 free_vars_0 var_heap_1
refmark.fold_st_140 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_140 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_139 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_139 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.foldSt_138 op_0 !l_1 st_2 = refmark.fold_st_139 op_0 l_1 st_2
refmark.seq_combine_68 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_1, pattern_occ_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, var_heap_2_2 = select _x_2_0::_Tuple2 1 in <{refmark._c;670;11_288}> (select pattern_occ_2_1::syntax._Occurrence 4) fv_info_ptr_1_2 pattern_occ_2_1 var_heap_2_2) 
<{refmark._c;670;11_288}> !_x_0 fv_info_ptr_1 pattern_occ_2 !var_heap_3 = case _x_0 (syntax.ReferenceCounts alt_ref_count_1_0 occ_previous_1_1 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update pattern_occ_2::syntax._Occurrence [0:refmark.seqCombineRefCount alt_ref_count_1_0 (select pattern_occ_2::syntax._Occurrence 0),4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3) (syntax.ReferenceCountsUnused _x_1_0 occ_previous_1_1 -> case _x_1_0 (1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update pattern_occ_2::syntax._Occurrence [4:occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_3) (_ -> let !n_2_0::I = <{StdInt.-_7}> _x_1_0 1, ptr_and_val_2_1 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update pattern_occ_2::syntax._Occurrence [4:syntax.ReferenceCountsUnused n_2_0 occ_previous_1_1])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_3)) (syntax.ReferenceCountsAllUnused -> var_heap_3) (_ -> StdMisc.abort "inconsistent reference count administration")
refmark.fold_st_204 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_204 x_1_1 (refmark.seq_combine_68 a_1_0 st_1)) 
refmark.foldSt_203 !l_0 !st_1 = refmark.fold_st_204 l_0 st_1
refmark.fold_st_205 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_205 x_1_1 (refmark.foldSt_203 a_1_0 st_1)) 
refmark.seqCombine !free_vars_0 !var_heap_1 = refmark.fold_st_205 free_vars_0 var_heap_1
refmark.fold_st_153 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_153 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.refMark_102 !_vrefMark_0 !free_vars_1 !sel_2::I !_x_3 !list_4 !rms_5 = refmark.fold_st_153 (select _vrefMark_0::<{refmark.refMark;}> 0 free_vars_1 sel_2 general.No) list_4 rms_5
<{refmark.c;572;35_62}> !g_l_0 = <{refmark.g_c1;572;47_290}> g_l_0
<{refmark.g_c1;572;47_290}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{refmark.g_c2;572;47_289}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{refmark.g_c2;572;47_289}> !g_h_0 g_t_1 = case g_h_0 (syntax._PatternVar pv_var_1_0 pv_arg_nr_1_1 -> _predefined._Cons pv_var_1_0 (<{refmark.c;572;35_62}> g_t_1)) (_ -> <{refmark.c;572;35_62}> g_t_1)
<{refmark.c;485;35_52}> !g_l_0 = <{refmark.g_c1;485;47_292}> g_l_0
<{refmark.g_c1;485;47_292}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{refmark.g_c2;485;47_291}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{refmark.g_c2;485;47_291}> !g_h_0 g_t_1 = case g_h_0 (syntax._PatternVar pv_var_1_0 pv_arg_nr_1_1 -> _predefined._Cons pv_var_1_0 (<{refmark.c;485;35_52}> g_t_1)) (_ -> <{refmark.c;485;35_52}> g_t_1)
refmark.field_number_96::I !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (syntax.RecordSelection _x_2_0 field_nr_2_1 -> field_nr_2_1) ) (_ -> -1)
refmark.fold_st_154 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_154 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.add_selection_43 var_expr_ptr_0 sel_1::I !_x_2 = case _x_2 (_predefined._Nil -> _predefined._Cons (syntax._SelectiveUse sel_1 _predefined._Nil (_predefined._Cons var_expr_ptr_0 _predefined._Nil)) _predefined._Nil) (_predefined._Cons selection_1_0 selections_1_1 -> case selection_1_0 (syntax._SelectiveUse su_field_2_0 su_multiply_2_1 su_uniquely_2_2 -> case (<{StdInt.==_16}> sel_1 su_field_2_0) (True -> _predefined._Cons (update selection_1_0::syntax._SelectiveUse [1:<{StdList.++}> su_multiply_2_1 (_predefined._Cons var_expr_ptr_0 su_uniquely_2_2),2:_predefined._Nil]) selections_1_1) (False -> case (<{StdInt.<_17}> sel_1 su_field_2_0) (True -> _predefined._Cons (syntax._SelectiveUse sel_1 _predefined._Nil (_predefined._Cons var_expr_ptr_0 _predefined._Nil)) _x_2) (False -> _predefined._Cons selection_1_0 (refmark.add_selection_43 var_expr_ptr_0 sel_1 selections_1_1)) ) ) ) 
refmark.adjust_ref_count_42 !sel_0::I !_x_1 var_expr_ptr_2 = case _x_1 (syntax.RC_Unused -> case (<{StdInt.==_16}> sel_0 -1) (True -> syntax.RC_Used (syntax._RC_Used _predefined._Nil _predefined._Nil (_predefined._Cons var_expr_ptr_2 _predefined._Nil))) (False -> syntax.RC_Used (syntax._RC_Used _predefined._Nil (_predefined._Cons (syntax._SelectiveUse sel_0 _predefined._Nil (_predefined._Cons var_expr_ptr_2 _predefined._Nil)) _predefined._Nil) _predefined._Nil)) ) (syntax.RC_Used _x_1_0 -> case _x_1_0 (syntax._RC_Used rcu_multiply_2_0 rcu_selectively_2_1 rcu_uniquely_2_2 -> case (<{StdInt.==_16}> sel_0 -1) (True -> syntax.RC_Used (syntax._RC_Used (refmark.collectAllSelections rcu_selectively_2_1 (<{StdList.++}> rcu_uniquely_2_2 (_predefined._Cons var_expr_ptr_2 rcu_multiply_2_0))) _predefined._Nil _predefined._Nil)) (False -> let rcu_multiply_4_0 = <{StdList.++}> rcu_uniquely_2_2 rcu_multiply_2_0 in case (StdList.isEmpty rcu_multiply_4_0) (True -> syntax.RC_Used (syntax._RC_Used _predefined._Nil (refmark.add_selection_43 var_expr_ptr_2 sel_0 rcu_selectively_2_1) _predefined._Nil)) (False -> syntax.RC_Used (syntax._RC_Used (refmark.collectAllSelections rcu_selectively_2_1 (_predefined._Cons var_expr_ptr_2 rcu_multiply_4_0)) _predefined._Nil _predefined._Nil)) ) ) ) 
refmark.fold_st_133 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_133 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_131 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_131 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_132 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_132 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.mark_variable_41 !_x_0 !var_heap_1 = case _x_0 (syntax._PatternVar _x_1_0 pv_arg_nr_1_1 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_1, old_occ_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, _x_3_2 = select old_occ_3_1::syntax._Occurrence 3, var_heap_3_3 = select _x_3_0::_Tuple2 1, expr_ptr_3_4 = select _x_3_2::_Tuple2 1, occ_pattern_vars_3_5 = select old_occ_3_1::syntax._Occurrence 2 in <{refmark._c;180;11_293}> (select old_occ_3_1::syntax._Occurrence 0) fv_info_ptr_2_2 old_occ_3_1 expr_ptr_3_4 occ_pattern_vars_3_5 var_heap_3_3) ) 
refmark.fold_st_207 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_207 x_1_1 (refmark.mark_variable_41 a_1_0 st_1)) 
refmark.mark_pattern_variables_39 !used_pattern_vars_0 !var_heap_1 = refmark.fold_st_207 used_pattern_vars_0 var_heap_1
refmark.fold_st_206 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_206 x_1_1 (refmark.mark_pattern_variables_39 a_1_0 st_1)) 
refmark.markPatternVariables_38 !list_of_used_pattern_vars_0 !var_heap_1 = refmark.fold_st_206 list_of_used_pattern_vars_0 var_heap_1
<{refmark._c;180;11_293}> !_x_0 !fv_info_ptr_1 !old_occ_2 expr_ptr_3 !occ_pattern_vars_4 !var_heap_5 = case _x_0 (syntax.RC_Unused -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Used (syntax._RC_Used _predefined._Nil _predefined._Nil (_predefined._Cons expr_ptr_3 _predefined._Nil))])) in refmark.markPatternVariables_38 occ_pattern_vars_4 (Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_5)) (syntax.RC_Used _x_1_0 -> case _x_1_0 (syntax._RC_Used rcu_multiply_2_0 rcu_selectively_2_1 rcu_uniquely_2_2 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1 (syntax.VI_Occurrence (update old_occ_2::syntax._Occurrence [0:syntax.RC_Used (syntax._RC_Used (refmark.collectAllSelections rcu_selectively_2_1 (<{StdList.++}> rcu_uniquely_2_2 (_predefined._Cons expr_ptr_3 rcu_multiply_2_0))) _predefined._Nil _predefined._Nil)])) in refmark.markPatternVariables_38 occ_pattern_vars_4 (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_5)) ) 
refmark.mark_selected_variable_40 sel_0::I !_x_1 !var_heap_2 = case _x_1 (_predefined._Nil -> var_heap_2) (_predefined._Cons pv_1_0 pvs_1_1 -> case pv_1_0 (syntax._PatternVar pv_var_2_0 pv_arg_nr_2_1 -> case (<{StdInt.==_16}> sel_0 pv_arg_nr_2_1) (True -> refmark.mark_variable_41 pv_1_0 var_heap_2) (False -> refmark.mark_selected_variable_40 sel_0 pvs_1_1 var_heap_2) ) ) 
refmark.fold_st_208 sel_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_208 sel_0 x_1_1 (refmark.mark_selected_variable_40 sel_0 a_1_0 st_2)) 
refmark.markPatternVariables !sel_0::I !list_of_used_pattern_vars_1 !var_heap_2 = case (<{StdInt.==_16}> sel_0 -1) (True -> refmark.markPatternVariables_38 list_of_used_pattern_vars_1 var_heap_2) (False -> refmark.fold_st_208 sel_0 list_of_used_pattern_vars_1 var_heap_2) 
refmark.ref_count_of_bindings_44 !var_occ_0 var_ident_1 !var_info_ptr_2 !occ_ref_count_3 !rms_4 = case var_occ_0 (syntax._Occurrence occ_ref_count_1_0 occ_bind_1_1 occ_pattern_vars_1_2 occ_observing_1_3 occ_previous_1_4 -> case occ_bind_1_1 (syntax.OB_OpenLet fv_2_0 _x_2_1 -> case rms_4 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let ptr_and_val_4_0 = _Tuple2 var_info_ptr_2 (syntax.VI_Occurrence (update var_occ_0::syntax._Occurrence [0:occ_ref_count_3,1:syntax.OB_LockedLet (select var_occ_0::syntax._Occurrence 1)])) in update rms_4::refmark._RMState [0:Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) rms_var_heap_3_0,1:_predefined._Cons fv_2_0 rms_let_vars_3_1]) ) (syntax.OB_LockedLet _x_2_0 -> case rms_4 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let ptr_and_val_4_0 = _Tuple2 var_info_ptr_2 (syntax.VI_Occurrence (update var_occ_0::syntax._Occurrence [0:occ_ref_count_3])) in update rms_4::refmark._RMState [0:Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) rms_var_heap_3_0]) ) ) (_ -> case rms_4 (refmark._RMState rms_var_heap_1_0 rms_let_vars_1_1 rms_counted_let_vars_1_2 -> let ptr_and_val_2_0 = _Tuple2 var_info_ptr_2 (syntax.VI_Occurrence (update var_occ_0::syntax._Occurrence [0:occ_ref_count_3])) in update rms_4::refmark._RMState [0:Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) rms_var_heap_1_0]) )
refmark.refMarkOfVariable !sel_0::I !_x_1 !var_2 !rms_3 = case _x_1 (syntax.VI_Occurrence var_occ_1_0 -> case var_2 (syntax._BoundVar var_ident_2_0 var_info_ptr_2_1 var_expr_ptr_2_2 -> case rms_3 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> refmark.ref_count_of_bindings_44 var_occ_1_0 var_ident_2_0 var_info_ptr_2_1 (refmark.adjust_ref_count_42 sel_0 (select var_occ_1_0::syntax._Occurrence 0) var_expr_ptr_2_2) (update rms_3::refmark._RMState [0:refmark.markPatternVariables sel_0 (select var_occ_1_0::syntax._Occurrence 2) rms_var_heap_3_0])) ) ) 
refmark.ref_mark_of_field_99 !_vrefMark_0 free_vars_1 !_x_2 rms_3 = case _x_2 (general._Bind bind_src_1_0 bind_dst_1_1 -> select _vrefMark_0::<{refmark.refMark;}> 0 free_vars_1 -1 general.No bind_src_1_0 rms_3) 
refmark.refMark_103 !free_vars_0 !sel_1::I !_x_2 !var_3 !rms_4 = case rms_4 (refmark._RMState rms_var_heap_1_0 rms_let_vars_1_1 rms_counted_let_vars_1_2 -> let _x_2_0 = Heap.readPtr (select var_3::syntax._BoundVar 1) rms_var_heap_1_0 in refmark.refMarkOfVariable sel_1 (select _x_2_0::_Tuple2 0) var_3 (update rms_4::refmark._RMState [0:select _x_2_0::_Tuple2 1])) 
refmark.partialRefMark_30 !free_vars_0 !expr_1 !rms_counted_let_vars_2 !var_heap_3 = let _x_1_0 = refmark.refMark_104 free_vars_0 -1 general.No expr_1 (refmark._RMState (refmark.saveOccurrences free_vars_0 var_heap_3) _predefined._Nil rms_counted_let_vars_2), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1, _x_1_2 = refmark.restoreOccurrences free_vars_0 (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) in <{_Tuple3!7}> (_Tuple2 (select _x_1_2::_Tuple2 0) rms_let_vars_1_1) (select _x_1_0::refmark._RMState 2) (select _x_1_2::_Tuple2 1)
refmark.ref_mark_of_let_29 !free_vars_0 !let_bind_1 !_x_2 = case let_bind_1 (syntax._LetBind fv_1_0 lb_src_1_1 lb_position_1_2 -> case fv_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> case _x_2 (_Tuple2 rms_counted_let_vars_3_0 rms_var_heap_3_1 -> let !rms_var_heap_4_0 = Heap.writePtr (select ptr_and_val_4_5::_Tuple2 0) (select ptr_and_val_4_5::_Tuple2 1) (select _x_4_4::_Tuple3 2), _x_4_1 = Heap.readPtr fv_info_ptr_2_2 rms_var_heap_3_1, occ_4_2 = select (select _x_4_1::_Tuple2 0)::_Tuple1 0, ptr_and_val_4_3 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_Occurrence (update occ_4_2::syntax._Occurrence [1:syntax.OB_LockedLet (select occ_4_2::syntax._Occurrence 1)])), _x_4_4 = refmark.partialRefMark_30 free_vars_0 lb_src_1_1 rms_counted_let_vars_3_0 (Heap.writePtr (select ptr_and_val_4_3::_Tuple2 0) (select ptr_and_val_4_3::_Tuple2 1) (select _x_4_1::_Tuple2 1)), ptr_and_val_4_5 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_Occurrence (update occ_4_2::syntax._Occurrence [1:syntax.OB_OpenLet fv_1_0 (general.Yes (select _x_4_4::_Tuple3 0))])) in _Tuple2 (select _x_4_4::_Tuple3 1) rms_var_heap_4_0) ) ) 
refmark.fold_st_215 free_vars_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_215 free_vars_0 x_1_1 (refmark.ref_mark_of_let_29 free_vars_0 a_1_0 st_2)) 
refmark.ref_mark_of_lets free_vars_0 !let_binds_1 rms_counted_let_vars_2 rms_var_heap_3 = refmark.fold_st_215 free_vars_0 let_binds_1 (_Tuple2 rms_counted_let_vars_2 rms_var_heap_3)
refmark.refMark_105 !free_vars_0 !sel_1::I !_x_2 !_x_3 !rms_4 = case _x_3 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> refmark.refMark_104 free_vars_0 -1 general.No lb_src_1_1 rms_4) 
refmark.fold_st_212 !free_vars_0 !sel_1::I !_x_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_212 free_vars_0 sel_1 _x_2 x_1_1 (refmark.refMark_105 free_vars_0 sel_1 _x_2 a_1_0 st_4)) 
refmark.refMark_211 !free_vars_0 !sel_1::I !_x_2 !list_3 !rms_4 = refmark.fold_st_212 free_vars_0 sel_1 general.No list_3 rms_4
refmark.ref_mark_of_basic_pattern_230 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !_x_5 = case _x_4 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> case _x_5 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_0 _predefined._Nil sel_1 def_2 case_expr_3 bp_expr_1_1 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (<{StdInt.+_6}> pattern_depth_2_0 StdInt.one_11) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_229 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_229 free_vars_0 sel_1 def_2 case_expr_3 x_1_1 (refmark.ref_mark_of_basic_pattern_230 free_vars_0 sel_1 def_2 case_expr_3 a_1_0 st_5)) 
refmark.ref_mark_of_algebraic_pattern_236 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !_x_5 = case _x_4 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_5 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_0 (<{refmark.c;572;35_62}> (refmark.collectPatternsVariables ap_vars_1_1)) sel_1 def_2 case_expr_3 ap_expr_1_2 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (<{StdInt.+_6}> pattern_depth_2_0 StdInt.one_11) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_235 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_235 free_vars_0 sel_1 def_2 case_expr_3 x_1_1 (refmark.ref_mark_of_algebraic_pattern_236 free_vars_0 sel_1 def_2 case_expr_3 a_1_0 st_5)) 
refmark.ref_mark_of_algebraic_pattern_234 free_vars_0 sel_1::I var_2 def_3 !_x_4 !_x_5 = case _x_4 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_5 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 _x_2_2 -> case _x_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let used_pattern_vars_4_0 = refmark.collectPatternsVariables ap_vars_1_1, _x_4_1 = refmark.fullRefMarkOfAlternative_221 (_predefined._Cons (<{refmark.c;516;32_54}> used_pattern_vars_4_0) free_vars_0) sel_1 def_3 ap_expr_1_2 (refmark.bind_pattern_variable_59 var_2 used_pattern_vars_4_0 (refmark.saveOccurrences free_vars_0 rms_var_heap_3_0)), rms_4_2 = select _x_4_1::_Tuple2 1, _x_4_3 = refmark.ref_mark_of_variable_pattern_61 (StdList.isEmpty used_pattern_vars_4_0) var_2 (_Tuple2 (select _x_4_1::_Tuple2 0) (update rms_4_2::refmark._RMState [0:refmark.restore_binding_of_pattern_variable_60 var_2 used_pattern_vars_4_0 (select rms_4_2::refmark._RMState 0)])), closed_let_vars_4_4 = select _x_4_3::_Tuple2 0, rms_4_5 = select _x_4_3::_Tuple2 1 in _Tuple3 (<{StdInt.+_6}> pattern_depth_2_0 StdInt.one_11) (_predefined._Cons closed_let_vars_4_4 (_predefined._Cons (select rms_4_5::refmark._RMState 2) all_closed_let_vars_2_1)) (update rms_4_5::refmark._RMState [0:refmark.openLetVars (select rms_4_5::refmark._RMState 2) (refmark.openLetVars closed_let_vars_4_4 (select rms_4_5::refmark._RMState 0))])) ) ) 
refmark.fold_st_233 free_vars_0 sel_1::I var_2 def_3 !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_233 free_vars_0 sel_1 var_2 def_3 x_1_1 (refmark.ref_mark_of_algebraic_pattern_234 free_vars_0 sel_1 var_2 def_3 a_1_0 st_5)) 
refmark.ref_mark_of_default_220 case_explicit_0::B free_vars_1 sel_2::I def_3 var_4 !_x_5 rms_6 = case _x_5 (general.Yes expr_1_0 -> case rms_6 (refmark._RMState rms_var_heap_2_0 rms_let_vars_2_1 rms_counted_let_vars_2_2 -> let _x_3_0 = refmark.fullRefMarkOfAlternative_221 free_vars_1 sel_2 general.No expr_1_0 (refmark.saveOccurrences free_vars_1 rms_var_heap_2_0), _x_3_1 = refmark.ref_mark_of_variable_pattern_61 True var_4 (_Tuple2 (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)), rms_3_2 = select _x_3_1::_Tuple2 1, closed_lets_3_3 = select _x_3_1::_Tuple2 0, _x_3_4 = refmark.restoreOccurrences free_vars_1 (refmark.openLetVars (select rms_3_2::refmark._RMState 2) (refmark.openLetVars closed_lets_3_3 (select rms_3_2::refmark._RMState 0))) in _Tuple3 (general.Yes (select _x_3_4::_Tuple2 0)) (_predefined._Cons closed_lets_3_3 (_predefined._Cons (select rms_3_2::refmark._RMState 2) _predefined._Nil)) (update rms_3_2::refmark._RMState [0:select _x_3_4::_Tuple2 1,1:<{StdList.++}> (select rms_3_2::refmark._RMState 1) rms_let_vars_2_1])) ) (general.No -> case case_explicit_0 (True -> _Tuple3 general.No _predefined._Nil rms_6) (False -> _Tuple3 def_3 _predefined._Nil rms_6) ) 
refmark.refMarkOfAlgebraicOrOverloadedListCase !free_vars_0 sel_1::I def_2 !_x_3 !alternatives_4 case_explicit_5::B case_default_6 !rms_7 = case _x_3 (syntax.Var var_1_0 -> case rms_7 (refmark._RMState rms_var_heap_2_0 rms_let_vars_2_1 rms_counted_let_vars_2_2 -> let _x_3_0 = refmark.ref_mark_of_default_220 case_explicit_5 free_vars_0 sel_1 def_2 var_1_0 case_default_6 rms_7, def_3_1 = select _x_3_0::_Tuple3 0, _x_3_2 = refmark.fold_st_233 free_vars_0 sel_1 var_1_0 def_3_1 alternatives_4 (_Tuple3 0 (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)), rms_3_3 = select _x_3_2::_Tuple3 2, _x_3_4 = refmark.addRefMarkOfDefault (select _x_3_2::_Tuple3 0) free_vars_0 def_3_1 (select rms_3_3::refmark._RMState 0), _x_3_5 = refmark.setUsedLetVars (_predefined._Cons (select _x_3_4::_Tuple2 0) (select _x_3_2::_Tuple3 1)) rms_counted_let_vars_2_2 (select _x_3_4::_Tuple2 1) in update rms_3_3::refmark._RMState [0:refmark.parCombine free_vars_0 (select _x_3_5::_Tuple2 1),2:select _x_3_5::_Tuple2 0]) ) (_ -> case rms_7 (refmark._RMState rms_var_heap_1_0 rms_let_vars_1_1 rms_counted_let_vars_1_2 -> let _x_2_0 = refmark.refMarkOfDefault case_explicit_5 free_vars_0 sel_1 def_2 _x_3 case_default_6 _predefined._Nil rms_7, def_2_1 = select _x_2_0::_Tuple3 0, _x_2_2 = refmark.fold_st_235 free_vars_0 sel_1 def_2_1 _x_3 alternatives_4 (_Tuple3 0 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)), rms_2_3 = select _x_2_2::_Tuple3 2, _x_2_4 = refmark.addRefMarkOfDefault (select _x_2_2::_Tuple3 0) free_vars_0 def_2_1 (select rms_2_3::refmark._RMState 0), _x_2_5 = refmark.setUsedLetVars (_predefined._Cons (select _x_2_4::_Tuple2 0) (select _x_2_2::_Tuple3 1)) rms_counted_let_vars_1_2 (select _x_2_4::_Tuple2 1) in update rms_2_3::refmark._RMState [0:refmark.parCombine free_vars_0 (select _x_2_5::_Tuple2 1),2:select _x_2_5::_Tuple2 0]) )
refmark.ref_mark_of_dynamic_pattern_232 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !_x_5 = case _x_4 (syntax._DynamicPattern dp_var_1_0 dp_type_1_1 dp_type_code_1_2 dp_rhs_1_3 dp_position_1_4 -> case _x_5 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> case rms_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = refmark.refMarkOfAlternative free_vars_0 (<{refmark.c;485;35_52}> (refmark.collectPatternsVariables (_predefined._Cons dp_var_1_0 _predefined._Nil))) sel_1 def_2 case_expr_3 dp_rhs_1_3 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (<{StdInt.+_6}> pattern_depth_2_0 StdInt.one_11) (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)) ) ) 
refmark.fold_st_231 free_vars_0 sel_1::I def_2 case_expr_3 !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_231 free_vars_0 sel_1 def_2 case_expr_3 x_1_1 (refmark.ref_mark_of_dynamic_pattern_232 free_vars_0 sel_1 def_2 case_expr_3 a_1_0 st_5)) 
refmark.fold_st_210 !free_vars_0 !sel_1::I !_x_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_210 free_vars_0 sel_1 _x_2 x_1_1 (refmark.refMark_104 free_vars_0 sel_1 _x_2 a_1_0 st_4)) 
refmark.refMark_209 !free_vars_0 !sel_1::I !_x_2 !list_3 !rms_4 = refmark.fold_st_210 free_vars_0 sel_1 general.No list_3 rms_4
refmark.fullRefMarkOfAlternative_226 !free_vars_0 !sel_1::I !def_2 !expr_3 !var_heap_4 = let _x_1_0 = refmark.refMark_209 free_vars_0 sel_1 def_2 expr_3 (refmark._RMState var_heap_4 _predefined._Nil _predefined._Nil), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1 in refmark.addParRefMarksOfLets rms_let_vars_1_1 (_Tuple2 _predefined._Nil (refmark._RMState (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) _predefined._Nil (select _x_1_0::refmark._RMState 2)))
refmark.fullRefMarkOfCaseExpr !free_vars_0 !sel_1::I !def_2 !expr_3 !rms_counted_let_vars_4 !var_heap_5 = let _x_1_0 = refmark.refMark_104 free_vars_0 sel_1 def_2 expr_3 (refmark._RMState var_heap_5 _predefined._Nil rms_counted_let_vars_4), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1 in refmark.addParRefMarksOfLets rms_let_vars_1_1 (_Tuple2 _predefined._Nil (refmark._RMState (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) _predefined._Nil (select _x_1_0::refmark._RMState 2)))
refmark.fullRefMarkOfAlternative_221 !free_vars_0 !sel_1::I !def_2 !expr_3 !var_heap_4 = let _x_1_0 = refmark.refMark_104 free_vars_0 sel_1 def_2 expr_3 (refmark._RMState var_heap_4 _predefined._Nil _predefined._Nil), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1 in refmark.addParRefMarksOfLets rms_let_vars_1_1 (_Tuple2 _predefined._Nil (refmark._RMState (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) _predefined._Nil (select _x_1_0::refmark._RMState 2)))
refmark.refMarkOfAlternative free_vars_0 !_x_1 sel_2::I def_3 case_expr_4 alt_expr_5 all_closed_let_vars_6 !_x_7 = case _x_1 (_predefined._Nil -> case _x_7 (refmark._RMState rms_var_heap_2_0 rms_let_vars_2_1 rms_counted_let_vars_2_2 -> let _x_3_0 = refmark.fullRefMarkOfAlternative_221 free_vars_0 sel_2 def_3 alt_expr_5 (refmark.saveOccurrences free_vars_0 rms_var_heap_2_0), closed_let_vars_in_alt_3_1 = select _x_3_0::_Tuple2 0, alt_rms_3_2 = select _x_3_0::_Tuple2 1, _x_3_3 = refmark.fullRefMarkOfCaseExpr free_vars_0 sel_2 def_3 case_expr_4 (select alt_rms_3_2::refmark._RMState 2) (refmark.saveOccurrences free_vars_0 (select alt_rms_3_2::refmark._RMState 0)), closed_let_vars_in_expr_3_4 = select _x_3_3::_Tuple2 0, case_rms_3_5 = select _x_3_3::_Tuple2 1 in _Tuple2 (_predefined._Cons closed_let_vars_in_alt_3_1 (_predefined._Cons closed_let_vars_in_expr_3_4 (_predefined._Cons (select case_rms_3_5::refmark._RMState 2) all_closed_let_vars_6))) (update case_rms_3_5::refmark._RMState [0:refmark.openLetVars (select case_rms_3_5::refmark._RMState 2) (refmark.openLetVars closed_let_vars_in_expr_3_4 (refmark.openLetVars closed_let_vars_in_alt_3_1 (refmark.seqCombine free_vars_0 (select case_rms_3_5::refmark._RMState 0)))),1:<{StdList.++}> (select case_rms_3_5::refmark._RMState 1) (<{StdList.++}> (select alt_rms_3_2::refmark._RMState 1) rms_let_vars_2_1)])) ) (_ -> case _x_7 (refmark._RMState rms_var_heap_1_0 rms_let_vars_1_1 rms_counted_let_vars_1_2 -> let _x_2_0 = refmark.fullRefMarkOfAlternative_226 (_predefined._Cons _x_1 free_vars_0) sel_2 def_3 (_predefined._Cons alt_expr_5 (_predefined._Cons case_expr_4 _predefined._Nil)) (refmark.saveOccurrences (_predefined._Cons _x_1 free_vars_0) rms_var_heap_1_0), closed_let_vars_in_alt_and_expr_2_1 = select _x_2_0::_Tuple2 0, alt_and_case_rms_2_2 = select _x_2_0::_Tuple2 1 in _Tuple2 (_predefined._Cons closed_let_vars_in_alt_and_expr_2_1 (_predefined._Cons (select alt_and_case_rms_2_2::refmark._RMState 2) all_closed_let_vars_6)) (update alt_and_case_rms_2_2::refmark._RMState [0:refmark.openLetVars (select alt_and_case_rms_2_2::refmark._RMState 2) (refmark.openLetVars closed_let_vars_in_alt_and_expr_2_1 (select alt_and_case_rms_2_2::refmark._RMState 0)),1:<{StdList.++}> (select alt_and_case_rms_2_2::refmark._RMState 1) rms_let_vars_1_1])) )
refmark.refMarkOfDefault case_explicit_0::B free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 all_closed_let_vars_6 rms_7 = case _x_5 (general.Yes expr_1_0 -> let _x_2_0 = refmark.refMarkOfAlternative free_vars_1 _predefined._Nil sel_2 def_3 case_expr_4 expr_1_0 all_closed_let_vars_6 rms_7, rms_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = refmark.restoreOccurrences free_vars_1 (select rms_2_1::refmark._RMState 0) in _Tuple3 (general.Yes (select _x_2_2::_Tuple2 0)) (select _x_2_0::_Tuple2 0) (update rms_2_1::refmark._RMState [0:select _x_2_2::_Tuple2 1])) (general.No -> case case_explicit_0 (True -> _Tuple3 general.No all_closed_let_vars_6 rms_7) (False -> _Tuple3 def_3 all_closed_let_vars_6 rms_7) ) 
refmark.refMarkOfCase free_vars_0 sel_1::I def_2 !_x_3 !rms_4 = case _x_3 (syntax._Case case_expr_1_0 _x_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> case _x_1_1 (syntax.AlgebraicPatterns type_2_0 patterns_2_1 -> refmark.refMarkOfAlgebraicOrOverloadedListCase free_vars_0 sel_1 def_2 case_expr_1_0 patterns_2_1 case_explicit_1_5 case_default_1_2 rms_4) (syntax.BasicPatterns type_2_0 patterns_2_1 -> case rms_4 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = refmark.refMarkOfDefault case_explicit_1_5 free_vars_0 sel_1 def_2 case_expr_1_0 case_default_1_2 _predefined._Nil rms_4, def_4_1 = select _x_4_0::_Tuple3 0, _x_4_2 = refmark.fold_st_229 free_vars_0 sel_1 def_4_1 case_expr_1_0 patterns_2_1 (_Tuple3 0 (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)), rms_4_3 = select _x_4_2::_Tuple3 2, _x_4_4 = refmark.addRefMarkOfDefault (select _x_4_2::_Tuple3 0) free_vars_0 def_4_1 (select rms_4_3::refmark._RMState 0), _x_4_5 = refmark.setUsedLetVars (_predefined._Cons (select _x_4_4::_Tuple2 0) (select _x_4_2::_Tuple3 1)) rms_counted_let_vars_3_2 (select _x_4_4::_Tuple2 1) in update rms_4_3::refmark._RMState [0:refmark.parCombine free_vars_0 (select _x_4_5::_Tuple2 1),2:select _x_4_5::_Tuple2 0]) ) (syntax.OverloadedListPatterns type_2_0 _x_2_1 patterns_2_2 -> refmark.refMarkOfAlgebraicOrOverloadedListCase free_vars_0 sel_1 def_2 case_expr_1_0 patterns_2_2 case_explicit_1_5 case_default_1_2 rms_4) (syntax.NewTypePatterns type_2_0 patterns_2_1 -> refmark.refMarkOfAlgebraicOrOverloadedListCase free_vars_0 sel_1 def_2 case_expr_1_0 patterns_2_1 case_explicit_1_5 case_default_1_2 rms_4) (syntax.DynamicPatterns patterns_2_0 -> case rms_4 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = refmark.refMarkOfDefault case_explicit_1_5 free_vars_0 sel_1 def_2 case_expr_1_0 case_default_1_2 _predefined._Nil rms_4, def_4_1 = select _x_4_0::_Tuple3 0, _x_4_2 = refmark.fold_st_231 free_vars_0 sel_1 def_4_1 case_expr_1_0 patterns_2_0 (_Tuple3 0 (select _x_4_0::_Tuple3 1) (select _x_4_0::_Tuple3 2)), rms_4_3 = select _x_4_2::_Tuple3 2, _x_4_4 = refmark.addRefMarkOfDefault (select _x_4_2::_Tuple3 0) free_vars_0 def_4_1 (select rms_4_3::refmark._RMState 0), _x_4_5 = refmark.setUsedLetVars (_predefined._Cons (select _x_4_4::_Tuple2 0) (select _x_4_2::_Tuple3 1)) rms_counted_let_vars_3_2 (select _x_4_4::_Tuple2 1) in update rms_4_3::refmark._RMState [0:refmark.parCombine free_vars_0 (select _x_4_5::_Tuple2 1),2:select _x_4_5::_Tuple2 0]) ) ) 
refmark.refMark_106 !free_vars_0 !_x_1::I !_x_2 !_x_3 !rms_4 = case _x_3 (syntax.ArraySelection _x_1_0 _x_1_1 index_expr_1_2 -> refmark.refMark_104 free_vars_0 -1 general.No index_expr_1_2 rms_4) (_ -> rms_4)
refmark.fold_st_214 !free_vars_0 !_x_1::I !_x_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_214 free_vars_0 _x_1 _x_2 x_1_1 (refmark.refMark_106 free_vars_0 _x_1 _x_2 a_1_0 st_4)) 
refmark.refMark_213 !free_vars_0 !sel_1::I !_x_2 !list_3 !rms_4 = refmark.fold_st_214 free_vars_0 sel_1 general.No list_3 rms_4
refmark.ref_mark_of_field_227 !free_vars_0 !_x_1 !rms_2 = case _x_1 (general._Bind bind_src_1_0 bind_dst_1_1 -> refmark.refMark_104 free_vars_0 -1 general.No bind_src_1_0 rms_2) 
refmark.fold_st_228 free_vars_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_228 free_vars_0 x_1_1 (refmark.ref_mark_of_field_227 free_vars_0 a_1_0 st_2)) 
refmark.ref_mark_of_fields_98 field_nr_0::I free_vars_1 !_x_2 var_3 !rms_4 = case _x_2 (_predefined._Nil -> rms_4) (_predefined._Cons _x_1_0 fields_1_1 -> case _x_1_0 (general._Bind _x_2_0 bind_dst_2_1 -> case _x_2_0 (syntax.NoBind expr_ptr_3_0 -> case var_3 (syntax._BoundVar var_ident_4_0 var_info_ptr_4_1 var_expr_ptr_4_2 -> case rms_4 (refmark._RMState rms_var_heap_5_0 rms_let_vars_5_1 rms_counted_let_vars_5_2 -> let _x_6_0 = Heap.readPtr var_info_ptr_4_1 rms_var_heap_5_0 in refmark.ref_mark_of_fields_98 (<{StdInt.+_6}> field_nr_0 StdInt.one_11) free_vars_1 fields_1_1 var_3 (refmark.refMarkOfVariable field_nr_0 (select _x_6_0::_Tuple2 0) (update var_3::syntax._BoundVar [2:expr_ptr_3_0]) (update rms_4::refmark._RMState [0:select _x_6_0::_Tuple2 1]))) ) ) (_ -> refmark.ref_mark_of_fields_98 (<{StdInt.+_6}> field_nr_0 StdInt.one_11) free_vars_1 fields_1_1 var_3 (refmark.refMark_104 free_vars_1 -1 general.No _x_2_0 rms_4))) ) 
refmark.ref_mark_of_record_expression_97 free_vars_0 !_x_1 !fields_2 !rms_3 = case _x_1 (syntax.Var var_1_0 -> refmark.ref_mark_of_fields_98 0 free_vars_0 fields_2 var_1_0 rms_3) (_ -> refmark.fold_st_228 free_vars_0 fields_2 (refmark.refMark_104 free_vars_0 -1 general.No _x_1 rms_3))
refmark.refMark_104 !free_vars_0 !sel_1::I !_x_2 !_x_3 !rms_4 = case _x_3 (syntax.Var var_1_0 -> refmark.refMark_103 free_vars_0 sel_1 general.No var_1_0 rms_4) (syntax.App _x_1_0 -> case _x_1_0 (syntax._App app_symb_2_0 app_args_2_1 app_info_ptr_2_2 -> refmark.refMark_209 free_vars_0 -1 general.No app_args_2_1 rms_4) ) (<{syntax.@}> fun_1_0 args_1_1 -> refmark.refMark_209 free_vars_0 -1 general.No args_1_1 (refmark.refMark_104 free_vars_0 -1 general.No fun_1_0 rms_4)) (syntax.Let _x_1_0 -> case _x_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> case rms_4 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> case (StdList.isEmpty let_lazy_binds_2_1) (True -> case (refmark.binds_are_observing_93 let_strict_binds_2_0 rms_var_heap_3_0) (True -> let local_let_vars_6_0 = <{refmark.c;287;40_89}> let_strict_binds_2_0, new_free_vars_6_1 = _predefined._Cons local_let_vars_6_0 free_vars_0, rms_6_2 = refmark.refMark_211 new_free_vars_6_1 -1 general.No let_strict_binds_2_0 (update rms_4::refmark._RMState [0:refmark.saveOccurrences free_vars_0 rms_var_heap_3_0]), _x_6_3 = refmark.fullRefMarkOfRootOrLetExpr new_free_vars_6_1 sel_1 _x_2 let_expr_2_2 rms_counted_let_vars_3_2 (refmark.saveOccurrences new_free_vars_6_1 (select rms_6_2::refmark._RMState 0)), _x_6_4 = refmark.remove_local_let_vars_from_counted_let_vars local_let_vars_6_0 (select _x_6_3::refmark._RMState 2) (refmark.let_combine_94 free_vars_0 (select _x_6_3::refmark._RMState 0)) in refmark._RMState (select _x_6_4::_Tuple2 1) (<{StdList.++}> (select _x_6_3::refmark._RMState 1) (select rms_6_2::refmark._RMState 1)) (select _x_6_4::_Tuple2 0)) (False -> let new_free_vars_6_0 = _predefined._Cons (<{refmark.c;287;40_89}> let_strict_binds_2_0) free_vars_0 in refmark.refMark_104 new_free_vars_6_0 sel_1 _x_2 let_expr_2_2 (refmark.refMark_211 new_free_vars_6_0 -1 general.No let_strict_binds_2_0 (update rms_4::refmark._RMState [0:rms_var_heap_3_0]))) ) (False -> let all_binds_5_0 = <{StdList.++}> let_strict_binds_2_0 let_lazy_binds_2_1, local_let_vars_5_1 = <{refmark.c;301;63_90}> all_binds_5_0, new_free_vars_5_2 = _predefined._Cons local_let_vars_5_1 free_vars_0, _x_5_3 = refmark.ref_mark_of_lets new_free_vars_5_2 all_binds_5_0 rms_counted_let_vars_3_2 (refmark.init_let_binds_95 local_let_vars_5_1 rms_var_heap_3_0), _x_5_4 = refmark.fullRefMarkOfRootOrLetExpr new_free_vars_5_2 sel_1 _x_2 let_expr_2_2 (select _x_5_3::_Tuple2 0) (select _x_5_3::_Tuple2 1), _x_5_5 = refmark.remove_local_let_vars_from_counted_let_vars local_let_vars_5_1 (select _x_5_4::refmark._RMState 2) (select _x_5_4::refmark._RMState 0) in refmark._RMState (select _x_5_5::_Tuple2 1) (<{StdList.++}> (select _x_5_4::refmark._RMState 1) (select rms_4::refmark._RMState 1)) (select _x_5_5::_Tuple2 0)) ) ) ) (syntax.Case ca_1_0 -> refmark.refMarkOfCase free_vars_0 sel_1 _x_2 ca_1_0 rms_4) (syntax.Selection selkind_1_0 expr_1_1 selectors_1_2 -> <{refmark._c;358;11_294}> selkind_1_0 free_vars_0 expr_1_1 rms_4 selectors_1_2) (syntax.Update expr1_1_0 selectors_1_1 expr2_1_2 -> refmark.refMark_104 free_vars_0 -1 general.No expr2_1_2 (refmark.refMark_213 free_vars_0 -1 general.No selectors_1_1 (refmark.refMark_104 free_vars_0 -1 general.No expr1_1_0 rms_4))) (syntax.RecordUpdate cons_symbol_1_0 expression_1_1 expressions_1_2 -> refmark.ref_mark_of_record_expression_97 free_vars_0 expression_1_1 expressions_1_2 rms_4) (syntax.TupleSelect _x_1_0 arg_nr_1_1 expr_1_2 -> refmark.refMark_104 free_vars_0 arg_nr_1_1 general.No expr_1_2 rms_4) (syntax.MatchExpr _x_1_0 expr_1_1 -> refmark.refMark_104 free_vars_0 sel_1 general.No expr_1_1 rms_4) (syntax.IsConstructor expr_1_0 _x_1_1 _x_1_2 _x_1_3 _x_1_4 _x_1_5 -> refmark.refMark_104 free_vars_0 sel_1 general.No expr_1_0 rms_4) (syntax.EE -> rms_4) (_ -> rms_4)
refmark.fullRefMarkOfRootOrLetExpr !free_vars_0 !sel_1::I !def_2 !expr_3 !rms_counted_let_vars_4 !var_heap_5 = let _x_1_0 = refmark.refMark_104 free_vars_0 sel_1 def_2 expr_3 (refmark._RMState var_heap_5 _predefined._Nil rms_counted_let_vars_4), rms_let_vars_1_1 = select _x_1_0::refmark._RMState 1, _x_1_2 = refmark.addParRefMarksOfLets rms_let_vars_1_1 (_Tuple2 _predefined._Nil (refmark._RMState (refmark.openLetVars rms_let_vars_1_1 (select _x_1_0::refmark._RMState 0)) _predefined._Nil (select _x_1_0::refmark._RMState 2))), rms_1_3 = select _x_1_2::_Tuple2 1 in update rms_1_3::refmark._RMState [2:<{StdList.++}> (select _x_1_2::_Tuple2 0) (select rms_1_3::refmark._RMState 2)]
<{refmark._c;358;11_294}> !selkind_0 !free_vars_1 !expr_2 !rms_3 selectors_4 = case selkind_0 (syntax.UniqueSelector -> refmark.refMark_104 free_vars_1 -1 general.No expr_2 rms_3) (syntax.UniqueSelectorUniqueElementResult -> refmark.refMark_104 free_vars_1 -1 general.No expr_2 rms_3) (_ -> refmark.refMark_104 free_vars_1 (refmark.field_number_96 selectors_4) general.No expr_2 rms_3)
refmark.ref_mark_of_dynamic_pattern_218 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !_x_6 = case _x_5 (syntax._DynamicPattern dp_var_1_0 dp_type_1_1 dp_type_code_1_2 dp_rhs_1_3 dp_position_1_4 -> case _x_6 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> case rms_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = refmark.refMarkOfAlternative free_vars_1 (<{refmark.c;485;35_52}> (refmark.collectPatternsVariables (_predefined._Cons dp_var_1_0 _predefined._Nil))) sel_2 def_3 case_expr_4 dp_rhs_1_3 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 StdInt.one_11) (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)) ) ) 
refmark.fold_st_219 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !st_6 = case _x_5 (_predefined._Nil -> st_6) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_219 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 x_1_1 (refmark.ref_mark_of_dynamic_pattern_218 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 a_1_0 st_6)) 
refmark.ref_mark_of_algebraic_pattern_222 !<{_v+_0}> free_vars_1 sel_2::I var_3 def_4 !_x_5 !_x_6 = case _x_5 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_6 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 _x_2_2 -> case _x_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let used_pattern_vars_4_0 = refmark.collectPatternsVariables ap_vars_1_1, _x_4_1 = refmark.fullRefMarkOfAlternative_221 (_predefined._Cons (<{refmark.c;516;32_54}> used_pattern_vars_4_0) free_vars_1) sel_2 def_4 ap_expr_1_2 (refmark.bind_pattern_variable_59 var_3 used_pattern_vars_4_0 (refmark.saveOccurrences free_vars_1 rms_var_heap_3_0)), rms_4_2 = select _x_4_1::_Tuple2 1, _x_4_3 = refmark.ref_mark_of_variable_pattern_61 (StdList.isEmpty used_pattern_vars_4_0) var_3 (_Tuple2 (select _x_4_1::_Tuple2 0) (update rms_4_2::refmark._RMState [0:refmark.restore_binding_of_pattern_variable_60 var_3 used_pattern_vars_4_0 (select rms_4_2::refmark._RMState 0)])), closed_let_vars_4_4 = select _x_4_3::_Tuple2 0, rms_4_5 = select _x_4_3::_Tuple2 1 in _Tuple3 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 StdInt.one_11) (_predefined._Cons closed_let_vars_4_4 (_predefined._Cons (select rms_4_5::refmark._RMState 2) all_closed_let_vars_2_1)) (update rms_4_5::refmark._RMState [0:refmark.openLetVars (select rms_4_5::refmark._RMState 2) (refmark.openLetVars closed_let_vars_4_4 (select rms_4_5::refmark._RMState 0))])) ) ) 
refmark.fold_st_223 !<{_v+_0}> free_vars_1 sel_2::I var_3 def_4 !_x_5 !st_6 = case _x_5 (_predefined._Nil -> st_6) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_223 <{_v+_0}> free_vars_1 sel_2 var_3 def_4 x_1_1 (refmark.ref_mark_of_algebraic_pattern_222 <{_v+_0}> free_vars_1 sel_2 var_3 def_4 a_1_0 st_6)) 
refmark.ref_mark_of_algebraic_pattern_224 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !_x_6 = case _x_5 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_6 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_1 (<{refmark.c;572;35_62}> (refmark.collectPatternsVariables ap_vars_1_1)) sel_2 def_3 case_expr_4 ap_expr_1_2 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 StdInt.one_11) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_225 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !st_6 = case _x_5 (_predefined._Nil -> st_6) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_225 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 x_1_1 (refmark.ref_mark_of_algebraic_pattern_224 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 a_1_0 st_6)) 
refmark.ref_mark_of_basic_pattern_216 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !_x_6 = case _x_5 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> case _x_6 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_1 _predefined._Nil sel_2 def_3 case_expr_4 bp_expr_1_1 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 StdInt.one_11) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.fold_st_217 !<{_v+_0}> free_vars_1 sel_2::I def_3 case_expr_4 !_x_5 !st_6 = case _x_5 (_predefined._Nil -> st_6) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_217 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 x_1_1 (refmark.ref_mark_of_basic_pattern_216 <{_v+_0}> free_vars_1 sel_2 def_3 case_expr_4 a_1_0 st_6)) 
refmark.ref_mark_of_algebraic_pattern_58 !_vone_0 !<{_v+_1}> free_vars_2 sel_3::I var_4 def_5 !_x_6 !_x_7 = case _x_6 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_7 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 _x_2_2 -> case _x_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let used_pattern_vars_4_0 = refmark.collectPatternsVariables ap_vars_1_1, _x_4_1 = refmark.fullRefMarkOfAlternative_221 (_predefined._Cons (<{refmark.c;516;32_54}> used_pattern_vars_4_0) free_vars_2) sel_3 def_5 ap_expr_1_2 (refmark.bind_pattern_variable_59 var_4 used_pattern_vars_4_0 (refmark.saveOccurrences free_vars_2 rms_var_heap_3_0)), rms_4_2 = select _x_4_1::_Tuple2 1, _x_4_3 = refmark.ref_mark_of_variable_pattern_61 (StdList.isEmpty used_pattern_vars_4_0) var_4 (_Tuple2 (select _x_4_1::_Tuple2 0) (update rms_4_2::refmark._RMState [0:refmark.restore_binding_of_pattern_variable_60 var_4 used_pattern_vars_4_0 (select rms_4_2::refmark._RMState 0)])), closed_let_vars_4_4 = select _x_4_3::_Tuple2 0, rms_4_5 = select _x_4_3::_Tuple2 1 in _Tuple3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 (select _vone_0::<{StdOverloaded.one;}> 0)) (_predefined._Cons closed_let_vars_4_4 (_predefined._Cons (select rms_4_5::refmark._RMState 2) all_closed_let_vars_2_1)) (update rms_4_5::refmark._RMState [0:refmark.openLetVars (select rms_4_5::refmark._RMState 2) (refmark.openLetVars closed_let_vars_4_4 (select rms_4_5::refmark._RMState 0))])) ) ) 
refmark.ref_mark_of_algebraic_pattern_63 !_vone_0 !<{_v+_1}> free_vars_2 sel_3::I def_4 case_expr_5 !_x_6 !_x_7 = case _x_6 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case _x_7 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_2 (<{refmark.c;572;35_62}> (refmark.collectPatternsVariables ap_vars_1_1)) sel_3 def_4 case_expr_5 ap_expr_1_2 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 (select _vone_0::<{StdOverloaded.one;}> 0)) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.ref_mark_of_basic_pattern_51 !_vone_0 !<{_v+_1}> free_vars_2 sel_3::I def_4 case_expr_5 !_x_6 !_x_7 = case _x_6 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> case _x_7 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> let _x_3_0 = refmark.refMarkOfAlternative free_vars_2 _predefined._Nil sel_3 def_4 case_expr_5 bp_expr_1_1 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 (select _vone_0::<{StdOverloaded.one;}> 0)) (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1)) ) 
refmark.ref_mark_of_dynamic_pattern_53 !_vone_0 !<{_v+_1}> free_vars_2 sel_3::I def_4 case_expr_5 !_x_6 !_x_7 = case _x_6 (syntax._DynamicPattern dp_var_1_0 dp_type_1_1 dp_type_code_1_2 dp_rhs_1_3 dp_position_1_4 -> case _x_7 (_Tuple3 pattern_depth_2_0 all_closed_let_vars_2_1 rms_2_2 -> case rms_2_2 (refmark._RMState rms_var_heap_3_0 rms_let_vars_3_1 rms_counted_let_vars_3_2 -> let _x_4_0 = refmark.refMarkOfAlternative free_vars_2 (<{refmark.c;485;35_52}> (refmark.collectPatternsVariables (_predefined._Cons dp_var_1_0 _predefined._Nil))) sel_3 def_4 case_expr_5 dp_rhs_1_3 all_closed_let_vars_2_1 rms_2_2 in _Tuple3 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 pattern_depth_2_0 (select _vone_0::<{StdOverloaded.one;}> 0)) (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)) ) ) 
refmark.foldl_117 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.foldl_117 op_0 (op_0 r_1 a_1_0) x_1_1) 
refmark.fold_st_116 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_116 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.fold_st_115 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_115 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.make_shared_occurrence_non_unique_80 fun_body_0 free_var_1 !var_expr_ptr_2 !_x_3 = case _x_3 (_Tuple3 coercion_env_1_0 expr_heap_1_1 error_1_2 -> case (Heap.isNilPtr var_expr_ptr_2) (True -> _Tuple3 coercion_env_1_0 expr_heap_1_1 error_1_2) (False -> let _x_3_0 = Heap.readPtr var_expr_ptr_2 expr_heap_1_1, expr_heap_3_1 = select _x_3_0::_Tuple2 1 in <{refmark._c;856;23_295}> (select _x_3_0::_Tuple2 0) coercion_env_1_0 expr_heap_3_1 error_1_2 free_var_1 fun_body_0) ) 
<{refmark._c;856;23_295}> !_x_0 coercion_env_1 expr_heap_2 error_3 free_var_4 fun_body_5 = case _x_0 (syntax.EI_Attribute sa_attr_nr_1_0 -> let _x_2_0 = unitype.tryToMakeNonUnique sa_attr_nr_1_0 coercion_env_1 in case (select _x_2_0::_Tuple2 0) (True -> _Tuple3 (select _x_2_0::_Tuple2 1) expr_heap_2 error_3) (False -> _Tuple3 (select _x_2_0::_Tuple2 1) expr_heap_2 (unitype.uniquenessErrorVar free_var_4 fun_body_5 " demanded attribute cannot be offered by shared object" error_3)) ) (syntax.EI_FPContext _x_1_0 var_expr_ptr_1_1 -> refmark.make_shared_occurrence_non_unique_80 fun_body_5 free_var_4 var_expr_ptr_1_1 (_Tuple3 coercion_env_1 expr_heap_2 error_3)) (_ -> StdMisc.abort "make_shared_occurrence_non_unique")
refmark.fold_st_237 fun_body_0 free_var_1 !_x_2 !st_3 = case _x_2 (_predefined._Nil -> st_3) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_237 fun_body_0 free_var_1 x_1_1 (refmark.make_shared_occurrence_non_unique_80 fun_body_0 free_var_1 a_1_0 st_3)) 
refmark.make_shared_occurrences_non_unique_79 fun_body_0 fv_1 !multiply_2 !_x_3 = case _x_3 (_Tuple3 coercion_env_1_0 expr_heap_1_1 error_1_2 -> refmark.fold_st_237 fun_body_0 fv_1 multiply_2 (_Tuple3 coercion_env_1_0 expr_heap_1_1 error_1_2)) 
refmark.make_selection_non_unique_81 fun_body_0 fv_1 !_x_2 !cee_3 = case _x_2 (syntax._SelectiveUse su_field_1_0 su_multiply_1_1 su_uniquely_1_2 -> refmark.make_shared_occurrences_non_unique_79 fun_body_0 fv_1 su_multiply_1_1 cee_3) 
refmark.fold_st_238 fun_body_0 fv_1 !_x_2 !st_3 = case _x_2 (_predefined._Nil -> st_3) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_238 fun_body_0 fv_1 x_1_1 (refmark.make_selection_non_unique_81 fun_body_0 fv_1 a_1_0 st_3)) 
refmark.make_shared_var_non_unique_78 fun_body_0 !_x_1 !fv_2 = case _x_1 (_Tuple4 coercion_env_1_0 var_heap_1_1 expr_heap_1_2 error_1_3 -> case fv_2 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_1_1, var_heap_3_1 = select _x_3_0::_Tuple2 1 in <{refmark._c;840;19_296}> (select (select (select _x_3_0::_Tuple2 0)::_Tuple1 0)::syntax._Occurrence 0) fun_body_0 fv_2 coercion_env_1_0 expr_heap_1_2 error_1_3 var_heap_3_1) ) 
<{refmark._c;840;19_296}> !_x_0 fun_body_1 fv_2 coercion_env_3 expr_heap_4 error_5 var_heap_6 = case _x_0 (syntax.RC_Used _x_1_0 -> case _x_1_0 (syntax._RC_Used rcu_multiply_2_0 rcu_selectively_2_1 rcu_uniquely_2_2 -> let _x_3_0 = refmark.make_shared_occurrences_non_unique_79 fun_body_1 fv_2 rcu_multiply_2_0 (_Tuple3 coercion_env_3 expr_heap_4 error_5), _x_3_1 = refmark.fold_st_238 fun_body_1 fv_2 rcu_selectively_2_1 (_Tuple3 (select _x_3_0::_Tuple3 0) (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2)) in _Tuple4 (select _x_3_1::_Tuple3 0) var_heap_6 (select _x_3_1::_Tuple3 1) (select _x_3_1::_Tuple3 2)) ) (_ -> _Tuple4 coercion_env_3 var_heap_6 expr_heap_4 error_5)
refmark.foldl_239 fun_body_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.foldl_239 fun_body_0 (refmark.make_shared_var_non_unique_78 fun_body_0 r_1 a_1_0) x_1_1) 
refmark.make_shared_vars_non_unique_85 !vars_0 fun_body_1 coercion_env_2 var_heap_3 expr_heap_4 error_5 = refmark.foldl_239 fun_body_1 (_Tuple4 coercion_env_2 var_heap_3 expr_heap_4 error_5) vars_0
refmark.fold_st_114 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_114 op_0 x_1_1 (op_0 a_1_0 st_2)) 
refmark.empty_occurrence_77 !_x_0 !var_heap_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let ptr_and_val_2_0 = _Tuple2 fv_info_ptr_1_2 syntax.VI_Empty in Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_1) 
refmark.fold_st_240 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_240 x_1_1 (refmark.empty_occurrence_77 a_1_0 st_1)) 
refmark.empty_occurrences_83 !vars_0 !var_heap_1 = refmark.fold_st_240 vars_0 var_heap_1
refmark.make_shared_references_of_function_non_unique_86 !_vArray_0 !_vArray_1 !_vArray_2 !_x_3 coercion_env_4 subst_5 type_def_infos_6 var_heap_7 expr_heap_8 error_9 = case _x_3 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 _x_1_8 -> case fun_body_1_3 (syntax.TransformedBody _x_2_0 -> case _x_2_0 (syntax._TransformedBody tb_args_3_0 tb_rhs_3_1 -> case _x_1_8 (syntax._FunInfo fi_calls_4_0 fi_group_index_4_1 fi_def_level_4_2 fi_free_vars_4_3 fi_local_vars_4_4 fi_dynamics_4_5 fi_properties_4_6 -> let !var_heap_5_0 = refmark.empty_occurrences_83 variables_5_1 (select _x_5_3::_Tuple4 1), variables_5_1 = <{StdList.++}> tb_args_3_0 fi_local_vars_4_4, _x_5_2 = refmark.clear_occurrences_82 _vArray_0 _vArray_1 _vArray_2 variables_5_1 subst_5 type_def_infos_6 var_heap_7 expr_heap_8, _x_5_3 = refmark.make_shared_vars_non_unique_85 variables_5_1 fun_body_1_3 coercion_env_4 (select (refmark.fullRefMarkOfRootOrLetExpr (_predefined._Cons tb_args_3_0 _predefined._Nil) -1 general.No tb_rhs_3_1 _predefined._Nil (select _x_5_2::_Tuple4 2))::refmark._RMState 0) (select _x_5_2::_Tuple4 3) (checksupport.setErrorAdmin_33 (checksupport.newPosition fun_ident_1_0 fun_pos_1_5) error_9) in _Tuple6 (select _x_5_3::_Tuple4 0) (select _x_5_2::_Tuple4 0) (select _x_5_2::_Tuple4 1) var_heap_5_0 (select _x_5_3::_Tuple4 2) (select _x_5_3::_Tuple4 3)) ) ) ) 
refmark.args_have_observing_type_246::B !_vArray_0 !_vArray_1 !_x_2 type_def_infos_3 subst_4 = case _x_2 (_predefined._Cons _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._AType at_attribute_2_0 at_type_2_1 -> case (refmark.has_observing_type_245 _vArray_0 _vArray_1 at_type_2_1 type_def_infos_3 subst_4) (True -> refmark.args_have_observing_type_246 _vArray_0 _vArray_1 type_args_1_1 type_def_infos_3 subst_4) (False -> False) ) ) (_predefined._Nil -> True) 
refmark.has_observing_type_245::B !_vArray_0 !_vArray_1 !_x_2 type_def_infos_3 subst_4 = case _x_2 (syntax.TB basic_type_1_0 -> True) (syntax.TempV var_number_1_0 -> let subst_type_2_0 = _SystemArray.select_3 subst_4 var_number_1_0 in <{refmark._c;874;11_297}> subst_type_2_0 _vArray_0 _vArray_1 type_def_infos_3 subst_4) (syntax.TA _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_1::<{_SystemArray.Array;}> 3 (select _vArray_0::<{_SystemArray.Array;}> 3 type_def_infos_3 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_246 _vArray_0 _vArray_1 type_args_1_1 type_def_infos_3 subst_4) (False -> False) ) ) ) (syntax.TAS _x_1_0 type_args_1_1 _x_1_2 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_1::<{_SystemArray.Array;}> 3 (select _vArray_0::<{_SystemArray.Array;}> 3 type_def_infos_3 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_246 _vArray_0 _vArray_1 type_args_1_1 type_def_infos_3 subst_4) (False -> False) ) ) ) (_ -> False)
<{refmark._c;874;11_297}>::B !subst_type_0 _vArray_1 _vArray_2 type_def_infos_3 subst_4 = case subst_type_0 (syntax.TE -> True) (_ -> refmark.has_observing_type_245 _vArray_1 _vArray_2 subst_type_0 type_def_infos_3 subst_4)
refmark.initial_occurrence_244 !_vArray_0 !_vArray_1 !_x_2 !_x_3 = case _x_2 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_3 (_Tuple4 subst_2_0 type_def_infos_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_2, var_info_3_1 = select _x_3_0::_Tuple2 0, _x_3_2 = refmark.get_type_84 var_info_3_1 in case (refmark.has_observing_type_245 _vArray_0 _vArray_1 (select _x_3_2::syntax._AType 1) type_def_infos_2_1 subst_2_0) (True -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 True (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) (False -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 False (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) ) ) 
refmark.fold_st_243 !_vArray_0 !_vArray_1 !_x_2 !st_3 = case _x_2 (_predefined._Nil -> st_3) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_243 _vArray_0 _vArray_1 x_1_1 (refmark.initial_occurrence_244 _vArray_0 _vArray_1 a_1_0 st_3)) 
refmark.clear_occurrences_242 !_vArray_0 !_vArray_1 !vars_2 subst_3 type_def_infos_4 var_heap_5 expr_heap_6 = refmark.fold_st_243 _vArray_0 _vArray_1 vars_2 (_Tuple4 subst_3 type_def_infos_4 var_heap_5 expr_heap_6)
refmark.make_shared_references_of_function_non_unique_241 !_vArray_0 !_vArray_1 !_x_2 coercion_env_3 subst_4 type_def_infos_5 var_heap_6 expr_heap_7 error_8 = case _x_2 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 _x_1_8 -> case fun_body_1_3 (syntax.TransformedBody _x_2_0 -> case _x_2_0 (syntax._TransformedBody tb_args_3_0 tb_rhs_3_1 -> case _x_1_8 (syntax._FunInfo fi_calls_4_0 fi_group_index_4_1 fi_def_level_4_2 fi_free_vars_4_3 fi_local_vars_4_4 fi_dynamics_4_5 fi_properties_4_6 -> let !var_heap_5_0 = refmark.empty_occurrences_83 variables_5_1 (select _x_5_3::_Tuple4 1), variables_5_1 = <{StdList.++}> tb_args_3_0 fi_local_vars_4_4, _x_5_2 = refmark.clear_occurrences_242 _vArray_0 _vArray_1 variables_5_1 subst_4 type_def_infos_5 var_heap_6 expr_heap_7, _x_5_3 = refmark.make_shared_vars_non_unique_85 variables_5_1 fun_body_1_3 coercion_env_3 (select (refmark.fullRefMarkOfRootOrLetExpr (_predefined._Cons tb_args_3_0 _predefined._Nil) -1 general.No tb_rhs_3_1 _predefined._Nil (select _x_5_2::_Tuple4 2))::refmark._RMState 0) (select _x_5_2::_Tuple4 3) (checksupport.setErrorAdmin_33 (checksupport.newPosition fun_ident_1_0 fun_pos_1_5) error_8) in _Tuple6 (select _x_5_3::_Tuple4 0) (select _x_5_2::_Tuple4 0) (select _x_5_2::_Tuple4 1) var_heap_5_0 (select _x_5_3::_Tuple4 2) (select _x_5_3::_Tuple4 3)) ) ) ) 
refmark.args_have_observing_type_252::B !_vArray_0 !_x_1 type_def_infos_2 subst_3 = case _x_1 (_predefined._Cons _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._AType at_attribute_2_0 at_type_2_1 -> case (refmark.has_observing_type_251 _vArray_0 at_type_2_1 type_def_infos_2 subst_3) (True -> refmark.args_have_observing_type_252 _vArray_0 type_args_1_1 type_def_infos_2 subst_3) (False -> False) ) ) (_predefined._Nil -> True) 
refmark.has_observing_type_251::B !_vArray_0 !_x_1 type_def_infos_2 subst_3 = case _x_1 (syntax.TB basic_type_1_0 -> True) (syntax.TempV var_number_1_0 -> let subst_type_2_0 = _SystemArray.select_3 subst_3 var_number_1_0 in <{refmark._c;874;11_298}> subst_type_2_0 _vArray_0 type_def_infos_2 subst_3) (syntax.TA _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_0::<{_SystemArray.Array;}> 3 (_SystemArray.select_43 type_def_infos_2 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_252 _vArray_0 type_args_1_1 type_def_infos_2 subst_3) (False -> False) ) ) ) (syntax.TAS _x_1_0 type_args_1_1 _x_1_2 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (select _vArray_0::<{_SystemArray.Array;}> 3 (_SystemArray.select_43 type_def_infos_2 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_252 _vArray_0 type_args_1_1 type_def_infos_2 subst_3) (False -> False) ) ) ) (_ -> False)
<{refmark._c;874;11_298}>::B !subst_type_0 _vArray_1 type_def_infos_2 subst_3 = case subst_type_0 (syntax.TE -> True) (_ -> refmark.has_observing_type_251 _vArray_1 subst_type_0 type_def_infos_2 subst_3)
refmark.initial_occurrence_250 !_vArray_0 !_x_1 !_x_2 = case _x_1 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_2 (_Tuple4 subst_2_0 type_def_infos_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_2, var_info_3_1 = select _x_3_0::_Tuple2 0, _x_3_2 = refmark.get_type_84 var_info_3_1 in case (refmark.has_observing_type_251 _vArray_0 (select _x_3_2::syntax._AType 1) type_def_infos_2_1 subst_2_0) (True -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 True (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) (False -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 False (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) ) ) 
refmark.fold_st_249 !_vArray_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_249 _vArray_0 x_1_1 (refmark.initial_occurrence_250 _vArray_0 a_1_0 st_2)) 
refmark.clear_occurrences_248 !_vArray_0 !vars_1 subst_2 type_def_infos_3 var_heap_4 expr_heap_5 = refmark.fold_st_249 _vArray_0 vars_1 (_Tuple4 subst_2 type_def_infos_3 var_heap_4 expr_heap_5)
refmark.make_shared_references_of_function_non_unique_247 !_vArray_0 !_x_1 coercion_env_2 subst_3 type_def_infos_4 var_heap_5 expr_heap_6 error_7 = case _x_1 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 _x_1_8 -> case fun_body_1_3 (syntax.TransformedBody _x_2_0 -> case _x_2_0 (syntax._TransformedBody tb_args_3_0 tb_rhs_3_1 -> case _x_1_8 (syntax._FunInfo fi_calls_4_0 fi_group_index_4_1 fi_def_level_4_2 fi_free_vars_4_3 fi_local_vars_4_4 fi_dynamics_4_5 fi_properties_4_6 -> let !var_heap_5_0 = refmark.empty_occurrences_83 variables_5_1 (select _x_5_3::_Tuple4 1), variables_5_1 = <{StdList.++}> tb_args_3_0 fi_local_vars_4_4, _x_5_2 = refmark.clear_occurrences_248 _vArray_0 variables_5_1 subst_3 type_def_infos_4 var_heap_5 expr_heap_6, _x_5_3 = refmark.make_shared_vars_non_unique_85 variables_5_1 fun_body_1_3 coercion_env_2 (select (refmark.fullRefMarkOfRootOrLetExpr (_predefined._Cons tb_args_3_0 _predefined._Nil) -1 general.No tb_rhs_3_1 _predefined._Nil (select _x_5_2::_Tuple4 2))::refmark._RMState 0) (select _x_5_2::_Tuple4 3) (checksupport.setErrorAdmin_33 (checksupport.newPosition fun_ident_1_0 fun_pos_1_5) error_7) in _Tuple6 (select _x_5_3::_Tuple4 0) (select _x_5_2::_Tuple4 0) (select _x_5_2::_Tuple4 1) var_heap_5_0 (select _x_5_3::_Tuple4 2) (select _x_5_3::_Tuple4 3)) ) ) ) 
refmark.args_have_observing_type_258::B !_x_0 type_def_infos_1 subst_2 = case _x_0 (_predefined._Cons _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._AType at_attribute_2_0 at_type_2_1 -> case (refmark.has_observing_type_257 at_type_2_1 type_def_infos_1 subst_2) (True -> refmark.args_have_observing_type_258 type_args_1_1 type_def_infos_1 subst_2) (False -> False) ) ) (_predefined._Nil -> True) 
refmark.has_observing_type_257::B !_x_0 type_def_infos_1 subst_2 = case _x_0 (syntax.TB basic_type_1_0 -> True) (syntax.TempV var_number_1_0 -> let subst_type_2_0 = _SystemArray.select_3 subst_2 var_number_1_0 in <{refmark._c;874;11_299}> subst_type_2_0 type_def_infos_1 subst_2) (syntax.TA _x_1_0 type_args_1_1 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (refmark.select_170 (_SystemArray.select_43 type_def_infos_1 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_258 type_args_1_1 type_def_infos_1 subst_2) (False -> False) ) ) ) (syntax.TAS _x_1_0 type_args_1_1 _x_1_2 -> case _x_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 _x_2_2 type_prop_2_3 -> case _x_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand (select (refmark.select_170 (_SystemArray.select_43 type_def_infos_1 glob_module_3_1) glob_object_3_0)::syntax._TypeDefInfo 1) 1) 0)) (True -> refmark.args_have_observing_type_258 type_args_1_1 type_def_infos_1 subst_2) (False -> False) ) ) ) (_ -> False)
<{refmark._c;874;11_299}>::B !subst_type_0 type_def_infos_1 subst_2 = case subst_type_0 (syntax.TE -> True) (_ -> refmark.has_observing_type_257 subst_type_0 type_def_infos_1 subst_2)
refmark.initial_occurrence_256 !_x_0 !_x_1 = case _x_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple4 subst_2_0 type_def_infos_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_1_2 var_heap_2_2, var_info_3_1 = select _x_3_0::_Tuple2 0, _x_3_2 = refmark.get_type_84 var_info_3_1 in case (refmark.has_observing_type_257 (select _x_3_2::syntax._AType 1) type_def_infos_2_1 subst_2_0) (True -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 True (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) (False -> let _x_5_0 = Heap.newPtr (syntax.EI_Attribute (unitype.toInt_20 (select _x_3_2::syntax._AType 0))) expr_heap_2_3, ptr_and_val_5_1 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_Occurrence (refmark.emptyOccurrence (_Tuple2 False (select _x_5_0::_Tuple2 0)))) in _Tuple4 subst_2_0 type_def_infos_2_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_3_0::_Tuple2 1)) (select _x_5_0::_Tuple2 1)) ) ) 
refmark.fold_st_255 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> refmark.fold_st_255 x_1_1 (refmark.initial_occurrence_256 a_1_0 st_1)) 
refmark.clear_occurrences_254 !vars_0 subst_1 type_def_infos_2 var_heap_3 expr_heap_4 = refmark.fold_st_255 vars_0 (_Tuple4 subst_1 type_def_infos_2 var_heap_3 expr_heap_4)
refmark.make_shared_references_of_function_non_unique_253 !_x_0 coercion_env_1 subst_2 type_def_infos_3 var_heap_4 expr_heap_5 error_6 = case _x_0 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 _x_1_8 -> case fun_body_1_3 (syntax.TransformedBody _x_2_0 -> case _x_2_0 (syntax._TransformedBody tb_args_3_0 tb_rhs_3_1 -> case _x_1_8 (syntax._FunInfo fi_calls_4_0 fi_group_index_4_1 fi_def_level_4_2 fi_free_vars_4_3 fi_local_vars_4_4 fi_dynamics_4_5 fi_properties_4_6 -> let !var_heap_5_0 = refmark.empty_occurrences_83 variables_5_1 (select _x_5_3::_Tuple4 1), variables_5_1 = <{StdList.++}> tb_args_3_0 fi_local_vars_4_4, _x_5_2 = refmark.clear_occurrences_254 variables_5_1 subst_2 type_def_infos_3 var_heap_4 expr_heap_5, _x_5_3 = refmark.make_shared_vars_non_unique_85 variables_5_1 fun_body_1_3 coercion_env_1 (select (refmark.fullRefMarkOfRootOrLetExpr (_predefined._Cons tb_args_3_0 _predefined._Nil) -1 general.No tb_rhs_3_1 _predefined._Nil (select _x_5_2::_Tuple4 2))::refmark._RMState 0) (select _x_5_2::_Tuple4 3) (checksupport.setErrorAdmin_33 (checksupport.newPosition fun_ident_1_0 fun_pos_1_5) error_6) in _Tuple6 (select _x_5_3::_Tuple4 0) (select _x_5_2::_Tuple4 0) (select _x_5_2::_Tuple4 1) var_heap_5_0 (select _x_5_3::_Tuple4 2) (select _x_5_3::_Tuple4 3)) ) ) ) 
refmark.makeSharedReferencesNonUnique !_x_0 !fun_defs_1 !coercion_env_2 !subst_3 !type_def_infos_4 !var_heap_5 !expr_heap_6 !error_7 = case _x_0 (_predefined._Nil -> <{_Tuple7!127}> fun_defs_1 coercion_env_2 subst_3 type_def_infos_4 var_heap_5 expr_heap_6 error_7) (_predefined._Cons fun_1_0 funs_1_1 -> let _x_2_0 = refmark.uselect_165 fun_defs_1 fun_1_0, _x_2_1 = refmark.make_shared_references_of_function_non_unique_253 (select _x_2_0::_Tuple2 0) coercion_env_2 subst_3 type_def_infos_4 var_heap_5 expr_heap_6 error_7 in refmark.makeSharedReferencesNonUnique funs_1_1 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple6 0) (select _x_2_1::_Tuple6 1) (select _x_2_1::_Tuple6 2) (select _x_2_1::_Tuple6 3) (select _x_2_1::_Tuple6 4) (select _x_2_1::_Tuple6 5)) 
<{refmark.<<<_109}> !file_0 !ptr_1 = <{StdFile.<<<_37}> (<{StdFile.<<<_36}> (<{StdFile.<<<_37}> file_0 '[') (Heap.ptrToInt ptr_1)) ']'
<{refmark.<<<_108}> !file_0 !_x_1 = case _x_1 (syntax._SelectiveUse su_field_1_0 su_multiply_1_1 su_uniquely_1_2 -> <{general.<<<_13}> (<{StdFile.<<<;}> <{refmark.<<<_109}>) (<{StdFile.<<<_38}> (<{general.<<<_13}> (<{StdFile.<<<;}> <{refmark.<<<_109}>) (<{StdFile.<<<_38}> (<{StdFile.<<<_36}> file_0 su_field_1_0) " M:") su_multiply_1_1) " U:") su_uniquely_1_2) 
<{refmark.<<<_107}> !file_0 !_x_1 = case _x_1 (syntax.RC_Unused -> file_0) (syntax.RC_Used _x_1_0 -> case _x_1_0 (syntax._RC_Used rcu_multiply_2_0 rcu_selectively_2_1 rcu_uniquely_2_2 -> <{general.<<<_13}> (<{StdFile.<<<;}> <{refmark.<<<_108}>) (<{StdFile.<<<_38}> (<{general.<<<_13}> (<{StdFile.<<<;}> <{refmark.<<<_109}>) (<{StdFile.<<<_38}> (<{general.<<<_13}> (<{StdFile.<<<;}> <{refmark.<<<_109}>) (<{StdFile.<<<_38}> (<{StdFile.<<<_37}> file_0 '\n') "M:") rcu_multiply_2_0) " U:") rcu_uniquely_2_2) " S:") rcu_selectively_2_1) ) 
<{refmark.<<<_110}> !file_0 !_x_1 = case _x_1 (syntax._CountedFreeVar cfv_var_1_0 cfv_is_let_1_1 cfv_count_1_2 -> <{refmark.<<<_107}> (<{StdFile.<<<_37}> (<{syntax.<<<_53}> file_0 cfv_var_1_0) ':') cfv_count_1_2) 
<{refmark.<<<_111}> !file_0 !_x_1 = case _x_1 (syntax._PatternVar pv_var_1_0 pv_arg_nr_1_1 -> <{syntax.<<<_53}> file_0 pv_var_1_0) 
<{refmark.TD;RMState}> _x_0::B = _predefined._Nil
<{refmark.TD;refMark;}> _x_0::B = _predefined._Nil


|| Converted Records
:: refmark._RMState = {!refmark.rms_var_heap, !refmark.rms_let_vars, !refmark.rms_counted_let_vars}

:: <{refmark.refMark;}> = {!refmark.refMark}

