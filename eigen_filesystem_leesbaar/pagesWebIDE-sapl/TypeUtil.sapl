|| ?module? TypeUtil


TypeUtil.propagate_uniqueness !_x_0 = case _x_0 (TypeDef.Type t_1_0 ts_1_1 -> let ts_2_0 = StdList.map TypeUtil.propagate_uniqueness ts_1_1 in case (StdList.any TypeDef.isUniq ts_2_0) (True -> TypeDef.Uniq (TypeDef.Type t_1_0 ts_2_0)) (False -> TypeDef.Type t_1_0 ts_2_0) ) (TypeDef.Func is_1_0 r_1_1 cc_1_2 -> TypeDef.Func (StdList.map TypeUtil.propagate_uniqueness is_1_0) (TypeUtil.propagate_uniqueness r_1_1) cc_1_2) (TypeDef.Cons v_1_0 ts_1_1 -> let ts_2_0 = StdList.map TypeUtil.propagate_uniqueness ts_1_1 in case (StdList.any TypeDef.isUniq ts_2_0) (True -> TypeDef.Uniq (TypeDef.Cons v_1_0 ts_2_0)) (False -> TypeDef.Cons v_1_0 ts_2_0) ) (TypeDef.Forall vs_1_0 t_1_1 cc_1_2 -> TypeDef.Forall vs_1_0 (TypeUtil.propagate_uniqueness t_1_1) cc_1_2) (_ -> _x_0)
TypeUtil.anon_74 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.anon_73 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.anon_72 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.flip_71 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.flip_70 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.flip_69 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.flip_68 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.anon_67 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.anon_66 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{TypeUtil.c;185;54_22}> !g_l_0 g_l_1 = <{TypeUtil.g_c1;185;43_212}> g_l_0 g_l_1
<{TypeUtil.g_c1;185;43_212}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons a_1_0 g_t_1_1 -> <{TypeUtil.g_c1;185;58_211}> g_l_1 a_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUtil.g_c1;185;58_211}> !g_l_0 a_1 g_t_2 = case g_l_0 (_predefined._Cons r_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 a_1 r_1_0) (<{TypeUtil.c;185;54_22}> g_t_2 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.c;184;65_21}> !g_l_0 g_l_1 = <{TypeUtil.g_c1;184;54_214}> g_l_0 g_l_1
<{TypeUtil.g_c1;184;54_214}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons a_1_0 g_t_1_1 -> <{TypeUtil.g_c1;184;69_213}> g_l_1 a_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUtil.g_c1;184;69_213}> !g_l_0 a_1 g_t_2 = case g_l_0 (_predefined._Cons n_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 (TypeDef.fromVar a_1) (TypeDef.Var n_1_0)) (<{TypeUtil.c;184;65_21}> g_t_2 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.c;192;22_23}> !_vlength_0 t_1 ts_2 !g_l_3 = <{TypeUtil.g_c1;192;53_216}> g_l_3 t_1 _vlength_0 ts_2
<{TypeUtil.g_c1;192;53_216}> !g_l_0 t_1 _vlength_2 ts_3 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUtil.g_c2;192;53_215}> g_h_1_0 t_1 _vlength_2 ts_3 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUtil.g_c2;192;53_215}> !g_h_0 t_1 !_vlength_2 ts_3 g_t_4 = case g_h_0 (TypeDef._TypeDef td_name_1_0 td_uniq_1_1 td_args_1_2 td_rhs_1_3 -> case td_rhs_1_3 (TypeDef.TDRSynonym syn_2_0 -> case (case (<{StdString.==_2}> (select g_h_0::TypeDef._TypeDef 0) t_1) (True -> case (StdBool.not (<{StdInt.<_17}> (select _vlength_2::<{StdOverloaded.length;}> 0 ts_3) (StdList.length_47 (select g_h_0::TypeDef._TypeDef 2)))) (True -> case (TypeDef.isType syn_2_0) (True -> True) (False -> <{StdInt.==_16}> (StdList.length_47 (select g_h_0::TypeDef._TypeDef 2)) (select _vlength_2::<{StdOverloaded.length;}> 0 ts_3)) ) (False -> False) ) (False -> False) ) (True -> _predefined._Cons g_h_0 (<{TypeUtil.c;192;22_23}> _vlength_2 t_1 ts_3 g_t_4)) ) ) (_ -> <{TypeUtil.c;192;22_23}> _vlength_2 t_1 ts_3 g_t_4)
TypeUtil.anon_131 !f_0 x_1 = f_0 (Control.Applicative.pure_15 x_1)
TypeUtil.anon_130 g_0 x_1 = TypeDef.removeDupTypedefs (g_0 x_1)
TypeUtil.anon_129 g_0 x_1 = TypeDef.removeDupTypedefs (g_0 x_1)
<{TypeUtil.c;192;22_122}> t_0 ts_1 !g_l_2 = <{TypeUtil.g_c1;192;53_218}> g_l_2 t_0 ts_1
<{TypeUtil.g_c1;192;53_218}> !g_l_0 t_1 ts_2 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUtil.g_c2;192;53_217}> g_h_1_0 t_1 ts_2 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUtil.g_c2;192;53_217}> !g_h_0 t_1 ts_2 g_t_3 = case g_h_0 (TypeDef._TypeDef td_name_1_0 td_uniq_1_1 td_args_1_2 td_rhs_1_3 -> case td_rhs_1_3 (TypeDef.TDRSynonym syn_2_0 -> case (case (<{StdString.==_2}> (select g_h_0::TypeDef._TypeDef 0) t_1) (True -> case (StdBool.not (<{StdInt.<_17}> (StdList.length_47 ts_2) (StdList.length_47 (select g_h_0::TypeDef._TypeDef 2)))) (True -> case (TypeDef.isType syn_2_0) (True -> True) (False -> <{StdInt.==_16}> (StdList.length_47 (select g_h_0::TypeDef._TypeDef 2)) (StdList.length_47 ts_2)) ) (False -> False) ) (False -> False) ) (True -> _predefined._Cons g_h_0 (<{TypeUtil.c;192;22_122}> t_1 ts_2 g_t_3)) ) ) (_ -> <{TypeUtil.c;192;22_122}> t_1 ts_2 g_t_3)
TypeUtil.anon_123 g_0 x_1 = TypeDef.removeDupTypedefs (g_0 x_1)
TypeUtil.anon_124 !_x_0 !g_1 x_2 = <{StdString.+++_11}> _x_0 (g_1 x_2)
TypeUtil.flip_127 !a_0 !b_1 = TypeUtil.assign2 b_1 a_0
TypeUtil.flip_128 !_x_0 _x_1 a_2 b_3 = Control.Monad.foldM _x_0 _x_1 b_3 a_2
TypeUtil.flip_125 !a_0 !b_1 = TypeUtil.assign2 b_1 a_0
TypeUtil.flip_126 !_x_0 _x_1 a_2 b_3 = Control.Monad.foldM _x_0 _x_1 b_3 a_2
TypeUtil.anon_137 x_0 = TypeDef.removeDupTypedefs (StdList.flatten x_0)
TypeUtil.anon_136 x_0 = TypeDef.removeDupTypedefs (StdList.flatten x_0)
TypeUtil.anon_132 x_0 = TypeDef.removeDupTypedefs (StdList.flatten x_0)
TypeUtil.anon_133 !_x_0 x_1 = <{StdString.+++_11}> _x_0 (TypeDef.fromVar x_1)
TypeUtil.flip_135 _x_0 a_1 b_2 = Control.Monad.foldM (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) _x_0 b_2 a_1
TypeUtil.flip_134 _x_0 a_1 b_2 = Control.Monad.foldM (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) _x_0 b_2 a_1
TypeUtil.resolve_synonyms tds_0 !_x_1 = case _x_1 (TypeDef.Type t_1_0 ts_1_1 -> <{TypeUtil._c;178;7_221}> (<{TypeUtil.c;192;22_122}> t_1_0 ts_1_1 tds_0) tds_0 ts_1_1 t_1_0 _x_1) (_ -> TypeUtil._f219_219 _x_1 tds_0)
<{TypeUtil._c;178;7_221}> !_x_0 tds_1 ts_2 t_3 _x_4 = case _x_0 (_predefined._Nil -> let _x_2_0 = Data.Tuple.appFst TypeUtil.anon_132 (StdList.unzip (StdList.map (TypeUtil.resolve_synonyms tds_1) ts_2)) in _Tuple2 (select _x_2_0::_Tuple2 0) (TypeDef.Type t_3 (select _x_2_0::_Tuple2 1))) (_predefined._Cons syn_1_0 _x_1_1 -> case syn_1_0 (TypeDef._TypeDef td_name_2_0 td_uniq_2_1 td_args_2_2 td_rhs_2_3 -> TypeUtil._f220_220 td_rhs_2_3 tds_1 ts_2 td_args_2_2 syn_1_0 _x_4) ) 
TypeUtil._f220_220 !td_rhs_0 tds_1 ts_2 td_args_3 syn_4 _x_5 = case td_rhs_0 (TypeDef.TDRSynonym synt_1_0 -> let _x_2_0 = Data.Tuple.appFst TypeUtil.anon_132 (StdList.unzip (StdList.map (TypeUtil.resolve_synonyms tds_1) ts_2)), ts_2_1 = select _x_2_0::_Tuple2 1 in case (StdBool.not (<{StdInt.==_16}> (StdList.length_47 td_args_3) (StdList.length_47 ts_2_1))) (True -> let newargs_4_0 = StdList.map (TypeUtil.anon_133 "__") td_args_3, _x_4_1 = select (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) (TypeUtil.flip_134 TypeUtil.flip_125 (<{TypeUtil.c;184;65_21}> td_args_3 newargs_4_0) synt_1_0) (TypeUtil.flip_135 TypeUtil.flip_127 (<{TypeUtil.c;185;54_22}> newargs_4_0 ts_2_1)))::_Tuple1 0 in Data.Tuple.appFst (<{StdList.++}> (_predefined._Cons syn_4 (select _x_2_0::_Tuple2 0))) (TypeUtil.resolve_synonyms tds_1 (TypeDef.Type (select _x_4_1::_Tuple2 0) (<{StdList.++}> (select _x_4_1::_Tuple2 1) (StdList.drop (StdList.length_47 td_args_3) ts_2_1))))) (False -> let newargs_4_0 = StdList.map (TypeUtil.anon_133 "__") td_args_3 in _Tuple2 (_predefined._Cons syn_4 (select _x_2_0::_Tuple2 0)) (select (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) (TypeUtil.flip_134 TypeUtil.flip_125 (<{TypeUtil.c;184;65_21}> td_args_3 newargs_4_0) synt_1_0) (TypeUtil.flip_135 TypeUtil.flip_127 (<{TypeUtil.c;185;54_22}> newargs_4_0 ts_2_1)))::_Tuple1 0)) ) (_ -> TypeUtil._f219_219 _x_5 tds_1)
TypeUtil._f219_219 !_x_0 tds_1 = case _x_0 (TypeDef.Func is_1_0 r_1_1 cc_1_2 -> let _x_2_0 = Data.Tuple.appFst TypeUtil.anon_136 (StdList.unzip (StdList.map (TypeUtil.resolve_synonyms tds_1) (_predefined._Cons r_1_1 is_1_0))), _x_2_1 = select _x_2_0::_Tuple2 1 in _Tuple2 (select _x_2_0::_Tuple2 0) (TypeDef.Func (select _x_2_1::_Tuple2 1) (select _x_2_1::_Tuple2 0) cc_1_2)) (TypeDef.Cons v_1_0 ts_1_1 -> let _x_2_0 = Data.Tuple.appFst TypeUtil.anon_137 (StdList.unzip (StdList.map (TypeUtil.resolve_synonyms tds_1) ts_1_1)) in _Tuple2 (select _x_2_0::_Tuple2 0) (TypeDef.Cons v_1_0 (select _x_2_0::_Tuple2 1))) (TypeDef.Forall vs_1_0 t_1_1 cc_1_2 -> let _x_2_0 = TypeUtil.resolve_synonyms tds_1 t_1_1 in _Tuple2 (select _x_2_0::_Tuple2 0) (TypeDef.Forall vs_1_0 (select _x_2_0::_Tuple2 1) cc_1_2)) (TypeDef.Arrow _x_1_0 -> case _x_1_0 (Data.Maybe.Just t_2_0 -> Data.Tuple.appSnd (TypeUtil.anon_131 TypeDef.Arrow) (TypeUtil.resolve_synonyms tds_1 t_2_0)) ) (_ -> _Tuple2 _predefined._Nil _x_0)
TypeUtil.flip_62 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.ifM_61 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_60 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_59 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_58 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_57 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_56 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_55 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_54 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_53 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.ifM_52 !_vAlternative_0 !b_1::B x_2 = case b_1 (True -> select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 1 x_2) (False -> select _vAlternative_0::<{Control.Applicative.Alternative;}> 1) 
TypeUtil.anon_25 !_vApplicative_0 cc_1 f_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (f_2 cc_1)
TypeUtil.flip_63 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUtil.ifM_148 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_145 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_146 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_143 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_144 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_141 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_142 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_147 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.anon_140 cc_0 f_1 = Control.Applicative.pure_15 (f_1 cc_0)
TypeUtil.ifM_139 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.ifM_138 !b_0::B x_1 = case b_0 (True -> Control.Applicative.pure_15 x_1) (False -> Control.Applicative.empty_19) 
TypeUtil.anon_24 va_0 r_1 f_2 = <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) f_2 (TypeUtil.assign2 va_0 r_1)
TypeUtil.anon_26 cc_0 va_1 t_2 f_3 = <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) (TypeUtil.flip_63 f_3 cc_0) (TypeUtil.assign2 va_1 t_2)
TypeUtil.assign2 !va_0 !_x_1 = case _x_1 (TypeDef.Type s_1_0 ts_1_1 -> let mbs_2_0 = StdList.map (TypeUtil.assign2 va_0) ts_1_1 in TypeUtil.ifM_138 (StdList.all Data.Maybe.isJust mbs_2_0) (TypeDef.Type s_1_0 (StdList.map Data.Maybe.fromJust mbs_2_0))) (TypeDef.Func ts_1_0 r_1_1 cc_1_2 -> let mbs_2_0 = StdList.map (TypeUtil.assign2 va_0) ts_1_0 in <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) (TypeUtil.ifM_139 (StdList.all Data.Maybe.isJust mbs_2_0) (TypeDef.Func (StdList.map Data.Maybe.fromJust mbs_2_0))) (TypeUtil.anon_24 va_0 r_1_1)) (TypeUtil.anon_140 cc_1_2)) (TypeDef.Var v`_1_0 -> case va_0 (_Tuple2 v_2_0 a_2_1 -> Control.Applicative.pure_15 (<{TypeUtil._if;214;33_222}> (<{StdString.==_2}> v_2_0 <{v`_1_0}>) a_2_1 <{v`_1_0}>)) ) (TypeDef.Cons v`_1_0 ts`_1_1 -> case va_0 (_Tuple2 v_2_0 _x_2_1 -> case _x_2_1 (TypeDef.Type s_3_0 ts_3_1 -> case (<{StdString.==_2}> v_2_0 <{v`_1_0}>) (True -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) (<{StdList.++}> ts_3_1 <{ts`_1_1}>) in TypeUtil.ifM_141 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Type s_3_0 (StdList.map Data.Maybe.fromJust mbs_5_0))) (False -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) <{ts`_1_1}> in TypeUtil.ifM_142 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Cons <{v`_1_0}> (StdList.map Data.Maybe.fromJust mbs_5_0))) ) (TypeDef.Cons c_3_0 ts_3_1 -> case (<{StdString.==_2}> v_2_0 <{v`_1_0}>) (True -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) (<{StdList.++}> ts_3_1 <{ts`_1_1}>) in TypeUtil.ifM_143 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Cons c_3_0 (StdList.map Data.Maybe.fromJust mbs_5_0))) (False -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) <{ts`_1_1}> in TypeUtil.ifM_144 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Cons <{v`_1_0}> (StdList.map Data.Maybe.fromJust mbs_5_0))) ) (TypeDef.Var v`_3_0 -> case (<{StdString.==_2}> v_2_0 <{v`_1_0}>) (True -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) <{ts`_1_1}> in TypeUtil.ifM_145 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Cons <{v`_3_0}> (StdList.map Data.Maybe.fromJust mbs_5_0))) (False -> let mbs_5_0 = StdList.map (TypeUtil.assign2 va_0) <{ts`_1_1}> in TypeUtil.ifM_146 (StdList.all Data.Maybe.isJust mbs_5_0) (TypeDef.Cons <{v`_1_0}> (StdList.map Data.Maybe.fromJust mbs_5_0))) ) (_ -> case (<{StdString.==_2}> v_2_0 <{v`_1_0}>) (True -> Control.Applicative.empty_19) (False -> let mbs_4_0 = StdList.map (TypeUtil.assign2 va_0) <{ts`_1_1}> in TypeUtil.ifM_147 (StdList.all Data.Maybe.isJust mbs_4_0) (TypeDef.Cons <{v`_1_0}> (StdList.map Data.Maybe.fromJust mbs_4_0))) )) ) (TypeDef.Uniq t_1_0 -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) TypeDef.Uniq (TypeUtil.assign2 va_0 t_1_0)) (TypeDef.Forall tvs_1_0 t_1_1 cc_1_2 -> case va_0 (_Tuple2 v_2_0 _x_2_1 -> case _x_2_1 (TypeDef.Var v`_3_0 -> let mbs_4_0 = StdList.map (TypeUtil.assign2 va_0) tvs_1_0 in <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) (TypeUtil.ifM_148 (StdList.all Data.Maybe.isJust mbs_4_0) (TypeDef.Forall (StdList.map Data.Maybe.fromJust mbs_4_0))) (TypeUtil.anon_26 cc_1_2 va_0 t_1_1)) (_ -> case (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{TypeDef.==_22}>)) (TypeDef.Var v_2_0) tvs_1_0) (True -> Control.Applicative.empty_19) (False -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) (TypeUtil.flip_62 (TypeDef.Forall tvs_1_0) cc_1_2) (TypeUtil.assign2 va_0 t_1_1)) )) ) 
<{TypeUtil._if;214;33_222}> !_x_0::B a_1 <{v`_2}> = case _x_0 (True -> a_1) (_ -> TypeDef.Var <{v`_2}>)
TypeUtil.optConses_33 !_x_0 = case _x_0 (TypeDef.Type s_1_0 ts_1_1 -> TypeDef.Type s_1_0 (StdList.map TypeUtil.optConses_33 ts_1_1)) (TypeDef.Func is_1_0 r_1_1 cc_1_2 -> TypeDef.Func (StdList.map TypeUtil.optConses_33 is_1_0) (TypeUtil.optConses_33 r_1_1) (StdList.map (Data.Tuple.appSnd TypeUtil.optConses_33) cc_1_2)) (TypeDef.Var v_1_0 -> TypeDef.Var v_1_0) (TypeDef.Cons c_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> TypeDef.Var c_1_0) (_ -> TypeDef.Cons c_1_0 (StdList.map TypeUtil.optConses_33 _x_1_1))) (TypeDef.Uniq t_1_0 -> TypeDef.Uniq (TypeUtil.optConses_33 t_1_0)) (TypeDef.Forall vs_1_0 t_1_1 cc_1_2 -> TypeDef.Forall (StdList.map TypeUtil.optConses_33 vs_1_0) (TypeUtil.optConses_33 t_1_1) (StdList.map (Data.Tuple.appSnd TypeUtil.optConses_33) cc_1_2)) (TypeDef.Arrow t_1_0 -> TypeDef.Arrow (<{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) TypeUtil.optConses_33 t_1_0)) 
TypeUtil.fst_75 !tuple_0 = select tuple_0::_Tuple2 0
<{TypeUtil.allVars`_31}> = Data.List.concatMap TypeUtil.allVars_30
TypeUtil.allVars_30 !_x_0 = case _x_0 (TypeDef.Type _x_1_0 ts_1_1 -> <{TypeUtil.allVars`_31}> ts_1_1) (TypeDef.Func is_1_0 r_1_1 _x_1_2 -> <{StdList.++}> (<{TypeUtil.allVars`_31}> is_1_0) (TypeUtil.allVars_30 r_1_1)) (TypeDef.Var tv_1_0 -> _predefined._Cons tv_1_0 _predefined._Nil) (TypeDef.Cons cv_1_0 ts_1_1 -> _predefined._Cons cv_1_0 (<{TypeUtil.allVars`_31}> ts_1_1)) (TypeDef.Uniq t_1_0 -> TypeUtil.allVars_30 t_1_0) (TypeDef.Forall vs_1_0 t_1_1 _x_1_2 -> <{StdList.++}> (<{TypeUtil.allVars`_31}> vs_1_0) (TypeUtil.allVars_30 t_1_1)) (TypeDef.Arrow _x_1_0 -> case _x_1_0 (Data.Maybe.Just t_2_0 -> TypeUtil.allVars_30 t_2_0) (Data.Maybe.Nothing -> _predefined._Nil) ) 
<{TypeUtil.c;264;74_27}> !_vtoString_0 !_vone_1 !<{_v+_2}> !g_l_3 n_4 = <{TypeUtil.g_c1;264;49_223}> g_l_3 _vtoString_0 n_4 _vone_1 <{_v+_2}>
<{TypeUtil.g_c1;264;49_223}> !g_l_0 _vtoString_1 n_2 _vone_3 <{_v+_4}> = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 o_1_0 (<{StdString.+++_11}> "v" (select _vtoString_1::<{StdOverloaded.toString;}> 0 n_2))) (<{TypeUtil.c;264;74_27}> _vtoString_1 _vone_3 <{_v+_4}> g_t_1_1 (select <{_v+_4}>::<{StdOverloaded.+;}> 0 n_2 (select _vone_3::<{StdOverloaded.one;}> 0)))) (_ -> _predefined._Nil)
<{TypeUtil.c;264;74_149}> !_vone_0 !<{_v+_1}> !g_l_2 n_3::I = <{TypeUtil.g_c1;264;49_224}> g_l_2 n_3 _vone_0 <{_v+_1}>
<{TypeUtil.g_c1;264;49_224}> !g_l_0 n_1::I _vone_2 <{_v+_3}> = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 o_1_0 (<{StdString.+++_11}> "v" (StdString.toString_5 n_1))) (<{TypeUtil.c;264;74_149}> _vone_2 <{_v+_3}> g_t_1_1 (select <{_v+_3}>::<{StdOverloaded.+;}> 0 n_1 (select _vone_2::<{StdOverloaded.one;}> 0)))) (_ -> _predefined._Nil)
<{TypeUtil.c;264;74_150}> !<{_v+_0}> !g_l_1 n_2::I = <{TypeUtil.g_c1;264;49_225}> g_l_1 n_2 <{_v+_0}>
<{TypeUtil.g_c1;264;49_225}> !g_l_0 n_1::I <{_v+_2}> = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 o_1_0 (<{StdString.+++_11}> "v" (StdString.toString_5 n_1))) (<{TypeUtil.c;264;74_150}> <{_v+_2}> g_t_1_1 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 n_1 StdInt.one_11))) (_ -> _predefined._Nil)
<{TypeUtil.c;264;74_151}> !g_l_0 n_1::I = <{TypeUtil.g_c1;264;49_226}> g_l_0 n_1
<{TypeUtil.g_c1;264;49_226}> !g_l_0 n_1::I = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 o_1_0 (<{StdString.+++_11}> "v" (StdString.toString_5 n_1))) (<{TypeUtil.c;264;74_151}> g_t_1_1 (<{StdInt.+_6}> n_1 StdInt.one_11))) (_ -> _predefined._Nil)
TypeUtil.renames_28 !t_0 = <{TypeUtil.c;264;74_151}> (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) (TypeUtil.allVars_30 t_0)) 1
TypeUtil.renameVars_29 t_0 !_x_1 = case _x_1 (TypeDef.Type s_1_0 ts_1_1 -> TypeDef.Type s_1_0 (StdList.map (TypeUtil.renameVars_29 t_0) ts_1_1)) (TypeDef.Func is_1_0 r_1_1 cc_1_2 -> TypeDef.Func (StdList.map (TypeUtil.renameVars_29 t_0) is_1_0) (TypeUtil.renameVars_29 t_0 r_1_1) (StdList.map (Data.Tuple.appSnd (TypeUtil.renameVars_29 t_0)) cc_1_2)) (TypeDef.Var tv_1_0 -> TypeDef.Var (Data.Maybe.fromJust (Data.List.lookup (<{StdOverloaded.==;}> <{StdString.==_2}>) tv_1_0 (TypeUtil.renames_28 t_0)))) (TypeDef.Cons cv_1_0 ts_1_1 -> TypeDef.Cons (Data.Maybe.fromJust (Data.List.lookup (<{StdOverloaded.==;}> <{StdString.==_2}>) cv_1_0 (TypeUtil.renames_28 t_0))) (StdList.map (TypeUtil.renameVars_29 t_0) ts_1_1)) (TypeDef.Uniq t_1_0 -> TypeDef.Uniq (TypeUtil.renameVars_29 t_0 t_1_0)) (TypeDef.Forall vs_1_0 t_1_1 cc_1_2 -> TypeDef.Forall (StdList.map (TypeUtil.renameVars_29 t_0) vs_1_0) (TypeUtil.renameVars_29 t_0 t_1_1) (StdList.map (Data.Tuple.appSnd (TypeUtil.renameVars_29 t_0)) cc_1_2)) (TypeDef.Arrow t_1_0 -> TypeDef.Arrow (<{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) (TypeUtil.renameVars_29 t_0) t_1_0)) 
TypeUtil.rename_32 !t_0 = <{_Tuple2!3}> (TypeUtil.renameVars_29 t_0 t_0) (StdList.map TypeUtil.fst_75 (TypeUtil.renames_28 t_0))
TypeUtil.normalise_type !tds_0 !t_1 = let _x_1_0 = TypeUtil.resolve_synonyms tds_0 t_1, _x_1_1 = TypeUtil.rename_32 (TypeUtil.optConses_33 (TypeUtil.propagate_uniqueness (select _x_1_0::_Tuple2 1))) in <{_Tuple3!7}> (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 1)
<{TypeUtil.--}> !_vprint_0 !_vprint_1 a_2 b_3 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 False a_2) (select _vprint_1::<{TypeUtil.print;}> 0 False b_3)
<{TypeUtil.+-}> !_vprint_0 !_vprint_1 a_2 b_3 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 True a_2) (select _vprint_1::<{TypeUtil.print;}> 0 False b_3)
<{TypeUtil.-+}> !_vprint_0 !_vprint_1 a_2 b_3 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 False a_2) (select _vprint_1::<{TypeUtil.print;}> 0 True b_3)
<{TypeUtil.+-+}> !_vprint_0 !_vprint_1 a_2 b_3 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 True a_2) (select _vprint_1::<{TypeUtil.print;}> 0 True b_3)
TypeUtil.printersperse !_vprint_0 !_vprint_1 ia_2::B a_3 bs_4 = Data.List.intercalate (select _vprint_0::<{TypeUtil.print;}> 0 False a_3) (StdList.map (select _vprint_1::<{TypeUtil.print;}> 0 ia_2) bs_4)
TypeUtil.parens !_x_0::B ss_1 = case _x_0 (True -> <{StdList.++}> (_predefined._Cons "(" ss_1) (_predefined._Cons ")" _predefined._Nil)) (False -> ss_1) 
TypeUtil.print_4 _x_0::B s_1 = _predefined._Cons s_1 _predefined._Nil
TypeUtil.print_5 _x_0::B i_1::I = _predefined._Cons (StdString.toString_5 i_1) _predefined._Nil
<{TypeUtil.c;36;30_34}> !_vText_0 !g_l_1 = <{TypeUtil.g_c1;36;35_227}> g_l_1 _vText_0
<{TypeUtil.g_c1;36;35_227}> !g_l_0 _vText_1 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> _predefined._Cons (select _vText_1::<{Text.Text;}> 0 e_1_0) (<{TypeUtil.c;36;30_34}> _vText_1 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.c;36;30_152}> !g_l_0 = <{TypeUtil.g_c1;36;35_228}> g_l_0
<{TypeUtil.g_c1;36;35_228}> !g_l_0 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 e_1_0) (<{TypeUtil.c;36;30_152}> g_t_1_1)) (_ -> _predefined._Nil)
TypeUtil.print_6 !_vprint_0 _x_1::B !xs_2 = <{TypeUtil.c;36;30_152}> (StdList.map (select _vprint_0::<{TypeUtil.print;}> 0 False) xs_2)
TypeUtil.print_7 !_vprint_0 _x_1::B !_x_2 = case _x_2 (Data.Maybe.Nothing -> _predefined._Nil) (Data.Maybe.Just x_1_0 -> select _vprint_0::<{TypeUtil.print;}> 0 _x_1 x_1_0) 
TypeUtil.printersperse_154 !_vprint_0 ia_1::B a_2 bs_3 = Data.List.intercalate (TypeUtil.print_4 False a_2) (StdList.map (select _vprint_0::<{TypeUtil.print;}> 0 ia_1) bs_3)
TypeUtil.print_153 _x_0::B !xs_1 = <{TypeUtil.c;36;30_152}> (StdList.map (TypeUtil.print_4 False) xs_1)
<{TypeUtil.--_155}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_153 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_156}> !_vprint_0 a_1 b_2 = <{StdList.++}> (TypeUtil.print_4 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_158}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_153 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.--_159}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_153 False b_1)
TypeUtil.printersperse_157 ia_0::B a_1 bs_2 = Data.List.intercalate (TypeUtil.print_4 False a_1) (StdList.map (TypeUtil.print_49 ia_0) bs_2)
TypeUtil.print_49 _x_0::B !_x_1 = case _x_1 (TypeDef.KindConst -> _predefined._Cons "*" _predefined._Nil) (TypeDef.KindArrow ks_1_0 -> let _x_2_0 = <{TypeUtil._if;45;29_229}> _x_0 in <{TypeUtil.--_159}> (select _x_2_0::_Tuple2 0) (<{TypeUtil.--_158}> (TypeUtil.printersperse_157 True "->" (<{StdList.++}> ks_1_0 (_predefined._Cons TypeDef.KindConst _predefined._Nil))) (select _x_2_0::_Tuple2 1))) 
<{TypeUtil._if;45;29_229}> !_x_0::B = case _x_0 (True -> _Tuple2 "(" ")") (_ -> _Tuple2 "" "")
<{TypeUtil.--_160}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_49 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_161}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_49 False a_0) (TypeUtil.print_4 False b_1)
TypeUtil.print_8 _x_0::B !_x_1 = case _x_1 (TypeDef.Class s_1_0 -> _predefined._Cons s_1_0 _predefined._Nil) (TypeDef.Generic n_1_0 k_1_1 -> <{TypeUtil.--_159}> n_1_0 (<{TypeUtil.--_159}> "{|" (<{TypeUtil.--_161}> k_1_1 "|}"))) 
TypeUtil.fst_76 !tuple_0 = select tuple_0::_Tuple2 0
<{TypeUtil.--_162}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_153 False a_0) (TypeUtil.print_153 False b_1)
<{TypeUtil.c;58;70_35}> !_vprint_0 !_vprint_1 !g_l_2 = <{TypeUtil.g_c1;58;76_230}> g_l_2 _vprint_0 _vprint_1
<{TypeUtil.g_c1;58;76_230}> !g_l_0 _vprint_1 _vprint_2 = case g_l_0 (_predefined._Cons gr_1_0 g_t_1_1 -> _predefined._Cons (<{TypeUtil.--_162}> (TypeUtil.printersperse_154 _vprint_1 False ", " (StdList.map TypeUtil.fst_76 gr_1_0)) (<{TypeUtil.--_156}> _vprint_2 " " (select (StdList.hd gr_1_0)::_Tuple2 1))) (<{TypeUtil.c;58;70_35}> _vprint_1 _vprint_2 g_t_1_1)) (_ -> _predefined._Nil)
TypeUtil.anon_36::B !<{_v==_0}> a_1 b_2 = select <{_v==_0}>::<{StdOverloaded.==;}> 0 (select a_1::_Tuple2 1) (select b_2::_Tuple2 1)
TypeUtil.print_48 _x_0::B c_1::C = _predefined._Cons (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 c_1) _predefined._Nil
<{TypeUtil.-+_171}> !_vprint_0 a_1 b_2 = <{StdList.++}> (TypeUtil.print_4 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 True b_2)
TypeUtil.anon_174::B !a_0 !b_1 = <{TypeDef.==_22}> (select a_0::_Tuple2 1) (select b_1::_Tuple2 1)
TypeUtil.printersperse_176 ia_0::B a_1 bs_2 = Data.List.intercalate (TypeUtil.print_4 False a_1) (StdList.map (TypeUtil.print_8 ia_0) bs_2)
<{TypeUtil.c;58;70_175}> !_vprint_0 !g_l_1 = <{TypeUtil.g_c1;58;76_231}> g_l_1 _vprint_0
<{TypeUtil.g_c1;58;76_231}> !g_l_0 _vprint_1 = case g_l_0 (_predefined._Cons gr_1_0 g_t_1_1 -> _predefined._Cons (<{TypeUtil.--_162}> (TypeUtil.printersperse_176 False ", " (StdList.map TypeUtil.fst_76 gr_1_0)) (<{TypeUtil.--_156}> _vprint_1 " " (select (StdList.hd gr_1_0)::_Tuple2 1))) (<{TypeUtil.c;58;70_175}> _vprint_1 g_t_1_1)) (_ -> _predefined._Nil)
TypeUtil.printersperse_177 ia_0::B a_1 bs_2 = Data.List.intercalate (TypeUtil.print_4 False a_1) (StdList.map (TypeUtil.print_153 ia_0) bs_2)
TypeUtil.print_165 _x_0::B !xs_1 = <{TypeUtil.c;36;30_152}> (StdList.map (TypeUtil.print_48 False) xs_1)
<{TypeUtil.--_166}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_165 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.-+_186}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_153 True b_1)
<{TypeUtil.--_179}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_165 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.--_180}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_165 False a_0) (TypeUtil.print_153 False b_1)
TypeUtil.print_163 _x_0::B !xs_1 = <{TypeUtil.c;36;30_152}> (StdList.map (TypeUtil.print_11 False) xs_1)
<{TypeUtil.--_178}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_163 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.--_168}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_10 False b_1)
<{TypeUtil.-+_182}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_11 True b_1)
<{TypeUtil.--_181}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_11 False a_0) (TypeUtil.print_153 False b_1)
<{TypeUtil.--_170}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_11 False b_1)
<{TypeUtil.c;58;70_187}> !g_l_0 = <{TypeUtil.g_c1;58;76_232}> g_l_0
TypeUtil.print_10 _x_0::B !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_ -> TypeUtil.printersperse_177 False " & " (<{TypeUtil.c;58;70_187}> (Data.List.groupBy TypeUtil.anon_174 _x_1)))
<{TypeUtil.--_184}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_10 False a_0) (TypeUtil.print_4 False b_1)
TypeUtil.printersperse_167 ia_0::B a_1 bs_2 = Data.List.intercalate (TypeUtil.print_4 False a_1) (StdList.map (TypeUtil.print_11 ia_0) bs_2)
<{TypeUtil.--_183}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_11 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.+-_185}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_11 True a_0) (TypeUtil.print_4 False b_1)
TypeUtil.print_11 isArg_0::B !_x_1 = case _x_1 (TypeDef.Type s_1_0 vs_1_1 -> case (<{StdString.==_2}> s_1_0 "_List") (True -> <{TypeUtil.--_159}> "[" (<{TypeUtil.--_178}> vs_1_1 "]")) (False -> case (<{StdString.==_2}> s_1_0 "_!List") (True -> case (StdList.isEmpty vs_1_1) (True -> _predefined._Cons "[! ]" _predefined._Nil) (False -> <{TypeUtil.--_159}> "[!" (<{TypeUtil.--_178}> vs_1_1 "]")) ) (False -> case (<{StdString.==_2}> s_1_0 "_List!") (True -> case (StdList.isEmpty vs_1_1) (True -> _predefined._Cons "[ !]" _predefined._Nil) (False -> <{TypeUtil.--_159}> "[" (<{TypeUtil.--_178}> vs_1_1 "!]")) ) (False -> case (<{StdString.==_2}> s_1_0 "_!List!") (True -> <{TypeUtil.--_159}> "[!" (<{TypeUtil.--_178}> vs_1_1 "!]")) (False -> case (<{StdString.==_2}> s_1_0 "_#List") (True -> <{TypeUtil.--_159}> "[#" (<{TypeUtil.--_178}> vs_1_1 "]")) (False -> case (<{StdString.==_2}> s_1_0 "_#List!") (True -> <{TypeUtil.--_159}> "[#" (<{TypeUtil.--_178}> vs_1_1 "!]")) (False -> case (<{StdString.==_2}> s_1_0 "_#Array") (True -> <{TypeUtil.--_159}> "{#" (<{TypeUtil.--_178}> vs_1_1 "}")) (False -> case (<{StdString.==_2}> s_1_0 "_Array") (True -> <{TypeUtil.--_159}> "{" (<{TypeUtil.--_178}> vs_1_1 "}")) (False -> case (<{StdString.==_2}> s_1_0 "_!Array") (True -> <{TypeUtil.--_159}> "{!" (<{TypeUtil.--_178}> vs_1_1 "}")) (False -> case (<{StdString.==_2}> (<{StdString.%_10}> s_1_0 (_Tuple2 0 5)) "_Tuple") (True -> case (StdList.isEmpty vs_1_1) (True -> <{TypeUtil.--_159}> "(" (<{TypeUtil.--_179}> (StdList.repeatn (<{StdInt.-_7}> (StdInt.toInt_23 (<{StdString.%_10}> s_1_0 (_Tuple2 6 (<{StdInt.-_7}> (_SystemArray.size_20 s_1_0) 1)))) 1) ',') ")")) (False -> let n_13_0::I = StdInt.toInt_23 (<{StdString.%_10}> s_1_0 (_Tuple2 6 (<{StdInt.-_7}> (_SystemArray.size_20 s_1_0) 1))) in case (<{StdInt.<_17}> (StdList.length_47 vs_1_1) n_13_0) (True -> <{TypeUtil.--_159}> "((" (<{TypeUtil.--_180}> (StdList.repeatn (<{StdInt.-_7}> n_13_0 1) ',') (<{TypeUtil.--_159}> ") " (<{TypeUtil.--_158}> (TypeUtil.printersperse_167 True " " vs_1_1) ")")))) (False -> <{TypeUtil.--_159}> "(" (<{TypeUtil.--_158}> (TypeUtil.printersperse_167 False ", " vs_1_1) ")")) ) ) (False -> case (<{StdString.==_2}> s_1_0 "_Unit") (True -> _predefined._Cons "()" _predefined._Nil) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_1_0 0) '_') (True -> _predefined._Cons (<{StdString.%_10}> s_1_0 (_Tuple2 1 (<{StdInt.-_7}> (_SystemArray.size_20 s_1_0) 1))) _predefined._Nil) (False -> case (StdList.isEmpty vs_1_1) (True -> TypeUtil.print_4 isArg_0 s_1_0) (False -> TypeUtil.parens isArg_0 (<{TypeUtil.--_159}> s_1_0 (<{TypeUtil.--_159}> " " (TypeUtil.printersperse_167 True " " vs_1_1)))) ) ) ) ) ) ) ) ) ) ) ) ) ) (TypeDef.Var v_1_0 -> _predefined._Cons v_1_0 _predefined._Nil) (TypeDef.Func _x_1_0 r_1_1 _x_1_2 -> case _x_1_0 (_predefined._Nil -> case _x_1_2 (_predefined._Nil -> TypeUtil.print_11 isArg_0 r_1_1) (_ -> <{TypeUtil.--_181}> r_1_1 (<{TypeUtil.--_168}> " " _x_1_2))) (_ -> case _x_1_2 (_predefined._Nil -> TypeUtil.parens isArg_0 (<{TypeUtil.--_162}> (TypeUtil.printersperse_167 True " " _x_1_0) (<{TypeUtil.--_170}> " -> " r_1_1))) (_ -> <{TypeUtil.--_181}> (TypeDef.Func _x_1_0 r_1_1 _predefined._Nil) (<{TypeUtil.--_168}> " | " _x_1_2)))) (TypeDef.Cons tv_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> TypeUtil.print_4 isArg_0 tv_1_0) (_ -> TypeUtil.parens isArg_0 (<{TypeUtil.--_159}> tv_1_0 (<{TypeUtil.--_159}> " " (TypeUtil.printersperse_167 True " " _x_1_1))))) (TypeDef.Uniq t_1_0 -> <{TypeUtil.-+_182}> "*" t_1_0) (TypeDef.Forall tvs_1_0 t_1_1 _x_1_2 -> case _x_1_2 (_predefined._Nil -> <{TypeUtil.--_159}> "(A." (<{TypeUtil.--_162}> (TypeUtil.printersperse_167 True " " tvs_1_0) (<{TypeUtil.--_159}> ": " (<{TypeUtil.--_183}> t_1_1 ")")))) (_ -> <{TypeUtil.--_159}> "(A." (<{TypeUtil.--_162}> (TypeUtil.printersperse_167 True " " tvs_1_0) (<{TypeUtil.--_159}> ": " (<{TypeUtil.--_181}> t_1_1 (<{TypeUtil.--_159}> " " (<{TypeUtil.--_184}> _x_1_2 ")"))))))) (TypeDef.Arrow _x_1_0 -> case _x_1_0 (Data.Maybe.Nothing -> _predefined._Cons "(->)" _predefined._Nil) (Data.Maybe.Just t_2_0 -> <{TypeUtil.-+_186}> "((->) " (<{TypeUtil.+-_185}> t_2_0 ")")) ) 
<{TypeUtil.g_c1;58;76_232}> !g_l_0 = case g_l_0 (_predefined._Cons gr_1_0 g_t_1_1 -> _predefined._Cons (<{TypeUtil.--_162}> (TypeUtil.printersperse_176 False ", " (StdList.map TypeUtil.fst_76 gr_1_0)) (<{TypeUtil.--_170}> " " (select (StdList.hd gr_1_0)::_Tuple2 1))) (<{TypeUtil.c;58;70_187}> g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.+-_173}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_11 True a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_169}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_11 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_172}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_10 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_164}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_163 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_188}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_8 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_189}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_8 False a_0) (TypeUtil.print_153 False b_1)
TypeUtil.print_9 _x_0::B !_x_1 = case _x_1 (_Tuple2 cog_1_0 v_1_1 -> <{TypeUtil.--_189}> cog_1_0 (<{TypeUtil.--_170}> " " v_1_1)) 
TypeUtil.anon_78 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.anon_77 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUtil.recordIndent_42 !_vArray_0 !indent_1::I !exi_2 = StdList.repeatn (<{StdInt.+_6}> (<{StdInt.+_6}> indent_1 6) (<{TypeUtil._if;120;50_233}> (StdList.isEmpty exi_2) exi_2 _vArray_0)) ' '
<{TypeUtil._if;120;50_233}>::I !_x_0::B exi_1 _vArray_2 = case _x_0 (True -> 0) (_ -> <{StdInt.+_6}> (<{StdInt.+_6}> 3 (StdList.length_47 exi_1)) (StdList.sum_72 (StdList.map (select _vArray_2::<{_SystemArray.Array;}> 4) exi_1)))
TypeUtil.pad_39 !i_0::I !s_1 = <{StdString.+++_11}> s_1 (StdList.toString_79 (StdList.repeatn (<{StdInt.-_7}> i_0 (_SystemArray.size_20 s_1)) ' '))
TypeUtil.printRf_40 padLen_0::I !_x_1 = case _x_1 (TypeDef._RecordField rf_name_1_0 rf_type_1_1 -> <{TypeUtil.--_159}> (TypeUtil.pad_39 padLen_0 rf_name_1_0) (<{TypeUtil.--_170}> " :: " rf_type_1_1)) 
<{TypeUtil.c;128;25_37}> !_vArray_0 indent_1::I exi_2 padLen_3::I !g_l_4 = <{TypeUtil.g_c1;128;30_234}> g_l_4 _vArray_0 indent_1 exi_2 padLen_3
<{TypeUtil.g_c1;128;30_234}> !g_l_0 _vArray_1 indent_2::I exi_3 padLen_4::I = case g_l_0 (_predefined._Cons f_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 (<{TypeUtil.--_180}> (TypeUtil.recordIndent_42 _vArray_1 indent_2 exi_3) (<{TypeUtil.--_159}> ", " (<{TypeUtil.--_158}> (TypeUtil.printRf_40 padLen_4 f_1_0) "\n")))) (<{TypeUtil.c;128;25_37}> _vArray_1 indent_2 exi_3 padLen_4 g_t_1_1)) (_ -> _predefined._Nil)
TypeUtil.anon_38::I !f_0 = _SystemArray.size_20 (select f_0::TypeDef._RecordField 0)
TypeUtil.recordIndent_191 !indent_0::I !exi_1 = StdList.repeatn (<{StdInt.+_6}> (<{StdInt.+_6}> indent_0 6) (<{TypeUtil._if;120;50_235}> (StdList.isEmpty exi_1) exi_1)) ' '
<{TypeUtil._if;120;50_235}>::I !_x_0::B exi_1 = case _x_0 (True -> 0) (_ -> <{StdInt.+_6}> (<{StdInt.+_6}> 3 (StdList.length_47 exi_1)) (StdList.sum_72 (StdList.map _SystemArray.size_20 exi_1)))
<{TypeUtil.c;128;25_190}> indent_0::I exi_1 padLen_2::I !g_l_3 = <{TypeUtil.g_c1;128;30_236}> g_l_3 indent_0 exi_1 padLen_2
<{TypeUtil.g_c1;128;30_236}> !g_l_0 indent_1::I exi_2 padLen_3::I = case g_l_0 (_predefined._Cons f_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 (<{TypeUtil.--_180}> (TypeUtil.recordIndent_191 indent_1 exi_2) (<{TypeUtil.--_159}> ", " (<{TypeUtil.--_158}> (TypeUtil.printRf_40 padLen_3 f_1_0) "\n")))) (<{TypeUtil.c;128;25_190}> indent_1 exi_2 padLen_3 g_t_1_1)) (_ -> _predefined._Nil)
TypeUtil.makeRecord_43 indent_0::I _x_1 !_x_2 = case _x_2 (_predefined._Nil -> "{}") (_predefined._Cons f1_1_0 fs_1_1 -> let padLen_2_0::I = StdOrdList.maxList_15 (StdList.map TypeUtil.anon_38 (_predefined._Cons f1_1_0 fs_1_1)) in Text.concat_1 (<{TypeUtil.--_159}> "{ " (<{TypeUtil.--_162}> (TypeUtil.printRf_40 padLen_2_0 f1_1_0) (<{TypeUtil.--_159}> "\n" (<{TypeUtil.--_159}> (Text.concat_1 (<{TypeUtil.c;128;25_190}> indent_0 _x_1 padLen_2_0 fs_1_1)) (<{TypeUtil.--_179}> (TypeUtil.recordIndent_191 indent_0 _x_1) "}")))))) 
<{TypeUtil.--_192}> !_vprint_0 a_1 b_2 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 False a_1) (TypeUtil.print_4 False b_2)
<{TypeUtil.--_193}> !_vprint_0 a_1 b_2 = <{StdList.++}> (select _vprint_0::<{TypeUtil.print;}> 0 False a_1) (TypeUtil.print_153 False b_2)
<{TypeUtil.c;139;66_41}> !_vprint_0 !_vprint_1 cons_2 !g_l_3 = <{TypeUtil.g_c1;139;71_237}> g_l_3 _vprint_1 cons_2 _vprint_0
<{TypeUtil.g_c1;139;71_237}> !g_l_0 _vprint_1 cons_2 _vprint_3 = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 (<{TypeUtil.--_193}> _vprint_1 cons_2 (<{TypeUtil.--_159}> "| " (<{TypeUtil.--_192}> _vprint_3 c_1_0 "\n")))) (<{TypeUtil.c;139;66_41}> _vprint_3 _vprint_1 cons_2 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.--_194}> a_0 b_1::I = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_5 False b_1)
TypeUtil.print_13 _x_0::B !_x_1 = case _x_1 (TypeDef.LeftAssoc i_1_0 -> <{TypeUtil.--_194}> "infixl " i_1_0) (TypeDef.RightAssoc i_1_0 -> <{TypeUtil.--_194}> "infixr " i_1_0) (TypeDef.NoAssoc i_1_0 -> <{TypeUtil.--_194}> "infix " i_1_0) 
<{TypeUtil.--_195}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_13 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
TypeUtil.printersperse_196 ia_0::B a_1 bs_2 = Data.List.intercalate (TypeUtil.print_4 False a_1) (StdList.map (TypeUtil.print_4 ia_0) bs_2)
<{TypeUtil.--_197}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_13 False a_0) (TypeUtil.print_4 False b_1)
TypeUtil.print_50 _x_0::B !_x_1 = case _x_1 (TypeDef._Constructor cons_name_1_0 cons_args_1_1 evars_1_2 cons_context_1_3 cons_priority_1_4 -> <{TypeUtil.--_162}> (<{TypeUtil._if;145;11_238}> (StdList.isEmpty evars_1_2) evars_1_2) (<{TypeUtil.--_159}> cons_name_1_0 (<{TypeUtil.--_159}> " " (<{TypeUtil.--_162}> (<{TypeUtil._c;149;16_239}> cons_priority_1_4) (<{TypeUtil.--_162}> (TypeUtil.printersperse_167 True " " cons_args_1_1) (<{TypeUtil._if;147;13_240}> (StdList.isEmpty cons_context_1_3) cons_context_1_3)))))) 
<{TypeUtil._if;147;13_240}> !_x_0::B cons_context_1 = case _x_0 (True -> _predefined._Nil) (_ -> <{TypeUtil.--_168}> " & " cons_context_1)
<{TypeUtil._c;149;16_239}> !cons_priority_0 = case cons_priority_0 (Data.Maybe.Nothing -> _predefined._Nil) (Data.Maybe.Just p_1_0 -> <{TypeUtil.--_197}> p_1_0 " ") 
<{TypeUtil._if;145;11_238}> !_x_0::B evars_1 = case _x_0 (True -> _predefined._Nil) (_ -> <{TypeUtil.--_159}> "E." (<{TypeUtil.--_158}> (TypeUtil.printersperse_196 False " " evars_1) ": "))
<{TypeUtil.--_199}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_50 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.c;139;66_198}> !_vprint_0 cons_1 !g_l_2 = <{TypeUtil.g_c1;139;71_241}> g_l_2 _vprint_0 cons_1
<{TypeUtil.g_c1;139;71_241}> !g_l_0 _vprint_1 cons_2 = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 (<{TypeUtil.--_193}> _vprint_1 cons_2 (<{TypeUtil.--_159}> "| " (<{TypeUtil.--_199}> c_1_0 "\n")))) (<{TypeUtil.c;139;66_198}> _vprint_1 cons_2 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.--_200}> a_0 b_1 = <{StdList.++}> (TypeUtil.print_4 False a_0) (TypeUtil.print_4 False b_1)
<{TypeUtil.--_201}> !_vprint_0 !a_1 b_2 = <{StdList.++}> (TypeUtil.print_50 False a_1) (select _vprint_0::<{TypeUtil.print;}> 0 False b_2)
<{TypeUtil.--_202}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_50 False a_0) (TypeUtil.print_153 False b_1)
TypeUtil.makeADT_44 !_vprint_0 cons_1 !exten_2::B !_x_3 = case _x_3 (_predefined._Nil -> case exten_2 (True -> " ..") (False -> "") ) (_predefined._Cons c1_1_0 cs_1_1 -> case exten_2 (False -> Text.concat_1 (<{TypeUtil.--_202}> c1_1_0 (<{TypeUtil.--_200}> "\n" (Text.concat_1 (<{TypeUtil.c;139;66_198}> _vprint_0 cons_1 cs_1_1))))) ) (_ -> case exten_2 (True -> Text.concat_1 (<{TypeUtil.--_159}> (TypeUtil.makeADT_44 _vprint_0 cons_1 False _x_3) (<{TypeUtil.--_192}> _vprint_0 cons_1 "| .."))) )
TypeUtil.toInt_47::I !_x_0::B = case _x_0 (True -> 1) (False -> 0) 
TypeUtil.anon_203 !g_0 x_1 = Text.concat_1 (g_0 x_1)
TypeUtil.anon_204::I !g_0 x_1 = _SystemArray.size_20 (g_0 x_1)
<{TypeUtil.--_207}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_165 False a_0) (TypeUtil.print_153 False b_1)
<{TypeUtil.c;139;66_206}> cons_0 !g_l_1 = <{TypeUtil.g_c1;139;71_242}> g_l_1 cons_0
<{TypeUtil.g_c1;139;71_242}> !g_l_0 cons_1 = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> _predefined._Cons (Text.concat_1 (<{TypeUtil.--_207}> cons_1 (<{TypeUtil.--_159}> "| " (<{TypeUtil.--_199}> c_1_0 "\n")))) (<{TypeUtil.c;139;66_206}> cons_1 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUtil.--_208}> !a_0 b_1 = <{StdList.++}> (TypeUtil.print_165 False a_0) (TypeUtil.print_4 False b_1)
TypeUtil.makeADT_205 cons_0 !exten_1::B !_x_2 = case _x_2 (_predefined._Nil -> case exten_1 (True -> " ..") (False -> "") ) (_predefined._Cons c1_1_0 cs_1_1 -> case exten_1 (False -> Text.concat_1 (<{TypeUtil.--_202}> c1_1_0 (<{TypeUtil.--_200}> "\n" (Text.concat_1 (<{TypeUtil.c;139;66_206}> cons_0 cs_1_1))))) ) (_ -> case exten_1 (True -> Text.concat_1 (<{TypeUtil.--_159}> (TypeUtil.makeADT_205 cons_0 False _x_2) (<{TypeUtil.--_208}> cons_0 "| .."))) )
TypeUtil.anon_209 isArg_0::B !x_1 = Text.concat_1 (TypeUtil.print_11 isArg_0 x_1)
TypeUtil.anon_210::I isArg_0::B !x_1 = _SystemArray.size_20 (TypeUtil.anon_209 isArg_0 x_1)
TypeUtil.print_12 _x_0::B !_x_1 = case _x_1 (TypeDef._TypeDef td_name_1_0 td_uniq_1_1 td_args_1_2 td_rhs_1_3 -> <{TypeUtil.--_159}> ":: " (<{TypeUtil.--_159}> (<{TypeUtil._if;108;20_243}> td_uniq_1_1) (<{TypeUtil.--_159}> td_name_1_0 (<{TypeUtil.--_159}> " " (<{TypeUtil.--_162}> (TypeUtil.printersperse_167 True " " td_args_1_2) (<{TypeUtil.--_159}> (<{TypeUtil._if;109;47_244}> (StdList.isEmpty td_args_1_2)) (<{TypeUtil._c;110;13_246}> td_rhs_1_3 td_name_1_0 td_uniq_1_1 td_args_1_2))))))) 
<{TypeUtil._c;110;13_246}> !td_rhs_0 td_name_1 td_uniq_2::B td_args_3 = case td_rhs_0 (TypeDef.TDRCons ext_1_0 cs_1_1 -> <{TypeUtil.--_200}> "= " (TypeUtil.makeADT_205 (StdList.repeatn (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (_SystemArray.size_20 td_name_1) (TypeUtil.toInt_47 td_uniq_2)) (StdList.length_47 td_args_3)) (StdList.sum_72 (StdList.map (TypeUtil.anon_210 True) td_args_3))) 4) ' ') ext_1_0 cs_1_1)) (TypeDef.TDRRecord _x_1_0 exi_1_1 fields_1_2 -> <{TypeUtil.--_159}> "= " (<{TypeUtil.--_158}> (<{TypeUtil._if;113;21_245}> (StdList.isEmpty exi_1_1) exi_1_1) (TypeUtil.makeRecord_43 (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (_SystemArray.size_20 td_name_1) (TypeUtil.toInt_47 td_uniq_2)) (StdList.length_47 td_args_3)) (StdList.sum_72 (StdList.map (TypeUtil.anon_210 True) td_args_3))) exi_1_1 fields_1_2))) (TypeDef.TDRSynonym t_1_0 -> <{TypeUtil.--_170}> ":== " t_1_0) (TypeDef.TDRAbstract -> _predefined._Nil) (TypeDef.TDRAbstractSynonym t_1_0 -> <{TypeUtil.--_159}> "(:== " (<{TypeUtil.--_183}> t_1_0 ")")) 
<{TypeUtil._if;113;21_245}> !_x_0::B exi_1 = case _x_0 (True -> _predefined._Nil) (_ -> <{TypeUtil.--_159}> "E." (<{TypeUtil.--_158}> (TypeUtil.printersperse_196 False " " exi_1) ": "))
<{TypeUtil._if;109;47_244}> !_x_0::B = case _x_0 (True -> "") (_ -> " ")
<{TypeUtil._if;108;20_243}> !td_uniq_0::B = case td_uniq_0 (True -> "*") (_ -> "")
<{TypeUtil.TD;print;}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{TypeUtil.print;}> = {!TypeUtil.print}

:: <{TypeUtil.gEq_s;}> = {!TypeUtil.gEq_s}

:: <{TypeUtil.gEq_ss;}> = {!TypeUtil.gEq_ss}

:: <{TypeUtil.gEq_sss;}> = {!TypeUtil.gEq_sss}

:: <{TypeUtil.gEq_ssss;}> = {!TypeUtil.gEq_ssss}

:: <{TypeUtil.gEq_sssss;}> = {!TypeUtil.gEq_sssss}

:: <{TypeUtil.gEq_ssssss;}> = {!TypeUtil.gEq_ssssss}

:: <{TypeUtil.gEq_sssssss;}> = {!TypeUtil.gEq_sssssss}

:: <{TypeUtil.gEq_ssssssss;}> = {!TypeUtil.gEq_ssssssss}

:: <{TypeUtil.gEq_sssssssss;}> = {!TypeUtil.gEq_sssssssss}

:: <{TypeUtil.bimap_s;}> = {TypeUtil.bimap_s}

:: <{TypeUtil.bimap_ss;}> = {TypeUtil.bimap_ss}

:: <{TypeUtil.bimap_sss;}> = {TypeUtil.bimap_sss}

