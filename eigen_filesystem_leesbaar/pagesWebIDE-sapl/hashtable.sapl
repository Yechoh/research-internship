|| ?module? hashtable


<{hashtable.cu;36;88_15}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> <{hashtable.cu;36;88_15}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 hashtable.HTE_Empty) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3) (False -> c_a_1) 
<{hashtable.cu;36;88_35}> !c_a_0 !c_i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> <{hashtable.cu;36;88_35}> (_SystemArray.update_5 c_a_0 c_i_1 hashtable.HTE_Empty) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2) (False -> c_a_0) 
hashtable.newHashTable !symbol_heap_0 = let g_s_1_0::I = <{StdInt.-_7}> 1024 StdInt.one_11 in hashtable._HashTable symbol_heap_0 (<{hashtable.cu;36;88_35}> (_SystemArray._createArray_0 (<{StdInt.+_6}> g_s_1_0 StdInt.one_11)) 0 g_s_1_0) 0
hashtable.set_hte_mark !hte_mark_0::I !ht_1 = update ht_1::hashtable._HashTable [2:hte_mark_0]
hashtable.hash_value_16::I !name_0 !index_1::I !val_2::I = case (<{StdInt.==_16}> index_1 0) (True -> val_2) (False -> let index_2_0::I = <{StdInt.-_7}> index_1 StdInt.one_11 in hashtable.hash_value_16 name_0 index_2_0 (<{StdInt.+_6}> (<{StdInt.<<}> val_2 2) (StdInt.toInt_20 (_SystemArray.select_19 name_0 index_2_0)))) 
hashtable.hashValue::I !name_0 = let hash_val_1_0::I = StdInt.rem_28 (hashtable.hash_value_16 name_0 (_SystemArray.size_20 name_0) 0) 1023 in case (<{StdInt.<_17}> hash_val_1_0 0) (True -> <{StdInt.+_6}> hash_val_1_0 1023) (False -> hash_val_1_0) 
hashtable.compare_types::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_predefined._Cons t1_1_0 t1s_1_1 -> case _x_2 (_predefined._Cons t2_2_0 t2s_2_1 -> let cmp_3_0::I = select <{_v=<_0}>::<{compare_types.=<;}> 0 t1_1_0 t2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_7}> <{_v=<_0}> t1s_1_1 t2s_2_1) (False -> cmp_3_0) ) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> 0) (_ -> -1)) (_ -> case _x_2 (_predefined._Nil -> 1) )
hashtable.compare_types_36::I !_x_0 !_x_1 = case _x_0 (_predefined._Cons t1_1_0 t1s_1_1 -> case _x_1 (_predefined._Cons t2_2_0 t2s_2_1 -> let cmp_3_0::I = <{compare_types.=<_9}> t1_1_0 t2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_7}> (<{compare_types.=<;}> <{compare_types.=<_9}>) t1s_1_1 t2s_2_1) (False -> cmp_3_0) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> 0) (_ -> -1)) (_ -> case _x_1 (_predefined._Nil -> 1) )
<{hashtable.=<_33}>::I !_x_0 !_x_1 = case _x_0 (hashtable.IC_Instance types1_1_0 -> case _x_1 (hashtable.IC_Instance types2_2_0 -> hashtable.compare_types_36 types1_1_0 types2_2_0) ) (hashtable.IC_InstanceMember types1_1_0 -> case _x_1 (hashtable.IC_InstanceMember types2_2_0 -> hashtable.compare_types_36 types1_1_0 types2_2_0) ) (hashtable.IC_GenericCase type1_1_0 -> case _x_1 (hashtable.IC_GenericCase type2_2_0 -> <{compare_types.=<_9}> type1_1_0 type2_2_0) ) (hashtable.IC_GenericDeriveClass type1_1_0 -> case _x_1 (hashtable.IC_GenericDeriveClass type2_2_0 -> <{compare_types.=<_9}> type1_1_0 type2_2_0) ) (hashtable.IC_Field typ_id1_1_0 -> case _x_1 (hashtable.IC_Field typ_id2_2_0 -> <{compare_types.=<_6}> typ_id1_1_0 typ_id2_2_0) ) (hashtable.IC_TypeExtension module_name1_1_0 -> case _x_1 (hashtable.IC_TypeExtension module_name2_2_0 -> <{compare_types.=<_5}> module_name1_1_0 module_name2_2_0) ) (_ -> case (compare_constructor.equal_constructor _x_0 _x_1) (True -> 0) (False -> case (compare_constructor.less_constructor _x_0 _x_1) (True -> -1) (False -> 1) ) )
<{hashtable.=<_34}>::I !<{_v=<_0}> !<{_v=<_1}> !_x_2 !_x_3 = case _x_2 (_Tuple2 x1_1_0 y1_1_1 -> case _x_3 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = select <{_v=<_0}>::<{compare_types.=<;}> 0 x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> select <{_v=<_1}>::<{compare_types.=<;}> 0 y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{hashtable.=<_37}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_5}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> select <{_v=<_0}>::<{compare_types.=<;}> 0 y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{hashtable.=<_38}>::I !_x_0 !_x_1 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_5}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{hashtable.=<_33}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
hashtable.insert_17 !name_0 !ident_class_1 !hte_mark0_2::I !hte_symbol_heap_3 !_x_4 = case _x_4 (hashtable.HTE_Empty -> let _x_2_0 = Heap.newPtr (select syntax.EmptySymbolTableEntryCAF::syntax._BoxedSymbolTableEntry 0) hte_symbol_heap_3, boxed_ident_2_1 = hashtable._BoxedIdent (syntax._Ident name_0 (select _x_2_0::_Tuple2 0)) in <{_Tuple3!7}> boxed_ident_2_1 (select _x_2_0::_Tuple2 1) (hashtable.HTE_Ident boxed_ident_2_1 ident_class_1 hte_mark0_2 hashtable.HTE_Empty hashtable.HTE_Empty)) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 name_0 ident_class_1) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> <{_Tuple3!7}> hte_ident_1_0 hte_symbol_heap_3 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 (StdInt.bitand hte_mark_1_2 hte_mark0_2) hte_left_1_3 hte_right_1_4)) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.insert_17 name_0 ident_class_1 hte_mark0_2 hte_symbol_heap_3 hte_left_1_3 in <{_Tuple3!7}> (select _x_7_0::_Tuple3 0) (select _x_7_0::_Tuple3 1) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple3 2) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.insert_17 name_0 ident_class_1 hte_mark0_2 hte_symbol_heap_3 hte_right_1_4 in <{_Tuple3!7}> (select _x_7_0::_Tuple3 0) (select _x_7_0::_Tuple3 1) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple3 2))) ) ) ) ) 
hashtable.putIdentInHashTable !name_0 !ident_class_1 !_x_2 = case _x_2 (hashtable._HashTable hte_symbol_heap_1_0 hte_entries_1_1 hte_mark_1_2 -> let hash_val_2_0 = hashtable.hashValue name_0, _x_2_1 = _SystemArray.uselect_6 hte_entries_1_1 hash_val_2_0, _x_2_2::I = hashtable.insert_17 name_0 ident_class_1 hte_mark_1_2 hte_symbol_heap_1_0 (select _x_2_1::_Tuple2 0) in <{_Tuple2!3}> (select _x_2_2::_Tuple3 0) (hashtable._HashTable (select _x_2_2::_Tuple3 1) (_SystemArray.update_5 (select _x_2_1::_Tuple2 1) hash_val_2_0 (select _x_2_2::_Tuple3 2)) hte_mark_1_2)) 
hashtable.insert_18 !module_name_0 !ident_1 !ident_class_2 !module_ident_class_3 !hte_mark0_4::I !hte_symbol_heap_5 !_x_6 = case _x_6 (hashtable.HTE_Empty -> let _x_2_0 = Heap.newPtr (select syntax.EmptySymbolTableEntryCAF::syntax._BoxedSymbolTableEntry 0) hte_symbol_heap_5, boxed_module_ident_2_1 = hashtable._BoxedIdent (syntax._Ident module_name_0 (select _x_2_0::_Tuple2 0)), old_qualified_idents_2_2 = hashtable.NoQualifiedIdents in <{_Tuple4!15}> boxed_module_ident_2_1 old_qualified_idents_2_2 (select _x_2_0::_Tuple2 1) (hashtable.HTE_Ident boxed_module_ident_2_1 (hashtable.IC_Module (hashtable.QualifiedIdents (select ident_1::hashtable._BoxedIdent 0) ident_class_2 old_qualified_idents_2_2)) hte_mark0_4 hashtable.HTE_Empty hashtable.HTE_Empty)) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 module_name_0 module_ident_class_3) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> let old_qualified_idents_6_0 = select hte_class_1_1::_Tuple1 0 in <{_Tuple4!15}> hte_ident_1_0 old_qualified_idents_6_0 hte_symbol_heap_5 (hashtable.HTE_Ident hte_ident_1_0 (hashtable.IC_Module (hashtable.QualifiedIdents (select ident_1::hashtable._BoxedIdent 0) ident_class_2 old_qualified_idents_6_0)) (StdInt.bitand hte_mark_1_2 hte_mark0_4) hte_left_1_3 hte_right_1_4)) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.insert_18 module_name_0 ident_1 ident_class_2 module_ident_class_3 hte_mark0_4 hte_symbol_heap_5 hte_left_1_3 in <{_Tuple4!15}> (select _x_7_0::_Tuple4 0) (select _x_7_0::_Tuple4 1) (select _x_7_0::_Tuple4 2) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple4 3) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.insert_18 module_name_0 ident_1 ident_class_2 module_ident_class_3 hte_mark0_4 hte_symbol_heap_5 hte_right_1_4 in <{_Tuple4!15}> (select _x_7_0::_Tuple4 0) (select _x_7_0::_Tuple4 1) (select _x_7_0::_Tuple4 2) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple4 3))) ) ) ) ) 
hashtable.insert_module_with_qualified_idents_19 !name_0 !ident_class_1 !hte_symbol_heap_2 !_x_3 = case _x_3 (hashtable.HTE_Empty -> let _x_2_0 = Heap.newPtr (select syntax.EmptySymbolTableEntryCAF::syntax._BoxedSymbolTableEntry 0) hte_symbol_heap_2 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 1) (hashtable.HTE_Ident (hashtable._BoxedIdent (syntax._Ident name_0 (select _x_2_0::_Tuple2 0))) ident_class_1 0 hashtable.HTE_Empty hashtable.HTE_Empty)) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 name_0 ident_class_1) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> <{_Tuple2!3}> hte_symbol_heap_2 _x_3) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.insert_module_with_qualified_idents_19 name_0 ident_class_1 hte_symbol_heap_2 hte_left_1_3 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple2 1) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.insert_module_with_qualified_idents_19 name_0 ident_class_1 hte_symbol_heap_2 hte_right_1_4 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple2 1))) ) ) ) ) 
hashtable.putQualifiedIdentInHashTable !module_name_0 !ident_1 !ident_class_2 !_x_3 = case _x_3 (hashtable._HashTable hte_symbol_heap_1_0 hte_entries_1_1 hte_mark_1_2 -> let hash_val_2_0 = hashtable.hashValue module_name_0, _x_2_1 = _SystemArray.uselect_6 hte_entries_1_1 hash_val_2_0, entries_2_2 = select _x_2_1::_Tuple2 0, _x_2_3 = hashtable.insert_18 module_name_0 ident_1 ident_class_2 (hashtable.IC_Module hashtable.NoQualifiedIdents) hte_mark_1_2 hte_symbol_heap_1_0 entries_2_2, entries_2_4 = select _x_2_3::_Tuple4 3, hte_symbol_heap_2_5 = select _x_2_3::_Tuple4 2, ident_2_6 = select _x_2_3::_Tuple4 0, hte_entries_2_7::I = select _x_2_1::_Tuple2 1 in <{hashtable._c;134;7_41}> (select _x_2_3::_Tuple4 1) module_name_0 hte_symbol_heap_2_5 hte_entries_2_7 hash_val_2_0 entries_2_4 ident_2_6 hte_mark_1_2) 
<{hashtable._c;134;7_41}> !_x_0 module_name_1 !hte_symbol_heap_2 !hte_entries_3 !hash_val_4::I !entries_5 !ident_6 !hte_mark_7::I = case _x_0 (hashtable.NoQualifiedIdents -> let _x_2_0 = _SystemArray.uselect_6 (_SystemArray.update_5 hte_entries_3 hash_val_4 entries_5) 1023, _x_2_1 = hashtable.insert_module_with_qualified_idents_19 module_name_1 (hashtable.IC_Module hashtable.NoQualifiedIdents) hte_symbol_heap_2 (select _x_2_0::_Tuple2 0) in <{_Tuple2!3}> ident_6 (hashtable._HashTable (select _x_2_1::_Tuple2 0) (_SystemArray.update_5 (select _x_2_0::_Tuple2 1) 1023 (select _x_2_1::_Tuple2 1)) hte_mark_7)) (_ -> <{_Tuple2!3}> ident_6 (hashtable._HashTable hte_symbol_heap_2 (_SystemArray.update_5 hte_entries_3 hash_val_4 entries_5) hte_mark_7))
hashtable.insert_20 !predefined_ident_0 !name_1 !ident_class_2 !hte_mark0_3::I !hte_symbol_heap_4 !_x_5 = case _x_5 (hashtable.HTE_Empty -> <{_Tuple2!3}> (Heap.writePtr (select predefined_ident_0::syntax._Ident 1) (select syntax.EmptySymbolTableEntryCAF::syntax._BoxedSymbolTableEntry 0) hte_symbol_heap_4) (hashtable.HTE_Ident (hashtable._BoxedIdent predefined_ident_0) ident_class_2 hte_mark0_3 hashtable.HTE_Empty hashtable.HTE_Empty)) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 name_1 ident_class_2) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> <{_Tuple2!3}> hte_symbol_heap_4 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 (StdInt.bitand hte_mark_1_2 hte_mark0_3) hte_left_1_3 hte_right_1_4)) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.insert_20 predefined_ident_0 name_1 ident_class_2 hte_mark0_3 hte_symbol_heap_4 hte_left_1_3 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple2 1) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.insert_20 predefined_ident_0 name_1 ident_class_2 hte_mark0_3 hte_symbol_heap_4 hte_right_1_4 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple2 1))) ) ) ) ) 
hashtable.putPredefinedIdentInHashTable !predefined_ident_0 !ident_class_1 !_x_2 = case predefined_ident_0 (syntax._Ident id_name_1_0 id_info_1_1 -> case _x_2 (hashtable._HashTable hte_symbol_heap_2_0 hte_entries_2_1 hte_mark_2_2 -> let hash_val_3_0 = hashtable.hashValue id_name_1_0, _x_3_1 = _SystemArray.uselect_6 hte_entries_2_1 hash_val_3_0, _x_3_2::I = hashtable.insert_20 predefined_ident_0 id_name_1_0 ident_class_1 hte_mark_2_2 hte_symbol_heap_2_0 (select _x_3_1::_Tuple2 0) in hashtable._HashTable (select _x_3_2::_Tuple2 0) (_SystemArray.update_5 (select _x_3_1::_Tuple2 1) hash_val_3_0 (select _x_3_2::_Tuple2 1)) hte_mark_2_2) ) 
hashtable.find_qualified_idents_21 !module_name_0 !module_ident_class_1 !hte_2 = case hte_2 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 module_name_0 module_ident_class_1) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> <{_Tuple2!3}> (select hte_class_1_1::_Tuple1 0) hte_2) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.find_qualified_idents_21 module_name_0 module_ident_class_1 hte_left_1_3 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple2 1) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.find_qualified_idents_21 module_name_0 module_ident_class_1 hte_right_1_4 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple2 1))) ) ) ) ) 
hashtable.get_qualified_idents_from_hash_table !module_ident_0 !hash_table_1 = case module_ident_0 (syntax._Ident id_name_1_0 id_info_1_1 -> case hash_table_1 (hashtable._HashTable hte_symbol_heap_2_0 hte_entries_2_1 hte_mark_2_2 -> let hash_val_3_0 = hashtable.hashValue id_name_1_0, _x_3_1 = _SystemArray.uselect_6 hte_entries_2_1 hash_val_3_0, _x_3_2::I = hashtable.find_qualified_idents_21 id_name_1_0 (hashtable.IC_Module hashtable.NoQualifiedIdents) (select _x_3_1::_Tuple2 0) in <{_Tuple2!3}> (select _x_3_2::_Tuple2 0) (update hash_table_1::hashtable._HashTable [1:_SystemArray.update_5 (select _x_3_1::_Tuple2 1) hash_val_3_0 (select _x_3_2::_Tuple2 1)])) ) 
hashtable.remove_qualified_idents_from_module_23 !module_name_0 !module_ident_class_1 !_x_2 = case _x_2 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> let cmp_4_0::I = <{hashtable.=<_38}> (_Tuple2 module_name_0 module_ident_class_1) (_Tuple2 id_name_3_0 hte_class_1_1) in case (<{StdInt.==_16}> cmp_4_0 0) (True -> <{_Tuple2!3}> True (hashtable.HTE_Ident hte_ident_1_0 (hashtable.IC_Module hashtable.NoQualifiedIdents) hte_mark_1_2 hte_left_1_3 hte_right_1_4)) (False -> case (<{StdInt.==_16}> cmp_4_0 -1) (True -> let !_x_7_0 = hashtable.remove_qualified_idents_from_module_23 module_name_0 module_ident_class_1 hte_left_1_3 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_7_0::_Tuple2 1) hte_right_1_4)) (False -> let !_x_7_0 = hashtable.remove_qualified_idents_from_module_23 module_name_0 module_ident_class_1 hte_right_1_4 in <{_Tuple2!3}> (select _x_7_0::_Tuple2 0) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 (select _x_7_0::_Tuple2 1))) ) ) ) ) (hashtable.HTE_Empty -> <{_Tuple2!3}> False hashtable.HTE_Empty) 
hashtable.remove_qualified_idents_from_modules_22 !_vArray_0 !_x_1 hte_entries_2 = case _x_1 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> case hte_class_1_1 (hashtable.IC_Module _x_4_0 -> case _x_4_0 (hashtable.NoQualifiedIdents -> let hash_val_6_0 = hashtable.hashValue id_name_3_0, _x_6_1::I = select _vArray_0::<{_SystemArray.Array;}> 6 hte_entries_2 hash_val_6_0 in hashtable.remove_qualified_idents_from_modules_22 _vArray_0 hte_right_1_4 (hashtable.remove_qualified_idents_from_modules_22 _vArray_0 hte_left_1_3 (select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_6_1::_Tuple2 1) hash_val_6_0 (select (hashtable.remove_qualified_idents_from_module_23 id_name_3_0 hte_class_1_1 (select _x_6_1::_Tuple2 0))::_Tuple2 1)))) ) ) ) ) (hashtable.HTE_Empty -> hte_entries_2) 
hashtable.remove_qualified_idents_from_modules_39 !_x_0 hte_entries_1 = case _x_0 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_1_3 hte_right_1_4 -> case hte_ident_1_0 (hashtable._BoxedIdent boxed_ident_2_0 -> case boxed_ident_2_0 (syntax._Ident id_name_3_0 id_info_3_1 -> case hte_class_1_1 (hashtable.IC_Module _x_4_0 -> case _x_4_0 (hashtable.NoQualifiedIdents -> let hash_val_6_0 = hashtable.hashValue id_name_3_0, _x_6_1::I = _SystemArray.uselect_6 hte_entries_1 hash_val_6_0 in hashtable.remove_qualified_idents_from_modules_39 hte_right_1_4 (hashtable.remove_qualified_idents_from_modules_39 hte_left_1_3 (_SystemArray.update_5 (select _x_6_1::_Tuple2 1) hash_val_6_0 (select (hashtable.remove_qualified_idents_from_module_23 id_name_3_0 hte_class_1_1 (select _x_6_1::_Tuple2 0))::_Tuple2 1)))) ) ) ) ) (hashtable.HTE_Empty -> hte_entries_1) 
hashtable.remove_qualified_idents_from_hash_table !hash_table_0 = case hash_table_0 (hashtable._HashTable hte_symbol_heap_1_0 hte_entries_1_1 hte_mark_1_2 -> let _x_2_0 = _SystemArray.uselect_6 hte_entries_1_1 1023, modules_with_qualified_idents_2_1 = select _x_2_0::_Tuple2 0 in update hash_table_0::hashtable._HashTable [1:hashtable.remove_qualified_idents_from_modules_39 modules_with_qualified_idents_2_1 (_SystemArray.update_5 (select _x_2_0::_Tuple2 1) 1023 modules_with_qualified_idents_2_1)]) 
hashtable.merge_trees_right_25 !hte_left_0 !_x_1 !depth_left_2::I !depth_right_3::I = case _x_1 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_right_left_1_3 hte_right_right_1_4 -> let _x_2_0::I = hashtable.merge_trees_29 hte_left_0 hte_right_left_1_3 depth_left_2 (<{StdInt.-_7}> depth_right_3 1), depth_left_2_1::I = select _x_2_0::_Tuple2 0, depth_left_2_2 = <{StdInt.+_6}> depth_left_2_1 1 in <{_Tuple2!3}> (<{hashtable._if;311;24_43}> (StdBool.not (<{StdInt.<_17}> depth_left_2_2 depth_right_3)) depth_left_2_2 depth_right_3) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 (select _x_2_0::_Tuple2 1) hte_right_right_1_4)) 
hashtable.merge_trees_left_24 !_x_0 !hte_right_1 !depth_left_2::I !depth_right_3::I = case _x_0 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_left_1_3 hte_left_right_1_4 -> let _x_2_0::I = hashtable.merge_trees_29 hte_left_right_1_4 hte_right_1 (<{StdInt.-_7}> depth_left_2 1) depth_right_3, depth_right_2_1::I = select _x_2_0::_Tuple2 0, depth_right_2_2 = <{StdInt.+_6}> depth_right_2_1 1 in <{_Tuple2!3}> (<{hashtable._if;305;24_42}> (StdBool.not (<{StdInt.<_17}> depth_left_2 depth_right_2_2)) depth_left_2 depth_right_2_2) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 hte_mark_1_2 hte_left_left_1_3 (select _x_2_0::_Tuple2 1))) 
hashtable.merge_trees_29 !_x_0 !hte_right_1 !depth_left_2::I !depth_right_3::I = case _x_0 (hashtable.HTE_Empty -> <{_Tuple2!3}> depth_right_3 hte_right_1) (_ -> case hte_right_1 (hashtable.HTE_Empty -> <{_Tuple2!3}> depth_left_2 _x_0) (_ -> case (StdBool.not (<{StdInt.<_17}> depth_left_2 depth_right_3)) (True -> hashtable.merge_trees_left_24 _x_0 hte_right_1 depth_left_2 depth_right_3) (False -> hashtable.merge_trees_right_25 _x_0 hte_right_1 depth_left_2 depth_right_3) ))
<{hashtable._if;311;24_43}>::I !_x_0::B depth_left_1::I depth_right_2::I = case _x_0 (True -> depth_left_1) (_ -> depth_right_2)
<{hashtable._if;305;24_42}>::I !_x_0::B depth_left_1::I depth_right_2::I = case _x_0 (True -> depth_left_1) (_ -> depth_right_2)
hashtable.remove_icl_entries_from_tree_and_compute_depth_28 !_x_0 = case _x_0 (hashtable.HTE_Empty -> <{_Tuple2!3}> 0 hashtable.HTE_Empty) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 _x_1_2 hte_left_1_3 hte_right_1_4 -> case _x_1_2 (0 -> let _x_3_0::I = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_left_1_3, depth_left_3_1 = select _x_3_0::_Tuple2 0, _x_3_2::I = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_right_1_4, depth_right_3_3 = select _x_3_2::_Tuple2 0 in <{_Tuple2!3}> (<{hashtable._if;284;16_44}> (StdBool.not (<{StdInt.<_17}> depth_left_3_1 depth_right_3_3)) depth_left_3_1 depth_right_3_3) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 0 (select _x_3_0::_Tuple2 1) (select _x_3_2::_Tuple2 1))) (_ -> let _x_2_0 = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_left_1_3, _x_2_1 = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_right_1_4 in hashtable.merge_trees_29 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1) (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) 
<{hashtable._if;284;16_44}>::I !_x_0::B depth_left_1::I depth_right_2::I = case _x_0 (True -> depth_left_1) (_ -> depth_right_2)
hashtable.remove_icl_entries_from_tree_27 !_x_0 = case _x_0 (hashtable.HTE_Empty -> <{_Tuple2!3}> 0 hashtable.HTE_Empty) (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 _x_1_2 hte_left_1_3 hte_right_1_4 -> case _x_1_2 (0 -> <{_Tuple2!3}> 0 (hashtable.HTE_Ident hte_ident_1_0 hte_class_1_1 0 (select (hashtable.remove_icl_entries_from_tree_27 hte_left_1_3)::_Tuple2 1) (select (hashtable.remove_icl_entries_from_tree_27 hte_right_1_4)::_Tuple2 1))) (_ -> let _x_2_0 = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_left_1_3, _x_2_1 = hashtable.remove_icl_entries_from_tree_and_compute_depth_28 hte_right_1_4 in hashtable.merge_trees_29 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1) (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) 
hashtable.remove_icl_symbols_from_array_26 !_vArray_0 !i_1::I hte_entries_2 = case (<{StdInt.<_17}> i_1 1023) (True -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 6 hte_entries_2 i_1 in hashtable.remove_icl_symbols_from_array_26 _vArray_0 (<{StdInt.+_6}> i_1 1) (select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_2_0::_Tuple2 1) i_1 (select (hashtable.remove_icl_entries_from_tree_27 (select _x_2_0::_Tuple2 0))::_Tuple2 1))) (False -> hte_entries_2) 
hashtable.remove_icl_symbols_from_array_40 !i_0::I !hte_entries_1 = case (<{StdInt.<_17}> i_0 1023) (True -> let _x_2_0 = _SystemArray.uselect_6 hte_entries_1 i_0 in hashtable.remove_icl_symbols_from_array_40 (<{StdInt.+_6}> i_0 1) (_SystemArray.update_5 (select _x_2_0::_Tuple2 1) i_0 (select (hashtable.remove_icl_entries_from_tree_27 (select _x_2_0::_Tuple2 0))::_Tuple2 1))) (False -> hte_entries_1) 
hashtable.remove_icl_symbols_from_hash_table !hash_table_0 = case hash_table_0 (hashtable._HashTable hte_symbol_heap_1_0 hte_entries_1_1 hte_mark_1_2 -> update hash_table_0::hashtable._HashTable [1:hashtable.remove_icl_symbols_from_array_40 0 hte_entries_1_1]) 
<{hashtable.TD;HashTableEntry}> _x_0::B = _predefined._Nil
<{hashtable.TD;HashTable}> _x_0::B = _predefined._Nil
<{hashtable.TD;IdentClass}> _x_0::B = _predefined._Nil
<{hashtable.TD;QualifiedIdents}> _x_0::B = _predefined._Nil
<{hashtable.TD;BoxedIdent}> _x_0::B = _predefined._Nil

:: hashtable.IdentClass = hashtable.IC_Expression | hashtable.IC_Type | hashtable.IC_TypeAttr | hashtable.IC_Class | hashtable.IC_Module !a1 | hashtable.IC_Field !a1 | hashtable.IC_Selector | hashtable.IC_Instance !a1 | hashtable.IC_InstanceMember !a1 | hashtable.IC_Generic | hashtable.IC_GenericCase !a1 | hashtable.IC_GenericDeriveClass !a1 | hashtable.IC_TypeExtension !a1 | hashtable.IC_Unknown
:: hashtable.QualifiedIdents = hashtable.QualifiedIdents !a1 !a2 !a3 | hashtable.NoQualifiedIdents
:: hashtable.HashTableEntry = hashtable.HTE_Ident !a1 !a2 !a3::I !a4 !a5 | hashtable.HTE_Empty

|| Converted Records
:: hashtable._HashTable = {!hashtable.hte_symbol_heap, !hashtable.hte_entries, !hashtable.hte_mark::I}

:: hashtable._BoxedIdent = {!hashtable.boxed_ident}

