|| ?module? Doc


Doc.getDocDescription !_x_0 = case _x_0 (Doc.ModuleDoc d_1_0 -> d_1_0) (Doc.FunctionDoc d_1_0 _x_1_1 _x_1_2 _x_1_3 -> d_1_0) (Doc.ClassDoc d_1_0 _x_1_1 _x_1_2 -> d_1_0) (Doc.TypeDoc d_1_0 _x_1_1 _x_1_2 -> d_1_0) (Doc.ConstructorDoc d_1_0 _x_1_1 -> d_1_0) 
Doc.getParamDocs !_x_0 = case _x_0 (Doc.FunctionDoc _x_1_0 ps_1_1 _x_1_2 _x_1_3 -> ps_1_1) (Doc.ConstructorDoc _x_1_0 ps_1_1 -> ps_1_1) (_ -> _predefined._Nil)
Doc.getVarDocs !_x_0 = case _x_0 (Doc.FunctionDoc _x_1_0 _x_1_1 vs_1_2 _x_1_3 -> vs_1_2) (Doc.ClassDoc _x_1_0 vs_1_1 _x_1_2 -> vs_1_1) (Doc.TypeDoc _x_1_0 vs_1_1 _x_1_2 -> vs_1_1) (_ -> _predefined._Nil)
Doc.getResultDoc !_x_0 = case _x_0 (Doc.FunctionDoc _x_1_0 _x_1_1 _x_1_2 r_1_3 -> r_1_3) (_ -> Data.Maybe.Nothing)
Doc.getTypeRhsDoc !_x_0 = case _x_0 (Doc.TypeDoc _x_1_0 _x_1_1 rhs_1_2 -> rhs_1_2) (_ -> Data.Maybe.Nothing)
Doc.getFieldDoc !doc_0 = <{Doc._c;60;19_155}> (Doc.getTypeRhsDoc doc_0)
<{Doc._c;60;19_155}> !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (Doc.RecordDoc fs_2_0 -> Data.Maybe.Just fs_2_0) ) (_ -> Data.Maybe.Nothing)
Doc.getConstructorDoc !doc_0 = <{Doc._c;65;25_156}> (Doc.getTypeRhsDoc doc_0)
<{Doc._c;65;25_156}> !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (Doc.ADTDoc cs_2_0 -> Data.Maybe.Just cs_2_0) ) (_ -> Data.Maybe.Nothing)
Doc.getRepresentationDoc !doc_0 = <{Doc._c;70;28_157}> (Doc.getTypeRhsDoc doc_0)
<{Doc._c;70;28_157}> !_x_0 = case _x_0 (Data.Maybe.Just _x_1_0 -> case _x_1_0 (Doc.SynonymDoc d_2_0 -> d_2_0) ) (_ -> Data.Maybe.Nothing)
Doc.functionToClassMemberDoc !_x_0 = case _x_0 (Doc.FunctionDoc d_1_0 ps_1_1 _x_1_2 r_1_3 -> Doc.ClassMemberDoc d_1_0 ps_1_1 r_1_3) 
Doc.addClassMemberDoc !_x_0 m_1 = case _x_0 (Doc.ClassDoc d_1_0 vs_1_1 ms_1_2 -> Doc.ClassDoc d_1_0 vs_1_1 (<{StdList.++}> ms_1_2 (_predefined._Cons m_1 _predefined._Nil))) 
Doc.anon_70 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Doc.<>_69}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
Doc.anon_68 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Doc.<>_67}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
Doc.anon_66 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_65 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_118 !g_0 x_1 = StdList.toString_79 (g_0 x_1)
Doc.anon_119 _x_0 !x_1 = StdList.toString_79 (StdList.dropWhile _x_0 x_1)
Doc.prepField_44 = Doc.anon_119 StdChar.isSpace
Doc.fieldName !_x_0 = case _x_0 (Doc.Param _x_1_0 -> "param") (Doc.Var _x_1_0 -> "var") (Doc.Result _x_1_0 -> "result") (Doc.Representation _x_1_0 -> "representation") 
Doc.upd_43 !_x_0 _x_1 = case _x_0 (Doc.Param d_1_0 -> case _x_1 (Doc.FunctionDoc t_2_0 ps_2_1 vs_2_2 r_2_3 -> Data.Either.Right (_Tuple2 (Doc.FunctionDoc t_2_0 (_predefined._Cons d_1_0 ps_2_1) vs_2_2 r_2_3) _predefined._Nil)) (Doc.ConstructorDoc t_2_0 ps_2_1 -> Data.Either.Right (_Tuple2 (Doc.ConstructorDoc t_2_0 (_predefined._Cons d_1_0 ps_2_1)) _predefined._Nil)) ) (Doc.Result d_1_0 -> case _x_1 (Doc.FunctionDoc t_2_0 ps_2_1 vs_2_2 _x_2_3 -> Data.Either.Right (_Tuple2 (Doc.FunctionDoc t_2_0 ps_2_1 vs_2_2 (Data.Maybe.Just d_1_0)) _predefined._Nil)) ) (Doc.Var d_1_0 -> case _x_1 (Doc.FunctionDoc t_2_0 ps_2_1 vs_2_2 r_2_3 -> Data.Either.Right (_Tuple2 (Doc.FunctionDoc t_2_0 ps_2_1 (_predefined._Cons d_1_0 vs_2_2) r_2_3) _predefined._Nil)) (Doc.ClassDoc t_2_0 vs_2_1 ms_2_2 -> Data.Either.Right (_Tuple2 (Doc.ClassDoc t_2_0 (_predefined._Cons d_1_0 vs_2_1) ms_2_2) _predefined._Nil)) (Doc.TypeDoc t_2_0 vs_2_1 rhs_2_2 -> Data.Either.Right (_Tuple2 (Doc.TypeDoc t_2_0 (_predefined._Cons d_1_0 vs_2_1) rhs_2_2) _predefined._Nil)) ) (Doc.Representation d_1_0 -> case _x_1 (Doc.TypeDoc t_2_0 vs_2_1 _x_2_2 -> case _x_2_2 (Data.Maybe.Just _x_3_0 -> case _x_3_0 (Doc.SynonymDoc _x_4_0 -> Data.Either.Right (_Tuple2 (Doc.TypeDoc t_2_0 vs_2_1 (Data.Maybe.Just (Doc.SynonymDoc (Data.Maybe.Just d_1_0)))) _predefined._Nil)) ) ) ) (_ -> Data.Either.Right (_Tuple2 _x_1 (_predefined._Cons (Doc.IllegalField (Doc.fieldName _x_0)) _predefined._Nil)))
Doc.parseFs_40 !_x_0 desc_1 doc_2 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 ('p' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('a' -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 ('r' -> case _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 ('a' -> case _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 ('m' -> case _x_9_1 (_predefined._Nil -> Doc.upd_43 (Doc.Param (Doc.prepField_44 desc_1)) doc_2) ) ) ) ) ) ) ) ) ) ('r' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('e' -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 ('s' -> case _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 ('u' -> case _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 ('l' -> case _x_9_1 (_predefined._Cons _x_11_0 _x_11_1 -> case _x_11_0 ('t' -> case _x_11_1 (_predefined._Nil -> Doc.upd_43 (Doc.Result (Doc.prepField_44 desc_1)) doc_2) ) ) ) ) ) ) ) ('t' -> case _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 ('u' -> case _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 ('r' -> case _x_9_1 (_predefined._Cons _x_11_0 _x_11_1 -> case _x_11_0 ('n' -> case _x_11_1 (_predefined._Nil -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (Data.Tuple.appSnd (<{StdList.++}> (_predefined._Cons Doc.UsedReturn _predefined._Nil))) (Doc.parseFs_40 (_predefined._Cons 'r' (_predefined._Cons 'e' (_predefined._Cons 's' (_predefined._Cons 'u' (_predefined._Cons 'l' (_predefined._Cons 't' _predefined._Nil)))))) desc_1 doc_2)) ) ) ) ) ) ) ) ('p' -> case _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 ('r' -> case _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 ('e' -> case _x_9_1 (_predefined._Cons _x_11_0 _x_11_1 -> case _x_11_0 ('s' -> case _x_11_1 (_predefined._Cons _x_13_0 _x_13_1 -> case _x_13_0 ('e' -> case _x_13_1 (_predefined._Cons _x_15_0 _x_15_1 -> case _x_15_0 ('n' -> case _x_15_1 (_predefined._Cons _x_17_0 _x_17_1 -> case _x_17_0 ('t' -> case _x_17_1 (_predefined._Cons _x_19_0 _x_19_1 -> case _x_19_0 ('a' -> case _x_19_1 (_predefined._Cons _x_21_0 _x_21_1 -> case _x_21_0 ('t' -> case _x_21_1 (_predefined._Cons _x_23_0 _x_23_1 -> case _x_23_0 ('i' -> case _x_23_1 (_predefined._Cons _x_25_0 _x_25_1 -> case _x_25_0 ('o' -> case _x_25_1 (_predefined._Cons _x_27_0 _x_27_1 -> case _x_27_0 ('n' -> case _x_27_1 (_predefined._Nil -> Doc.upd_43 (Doc.Representation (Doc.prepField_44 desc_1)) doc_2) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ('v' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('a' -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 ('r' -> case _x_5_1 (_predefined._Nil -> Doc.upd_43 (Doc.Var (Doc.prepField_44 desc_1)) doc_2) ) ) ) ) ) ) (_ -> Data.Either.Right (_Tuple2 doc_2 (_predefined._Cons (Doc.UnknownField (StdList.toString_79 (_predefined._Cons '@' _x_0))) _predefined._Nil)))
Doc.anon_39 field_0 desc_1 !_x_2 = case _x_2 (_Tuple2 d_1_0 ws_1_1 -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (Data.Tuple.appSnd (<{StdList.++}> ws_1_1)) (Doc.parseFs_40 field_0 desc_1 d_1_0)) 
<{Doc.<>_121}>::B !x_0::C !y_1::C = StdBool.not (<{StdChar.==_18}> x_0 y_1)
Doc.anon_122::B !x_0::C !g_1 x_2 = <{Doc.<>_121}> x_0 (g_1 x_2)
Doc.anon_120::B !g_0 x_1 = StdBool.not (g_0 x_1)
Doc.anon_124::B !x_0::C !x_1 = <{Doc.<>_121}> x_0 (StdList.hd x_1)
Doc.anon_123::B !x_0::C = StdBool.not (StdChar.isSpace x_0)
Doc.parseFields_42 org_0 !_x_1 = case _x_1 (_predefined._Nil -> Data.Either.Right (_Tuple2 org_0 _predefined._Nil)) (_predefined._Cons _x_1_0 rest_1_1 -> case _x_1_0 (_predefined._Cons _x_2_0 line_2_1 -> case _x_2_0 ('@' -> let _x_4_0 = StdList.span (Doc.anon_124 '@') rest_1_1, _x_4_1 = StdList.span Doc.anon_123 line_2_1 in <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Data.Either.bind_4 (<{Control.Applicative.Applicative;}> <{Data.Either.<*>_2}> Data.Either.pure_3 (<{Data.Functor.Functor;}> Data.Either.fmap_1))) (Doc.parseFields_42 org_0 (select _x_4_0::_Tuple2 1)) (Doc.anon_39 (select _x_4_1::_Tuple2 0) (StdList.flatten (Data.List.intersperse (_predefined._Cons '\n' _predefined._Nil) (_predefined._Cons (select _x_4_1::_Tuple2 1) (select _x_4_0::_Tuple2 0)))))) ) ) 
Doc.anon_64 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_63 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_125 !g_0 x_1 = StdList.flatten (g_0 x_1)
Doc.anon_126 !g_0 x_1 = StdList.toString_79 (g_0 x_1)
Doc.anon_127 !_x_0 !x_1 = StdList.flatten (Data.List.intersperse _x_0 x_1)
Doc.anon_128 !_x_0 !x_1 = StdList.toString_79 (Doc.anon_127 _x_0 x_1)
Doc.linesToString = Doc.anon_128 (_predefined._Cons '\n' _predefined._Nil)
Doc.updateDesc desc_0 !doc_1 = <{Doc._c;118;23_158}> doc_1 desc_0
<{Doc._c;118;23_158}> !doc_0 desc_1 = case doc_0 (Doc.FunctionDoc _x_1_0 ps_1_1 vs_1_2 r_1_3 -> Doc.FunctionDoc (Data.Maybe.Just (Doc.linesToString desc_1)) ps_1_1 vs_1_2 r_1_3) (Doc.ModuleDoc _x_1_0 -> Doc.ModuleDoc (Data.Maybe.Just (Doc.linesToString desc_1))) (Doc.ClassDoc _x_1_0 vs_1_1 cms_1_2 -> Doc.ClassDoc (Data.Maybe.Just (Doc.linesToString desc_1)) vs_1_1 cms_1_2) (Doc.TypeDoc _x_1_0 vs_1_1 rhs_1_2 -> Doc.TypeDoc (Data.Maybe.Just (Doc.linesToString desc_1)) vs_1_1 rhs_1_2) (Doc.ConstructorDoc _x_1_0 ps_1_1 -> Doc.ConstructorDoc (Data.Maybe.Just (Doc.linesToString desc_1)) ps_1_1) 
Doc.anon_38 ws_0 = _predefined._Cons Doc.NoDescription ws_0
<{Doc.<>_129}>::B !x_0::C !y_1::C = StdBool.not (<{StdChar.==_18}> x_0 y_1)
Doc.anon_130::B !x_0::C !g_1 x_2 = <{Doc.<>_129}> x_0 (g_1 x_2)
Doc.anon_131::B !x_0::C !x_1 = <{Doc.<>_129}> x_0 (StdList.hd x_1)
Doc.parsef_41 doc_0 !_x_1 = case _x_1 (_predefined._Nil -> Data.Either.Right (_Tuple2 doc_0 _predefined._Nil)) (_ -> <{Doc._c;133;20_159}> (StdList.span (Doc.anon_131 '@') _x_1) doc_0)
<{Doc._c;133;20_159}> !_x_0 doc_1 = case _x_0 (_Tuple2 _x_1_0 rest_1_1 -> case _x_1_0 (_predefined._Nil -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (Data.Tuple.appSnd Doc.anon_38) (Doc.parseFields_42 doc_1 rest_1_1)) (_ -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (Data.Tuple.appFst (Doc.updateDesc _x_1_0)) (Doc.parseFields_42 doc_1 rest_1_1))) 
Doc.anon_62 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_61 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_60 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.foldr_59 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Doc.foldr_59 op_0 r_1 x_1_1)) 
Doc.foldr_58 op_0 r_1 !l_2 = Doc.foldr_59 op_0 r_1 l_2
Doc.f_46 !<{_v==_0}> e_1 x_2 !_x_3 = case _x_3 (_predefined._Nil -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 x_2 e_1) (True -> _predefined._Nil) (False -> _predefined._Cons (_predefined._Cons x_2 _predefined._Nil) _predefined._Nil) ) (_predefined._Cons y_1_0 ys_1_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 x_2 e_1) (True -> _predefined._Cons _predefined._Nil (_predefined._Cons y_1_0 ys_1_1)) (False -> _predefined._Cons (_predefined._Cons x_2 y_1_0) ys_1_1) ) 
Doc.foldr_133 !<{_v==_0}> e_1 !r_2 !_x_3 = case _x_3 (_predefined._Nil -> r_2) (_predefined._Cons a_1_0 x_1_1 -> Doc.f_46 <{_v==_0}> e_1 a_1_0 (Doc.foldr_133 <{_v==_0}> e_1 r_2 x_1_1)) 
Doc.foldr_132 !<{_v==_0}> e_1 !r_2 !l_3 = Doc.foldr_133 <{_v==_0}> e_1 r_2 l_3
Doc.break_48 !<{_v==_0}> e_1 = Doc.foldr_132 <{_v==_0}> e_1 _predefined._Nil
Doc.anon_57 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Doc.<>_56}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
Doc.anon_55 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_54 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_135 _x_0 !g_1 x_2 = StdList.dropWhile _x_0 (g_1 x_2)
<{Doc.<>_136}>::B !x_0::C !y_1::C = StdBool.not (<{StdChar.==_18}> x_0 y_1)
Doc.anon_137::B !x_0::C !g_1 x_2 = <{Doc.<>_136}> x_0 (g_1 x_2)
Doc.anon_134::B !_x_0::C !g_1 x_2 = <{StdChar.==_18}> _x_0 (g_1 x_2)
Doc.anon_139 _x_0 !x_1 = StdList.dropWhile _x_0 (StdList.tl x_1)
Doc.anon_140::B !x_0::C !x_1 = <{Doc.<>_136}> x_0 (StdList.hd x_1)
Doc.anon_138::B !_x_0::C !x_1 = <{StdChar.==_18}> _x_0 (StdList.hd x_1)
Doc.checkAsterisks_47 !lines_0 = case (StdList.all (Doc.anon_138 '*') lines_0) (True -> Data.Either.Right (StdList.map (Doc.anon_139 StdChar.isSpace) lines_0)) (False -> Data.Either.Left (Doc.MissingAsterisk (StdList.toString_79 (StdList.hd (StdList.filter (Doc.anon_140 '*') lines_0))))) 
Doc.f_147 !e_0::C !x_1::C !_x_2 = case _x_2 (_predefined._Nil -> case (<{StdChar.==_18}> x_1 e_0) (True -> _predefined._Nil) (False -> _predefined._Cons (_predefined._Cons x_1 _predefined._Nil) _predefined._Nil) ) (_predefined._Cons y_1_0 ys_1_1 -> case (<{StdChar.==_18}> x_1 e_0) (True -> _predefined._Cons _predefined._Nil (_predefined._Cons y_1_0 ys_1_1)) (False -> _predefined._Cons (_predefined._Cons x_1 y_1_0) ys_1_1) ) 
Doc.foldr_146 e_0::C !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Doc.f_147 e_0 a_1_0 (Doc.foldr_146 e_0 r_1 x_1_1)) 
Doc.foldr_145 e_0::C !r_1 !l_2 = Doc.foldr_146 e_0 r_1 l_2
Doc.break_144 e_0::C = Doc.foldr_145 e_0 _predefined._Nil
Doc.anon_143 !g_0 x_1 = StdList.reverse (g_0 x_1)
Doc.anon_142::B !g_0 x_1 = StdBool.not (g_0 x_1)
Doc.anon_141::B !g_0 x_1 = StdBool.not (g_0 x_1)
Doc.anon_150 _x_0 !x_1 = StdList.reverse (StdList.dropWhile _x_0 x_1)
Doc.anon_149::B !x_0 = StdBool.not (StdList.isEmpty x_0)
Doc.anon_148::B !x_0 = StdBool.not (StdList.isEmpty x_0)
Doc.prepareString s_0 = <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (StdList.filter Doc.anon_148) (Doc.checkAsterisks_47 (StdList.filter Doc.anon_149 (StdList.map (StdFunc.twice (Doc.anon_150 StdChar.isSpace)) (Doc.break_144 '\n' (StdList.fromString_78 s_0)))))
Doc.parseDocBlock doc_0 block_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Data.Either.bind_4 (<{Control.Applicative.Applicative;}> <{Data.Either.<*>_2}> Data.Either.pure_3 (<{Data.Functor.Functor;}> Data.Either.fmap_1))) (Doc.prepareString block_1) (Doc.parsef_41 doc_0)
Doc.parseModuleDoc = Doc.parseDocBlock (Doc.ModuleDoc Data.Maybe.Nothing)
Doc.parseFunctionDoc = Doc.parseDocBlock (Doc.FunctionDoc Data.Maybe.Nothing _predefined._Nil _predefined._Nil Data.Maybe.Nothing)
Doc.parseClassDoc = Doc.parseDocBlock (Doc.ClassDoc Data.Maybe.Nothing _predefined._Nil _predefined._Nil)
Doc.parseAbstractTypeDoc = Doc.parseDocBlock (Doc.TypeDoc Data.Maybe.Nothing _predefined._Nil Data.Maybe.Nothing)
Doc.parseSynonymTypeDoc = Doc.parseDocBlock (Doc.TypeDoc Data.Maybe.Nothing _predefined._Nil (Data.Maybe.Just (Doc.SynonymDoc Data.Maybe.Nothing)))
Doc.parseADTypeDoc = Doc.parseDocBlock (Doc.TypeDoc Data.Maybe.Nothing _predefined._Nil (Data.Maybe.Just (Doc.ADTDoc _predefined._Nil)))
Doc.parseRecordTypeDoc = Doc.parseDocBlock (Doc.TypeDoc Data.Maybe.Nothing _predefined._Nil (Data.Maybe.Just (Doc.RecordDoc _predefined._Nil)))
Doc.anon_74 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_73 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_72 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_71 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Doc.anon_36 cs_0 c_1 = _predefined._Cons c_1 cs_0
Doc.anon_151 cs_0 g_1 x_2 = Doc.anon_36 cs_0 (g_1 x_2)
Doc.anon_152 !f_0 cs_1 g_2 x_3 = f_0 (Doc.anon_151 cs_1 g_2 x_3)
Doc.anon_153 !f_0 f_1 cs_2 g_3 x_4 = f_0 (Doc.anon_152 f_1 cs_2 g_3 x_4)
Doc.anon_154 !f_0 f_1 f_2 cs_3 g_4 x_5 = f_0 (Doc.anon_153 f_1 f_2 cs_3 g_4 x_5)
Doc.parseConstructorDoc s_0 !_x_1 = case _x_1 (Doc.TypeDoc d_1_0 vs_1_1 _x_1_2 -> case _x_1_2 (Data.Maybe.Just _x_2_0 -> case _x_2_0 (Doc.ADTDoc cs_3_0 -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Either.fmap_1) (Data.Tuple.appFst (Doc.anon_154 (Doc.TypeDoc d_1_0 vs_1_1) Data.Maybe.Just Doc.ADTDoc cs_3_0 Data.Maybe.Just)) (Doc.parseDocBlock (Doc.ConstructorDoc Data.Maybe.Nothing _predefined._Nil) s_0)) ) ) (_ -> Data.Either.Left (Doc.IllegalState "parseConstructorDoc"))
Doc.anon_37 d_0 vs_1 fs_2 ls_3 = Data.Either.Right (_Tuple2 (Doc.TypeDoc d_0 vs_1 (Data.Maybe.Just (Doc.RecordDoc (_predefined._Cons (Data.Maybe.Just (Doc.linesToString ls_3)) fs_2)))) _predefined._Nil)
Doc.parseFieldDoc s_0 !_x_1 = case _x_1 (Doc.TypeDoc d_1_0 vs_1_1 _x_1_2 -> case _x_1_2 (Data.Maybe.Just _x_2_0 -> case _x_2_0 (Doc.RecordDoc fs_3_0 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Data.Either.bind_4 (<{Control.Applicative.Applicative;}> <{Data.Either.<*>_2}> Data.Either.pure_3 (<{Data.Functor.Functor;}> Data.Either.fmap_1))) (Doc.prepareString s_0) (Doc.anon_37 d_1_0 vs_1_1 fs_3_0)) ) ) (_ -> Data.Either.Left (Doc.IllegalState "parseFieldDoc"))
Doc.toString_50 !_x_0 = case _x_0 (Doc.UnknownField f_1_0 -> <{StdString.+++_11}> "Doc warning: unknown field '" (<{StdString.+++_11}> f_1_0 "'")) (Doc.IllegalField f_1_0 -> <{StdString.+++_11}> "Doc warning: illegal field '" (<{StdString.+++_11}> f_1_0 "'")) (Doc.NoDescription -> "Doc warning: missing description") (Doc.UsedReturn -> "Doc warning: @return is deprecated, use @result") 
Doc.traceParseWarnings !_x_0 !x_1 = case _x_0 (_predefined._Nil -> x_1) (_predefined._Cons w_1_0 ws_1_1 -> case (StdDebug.trace_tn (<{StdOverloaded.toString;}> Doc.toString_50) w_1_0) (True -> Doc.traceParseWarnings ws_1_1 x_1) (False -> StdMisc.undef) ) 
Doc.toString_51 !_x_0 = case _x_0 (Doc.MissingAsterisk l_1_0 -> <{StdString.+++_11}> "Doc error: missing leading asterisk in '" (<{StdString.+++_11}> l_1_0 "'")) (Doc.IllegalState s_1_0 -> <{StdString.+++_11}> "Doc error: illegal state: " s_1_0) 
Doc.traceParseError !e_0 !x_1 = case (StdDebug.trace_tn (<{StdOverloaded.toString;}> Doc.toString_51) e_0) (True -> x_1) (False -> StdMisc.undef) 
<{Doc.TD;Documentation}> _x_0::B = _predefined._Nil
<{Doc.TD;ClassMemberDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;TypeRhsDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;ParamDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;VarDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;ResultDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;RecordFieldDoc}> _x_0::B = _predefined._Nil
<{Doc.TD;Description}> _x_0::B = _predefined._Nil
<{Doc.TD;ParseError}> _x_0::B = _predefined._Nil
<{Doc.TD;ParseWarning}> _x_0::B = _predefined._Nil
<{Doc.TD;DocField}> _x_0::B = _predefined._Nil
<{Doc.TD;FieldUpdateFunction}> _x_0::B = _predefined._Nil

:: Doc.Documentation = Doc.ModuleDoc a1 | Doc.FunctionDoc a1 a2 a3 a4 | Doc.ClassDoc a1 a2 a3 | Doc.TypeDoc a1 a2 a3 | Doc.ConstructorDoc a1 a2
:: Doc.ClassMemberDoc = Doc.ClassMemberDoc a1 a2 a3
:: Doc.TypeRhsDoc = Doc.ADTDoc a1 | Doc.RecordDoc a1 | Doc.SynonymDoc a1
:: Doc.ParseError = Doc.MissingAsterisk a1 | Doc.IllegalState a1
:: Doc.ParseWarning = Doc.UnknownField a1 | Doc.IllegalField a1 | Doc.NoDescription | Doc.UsedReturn
:: Doc.DocField = Doc.Param a1 | Doc.Var a1 | Doc.Result a1 | Doc.Representation a1

|| Converted Records
:: <{Doc.gEq_s;}> = {!Doc.gEq_s}

:: <{Doc.gEq_ss;}> = {!Doc.gEq_ss}

:: <{Doc.gEq_sss;}> = {!Doc.gEq_sss}

:: <{Doc.gEq_ssss;}> = {!Doc.gEq_ssss}

:: <{Doc.gEq_sssss;}> = {!Doc.gEq_sssss}

:: <{Doc.gEq_ssssss;}> = {!Doc.gEq_ssssss}

:: <{Doc.gEq_sssssss;}> = {!Doc.gEq_sssssss}

:: <{Doc.gEq_ssssssss;}> = {!Doc.gEq_ssssssss}

:: <{Doc.gEq_sssssssss;}> = {!Doc.gEq_sssssssss}

:: <{Doc.bimap_s;}> = {Doc.bimap_s}

:: <{Doc.bimap_ss;}> = {Doc.bimap_ss}

:: <{Doc.bimap_sss;}> = {Doc.bimap_sss}

