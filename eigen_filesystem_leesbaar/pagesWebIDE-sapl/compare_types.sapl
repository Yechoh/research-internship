|| ?module? compare_types


<{compare_types.=<_48}>::I !<{_v=<_0}> !<{_v=<_1}> !_x_2 !_x_3 = case _x_2 (_Tuple2 x1_1_0 y1_1_1 -> case _x_3 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = select <{_v=<_0}>::<{compare_types.=<;}> 0 x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> select <{_v=<_1}>::<{compare_types.=<;}> 0 y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_54}>::I !<{_v=<_0}> !<{_v=<_1}> !_x_2 !_x_3 = case _x_2 (_Tuple2 x1_1_0 y1_1_1 -> case _x_3 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = select <{_v=<_0}>::<{compare_types.=<;}> 0 x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_7}> <{_v=<_1}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_7}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> case _x_2 (_predefined._Cons y_2_0 ys_2_1 -> <{compare_types.=<_54}> <{_v=<_0}> <{_v=<_0}> (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1)) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> 0) (_ -> -1)) (_ -> 1)
<{compare_types.=<_8}>::I !bt1_0 !bt2_1 = case (compare_constructor.equal_constructor bt1_0 bt2_1) (True -> 0) (False -> case (compare_constructor.less_constructor bt1_0 bt2_1) (True -> -1) (False -> 1) ) 
<{compare_types.=<_5}>::I !s1_0 !s2_1 = case (<{StdString.==_2}> s1_0 s2_1) (True -> 0) (False -> case (<{StdString.<_3}> s1_0 s2_1) (True -> -1) (False -> 1) ) 
<{compare_types.=<_6}>::I !id1_0 !id2_1 = <{compare_types.=<_5}> (select id1_0::syntax._Ident 0) (select id2_1::syntax._Ident 0)
<{compare_types.=<_52}>::I !s1_0 !s2_1 = <{compare_types.=<_6}> (select s1_0::syntax._TypeSymbIdent 0) (select s2_1::syntax._TypeSymbIdent 0)
compare_types.compare_arguments_34::I !_x_0 _x_1 = case _x_0 (<{syntax.-->}> l1_1_0 r1_1_1 -> case _x_1 (<{syntax.-->}> l2_2_0 r2_2_1 -> let cmp_app_symb_3_0::I = <{compare_types.=<_53}> l1_1_0 l2_2_0 in case (<{StdInt.==_16}> cmp_app_symb_3_0 0) (True -> <{compare_types.=<_53}> r1_1_1 r2_2_1) (False -> cmp_app_symb_3_0) ) ) (<{syntax.:@:}> _x_1_0 args1_1_1 -> case _x_1 (<{syntax.:@:}> _x_2_0 args2_2_1 -> <{compare_types.=<_55}> args1_1_1 args2_2_1) ) (syntax.TB tb1_1_0 -> case _x_1 (syntax.TB tb2_2_0 -> <{compare_types.=<_8}> tb1_1_0 tb2_2_0) ) (_ -> 0)
<{compare_types.=<_53}>::I !_x_0 !_x_1 = case _x_0 (syntax._AType at_attribute_1_0 at_type_1_1_1 -> case _x_1 (syntax._AType at_attribute_2_0 at_type_2_2_1 -> compare_types.smallerOrEqual at_type_1_1_1 at_type_2_2_1) ) 
<{compare_types.=<_57}>::I !_x_0 !_x_1 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_53}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_55}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_55}>::I !_x_0 !_x_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> <{compare_types.=<_57}> (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> 0) (_ -> -1)) (_ -> 1)
compare_types.smallerOrEqual::I !_x_0 !_x_1 = case _x_0 (syntax.TA tc1_1_0 args1_1_1 -> case _x_1 (syntax.TA tc2_2_0 args2_2_1 -> let cmp_app_symb_3_0::I = <{compare_types.=<_52}> tc1_1_0 tc2_2_0 in case (<{StdInt.==_16}> cmp_app_symb_3_0 0) (True -> <{compare_types.=<_55}> args1_1_1 args2_2_1) (False -> cmp_app_symb_3_0) ) (syntax.TAS tc2_2_0 args2_2_1 _x_2_2 -> let cmp_app_symb_3_0::I = <{compare_types.=<_52}> tc1_1_0 tc2_2_0 in case (<{StdInt.==_16}> cmp_app_symb_3_0 0) (True -> <{compare_types.=<_55}> args1_1_1 args2_2_1) (False -> cmp_app_symb_3_0) ) ) (syntax.TAS tc1_1_0 args1_1_1 _x_1_2 -> case _x_1 (syntax.TA tc2_2_0 args2_2_1 -> let cmp_app_symb_3_0::I = <{compare_types.=<_52}> tc1_1_0 tc2_2_0 in case (<{StdInt.==_16}> cmp_app_symb_3_0 0) (True -> <{compare_types.=<_55}> args1_1_1 args2_2_1) (False -> cmp_app_symb_3_0) ) (syntax.TAS tc2_2_0 args2_2_1 _x_2_2 -> let cmp_app_symb_3_0::I = <{compare_types.=<_52}> tc1_1_0 tc2_2_0 in case (<{StdInt.==_16}> cmp_app_symb_3_0 0) (True -> <{compare_types.=<_55}> args1_1_1 args2_2_1) (False -> cmp_app_symb_3_0) ) ) (_ -> case (compare_constructor.equal_constructor _x_0 _x_1) (True -> compare_types.compare_arguments_34 _x_0 _x_1) (False -> case (compare_constructor.less_constructor _x_0 _x_1) (True -> -1) (False -> 1) ) )
<{compare_types.=<_56}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_53}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_7}> <{_v=<_0}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
compare_types.CAND !_x_0 cl2_1 = case _x_0 (_Tuple3 cv1_1_0 vlist1a_1_1 vlist1b_1_2 -> case (<{StdInt.==_16}> cv1_1_0 0) (True -> <{compare_types._c;321;11_68}> cl2_1 vlist1a_1_1 vlist1b_1_2) (False -> <{_Tuple3!6}> cv1_1_0 vlist1a_1_1 vlist1b_1_2) ) 
<{compare_types._c;321;11_68}> !cl2_0 vlist1a_1 vlist1b_2 = case cl2_0 (_Tuple3 cv2_1_0 vlist2a_1_1 vlist2b_1_2 -> case (<{StdInt.==_16}> cv2_1_0 0) (True -> <{_Tuple3!6}> 0 (<{StdList.++}> vlist1a_1 vlist2a_1_1) (<{StdList.++}> vlist1b_2 vlist2b_1_2)) (False -> cl2_0) ) 
compare_types.compare_arguments_37 !_x_0 _x_1 = case _x_0 (syntax.TB tb1_1_0 -> case _x_1 (syntax.TB tb2_2_0 -> _Tuple3 (<{compare_types.=<_8}> tb1_1_0 tb2_2_0) _predefined._Nil _predefined._Nil) ) (<{syntax.-->}> t1a_1_0 t1r_1_1 -> case _x_1 (<{syntax.-->}> t2a_2_0 t2r_2_1 -> compare_types.CAND (compare_types.compareInstanceTypes (select t1a_1_0::syntax._AType 1) (select t2a_2_0::syntax._AType 1)) (compare_types.compareInstanceTypes (select t1r_1_1::syntax._AType 1) (select t2r_2_1::syntax._AType 1))) ) (syntax.TArrow1 t1_1_0 -> case _x_1 (syntax.TArrow1 t2_2_0 -> compare_types.compareInstanceTypes (select t1_1_0::syntax._AType 1) (select t2_2_0::syntax._AType 1)) ) (syntax.TV tv1_1_0 -> case _x_1 (syntax.TV tv2_2_0 -> _Tuple3 0 (_predefined._Cons (select tv1_1_0::syntax._TypeVar 0) _predefined._Nil) (_predefined._Cons (select tv2_2_0::syntax._TypeVar 0) _predefined._Nil)) ) (_ -> _Tuple3 0 _predefined._Nil _predefined._Nil)
compare_types.compareArguments !_x_0 !_x_1 = case _x_0 (_predefined._Cons _x_1_0 types1_1_1 -> case _x_1_0 (syntax._AType at_attribute_2_0 type1_2_1 -> case _x_1 (_predefined._Cons _x_3_0 types2_3_1 -> case _x_3_0 (syntax._AType at_attribute_4_0 type2_4_1 -> compare_types.CAND (compare_types.compareInstanceTypes type1_2_1 type2_4_1) (compare_types.compareArguments types1_1_1 types2_3_1)) ) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> <{_Tuple3!6}> 0 _predefined._Nil _predefined._Nil) (_ -> <{_Tuple3!6}> -1 _predefined._Nil _predefined._Nil)) (_ -> case _x_1 (_predefined._Nil -> <{_Tuple3!6}> 1 _predefined._Nil _predefined._Nil) )
compare_types.compareInstanceTypes !_x_0 !_x_1 = case _x_0 (syntax.TA tc1_1_0 a1_1_1 -> case _x_1 (syntax.TA tc2_2_0 a2_2_1 -> compare_types.CAND (_Tuple3 (<{compare_types.=<_52}> tc1_1_0 tc2_2_0) _predefined._Nil _predefined._Nil) (compare_types.compareArguments a1_1_1 a2_2_1)) (syntax.TAS tc2_2_0 a2_2_1 _x_2_2 -> compare_types.CAND (_Tuple3 (<{compare_types.=<_52}> tc1_1_0 tc2_2_0) _predefined._Nil _predefined._Nil) (compare_types.compareArguments a1_1_1 a2_2_1)) ) (syntax.TAS tc1_1_0 a1_1_1 _x_1_2 -> case _x_1 (syntax.TA tc2_2_0 a2_2_1 -> compare_types.CAND (_Tuple3 (<{compare_types.=<_52}> tc1_1_0 tc2_2_0) _predefined._Nil _predefined._Nil) (compare_types.compareArguments a1_1_1 a2_2_1)) (syntax.TAS tc2_2_0 a2_2_1 _x_2_2 -> compare_types.CAND (_Tuple3 (<{compare_types.=<_52}> tc1_1_0 tc2_2_0) _predefined._Nil _predefined._Nil) (compare_types.compareArguments a1_1_1 a2_2_1)) ) (_ -> case (compare_constructor.equal_constructor _x_0 _x_1) (True -> compare_types.compare_arguments_37 _x_0 _x_1) (False -> case (compare_constructor.less_constructor _x_0 _x_1) (True -> _Tuple3 -1 _predefined._Nil _predefined._Nil) (False -> _Tuple3 1 _predefined._Nil _predefined._Nil) ) )
compare_types.compare_lists_35 !_x_0 !_x_1 = case _x_0 (_predefined._Cons type1_1_0 types1_1_1 -> case _x_1 (_predefined._Cons type2_2_0 types2_2_1 -> compare_types.CAND (compare_types.compareInstanceTypes type1_1_0 type2_2_0) (compare_types.compare_lists_35 types1_1_1 types2_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _Tuple3 0 _predefined._Nil _predefined._Nil) (_ -> _Tuple3 -1 _predefined._Nil _predefined._Nil)) (_ -> case _x_1 (_predefined._Nil -> _Tuple3 1 _predefined._Nil _predefined._Nil) )
compare_types.compareInstances::I !types1_0 !types2_1 = let _x_1_0::I = compare_types.compare_lists_35 types1_0 types2_1, cv_1_1 = select _x_1_0::_Tuple3 0 in case (<{StdInt.==_16}> cv_1_1 0) (True -> let vlist1_3_0::I = select _x_1_0::_Tuple3 1, l1_3_1 = StdList.length_47 (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{syntax.==_15}>)) vlist1_3_0), vlist2_3_2::I = select _x_1_0::_Tuple3 2, l2_3_3 = StdList.length_47 (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{syntax.==_15}>)) vlist2_3_2) in case (<{StdInt.==_16}> l1_3_1 l2_3_3) (True -> 0) (False -> case (<{StdInt.<_17}> l1_3_1 l2_3_3) (True -> -1) (False -> 1) ) ) (False -> cv_1_1) 
compare_types.compare_lists_36 !_x_0 !_x_1 fun_dep_vars_2::I = case _x_0 (_predefined._Cons type1_1_0 types1_1_1 -> case _x_1 (_predefined._Cons type2_2_0 types2_2_1 -> case (<{StdInt.==_16}> (StdInt.bitand fun_dep_vars_2 1) 0) (True -> compare_types.CAND (compare_types.compareInstanceTypes type1_1_0 type2_2_0) (compare_types.compare_lists_36 types1_1_1 types2_2_1 (<{StdInt.>>}> fun_dep_vars_2 1))) (False -> compare_types.compare_lists_36 types1_1_1 types2_2_1 (<{StdInt.>>}> fun_dep_vars_2 1)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _Tuple3 0 _predefined._Nil _predefined._Nil) (_ -> _Tuple3 -1 _predefined._Nil _predefined._Nil)) (_ -> case _x_1 (_predefined._Nil -> _Tuple3 1 _predefined._Nil _predefined._Nil) )
compare_types.compareFunDepInstances::I !types1_0 !types2_1 !fun_dep_vars_2::I = let _x_1_0::I = compare_types.compare_lists_36 types1_0 types2_1 fun_dep_vars_2, cv_1_1 = select _x_1_0::_Tuple3 0 in case (<{StdInt.==_16}> cv_1_1 0) (True -> let vlist1_3_0::I = select _x_1_0::_Tuple3 1, l1_3_1 = StdList.length_47 (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{syntax.==_15}>)) vlist1_3_0), vlist2_3_2::I = select _x_1_0::_Tuple3 2, l2_3_3 = StdList.length_47 (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{syntax.==_15}>)) vlist2_3_2) in case (<{StdInt.==_16}> l1_3_1 l2_3_3) (True -> 0) (False -> case (<{StdInt.<_17}> l1_3_1 l2_3_3) (True -> -1) (False -> 1) ) ) (False -> cv_1_1) 
<{compare_types.=<_3}>::I !i1_0::I !i2_1::I = case (<{StdInt.==_16}> i1_0 i2_1) (True -> 0) (False -> case (<{StdInt.<_17}> i1_0 i2_1) (True -> -1) (False -> 1) ) 
<{compare_types.=<_58}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_3}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> select <{_v=<_0}>::<{compare_types.=<;}> 0 y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_51}>::I !<{_v=<_0}> !g1_1 !g2_2 = <{compare_types.=<_58}> <{_v=<_0}> (_Tuple2 (select g1_1::syntax._Global 1) (select g1_1::syntax._Global 0)) (_Tuple2 (select g2_2::syntax._Global 1) (select g2_2::syntax._Global 0))
<{compare_types.=<_60}>::I !_x_0 !_x_1 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_3}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_3}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_59}>::I !g1_0 !g2_1 = <{compare_types.=<_60}> (_Tuple2 (select g1_0::syntax._Global 1) (select g1_0::syntax._Global 0)) (_Tuple2 (select g2_1::syntax._Global 1) (select g2_1::syntax._Global 0))
compare_types.compare_indexes_39::I !_x_0 !_x_1 = case _x_0 (syntax.SK_Function i1_1_0 -> case _x_1 (syntax.SK_Function i2_2_0 -> <{compare_types.=<_59}> i1_1_0 i2_2_0) ) (syntax.SK_LocalMacroFunction i1_1_0 -> case _x_1 (syntax.SK_LocalMacroFunction i2_2_0 -> <{compare_types.=<_3}> i1_1_0 i2_2_0) ) (syntax.SK_Constructor i1_1_0 -> case _x_1 (syntax.SK_Constructor i2_2_0 -> <{compare_types.=<_59}> i1_1_0 i2_2_0) ) (syntax.SK_OverloadedFunction i1_1_0 -> case _x_1 (syntax.SK_OverloadedFunction i2_2_0 -> <{compare_types.=<_59}> i1_1_0 i2_2_0) ) (syntax.SK_GeneratedFunction _x_1_0 i1_1_1 -> case _x_1 (syntax.SK_GeneratedFunction _x_2_0 i2_2_1 -> <{compare_types.=<_3}> i1_1_1 i2_2_1) ) (syntax.SK_LocalDclMacroFunction i1_1_0 -> case _x_1 (syntax.SK_LocalDclMacroFunction i2_2_0 -> <{compare_types.=<_59}> i1_1_0 i2_2_0) ) 
<{compare_types.=<_46}>::I !symb1_0 !symb2_1 = case (compare_constructor.equal_constructor symb1_0 symb2_1) (True -> compare_types.compare_indexes_39 symb1_0 symb2_1) (False -> case (compare_constructor.less_constructor symb1_0 symb2_1) (True -> -1) (False -> 1) ) 
<{compare_types.=<_10}>::I !_x_0 !_x_1 = case _x_0 (syntax._SymbIdent symb_ident_1_0 symb_kind1_1_1 -> case _x_1 (syntax._SymbIdent symb_ident_2_0 symb_kind2_2_1 -> <{compare_types.=<_46}> symb_kind1_1_1 symb_kind2_2_1) ) 
<{compare_types.=<_49}>::I !bv1_0 !bv2_1 = <{compare_types.=<_6}> (select bv1_0::syntax._BoundVar 0) (select bv2_1::syntax._BoundVar 0)
<{compare_types.=<_47}>::I !app1_0 !app2_1 = let cmp_1_0::I = <{compare_types.=<_10}> (select app1_0::syntax._App 0) (select app2_1::syntax._App 0) in case (<{StdInt.==_16}> cmp_1_0 0) (True -> <{compare_types.=<_61}> (select app1_0::syntax._App 1) (select app2_1::syntax._App 1)) (False -> cmp_1_0) 
<{compare_types.=<_65}>::I !_x_0 !_x_1 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_4}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_61}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_61}>::I !_x_0 !_x_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> <{compare_types.=<_65}> (_Tuple2 x_1_0 xs_1_1) (_Tuple2 y_2_0 ys_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> 0) (_ -> -1)) (_ -> 1)
<{compare_types.=<_64}>::I !_x_0 !_x_1 = case _x_0 (_Tuple2 x1_1_0 y1_1_1 -> case _x_1 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_4}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_61}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
compare_types.compare_arguments_40::I !_x_0 _x_1 = case _x_0 (syntax.App app1_1_0 -> case _x_1 (syntax.App app2_2_0 -> <{compare_types.=<_47}> app1_1_0 app2_2_0) ) (syntax.Var v1_1_0 -> case _x_1 (syntax.Var v2_2_0 -> <{compare_types.=<_49}> v1_1_0 v2_2_0) ) (<{syntax.@}> fun1_1_0 args1_1_1 -> case _x_1 (<{syntax.@}> fun2_2_0 args2_2_1 -> <{compare_types.=<_64}> (_Tuple2 fun1_1_0 args1_1_1) (_Tuple2 fun2_2_0 args2_2_1)) ) (syntax.EE -> case _x_1 (syntax.EE -> 0) ) (_ -> 1)
<{compare_types.=<_4}>::I !expr1_0 !expr2_1 = case (compare_constructor.equal_constructor expr1_0 expr2_1) (True -> compare_types.compare_arguments_40 expr1_0 expr2_1) (False -> case (compare_constructor.less_constructor expr1_0 expr2_1) (True -> -1) (False -> 1) ) 
<{compare_types.=<_62}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_4}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> <{compare_types.=<_7}> <{_v=<_0}> y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
<{compare_types.=<_63}>::I !<{_v=<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 x1_1_0 y1_1_1 -> case _x_2 (_Tuple2 x2_2_0 y2_2_1 -> let cmp_3_0::I = <{compare_types.=<_4}> x1_1_0 x2_2_0 in case (<{StdInt.==_16}> cmp_3_0 0) (True -> select <{_v=<_0}>::<{compare_types.=<;}> 0 y1_1_1 y2_2_1) (False -> cmp_3_0) ) ) 
compare_types.compare_arguments_41::I !_x_0 _x_1 = case _x_0 (syntax.TB tb1_1_0 -> case _x_1 (syntax.TB tb2_2_0 -> <{compare_types.=<_8}> tb1_1_0 tb2_2_0) ) (_ -> 0)
<{compare_types.=<_9}>::I !_x_0 !_x_1 = case _x_0 (syntax.TA tc1_1_0 _x_1_1 -> case _x_1 (syntax.TA tc2_2_0 _x_2_1 -> <{compare_types.=<_52}> tc1_1_0 tc2_2_0) (syntax.TAS tc2_2_0 _x_2_1 _x_2_2 -> <{compare_types.=<_52}> tc1_1_0 tc2_2_0) ) (syntax.TAS tc1_1_0 _x_1_1 _x_1_2 -> case _x_1 (syntax.TA tc2_2_0 _x_2_1 -> <{compare_types.=<_52}> tc1_1_0 tc2_2_0) (syntax.TAS tc2_2_0 _x_2_1 _x_2_2 -> <{compare_types.=<_52}> tc1_1_0 tc2_2_0) ) (_ -> case (compare_constructor.equal_constructor _x_0 _x_1) (True -> compare_types.compare_arguments_41 _x_0 _x_1) (False -> case (compare_constructor.less_constructor _x_0 _x_1) (True -> -1) (False -> 1) ) )
<{compare_types.==_11}>::B !bt1_0 !bt2_1 = compare_constructor.equal_constructor bt1_0 bt2_1
<{compare_types.==_12}>::B !varid1_0 !varid2_1 = <{Heap.==_10}> (select varid1_0::syntax._TypeVar 1) (select varid2_1::syntax._TypeVar 1)
<{compare_types.==_13}>::B !varid1_0 !varid2_1 = <{Heap.==_10}> (select varid1_0::syntax._AttributeVar 1) (select varid2_1::syntax._AttributeVar 1)
<{compare_types.==_14}>::B !ai1_0 !ai2_1 = case (<{compare_types.==_13}> (select ai1_0::syntax._AttrInequality 0) (select ai2_1::syntax._AttrInequality 0)) (True -> <{compare_types.==_13}> (select ai1_0::syntax._AttrInequality 1) (select ai2_1::syntax._AttrInequality 1)) (False -> False) 
<{compare_types.==_20}>::B !<{_v==_0}> !g1_1 !g2_2 = case (<{StdInt.==_16}> (select g1_1::syntax._Global 1) (select g2_2::syntax._Global 1)) (True -> select <{_v==_0}>::<{StdOverloaded.==;}> 0 (select g1_1::syntax._Global 0) (select g2_2::syntax._Global 0)) (False -> False) 
<{compare_types.==_66}>::B !g1_0 !g2_1 = case (<{StdInt.==_16}> (select g1_0::syntax._Global 1) (select g2_1::syntax._Global 1)) (True -> <{StdInt.==_16}> (select g1_0::syntax._Global 0) (select g2_1::syntax._Global 0)) (False -> False) 
<{compare_types.==_15}>::B !tsymb_id1_0 !tsymb_id2_1 = <{compare_types.==_66}> (select tsymb_id1_0::syntax._TypeSymbIdent 2) (select tsymb_id2_1::syntax._TypeSymbIdent 2)
<{compare_types.==_16}>::B !ds1_0 !ds2_1 = <{StdInt.==_16}> (select ds1_0::syntax._DefinedSymbol 2) (select ds2_1::syntax._DefinedSymbol 2)
<{compare_types.==_24}>::B !_x_0 !_x_1 = case _x_0 (syntax.CV tv1_1_0 -> case _x_1 (syntax.CV tv2_2_0 -> <{compare_types.==_12}> tv1_1_0 tv2_2_0) ) (syntax.TempCV tv1_1_0 -> case _x_1 (syntax.TempCV tv2_2_0 -> <{StdInt.==_16}> tv1_1_0 tv2_2_0) ) (syntax.TempQCV tv1_1_0 -> case _x_1 (syntax.TempQCV tv2_2_0 -> <{StdInt.==_16}> tv1_1_0 tv2_2_0) ) (syntax.TempQCDV tv1_1_0 -> case _x_1 (syntax.TempQCDV tv2_2_0 -> <{StdInt.==_16}> tv1_1_0 tv2_2_0) ) (_ -> False)
<{compare_types.==_45}>::B !atype1_0 !atype2_1 = <{compare_types.==_23}> (select atype1_0::syntax._AType 1) (select atype2_1::syntax._AType 1)
compare_types.equal_constructor_args_38::B !_x_0 _x_1 = case _x_0 (syntax.TV varid1_1_0 -> case _x_1 (syntax.TV varid2_2_0 -> <{compare_types.==_12}> varid1_1_0 varid2_2_0) ) (syntax.TempV varid1_1_0 -> case _x_1 (syntax.TempV varid2_2_0 -> <{StdInt.==_16}> varid1_1_0 varid2_2_0) ) (<{syntax.-->}> arg_type1_1_0 restype1_1_1 -> case _x_1 (<{syntax.-->}> arg_type2_2_0 restype2_2_1 -> case (<{compare_types.==_45}> arg_type1_1_0 arg_type2_2_0) (True -> <{compare_types.==_45}> restype1_1_1 restype2_2_1) (False -> False) ) ) (syntax.TB tb1_1_0 -> case _x_1 (syntax.TB tb2_2_0 -> <{compare_types.==_11}> tb1_1_0 tb2_2_0) ) (<{syntax.:@:}> type1_1_0 types1_1_1 -> case _x_1 (<{syntax.:@:}> type2_2_0 types2_2_1 -> case (<{compare_types.==_24}> type1_1_0 type2_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_45}>) types1_1_1 types2_2_1) (False -> False) ) ) (syntax.GTV varid1_1_0 -> case _x_1 (syntax.GTV varid2_2_0 -> <{compare_types.==_12}> varid1_1_0 varid2_2_0) ) (syntax.TempQV varid1_1_0 -> case _x_1 (syntax.TempQV varid2_2_0 -> <{StdInt.==_16}> varid1_1_0 varid2_2_0) ) (syntax.TempQDV varid1_1_0 -> case _x_1 (syntax.TempQDV varid2_2_0 -> <{StdInt.==_16}> varid1_1_0 varid2_2_0) ) (syntax.TLifted varid1_1_0 -> case _x_1 (syntax.TLifted varid2_2_0 -> <{compare_types.==_12}> varid1_1_0 varid2_2_0) ) (_ -> True)
<{compare_types.==_23}>::B !_x_0 !_x_1 = case _x_0 (syntax.TA tc1_1_0 types1_1_1 -> case _x_1 (syntax.TA tc2_2_0 types2_2_1 -> case (<{compare_types.==_15}> tc1_1_0 tc2_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_45}>) types1_1_1 types2_2_1) (False -> False) ) (syntax.TAS tc2_2_0 types2_2_1 _x_2_2 -> case (<{compare_types.==_15}> tc1_1_0 tc2_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_45}>) types1_1_1 types2_2_1) (False -> False) ) (_ -> False)) (syntax.TAS tc1_1_0 types1_1_1 _x_1_2 -> case _x_1 (syntax.TA tc2_2_0 types2_2_1 -> case (<{compare_types.==_15}> tc1_1_0 tc2_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_45}>) types1_1_1 types2_2_1) (False -> False) ) (syntax.TAS tc2_2_0 types2_2_1 _x_2_2 -> case (<{compare_types.==_15}> tc1_1_0 tc2_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_45}>) types1_1_1 types2_2_1) (False -> False) ) (_ -> False)) (_ -> case (compare_constructor.equal_constructor _x_0 _x_1) (True -> compare_types.equal_constructor_args_38 _x_0 _x_1) (False -> False) )
<{compare_types.==_67}>::B !g1_0 !g2_1 = case (<{StdInt.==_16}> (select g1_0::syntax._Global 1) (select g2_1::syntax._Global 1)) (True -> <{compare_types.==_16}> (select g1_0::syntax._Global 0) (select g2_1::syntax._Global 0)) (False -> False) 
<{compare_types.==_27}>::B !_x_0 !_x_1 = case _x_0 (syntax.TCClass x_1_0 -> case _x_1 (syntax.TCClass y_2_0 -> <{compare_types.==_67}> x_1_0 y_2_0) (syntax.TCGeneric _x_2_0 -> case _x_2_0 (syntax._GenericTypeContext gtc_generic_3_0 gtc_kind_3_1 gtc_class_3_2 gtc_generic_dict_3_3 -> <{compare_types.==_67}> x_1_0 gtc_class_3_2) ) ) (syntax.TCGeneric _x_1_0 -> case _x_1_0 (syntax._GenericTypeContext gtc_generic_2_0 gtc_kind_2_1 gtc_class_2_2 gtc_generic_dict_2_3 -> case _x_1 (syntax.TCClass y_3_0 -> <{compare_types.==_67}> gtc_class_2_2 y_3_0) (syntax.TCGeneric _x_3_0 -> case _x_3_0 (syntax._GenericTypeContext g2_4_0 k2_4_1 gtc_class_4_2 gtc_generic_dict_4_3 -> case (<{compare_types.==_67}> gtc_generic_2_0 g2_4_0) (True -> <{syntax.==_11}> gtc_kind_2_1 k2_4_1) (False -> False) ) ) ) ) 
<{compare_types.==_17}>::B !tc1_0 !tc2_1 = case (<{compare_types.==_27}> (select tc1_0::syntax._TypeContext 0) (select tc2_1::syntax._TypeContext 0)) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{compare_types.==_23}>) (select tc1_0::syntax._TypeContext 1) (select tc2_1::syntax._TypeContext 1)) (False -> False) 
<{compare_types.==_18}>::B !_x_0 !_x_1 = case _x_0 (syntax.BVI int1_1_0 -> case _x_1 (syntax.BVI int2_2_0 -> <{StdString.==_2}> int1_1_0 int2_2_0) (syntax.BVInt int2_2_0 -> <{StdString.==_2}> int1_1_0 (StdString.toString_5 int2_2_0)) ) (syntax.BVInt int1_1_0 -> case _x_1 (syntax.BVI int2_2_0 -> <{StdString.==_2}> (StdString.toString_5 int1_1_0) int2_2_0) (syntax.BVInt int2_2_0 -> <{StdInt.==_16}> int1_1_0 int2_2_0) ) (syntax.BVC char1_1_0 -> case _x_1 (syntax.BVC char2_2_0 -> <{StdString.==_2}> char1_1_0 char2_2_0) ) (syntax.BVB bool1_1_0 -> case _x_1 (syntax.BVB bool2_2_0 -> <{StdBool.==_3}> bool1_1_0 bool2_2_0) ) (syntax.BVR real1_1_0 -> case _x_1 (syntax.BVR real2_2_0 -> <{StdString.==_2}> real1_1_0 real2_2_0) ) (syntax.BVS string1_1_0 -> case _x_1 (syntax.BVS string2_2_0 -> <{StdString.==_2}> string1_1_0 string2_2_0) ) (_ -> False)
<{compare_types.==_19}>::B !fk1_0 !fk2_1 = compare_constructor.equal_constructor fk1_0 fk2_1
<{compare_types.==_22}>::B !a1_0 !a2_1 = compare_constructor.equal_constructor a1_0 a2_1
<{compare_types.==_21}>::B !_x_0 !_x_1 = case _x_0 (scanner.NoPrio -> case _x_1 (scanner.NoPrio -> True) ) (scanner.Prio assoc1_1_0 prio1_1_1 -> case _x_1 (scanner.Prio assoc2_2_0 prio2_2_1 -> case (<{compare_types.==_22}> assoc1_1_0 assoc2_2_0) (True -> <{StdInt.==_16}> prio1_1_1 prio2_2_1) (False -> False) ) ) (_ -> False)
<{compare_types.==_25}>::B !sc1_0 !sc2_1 = case (<{StdInt.==_16}> (select sc1_0::typeproperties._SignClassification 0) (select sc2_1::typeproperties._SignClassification 0)) (True -> <{StdInt.==_16}> (select sc1_0::typeproperties._SignClassification 1) (select sc2_1::typeproperties._SignClassification 1)) (False -> False) 
<{compare_types.==_26}>::B !_x_0 !_x_1 = case _x_0 (syntax.TypeConsSymb x_1_0 -> case _x_1 (syntax.TypeConsSymb y_2_0 -> <{compare_types.==_15}> x_1_0 y_2_0) ) (syntax.TypeConsBasic x_1_0 -> case _x_1 (syntax.TypeConsBasic y_2_0 -> <{compare_types.==_11}> x_1_0 y_2_0) ) (syntax.TypeConsArrow -> case _x_1 (syntax.TypeConsArrow -> True) ) (syntax.TypeConsVar x_1_0 -> case _x_1 (syntax.TypeConsVar y_2_0 -> <{compare_types.==_12}> x_1_0 y_2_0) ) (_ -> False)
<{compare_types.<_28}>::B !md1_0 !md2_1 = <{StdString.<_3}> (select (select md1_0::syntax._MemberDef 0)::syntax._Ident 0) (select (select md2_1::syntax._MemberDef 0)::syntax._Ident 0)
<{compare_types.=<_50}>::I !fv1_0 !fv2_1 = <{compare_types.=<_6}> (select fv1_0::syntax._FreeVar 1) (select fv2_1::syntax._FreeVar 1)
<{compare_types.TD;CompareValue}> _x_0::B = _predefined._Nil
<{compare_types.TD;=<;}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{compare_types.=<;}> = {!<{compare_types.=<}>}

