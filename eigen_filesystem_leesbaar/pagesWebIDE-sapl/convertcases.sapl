|| ?module? convertcases


convertcases.fold_st_220 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_220 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.foldr_219 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (convertcases.foldr_219 op_0 r_1 x_1_1)) 
convertcases.build_bind_63 !info_ptr_0 !_x_1 = case _x_1 (_Tuple3 lazy_binds_1_0 lazy_binds_types_1_1 var_heap_1_2 -> let _x_2_0 = Heap.readPtr info_ptr_0 var_heap_1_2, lei_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, lei_var_2_2 = select lei_2_1::convertcases._LetExpressionInfo 2, _x_2_3 = Heap.newPtr (syntax.VI_Labelled_Empty "build_bind") (select _x_2_0::_Tuple2 1), ptr_and_val_2_4 = _Tuple2 info_ptr_0 (syntax.VI_LetExpression (update lei_2_1::convertcases._LetExpressionInfo [2:update lei_var_2_2::syntax._FreeVar [2:select _x_2_3::_Tuple2 0],4:convertcases.LES_Untouched])) in <{_Tuple3!7}> (_predefined._Cons (syntax._LetBind lei_var_2_2 (select (select lei_2_1::convertcases._LetExpressionInfo 4)::_Tuple1 0) syntax.NoPos) lazy_binds_1_0) (_predefined._Cons (select lei_2_1::convertcases._LetExpressionInfo 5) lazy_binds_types_1_1) (Heap.writePtr (select ptr_and_val_2_4::_Tuple2 0) (select ptr_and_val_2_4::_Tuple2 1) (select _x_2_3::_Tuple2 1))) 
convertcases.foldr_309 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> convertcases.build_bind_63 a_1_0 (convertcases.foldr_309 r_0 x_1_1)) 
convertcases.buildLetExpr !let_expr_0 !ds_1 = case ds_1 (convertcases._DistributeState ds_lets_1_0 ds_var_heap_1_1 ds_expr_heap_1_2 -> case ds_lets_1_0 (_predefined._Nil -> <{_Tuple2!3}> let_expr_0 ds_1) (_ -> <{convertcases._c;793;7_428}> let_expr_0 ds_1 ds_var_heap_1_1 ds_lets_1_0)) 
<{convertcases._c;793;7_428}> !let_expr_0 !ds_1 !ds_var_heap_2 !ds_lets_3 = case let_expr_0 (syntax.Let inner_let_1_0 -> convertcases._f427_427 inner_let_1_0 ds_1 ds_var_heap_2 ds_lets_3 let_expr_0) (_ -> <{convertcases._c;793;7_426}> ds_1 ds_var_heap_2 ds_lets_3 let_expr_0)
convertcases._f427_427 !inner_let_0 !ds_1 !ds_var_heap_2 !ds_lets_3 let_expr_4 = case inner_let_0 (syntax._Let let_strict_binds_1_0 let_lazy_binds_1_1 let_expr_1_2 let_info_ptr_1_3 let_expr_position_1_4 -> let _x_2_0 = convertcases.foldr_309 (_Tuple3 _predefined._Nil _predefined._Nil ds_var_heap_2) ds_lets_3, ds_2_1 = update ds_1::convertcases._DistributeState [1:select _x_2_0::_Tuple3 2], _x_2_2 = Heap.readPtr let_info_ptr_1_3 (select ds_2_1::convertcases._DistributeState 2) in <{_Tuple2!3}> (syntax.Let (update inner_let_0::syntax._Let [1:select _x_2_0::_Tuple3 0])) (update ds_2_1::convertcases._DistributeState [2:Heap.writePtr let_info_ptr_1_3 (syntax.EI_LetType (<{StdList.++}> (select (select _x_2_2::_Tuple2 0)::_Tuple1 0) (select _x_2_0::_Tuple3 1))) (select _x_2_2::_Tuple2 1)])) (_ -> <{convertcases._c;793;7_426}> ds_1 ds_var_heap_2 ds_lets_3 let_expr_4)
<{convertcases._c;793;7_426}> !ds_0 !ds_var_heap_1 !ds_lets_2 !let_expr_3 = let _x_1_0 = convertcases.foldr_309 (_Tuple3 _predefined._Nil _predefined._Nil ds_var_heap_1) ds_lets_2, ds_1_1 = update ds_0::convertcases._DistributeState [1:select _x_1_0::_Tuple3 2], _x_1_2 = Heap.newPtr (syntax.EI_LetType (select _x_1_0::_Tuple3 1)) (select ds_1_1::convertcases._DistributeState 2) in <{_Tuple2!3}> (syntax.Let (syntax._Let _predefined._Nil (select _x_1_0::_Tuple3 0) let_expr_3 (select _x_1_2::_Tuple2 0) syntax.NoPos)) (update ds_1_1::convertcases._DistributeState [2:select _x_1_2::_Tuple2 1])
convertcases.foldl_236 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.foldl_236 op_0 (op_0 r_1 a_1_0) x_1_1) 
convertcases.foldl_235 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.foldl_235 op_0 (op_0 r_1 a_1_0) x_1_1) 
convertcases.map_st_234 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_234 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.fold_st_233 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_233 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.store_binding_78 !depth_0::I !_x_1 !var_heap_2 = case _x_1 (syntax._LetBind _x_1_0 lb_src_1_1 lb_position_1_2 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_LetVar (convertcases._LetVarInfo 0 depth_0 True fv_ident_2_1 lb_src_1_1 _predefined._Nil)) in Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_2) ) 
convertcases.remove_variable_77 !_x_0 let_bind_1 = case _x_0 (_Tuple2 _x_1_0 var_heap_1_1 -> case _x_1_0 (_predefined._Nil -> _Tuple2 _predefined._Nil var_heap_1_1) (_predefined._Cons var_ptr_2_0 var_ptrs_2_1 -> case let_bind_1 (syntax._LetBind lb_dst_3_0 lb_src_3_1 lb_position_3_2 -> case lb_dst_3_0 (syntax._FreeVar fv_def_level_4_0 fv_ident_4_1 fv_info_ptr_4_2 fv_count_4_3 -> case (<{Heap.==_10}> fv_info_ptr_4_2 var_ptr_2_0) (True -> _Tuple2 var_ptrs_2_1 (select (Heap.readPtr fv_info_ptr_4_2 var_heap_1_1)::_Tuple2 1)) (False -> let _x_6_0 = convertcases.remove_variable_77 (_Tuple2 var_ptrs_2_1 var_heap_1_1) let_bind_1 in _Tuple2 (_predefined._Cons var_ptr_2_0 (select _x_6_0::_Tuple2 0)) (select _x_6_0::_Tuple2 1)) ) ) ) ) 
convertcases.get_ref_count_79 !_x_0 var_heap_1 = case _x_0 (syntax._LetBind _x_1_0 lb_src_1_1 lb_position_1_2 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_1 in _Tuple2 (select (select (select _x_3_0::_Tuple2 0)::_Tuple1 0)::convertcases._LetVarInfo 0) (select _x_3_0::_Tuple2 1)) ) 
convertcases.fold_st_229 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_229 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_228 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_228 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.map_st_227 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_227 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_226 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_226 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_225 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_225 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_224 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_224 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.fold_st_223 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_223 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_222 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_222 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.map_st_221 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_221 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.get_ref_count_61 var_ptr_0 var_heap_1 = let _x_1_0 = Heap.readPtr var_ptr_0 var_heap_1 in _Tuple2 (convertcases._CountedVariable var_ptr_0 (select (select (select _x_1_0::_Tuple2 0)::_Tuple1 0)::convertcases._LetVarInfo 0)) (select _x_1_0::_Tuple2 1)
convertcases.select_unused_free_variable_60 !depth_0::I !var_1 !_x_2 = case var_1 (convertcases._CountedVariable var_ptr_1_0 var_count_1_1 -> case _x_2 (_Tuple2 collected_vars_2_0 var_heap_2_1 -> let _x_3_0::I = Heap.readPtr var_ptr_1_0 var_heap_2_1, info_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, lvi_count_3_2 = select info_3_1::convertcases._LetVarInfo 0 in case (case (<{StdInt.==_16}> (select info_3_1::convertcases._LetVarInfo 1) depth_0) (True -> <{StdInt.<_17}> 0 lvi_count_3_2) (False -> False) ) (True -> let ptr_and_val_5_0 = _Tuple2 var_ptr_1_0 (syntax.VI_LetVar (update info_3_1::convertcases._LetVarInfo [0:<{convertcases._c;51;16_429}> (<{StdInt.<_17}> lvi_count_3_2 var_count_1_1) var_count_1_1 lvi_count_3_2])) in _Tuple2 collected_vars_2_0 (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) (select _x_3_0::_Tuple2 1))) (False -> _Tuple2 (_predefined._Cons var_1 collected_vars_2_0) (select _x_3_0::_Tuple2 1)) ) ) 
<{convertcases._c;51;16_429}>::I !_x_0::B var_count_1::I lvi_count_2::I = case _x_0 (True -> var_count_1) (_ -> lvi_count_2)
convertcases.collect_free_variable_62 !depth_0::I !var_ptr_1 !_x_2 = case _x_2 (_Tuple2 collected_vars_1_0 var_heap_1_1 -> let _x_2_0 = Heap.readPtr var_ptr_1 var_heap_1_1, lvi_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0 in case (<{StdInt.==_16}> depth_0 (select lvi_2_1::convertcases._LetVarInfo 1)) (True -> let lvi_count_4_0 = select lvi_2_1::convertcases._LetVarInfo 0, var_heap_4_1::I = select _x_2_0::_Tuple2 1 in <{convertcases._c;362;15_430}> (select lvi_2_1::convertcases._LetVarInfo 5) var_ptr_1 lvi_2_1 lvi_count_4_0 collected_vars_1_0 var_heap_4_1) (False -> _Tuple2 (_predefined._Cons (convertcases._CountedVariable var_ptr_1 (select lvi_2_1::convertcases._LetVarInfo 0)) collected_vars_1_0) (select _x_2_0::_Tuple2 1)) ) 
<{convertcases._c;362;15_430}> !_x_0 var_ptr_1 lvi_2 lvi_count_3::I collected_vars_4 var_heap_5 = case _x_0 (_predefined._Cons _x_1_0 lvi_previous_1_1 -> case _x_1_0 (convertcases._PreviousLetVarInfo plvi_count_2_0 plvi_depth_2_1 plvi_new_2_2 -> let ptr_and_val_3_0 = _Tuple2 var_ptr_1 (syntax.VI_LetVar (update lvi_2::convertcases._LetVarInfo [0:plvi_count_2_0,1:plvi_depth_2_1,2:plvi_new_2_2,5:lvi_previous_1_1])) in _Tuple2 (_predefined._Cons (convertcases._CountedVariable var_ptr_1 lvi_count_3) collected_vars_4) (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_5)) ) (_predefined._Nil -> _Tuple2 collected_vars_4 var_heap_5) 
convertcases.map_st_310 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.get_ref_count_61 x_1_0 s_1, _x_2_2 = convertcases.map_st_310 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.fold_st_311 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_311 depth_0 x_1_1 (convertcases.select_unused_free_variable_60 depth_0 a_1_0 st_2)) 
convertcases.fold_st_312 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_312 depth_0 x_1_1 (convertcases.collect_free_variable_62 depth_0 a_1_0 st_2)) 
convertcases.weightedRefCountInPatternExpr !_vweightedRefCount_0 !rci_1 pattern_expr_2 !_x_3 = case rci_1 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_3 (_Tuple4 previous_free_vars_2_0 collected_imports_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_1 pattern_expr_2 (convertcases._RCState _predefined._Nil collected_imports_2_1 var_heap_2_2 expr_heap_2_3), rcs_free_vars_3_1 = select _x_3_0::convertcases._RCState 0, _x_3_2 = convertcases.map_st_310 rcs_free_vars_3_1 (select _x_3_0::convertcases._RCState 2), _x_3_3 = convertcases.fold_st_311 rci_depth_1_1 previous_free_vars_2_0 (_Tuple2 _predefined._Nil (select _x_3_2::_Tuple2 1)), _x_3_4 = convertcases.fold_st_312 rci_depth_1_1 rcs_free_vars_3_1 (_Tuple2 (select _x_3_3::_Tuple2 0) (select _x_3_3::_Tuple2 1)) in _Tuple2 (select _x_3_2::_Tuple2 0) (_Tuple4 (select _x_3_4::_Tuple2 0) (select _x_3_0::convertcases._RCState 1) (select _x_3_4::_Tuple2 1) (select _x_3_0::convertcases._RCState 3))) ) 
convertcases.checkImportedSymbol symb_kind_0 !symb_type_ptr_1 !_x_2 = case _x_2 (_Tuple2 collected_imports_1_0 var_heap_1_1 -> let _x_2_0 = Heap.readPtr symb_type_ptr_1 var_heap_1_1, var_heap_2_1 = select _x_2_0::_Tuple2 1 in <{convertcases._c;158;7_431}> (select _x_2_0::_Tuple2 0) collected_imports_1_0 var_heap_2_1 symb_type_ptr_1 symb_kind_0) 
<{convertcases._c;158;7_431}> !_x_0 collected_imports_1 var_heap_2 symb_type_ptr_3 symb_kind_4 = case _x_0 (syntax.VI_Used -> _Tuple2 collected_imports_1 var_heap_2) (_ -> let ptr_and_val_1_0 = _Tuple2 symb_type_ptr_3 syntax.VI_Used in _Tuple2 (_predefined._Cons symb_kind_4 collected_imports_1) (Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_2))
convertcases.check_symbol_55 !_x_0 !_x_1 collected_imports_2 var_heap_3 = case _x_0 (convertcases._CheckImportedInfo cii_dcl_functions_1_0 cii_common_defs_1_1 cii_main_dcl_module_n_1_2 -> case _x_1 (syntax._Global _x_2_0 glob_module_2_1 -> case _x_2_0 (syntax._DefinedSymbol ds_ident_3_0 ds_arity_3_1 ds_index_3_2 -> case (StdBool.not (<{StdInt.==_16}> glob_module_2_1 cii_main_dcl_module_n_1_2)) (True -> convertcases.checkImportedSymbol (syntax.SK_Constructor (syntax._Global ds_index_3_2 glob_module_2_1)) (select (convertcases.select_280 (select (convertcases.select_272 cii_common_defs_1_1 glob_module_2_1)::syntax._CommonDefs 1) ds_index_3_2)::syntax._ConsDef 6) (_Tuple2 collected_imports_2 var_heap_3)) (False -> _Tuple2 collected_imports_2 var_heap_3) ) ) ) 
convertcases.weighted_ref_count_in_default_56 !_vweightedRefCount_0 rci_1 !_x_2 info_3 = case _x_2 (general.Yes expr_1_0 -> convertcases.weightedRefCountInPatternExpr _vweightedRefCount_0 rci_1 expr_1_0 info_3) (general.No -> _Tuple2 _predefined._Nil info_3) 
convertcases.weightedRefCountOfVariable !depth_0::I var_info_ptr_1 !lvi_2 ref_count_3::I new_vars_4 = case lvi_2 (convertcases._LetVarInfo lvi_count_1_0 lvi_depth_1_1 lvi_new_1_2 lvi_var_1_3 lvi_expression_1_4 lvi_previous_1_5 -> case (<{StdInt.<_17}> lvi_depth_1_1 depth_0) (True -> _Tuple3 True (update lvi_2::convertcases._LetVarInfo [0:ref_count_3,1:depth_0,2:True,5:_predefined._Cons (convertcases._PreviousLetVarInfo lvi_count_1_0 lvi_depth_1_1 lvi_new_1_2) lvi_previous_1_5]) (_predefined._Cons var_info_ptr_1 new_vars_4)) (False -> case (<{StdInt.==_16}> lvi_count_1_0 0) (True -> _Tuple3 True (update lvi_2::convertcases._LetVarInfo [0:ref_count_3]) (_predefined._Cons var_info_ptr_1 new_vars_4)) (False -> _Tuple3 lvi_new_1_2 (update lvi_2::convertcases._LetVarInfo [0:<{StdInt.+_6}> lvi_count_1_0 ref_count_3]) new_vars_4) ) ) 
convertcases.addPatternVariable depth_0::I !_x_1 !_x_2 = case _x_1 (convertcases._CountedVariable var_info_ptr_1_0 ref_count_1_1 -> case _x_2 (_Tuple2 free_vars_2_0 var_heap_2_1 -> let _x_3_0 = Heap.readPtr var_info_ptr_1_0 var_heap_2_1, var_heap_3_1 = select _x_3_0::_Tuple2 1 in <{convertcases._c;271;7_432}> (select _x_3_0::_Tuple2 0) var_info_ptr_1_0 depth_0 ref_count_1_1 free_vars_2_0 var_heap_3_1) ) 
<{convertcases._c;271;7_432}> !_x_0 var_info_ptr_1 depth_2::I ref_count_3::I free_vars_4 var_heap_5 = case _x_0 (syntax.VI_LetVar lvi_1_0 -> let _x_2_0 = convertcases.weightedRefCountOfVariable depth_2 var_info_ptr_1 lvi_1_0 ref_count_3 free_vars_4, ptr_and_val_2_1 = _Tuple2 var_info_ptr_1 (syntax.VI_LetVar (select _x_2_0::_Tuple3 1)) in _Tuple2 (select _x_2_0::_Tuple3 2) (Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) var_heap_5)) (_ -> _Tuple2 free_vars_4 var_heap_5)
convertcases.checkImportOfDclFunction !_x_0 !mod_index_1::I fun_index_2::I !rs_3 = case _x_0 (convertcases._CheckImportedInfo cii_dcl_functions_1_0 cii_common_defs_1_1 cii_main_dcl_module_n_1_2 -> case rs_3 (convertcases._RCState rcs_free_vars_2_0 rcs_imports_2_1 rcs_var_heap_2_2 rcs_expr_heap_2_3 -> case (StdBool.not (<{StdInt.==_16}> mod_index_1 cii_main_dcl_module_n_1_2)) (True -> let _x_4_0 = convertcases.checkImportedSymbol (syntax.SK_Function (syntax._Global fun_index_2 mod_index_1)) (select (convertcases.select_288 (_SystemArray.select_43 cii_dcl_functions_1_0 mod_index_1) fun_index_2)::syntax._FunType 6) (_Tuple2 rcs_imports_2_1 rcs_var_heap_2_2) in update rs_3::convertcases._RCState [1:select _x_4_0::_Tuple2 0,2:select _x_4_0::_Tuple2 1]) (False -> rs_3) ) ) 
convertcases.checkRecordSelector !_x_0 !_x_1 !rs_2 = case _x_0 (convertcases._CheckImportedInfo cii_dcl_functions_1_0 cii_common_defs_1_1 cii_main_dcl_module_n_1_2 -> case _x_1 (syntax._Global _x_2_0 glob_module_2_1 -> case _x_2_0 (syntax._DefinedSymbol ds_ident_3_0 ds_arity_3_1 ds_index_3_2 -> case rs_2 (convertcases._RCState rcs_free_vars_4_0 rcs_imports_4_1 rcs_var_heap_4_2 rcs_expr_heap_4_3 -> case (StdBool.not (<{StdInt.==_16}> glob_module_2_1 cii_main_dcl_module_n_1_2)) (True -> let _x_6_0 = convertcases.select_272 cii_common_defs_1_1 glob_module_2_1, cons_index_6_1::I = select (select (select (select (convertcases.select_304 (select _x_6_0::syntax._CommonDefs 0) (select (convertcases.select_296 (select _x_6_0::syntax._CommonDefs 2) ds_index_3_2)::syntax._SelectorDef 5))::syntax._TypeDef 5)::_Tuple1 0)::syntax._RecordType 0)::syntax._DefinedSymbol 2, _x_6_2 = convertcases.checkImportedSymbol (syntax.SK_Constructor (syntax._Global cons_index_6_1 glob_module_2_1)) (select (convertcases.select_280 (select _x_6_0::syntax._CommonDefs 1) cons_index_6_1)::syntax._ConsDef 6) (_Tuple2 rcs_imports_4_1 rcs_var_heap_4_2) in update rs_2::convertcases._RCState [1:select _x_6_2::_Tuple2 0,2:select _x_6_2::_Tuple2 1]) (False -> rs_2) ) ) ) ) 
convertcases.foldr_237 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (convertcases.foldr_237 op_0 r_1 x_1_1)) 
convertcases.weightedRefCount_130 !_vweightedRefCount_0 rci_1 !l_2 !rs_3 = convertcases.foldr_237 (select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_1) rs_3 l_2
convertcases.check_import_80 cii_0 !_x_1 !rs_2 = case _x_1 (syntax._SymbIdent symb_ident_1_0 _x_1_1 -> case _x_1_1 (syntax.SK_Function _x_2_0 -> case _x_2_0 (syntax._Global glob_object_3_0 glob_module_3_1 -> case rs_2 (convertcases._RCState rcs_free_vars_4_0 rcs_imports_4_1 rcs_var_heap_4_2 rcs_expr_heap_4_3 -> convertcases.checkImportOfDclFunction cii_0 glob_module_3_1 glob_object_3_0 rs_2) ) ) (syntax.SK_Constructor _x_2_0 -> case cii_0 (convertcases._CheckImportedInfo cii_dcl_functions_3_0 cii_common_defs_3_1 cii_main_dcl_module_n_3_2 -> case _x_2_0 (syntax._Global glob_object_4_0 glob_module_4_1 -> case rs_2 (convertcases._RCState rcs_free_vars_5_0 rcs_imports_5_1 rcs_var_heap_5_2 rcs_expr_heap_5_3 -> case (StdBool.not (<{StdInt.==_16}> glob_module_4_1 cii_main_dcl_module_n_3_2)) (True -> let _x_7_0 = convertcases.checkImportedSymbol _x_1_1 (select (convertcases.select_280 (select (convertcases.select_272 cii_common_defs_3_1 glob_module_4_1)::syntax._CommonDefs 1) glob_object_4_0)::syntax._ConsDef 6) (_Tuple2 rcs_imports_5_1 rcs_var_heap_5_2) in update rs_2::convertcases._RCState [1:select _x_7_0::_Tuple2 0,2:select _x_7_0::_Tuple2 1]) (False -> rs_2) ) ) ) ) ) (_ -> rs_2)
convertcases.weightedRefCount_129 rci_0 !type_code_expr_1 !rs_2 = rs_2
convertcases.weightedRefCount_131 !_vweightedRefCount_0 !_vweightedRefCount_1 rci_2 !_x_3 !rs_4 = case _x_3 (_Tuple2 x_1_0 y_1_1 -> select _vweightedRefCount_1::<{convertcases.weightedRefCount;}> 0 rci_2 y_1_1 (select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_2 x_1_0 rs_4)) 
convertcases.weightedRefCount_133 !_vweightedRefCount_0 rci_1 !bind_2 !rs_3 = case bind_2 (general._Bind bind_src_1_0 bind_dst_1_1 -> select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_1 bind_src_1_0 rs_3) 
convertcases.fold_st_331 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_331 depth_0 x_1_1 (convertcases.addPatternVariable depth_0 a_1_0 st_2)) 
convertcases.fold_st_330 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_330 depth_0 x_1_1 (convertcases.addPatternVariable depth_0 a_1_0 st_2)) 
convertcases.fold_st_316 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_316 depth_0 x_1_1 (convertcases.store_binding_78 depth_0 a_1_0 st_2)) 
convertcases.map_st_319 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.get_ref_count_79 x_1_0 s_1, _x_2_2 = convertcases.map_st_319 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.foldl_320 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> convertcases.foldl_320 (convertcases.remove_variable_77 r_0 a_1_0) x_1_1) 
convertcases.foldl_321 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> convertcases.foldl_321 (convertcases.remove_variable_77 r_0 a_1_0) x_1_1) 
convertcases.weightedRefCount_125 !rci_0 !_x_1 !rs_2 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_1 (syntax._BoundVar var_ident_2_0 var_info_ptr_2_1 var_expr_ptr_2_2 -> case rs_2 (convertcases._RCState rcs_free_vars_3_0 rcs_imports_3_1 rcs_var_heap_3_2 rcs_expr_heap_3_3 -> let _x_4_0 = Heap.readPtr var_info_ptr_2_1 rcs_var_heap_3_2, rcs_var_heap_4_1 = select _x_4_0::_Tuple2 1 in <{convertcases._c;180;11_434}> (select _x_4_0::_Tuple2 0) rci_depth_1_1 var_info_ptr_2_1 rs_2 rcs_var_heap_4_1 rci_0) ) ) 
convertcases.weightedRefCount_128 !rci_0 !_x_1 !rs_2 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_1 (syntax._App app_symb_2_0 app_args_2_1 app_info_ptr_2_2 -> convertcases.check_import_80 rci_imported_1_0 app_symb_2_0 (convertcases.weightedRefCount_313 rci_0 app_args_2_1 rs_2)) ) 
convertcases.foldr_314 rci_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.weightedRefCount_126 rci_0 a_1_0 (convertcases.foldr_314 rci_0 r_1 x_1_1)) 
convertcases.weightedRefCount_313 rci_0 !l_1 !rs_2 = convertcases.foldr_314 rci_0 rs_2 l_1
convertcases.weightedRefCount_336 rci_0 !_x_1 !rs_2 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> convertcases.weightedRefCount_313 rci_0 y_1_1 (convertcases.weightedRefCount_126 rci_0 x_1_0 rs_2)) 
convertcases.weightedRefCount_132 rci_0 !_x_1 !rs_2 = case _x_1 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> convertcases.weightedRefCount_126 rci_0 lb_src_1_1 rs_2) 
convertcases.foldr_318 rci_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.weightedRefCount_132 rci_0 a_1_0 (convertcases.foldr_318 rci_0 r_1 x_1_1)) 
convertcases.weightedRefCount_317 rci_0 !l_1 !rs_2 = convertcases.foldr_318 rci_0 rs_2 l_1
convertcases.weighted_ref_count_of_decons_expr_59 rci_0 !_x_1 !rs_2 = case _x_1 (syntax.OverloadedListPatterns _x_1_0 decons_exp_1_1 _x_1_2 -> convertcases.weightedRefCount_126 rci_0 decons_exp_1_1 rs_2) (_ -> rs_2)
convertcases.weighted_ref_count_in_default_328 rci_0 !_x_1 info_2 = case _x_1 (general.Yes expr_1_0 -> convertcases.weightedRefCountInPatternExpr_329 rci_0 expr_1_0 info_2) (general.No -> _Tuple2 _predefined._Nil info_2) 
convertcases.map_st_332 rci_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.weighted_ref_count_in_algebraic_pattern_58 rci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_332 rci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.anon_53 rci_0 !_x_1 = case _x_1 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> convertcases.weightedRefCountInPatternExpr_329 rci_0 bp_expr_1_1) 
convertcases.map_st_333 rci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.anon_53 rci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_333 rci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.weighted_ref_count_in_algebraic_pattern_58 !rci_0 !_x_1 wrcs_state_2 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_1 (syntax._AlgebraicPattern ap_symbol_2_0 ap_vars_2_1 ap_expr_2_2 ap_position_2_3 -> let _x_3_0 = convertcases.weightedRefCountInPatternExpr_329 rci_0 ap_expr_2_2 wrcs_state_2, _x_3_1 = select _x_3_0::_Tuple2 1, _x_3_2 = convertcases.check_symbol_55 rci_imported_1_0 ap_symbol_2_0 (select _x_3_1::_Tuple4 1) (select _x_3_1::_Tuple4 2) in _Tuple2 (select _x_3_0::_Tuple2 0) (_Tuple4 (select _x_3_1::_Tuple4 0) (select _x_3_2::_Tuple2 0) (select _x_3_2::_Tuple2 1) (select _x_3_1::_Tuple4 3))) ) 
convertcases.map_st_334 rci_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.weighted_ref_count_in_algebraic_pattern_58 rci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_334 rci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.weightedRefCountInPatternExpr_329 !rci_0 pattern_expr_1 !_x_2 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_2 (_Tuple4 previous_free_vars_2_0 collected_imports_2_1 var_heap_2_2 expr_heap_2_3 -> let _x_3_0 = convertcases.weightedRefCount_126 rci_0 pattern_expr_1 (convertcases._RCState _predefined._Nil collected_imports_2_1 var_heap_2_2 expr_heap_2_3), rcs_free_vars_3_1 = select _x_3_0::convertcases._RCState 0, _x_3_2 = convertcases.map_st_310 rcs_free_vars_3_1 (select _x_3_0::convertcases._RCState 2), _x_3_3 = convertcases.fold_st_311 rci_depth_1_1 previous_free_vars_2_0 (_Tuple2 _predefined._Nil (select _x_3_2::_Tuple2 1)), _x_3_4 = convertcases.fold_st_312 rci_depth_1_1 rcs_free_vars_3_1 (_Tuple2 (select _x_3_3::_Tuple2 0) (select _x_3_3::_Tuple2 1)) in _Tuple2 (select _x_3_2::_Tuple2 0) (_Tuple4 (select _x_3_4::_Tuple2 0) (select _x_3_0::convertcases._RCState 1) (select _x_3_4::_Tuple2 1) (select _x_3_0::convertcases._RCState 3))) ) 
convertcases.anon_54 rci_0 !_x_1 = case _x_1 (syntax._DynamicPattern dp_var_1_0 dp_type_1_1 dp_type_code_1_2 dp_rhs_1_3 dp_position_1_4 -> convertcases.weightedRefCountInPatternExpr_329 rci_0 dp_rhs_1_3) 
convertcases.map_st_335 rci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.anon_54 rci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_335 rci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.weighted_ref_count_in_case_patterns_57 !rci_0 !_x_1 collected_imports_2 var_heap_3 expr_heap_4 = case _x_1 (syntax.AlgebraicPatterns type_1_0 patterns_1_1 -> convertcases.map_st_332 rci_0 patterns_1_1 (_Tuple4 _predefined._Nil collected_imports_2 var_heap_3 expr_heap_4)) (syntax.BasicPatterns type_1_0 patterns_1_1 -> convertcases.map_st_333 rci_0 patterns_1_1 (_Tuple4 _predefined._Nil collected_imports_2 var_heap_3 expr_heap_4)) (syntax.OverloadedListPatterns type_1_0 _x_1_1 patterns_1_2 -> convertcases.map_st_334 rci_0 patterns_1_2 (_Tuple4 _predefined._Nil collected_imports_2 var_heap_3 expr_heap_4)) (syntax.DynamicPatterns patterns_1_0 -> convertcases.map_st_335 rci_0 patterns_1_0 (_Tuple4 _predefined._Nil collected_imports_2 var_heap_3 expr_heap_4)) 
convertcases.weightedRefCountOfCase !rci_0 !this_case_1 !_x_2 !rs_3 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case this_case_1 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> case _x_2 (syntax.EI_CaseType case_type_3_0 -> case rs_3 (convertcases._RCState rcs_free_vars_4_0 rcs_imports_4_1 rcs_var_heap_4_2 rcs_expr_heap_4_3 -> let _x_5_0 = convertcases.weighted_ref_count_in_case_patterns_57 (update rci_0::convertcases._RCInfo [1:<{StdInt.+_6}> rci_depth_1_1 1]) case_guards_2_1 rcs_imports_4_1 rcs_var_heap_4_2 rcs_expr_heap_4_3, _x_5_1 = convertcases.weighted_ref_count_in_default_328 (update rci_0::convertcases._RCInfo [1:<{StdInt.+_6}> rci_depth_1_1 1]) case_default_2_2 (select _x_5_0::_Tuple2 1), _x_5_2 = select _x_5_1::_Tuple2 1, rs_5_3 = convertcases.weightedRefCount_126 rci_0 case_expr_2_0 (convertcases.weighted_ref_count_of_decons_expr_59 rci_0 case_guards_2_1 (update rs_3::convertcases._RCState [1:select _x_5_2::_Tuple4 1,2:select _x_5_2::_Tuple4 2,3:select _x_5_2::_Tuple4 3])), all_vars_5_4 = select _x_5_2::_Tuple4 0, _x_5_5 = convertcases.fold_st_330 rci_depth_1_1 all_vars_5_4 (_Tuple2 (select rs_5_3::convertcases._RCState 0) (select rs_5_3::convertcases._RCState 2)), ptr_and_val_5_6 = _Tuple2 case_info_ptr_2_4 (syntax.EI_CaseTypeAndRefCounts case_type_3_0 (convertcases._RefCountsInCase all_vars_5_4 (select _x_5_1::_Tuple2 0) (select _x_5_0::_Tuple2 0))) in update rs_5_3::convertcases._RCState [0:select _x_5_5::_Tuple2 0,2:select _x_5_5::_Tuple2 1,3:Heap.writePtr (select ptr_and_val_5_6::_Tuple2 0) (select ptr_and_val_5_6::_Tuple2 1) (select rs_5_3::convertcases._RCState 3)]) ) (syntax.EI_CaseTypeAndRefCounts case_type_3_0 _x_3_1 -> case _x_3_1 (convertcases._RefCountsInCase rcc_all_variables_4_0 rcc_default_variables_4_1 rcc_pattern_variables_4_2 -> case rs_3 (convertcases._RCState rcs_free_vars_5_0 rcs_imports_5_1 rcs_var_heap_5_2 rcs_expr_heap_5_3 -> let rs_6_0 = convertcases.weightedRefCount_126 rci_0 case_expr_2_0 rs_3, _x_6_1 = convertcases.fold_st_331 rci_depth_1_1 rcc_all_variables_4_0 (_Tuple2 (select rs_6_0::convertcases._RCState 0) (select rs_6_0::convertcases._RCState 2)) in update rs_6_0::convertcases._RCState [0:select _x_6_1::_Tuple2 0,2:select _x_6_1::_Tuple2 1]) ) ) ) ) 
convertcases.weightedRefCount_337 rci_0 !_x_1 !rs_2 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> convertcases.weightedRefCount_322 rci_0 y_1_1 (convertcases.weightedRefCount_126 rci_0 x_1_0 rs_2)) 
convertcases.weightedRefCount_127 !rci_0 !_x_1 !rs_2 = case rci_0 (convertcases._RCInfo rci_imported_1_0 rci_depth_1_1 -> case _x_1 (syntax.ArraySelection _x_2_0 _x_2_1 index_expr_2_2 -> case _x_2_0 (syntax._Global _x_3_0 glob_module_3_1 -> case _x_3_0 (syntax._DefinedSymbol ds_ident_4_0 ds_arity_4_1 ds_index_4_2 -> convertcases.checkImportOfDclFunction rci_imported_1_0 glob_module_3_1 ds_index_4_2 (convertcases.weightedRefCount_126 rci_0 index_expr_2_2 rs_2)) ) ) ) (_ -> case _x_1 (syntax.DictionarySelection _x_1_0 selectors_1_1 _x_1_2 index_expr_1_3 -> convertcases.weightedRefCount_322 rci_0 selectors_1_1 (convertcases.weightedRefCount_126 rci_0 index_expr_1_3 rs_2)) (syntax.RecordSelection selector_1_0 _x_1_1 -> case rci_0 (convertcases._RCInfo rci_imported_2_0 rci_depth_2_1 -> convertcases.checkRecordSelector rci_imported_2_0 selector_1_0 rs_2) ) )
convertcases.foldr_323 rci_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.weightedRefCount_127 rci_0 a_1_0 (convertcases.foldr_323 rci_0 r_1 x_1_1)) 
convertcases.weightedRefCount_322 rci_0 !l_1 !rs_2 = convertcases.foldr_323 rci_0 rs_2 l_1
convertcases.weightedRefCount_338 rci_0 !_x_1 !rs_2 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> convertcases.weightedRefCount_126 rci_0 y_1_1 (convertcases.weightedRefCount_322 rci_0 x_1_0 rs_2)) 
convertcases.weightedRefCount_339 rci_0 !_x_1 !rs_2 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> convertcases.weightedRefCount_338 rci_0 y_1_1 (convertcases.weightedRefCount_126 rci_0 x_1_0 rs_2)) 
convertcases.weightedRefCount_325 rci_0 !bind_1 !rs_2 = case bind_1 (general._Bind bind_src_1_0 bind_dst_1_1 -> convertcases.weightedRefCount_126 rci_0 bind_src_1_0 rs_2) 
convertcases.foldr_327 rci_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.weightedRefCount_325 rci_0 a_1_0 (convertcases.foldr_327 rci_0 r_1 x_1_1)) 
convertcases.weightedRefCount_326 rci_0 !l_1 !rs_2 = convertcases.foldr_327 rci_0 rs_2 l_1
convertcases.weightedRefCount_340 rci_0 !_x_1 !rs_2 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> convertcases.weightedRefCount_326 rci_0 y_1_1 (convertcases.weightedRefCount_126 rci_0 x_1_0 rs_2)) 
convertcases.weightedRefCount_126 rci_0 !_x_1 !rs_2 = case _x_1 (syntax.Var var_1_0 -> convertcases.weightedRefCount_125 rci_0 var_1_0 rs_2) (syntax.App app_1_0 -> convertcases.weightedRefCount_128 rci_0 app_1_0 rs_2) (<{syntax.@}> fun_expr_1_0 exprs_1_1 -> convertcases.weightedRefCount_336 rci_0 (_Tuple2 fun_expr_1_0 exprs_1_1) rs_2) (syntax.Let _x_1_0 -> case rci_0 (convertcases._RCInfo rci_imported_2_0 rci_depth_2_1 -> case _x_1_0 (syntax._Let let_strict_binds_3_0 let_lazy_binds_3_1 let_expr_3_2 let_info_ptr_3_3 let_expr_position_3_4 -> case rs_2 (convertcases._RCState rcs_free_vars_4_0 rcs_imports_4_1 rcs_var_heap_4_2 rcs_expr_heap_4_3 -> let rs_5_0 = convertcases.weightedRefCount_317 rci_0 let_strict_binds_3_0 (update rs_2::convertcases._RCState [2:convertcases.fold_st_316 rci_depth_2_1 let_lazy_binds_3_1 rcs_var_heap_4_2]), rs_5_1 = convertcases.weightedRefCount_126 rci_0 let_expr_3_2 rs_5_0, _x_5_2 = Heap.readPtr let_info_ptr_3_3 (select rs_5_1::convertcases._RCState 3), rcs_expr_heap_5_3 = select _x_5_2::_Tuple2 1 in <{convertcases._c;207;11_433}> (select _x_5_2::_Tuple2 0) let_info_ptr_3_3 let_lazy_binds_3_1 rs_5_1 rcs_expr_heap_5_3) ) ) ) (syntax.Case case_expr_1_0 -> case rs_2 (convertcases._RCState rcs_free_vars_2_0 rcs_imports_2_1 rcs_var_heap_2_2 rcs_expr_heap_2_3 -> let _x_3_0 = Heap.readPtr (select case_expr_1_0::syntax._Case 4) rcs_expr_heap_2_3 in convertcases.weightedRefCountOfCase rci_0 case_expr_1_0 (select _x_3_0::_Tuple2 0) (update rs_2::convertcases._RCState [3:select _x_3_0::_Tuple2 1])) ) (syntax.BasicExpr _x_1_0 -> rs_2) (syntax.Selection opt_tuple_1_0 expr_1_1 selections_1_2 -> convertcases.weightedRefCount_337 rci_0 (_Tuple2 expr_1_1 selections_1_2) rs_2) (syntax.Update expr1_1_0 selections_1_1 expr2_1_2 -> convertcases.weightedRefCount_339 rci_0 (_Tuple2 expr1_1_0 (_Tuple2 selections_1_1 expr2_1_2)) rs_2) (syntax.RecordUpdate cons_symbol_1_0 expr_1_1 exprs_1_2 -> convertcases.weightedRefCount_340 rci_0 (_Tuple2 expr_1_1 exprs_1_2) rs_2) (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 expr_1_2 -> convertcases.weightedRefCount_126 rci_0 expr_1_2 rs_2) (syntax.MatchExpr constructor_1_0 expr_1_1 -> convertcases.weightedRefCount_126 rci_0 expr_1_1 rs_2) (syntax.IsConstructor expr_1_0 _x_1_1 _x_1_2 _x_1_3 _x_1_4 _x_1_5 -> convertcases.weightedRefCount_126 rci_0 expr_1_0 rs_2) (syntax.AnyCodeExpr _x_1_0 _x_1_1 _x_1_2 -> rs_2) (syntax.ABCCodeExpr _x_1_0 _x_1_1 -> rs_2) (syntax.TypeCodeExpression type_code_expr_1_0 -> convertcases.weightedRefCount_129 rci_0 type_code_expr_1_0 rs_2) (syntax.EE -> rs_2) (syntax.NoBind ptr_1_0 -> rs_2) (syntax.DictionariesFunction _x_1_0 expr_1_1 _x_1_2 -> convertcases.weightedRefCount_126 rci_0 expr_1_1 rs_2) (syntax.FailExpr _x_1_0 -> rs_2) (_ -> StdMisc.abort "weightedRefCount [Expression] (convertcases)")
<{convertcases._c;180;11_434}> !_x_0 rci_depth_1::I var_info_ptr_2 !rs_3 !rcs_var_heap_4 rci_5 = case _x_0 (syntax.VI_LetVar lvi_1_0 -> let rs_2_0 = update rs_3::convertcases._RCState [2:rcs_var_heap_4], _x_2_1 = convertcases.weightedRefCountOfVariable rci_depth_1 var_info_ptr_2 lvi_1_0 1 (select rs_2_0::convertcases._RCState 0) in case (select _x_2_1::_Tuple3 0) (True -> let lvi_4_0 = select _x_2_1::_Tuple3 1, lvi_expression_4_1 = select lvi_4_0::convertcases._LetVarInfo 4, ptr_and_val_4_2 = _Tuple2 var_info_ptr_2 (syntax.VI_LetVar (update lvi_4_0::convertcases._LetVarInfo [2:False,4:syntax.EE])), rs_4_3 = convertcases.weightedRefCount_126 rci_5 lvi_expression_4_1 (update rs_2_0::convertcases._RCState [0:select _x_2_1::_Tuple3 2,2:Heap.writePtr (select ptr_and_val_4_2::_Tuple2 0) (select ptr_and_val_4_2::_Tuple2 1) (select rs_2_0::convertcases._RCState 2)]), _x_4_4 = Heap.readPtr var_info_ptr_2 (select rs_4_3::convertcases._RCState 2), ptr_and_val_4_5 = _Tuple2 var_info_ptr_2 (syntax.VI_LetVar (update (select (select _x_4_4::_Tuple2 0)::_Tuple1 0)::convertcases._LetVarInfo [4:lvi_expression_4_1])) in update rs_4_3::convertcases._RCState [2:Heap.writePtr (select ptr_and_val_4_5::_Tuple2 0) (select ptr_and_val_4_5::_Tuple2 1) (select _x_4_4::_Tuple2 1)]) (False -> let ptr_and_val_4_0 = _Tuple2 var_info_ptr_2 (syntax.VI_LetVar (select _x_2_1::_Tuple3 1)) in update rs_2_0::convertcases._RCState [2:Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) (select rs_2_0::convertcases._RCState 2)]) ) (_ -> update rs_3::convertcases._RCState [2:rcs_var_heap_4])
<{convertcases._c;207;11_433}> !_x_0 let_info_ptr_1 !let_lazy_binds_2 !rs_3 !rcs_expr_heap_4 = case _x_0 (syntax.EI_LetType let_type_1_0 -> let rs_2_0 = update rs_3::convertcases._RCState [3:rcs_expr_heap_4], _x_2_1 = convertcases.map_st_319 let_lazy_binds_2 (select rs_2_0::convertcases._RCState 2), _x_2_2 = convertcases.foldl_320 (_Tuple2 (select rs_2_0::convertcases._RCState 0) (select _x_2_1::_Tuple2 1)) let_lazy_binds_2, ptr_and_val_2_3 = _Tuple2 let_info_ptr_1 (syntax.EI_LetTypeAndRefCounts let_type_1_0 (select _x_2_1::_Tuple2 0)) in update rs_2_0::convertcases._RCState [0:select _x_2_2::_Tuple2 0,2:select _x_2_2::_Tuple2 1,3:Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select rs_2_0::convertcases._RCState 3)]) (_ -> let rs_1_0 = update rs_3::convertcases._RCState [3:rcs_expr_heap_4], _x_1_1 = convertcases.foldl_321 (_Tuple2 (select rs_1_0::convertcases._RCState 0) (select rs_1_0::convertcases._RCState 2)) let_lazy_binds_2 in update rs_1_0::convertcases._RCState [0:select _x_1_1::_Tuple2 0,2:select _x_1_1::_Tuple2 1])
convertcases.weightedRefCount_315 !_vweightedRefCount_0 rci_1 !_x_2 !rs_3 = case _x_2 (_Tuple2 x_1_0 y_1_1 -> select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_1 y_1_1 (convertcases.weightedRefCount_126 rci_1 x_1_0 rs_3)) 
convertcases.weightedRefCount_324 !_vweightedRefCount_0 rci_1 !_x_2 !rs_3 = case _x_2 (_Tuple2 x_1_0 y_1_1 -> select _vweightedRefCount_0::<{convertcases.weightedRefCount;}> 0 rci_1 y_1_1 (convertcases.weightedRefCount_322 rci_1 x_1_0 rs_3)) 
convertcases.map_st_240 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_240 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.fold_st_239 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_239 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.map_st_238 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_238 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.set_let_expr_info_81 depth_0::I !_x_1 _x_2 _x_3 !var_heap_4 = case _x_1 (_predefined._Cons _x_1_0 binds_1_1 -> case _x_1_0 (syntax._LetBind lb_dst_2_0 lb_src_2_1 lb_position_2_2 -> case _x_2 (_predefined._Cons ref_count_3_0 ref_counts_3_1 -> case _x_3 (_predefined._Cons type_4_0 types_4_1 -> let _x_5_0 = Heap.newPtr syntax.VI_LocalLetVar var_heap_4, ptr_and_val_5_1 = _Tuple2 (select lb_dst_2_0::syntax._FreeVar 2) (syntax.VI_LetExpression (convertcases._LetExpressionInfo ref_count_3_0 depth_0 (update lb_dst_2_0::syntax._FreeVar [2:select _x_5_0::_Tuple2 0]) lb_src_2_1 convertcases.LES_Untouched type_4_0)) in convertcases.set_let_expr_info_81 depth_0 binds_1_1 ref_counts_3_1 types_4_1 (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_5_0::_Tuple2 1))) ) ) ) (_predefined._Nil -> var_heap_4) 
convertcases.set_strict_let_expr_info_82 !lb_0 var_heap_1 = case lb_0 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> case lb_dst_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> let _x_3_0 = Heap.newPtr syntax.VI_StrictLetVar var_heap_1, new_info_ptr_3_1 = select _x_3_0::_Tuple2 0, ptr_and_val_3_2 = _Tuple2 fv_info_ptr_2_2 (syntax.VI_CaseOrStrictLetVar new_info_ptr_3_1) in _Tuple2 (update lb_0::syntax._LetBind [0:update (select lb_0::syntax._LetBind 0)::syntax._FreeVar [2:new_info_ptr_3_1]]) (Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_0::_Tuple2 1))) ) 
convertcases.determine_input_parameter_84 !bind_0 !var_heap_1 = case bind_0 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = Heap.readPtr (select bind_dst_1_1::syntax._BoundVar 1) var_heap_1, var_heap_2_1 = select _x_2_0::_Tuple2 1 in <{convertcases._c;574;19_435}> (select _x_2_0::_Tuple2 0) bind_0 bind_dst_1_1 var_heap_2_1) 
<{convertcases._c;574;19_435}> !_x_0 bind_1 bind_dst_2 var_heap_3 = case _x_0 (syntax.VI_CaseOrStrictLetVar new_info_ptr_1_0 -> _Tuple2 (update bind_1::general._Bind [1:update bind_dst_2::syntax._BoundVar [1:new_info_ptr_1_0]]) var_heap_3) (_ -> _Tuple2 bind_1 var_heap_3)
convertcases.fold_st_251 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_251 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_250 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_250 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_249 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_249 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_248 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_248 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_247 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_247 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.mark_local_let_var_of_explicit_case_95 depth_0::I !_x_1 !_x_2 = case _x_1 (convertcases._CountedVariable cv_variable_1_0 cv_count_1_1 -> case _x_2 (_Tuple3 local_vars_2_0 local_select_vars_2_1 var_heap_2_2 -> let _x_3_0::I = Heap.readPtr cv_variable_1_0 var_heap_2_2, lei_3_1::I = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, lei_count_3_2 = select lei_3_1::convertcases._LetExpressionInfo 0, lei_depth_3_3 = select lei_3_1::convertcases._LetExpressionInfo 1 in case (case (<{StdInt.==_16}> lei_count_3_2 cv_count_1_1) (True -> <{StdInt.==_16}> lei_depth_3_3 (<{StdInt.-_7}> depth_0 1)) (False -> False) ) (True -> let var_heap_5_0 = select _x_3_0::_Tuple2 1 in <{convertcases._c;696;19_438}> (select lei_3_1::convertcases._LetExpressionInfo 3) var_heap_5_0 cv_variable_1_0 lei_3_1 depth_0 local_vars_2_0 lei_depth_3_3 local_select_vars_2_1 lei_count_3_2) (False -> _Tuple3 local_vars_2_0 local_select_vars_2_1 (select _x_3_0::_Tuple2 1)) ) ) 
<{convertcases._c;696;19_438}> !_x_0 var_heap_1 cv_variable_2 lei_3 depth_4::I local_vars_5 lei_depth_6::I local_select_vars_7 lei_count_8::I = case _x_0 (syntax.TupleSelect _x_1_0 _x_1_1 _x_1_2 -> case _x_1_2 (syntax.Var var_2_0 -> case var_2_0 (syntax._BoundVar var_ident_3_0 var_info_ptr_3_1 var_expr_ptr_3_2 -> let _x_4_0 = Heap.readPtr var_info_ptr_3_1 var_heap_1, var_heap_4_1 = select _x_4_0::_Tuple2 1 in <{convertcases._c;699;28_436}> (select _x_4_0::_Tuple2 0) cv_variable_2 lei_3 depth_4 local_vars_5 lei_depth_6 local_select_vars_7 var_heap_4_1 lei_count_8) ) ) (syntax.Selection _x_1_0 _x_1_1 _x_1_2 -> case _x_1_0 (syntax.NormalSelector -> case _x_1_1 (syntax.Var var_3_0 -> case var_3_0 (syntax._BoundVar var_ident_4_0 var_info_ptr_4_1 var_expr_ptr_4_2 -> case _x_1_2 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax.RecordSelection _x_6_0 _x_6_1 -> case _x_5_1 (_predefined._Nil -> let _x_8_0 = Heap.readPtr var_info_ptr_4_1 var_heap_1, var_heap_8_1 = select _x_8_0::_Tuple2 1 in <{convertcases._c;706;28_437}> (select _x_8_0::_Tuple2 0) cv_variable_2 lei_3 depth_4 local_vars_5 lei_depth_6 local_select_vars_7 var_heap_8_1 lei_count_8) ) ) ) ) ) ) (_ -> let ptr_and_val_1_0 = _Tuple2 cv_variable_2 (syntax.VI_LetExpression (update lei_3::convertcases._LetExpressionInfo [1:depth_4])) in _Tuple3 (_predefined._Cons (_Tuple3 cv_variable_2 lei_count_8 lei_depth_6) local_vars_5) local_select_vars_7 (Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_1))
<{convertcases._c;706;28_437}> !_x_0 cv_variable_1 lei_2 depth_3::I local_vars_4 lei_depth_5::I local_select_vars_6 var_heap_7 lei_count_8::I = case _x_0 (syntax.VI_LetExpression lei2_1_0 -> let ptr_and_val_2_0 = _Tuple2 cv_variable_1 (syntax.VI_LetExpression (update lei_2::convertcases._LetExpressionInfo [1:depth_3])) in _Tuple3 local_vars_4 (_predefined._Cons (_Tuple2 cv_variable_1 lei_depth_5) local_select_vars_6) (Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_7)) (_ -> let ptr_and_val_1_0 = _Tuple2 cv_variable_1 (syntax.VI_LetExpression (update lei_2::convertcases._LetExpressionInfo [1:depth_3])) in _Tuple3 (_predefined._Cons (_Tuple3 cv_variable_1 lei_count_8 lei_depth_5) local_vars_4) local_select_vars_6 (Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_7))
<{convertcases._c;699;28_436}> !_x_0 cv_variable_1 lei_2 depth_3::I local_vars_4 lei_depth_5::I local_select_vars_6 var_heap_7 lei_count_8::I = case _x_0 (syntax.VI_LetExpression lei2_1_0 -> let ptr_and_val_2_0 = _Tuple2 cv_variable_1 (syntax.VI_LetExpression (update lei_2::convertcases._LetExpressionInfo [1:depth_3])) in _Tuple3 local_vars_4 (_predefined._Cons (_Tuple2 cv_variable_1 lei_depth_5) local_select_vars_6) (Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_7)) (_ -> let ptr_and_val_1_0 = _Tuple2 cv_variable_1 (syntax.VI_LetExpression (update lei_2::convertcases._LetExpressionInfo [1:depth_3])) in _Tuple3 (_predefined._Cons (_Tuple3 cv_variable_1 lei_count_8 lei_depth_5) local_vars_4) local_select_vars_6 (Heap.writePtr (select ptr_and_val_1_0::_Tuple2 0) (select ptr_and_val_1_0::_Tuple2 1) var_heap_7))
convertcases.mark_local_let_select_var_of_explicit_case_96 depth_0::I !_x_1 !_x_2 = case _x_1 (_Tuple2 cv_variable_1_0 old_depth_1_1 -> case _x_2 (_Tuple2 local_vars_2_0 var_heap_2_1 -> let _x_3_0::I = Heap.readPtr cv_variable_1_0 var_heap_2_1, lei_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, var_heap_3_2 = select _x_3_0::_Tuple2 1, lei_count_3_3 = select lei_3_1::convertcases._LetExpressionInfo 0 in <{convertcases._c;718;15_441}> (select lei_3_1::convertcases._LetExpressionInfo 3) var_heap_3_2 depth_0 cv_variable_1_0 lei_3_1 old_depth_1_1 local_vars_2_0 lei_count_3_3) ) 
<{convertcases._c;718;15_441}> !_x_0 !var_heap_1 depth_2::I cv_variable_3 lei_4 old_depth_5::I local_vars_6 lei_count_7::I = case _x_0 (syntax.TupleSelect _x_1_0 _x_1_1 _x_1_2 -> case _x_1_2 (syntax.Var var_2_0 -> case var_2_0 (syntax._BoundVar var_ident_3_0 var_info_ptr_3_1 var_expr_ptr_3_2 -> let _x_4_0 = Heap.readPtr var_info_ptr_3_1 var_heap_1, var_heap_4_1 = select _x_4_0::_Tuple2 1 in <{convertcases._c;721;24_439}> (select _x_4_0::_Tuple2 0) depth_2 cv_variable_3 lei_4 old_depth_5 local_vars_6 var_heap_4_1 lei_count_7) ) ) (syntax.Selection _x_1_0 _x_1_1 _x_1_2 -> case _x_1_0 (syntax.NormalSelector -> case _x_1_1 (syntax.Var var_3_0 -> case var_3_0 (syntax._BoundVar var_ident_4_0 var_info_ptr_4_1 var_expr_ptr_4_2 -> case _x_1_2 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax.RecordSelection _x_6_0 _x_6_1 -> case _x_5_1 (_predefined._Nil -> let _x_8_0 = Heap.readPtr var_info_ptr_4_1 var_heap_1, var_heap_8_1 = select _x_8_0::_Tuple2 1 in <{convertcases._c;729;24_440}> (select _x_8_0::_Tuple2 0) depth_2 cv_variable_3 lei_4 old_depth_5 local_vars_6 var_heap_8_1 lei_count_7) ) ) ) ) ) ) 
<{convertcases._c;729;24_440}> !_x_0 depth_1::I cv_variable_2 lei_3 old_depth_4::I local_vars_5 var_heap_6 lei_count_7::I = case _x_0 (syntax.VI_LetExpression lei2_1_0 -> case (<{StdInt.<_17}> (select lei2_1_0::convertcases._LetExpressionInfo 1) depth_1) (True -> let ptr_and_val_3_0 = _Tuple2 cv_variable_2 (syntax.VI_LetExpression (update lei_3::convertcases._LetExpressionInfo [1:old_depth_4])) in _Tuple2 local_vars_5 (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_6)) ) (_ -> _Tuple2 (_predefined._Cons (_Tuple3 cv_variable_2 lei_count_7 old_depth_4) local_vars_5) var_heap_6)
<{convertcases._c;721;24_439}> !_x_0 depth_1::I cv_variable_2 lei_3 old_depth_4::I local_vars_5 var_heap_6 lei_count_7::I = case _x_0 (syntax.VI_LetExpression lei2_1_0 -> case (<{StdInt.<_17}> (select lei2_1_0::convertcases._LetExpressionInfo 1) depth_1) (True -> let ptr_and_val_3_0 = _Tuple2 cv_variable_2 (syntax.VI_LetExpression (update lei_3::convertcases._LetExpressionInfo [1:old_depth_4])) in _Tuple2 local_vars_5 (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_6)) ) (_ -> _Tuple2 (_predefined._Cons (_Tuple3 cv_variable_2 lei_count_7 old_depth_4) local_vars_5) var_heap_6)
convertcases.mark_local_let_var_94 depth_0::I !_x_1 !_x_2 = case _x_1 (convertcases._CountedVariable cv_variable_1_0 cv_count_1_1 -> case _x_2 (_Tuple2 local_vars_2_0 var_heap_2_1 -> let _x_3_0::I = Heap.readPtr cv_variable_1_0 var_heap_2_1, lei_3_1::I = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, lei_count_3_2 = select lei_3_1::convertcases._LetExpressionInfo 0, lei_depth_3_3 = select lei_3_1::convertcases._LetExpressionInfo 1 in case (case (<{StdInt.==_16}> lei_count_3_2 cv_count_1_1) (True -> <{StdInt.==_16}> lei_depth_3_3 (<{StdInt.-_7}> depth_0 1)) (False -> False) ) (True -> let ptr_and_val_5_0 = _Tuple2 cv_variable_1_0 (syntax.VI_LetExpression (update lei_3_1::convertcases._LetExpressionInfo [1:depth_0])) in _Tuple2 (_predefined._Cons (_Tuple3 cv_variable_1_0 lei_count_3_2 lei_depth_3_3) local_vars_2_0) (Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) (select _x_3_0::_Tuple2 1))) (False -> _Tuple2 local_vars_2_0 (select _x_3_0::_Tuple2 1)) ) ) 
convertcases.fold_st_341 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_341 depth_0 x_1_1 (convertcases.mark_local_let_var_of_explicit_case_95 depth_0 a_1_0 st_2)) 
convertcases.fold_st_342 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_342 depth_0 x_1_1 (convertcases.mark_local_let_select_var_of_explicit_case_96 depth_0 a_1_0 st_2)) 
convertcases.fold_st_343 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_343 depth_0 x_1_1 (convertcases.mark_local_let_var_94 depth_0 a_1_0 st_2)) 
convertcases.mark_local_let_vars_85 !case_explicit_0::B new_depth_1::I !tot_ref_counts_2 var_heap_3 = case case_explicit_0 (True -> let _x_2_0 = convertcases.fold_st_341 new_depth_1 tot_ref_counts_2 (_Tuple3 _predefined._Nil _predefined._Nil var_heap_3) in convertcases.fold_st_342 new_depth_1 (select _x_2_0::_Tuple3 1) (_Tuple2 (select _x_2_0::_Tuple3 0) (select _x_2_0::_Tuple3 2))) (False -> convertcases.fold_st_343 new_depth_1 tot_ref_counts_2 (_Tuple2 _predefined._Nil var_heap_3)) 
convertcases.map_st_246 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_246 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_245 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_245 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_244 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_244 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.exactZip !_x_0 !_x_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> _predefined._Cons (_Tuple2 x_1_0 y_2_0) (convertcases.exactZip xs_1_1 ys_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) 
convertcases.map_st_243 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_243 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.refresh_variable_93 !fv_0 var_heap_1 = case fv_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> let _x_2_0 = Heap.newPtr syntax.VI_Empty var_heap_1, new_info_ptr_2_1 = select _x_2_0::_Tuple2 0, ptr_and_val_2_2 = _Tuple2 fv_info_ptr_1_2 (syntax.VI_CaseOrStrictLetVar new_info_ptr_2_1) in _Tuple2 (update fv_0::syntax._FreeVar [2:new_info_ptr_2_1]) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1))) 
convertcases.fold_st_242 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_242 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_241 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_241 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.mark_local_let_var_of_pattern_expr_100 !depth_0::I !_x_1 !var_heap_2 = case _x_1 (convertcases._CountedVariable cv_variable_1_0 cv_count_1_1 -> let _x_2_0 = Heap.readPtr cv_variable_1_0 var_heap_2, lei_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0 in case (<{StdInt.==_16}> depth_0 (select lei_2_1::convertcases._LetExpressionInfo 1)) (True -> let ptr_and_val_4_0 = _Tuple2 cv_variable_1_0 (syntax.VI_LetExpression (update lei_2_1::convertcases._LetExpressionInfo [0:cv_count_1_1,4:convertcases.LES_Untouched])) in Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) (select _x_2_0::_Tuple2 1)) (False -> select _x_2_0::_Tuple2 1) ) 
convertcases.is_outer_var_98 !_x_0 !_x_1 !_x_2 = case _x_0 (convertcases._DistributeInfo di_depth_1_0 di_explicit_case_depth_1_1 -> case _x_1 (convertcases._CountedVariable cv_variable_2_0 cv_count_2_1 -> case _x_2 (_Tuple2 outer_3_0 var_heap_3_1 -> case outer_3_0 (True -> _Tuple2 True var_heap_3_1) (False -> let _x_5_0::I = Heap.readPtr cv_variable_2_0 var_heap_3_1, _x_5_1 = select (select _x_5_0::_Tuple2 0)::_Tuple1 0, lei_depth_5_2 = select _x_5_1::convertcases._LetExpressionInfo 1 in case (convertcases._f443_443 (<{StdInt.<_17}> di_explicit_case_depth_1_1 lei_depth_5_2) lei_depth_5_2 di_depth_1_0 _x_5_1) (True -> _Tuple2 True (select _x_5_0::_Tuple2 1)) (False -> _Tuple2 False (select _x_5_0::_Tuple2 1)) ) ) ) ) 
convertcases._f443_443::B !_x_0::B lei_depth_1::I di_depth_2::I _x_3 = case _x_0 (True -> case (<{StdInt.<_17}> lei_depth_1 di_depth_2) (True -> True) (False -> case (<{StdInt.==_16}> lei_depth_1 di_depth_2) (True -> <{convertcases._c;745;68_442}> (select _x_3::convertcases._LetExpressionInfo 4)) (False -> False) ) ) (_ -> False)
<{convertcases._c;745;68_442}>::B !_x_0 = case _x_0 (convertcases.LES_Moved -> False) (_ -> True)
convertcases.reset_local_let_var_97 !_x_0 !var_heap_1 = case _x_0 (_Tuple3 var_info_ptr_1_0 lei_count_1_1 lei_depth_1_2 -> let _x_2_0 = Heap.readPtr var_info_ptr_1_0 var_heap_1, ptr_and_val_2_1 = _Tuple2 var_info_ptr_1_0 (syntax.VI_LetExpression (update (select (select _x_2_0::_Tuple2 0)::_Tuple1 0)::convertcases._LetExpressionInfo [0:lei_count_1_1,1:lei_depth_1_2,4:convertcases.LES_Moved])) in Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select _x_2_0::_Tuple2 1)) 
convertcases.has_no_rooted_non_if_cases::B !_x_0 = case _x_0 (syntax.Case _x_1_0 -> case _x_1_0 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> convertcases.is_if_case case_expr_2_0 case_guards_2_1 case_default_2_2) ) (syntax.Let _x_1_0 -> False) (_ -> True)
convertcases.boolean_case_is_if::B !case_expr_0 then_expr_1 else_expr_2 = case (convertcases.has_no_rooted_non_if_cases case_expr_0) (True -> case (convertcases.is_then_or_else then_expr_1) (True -> convertcases.is_then_or_else else_expr_2) (False -> False) ) (False -> False) 
convertcases.is_if_case::B case_expr_0 !_x_1 _x_2 = case _x_1 (syntax.BasicPatterns _x_1_0 _x_1_1 -> case _x_1_0 (syntax.BT_Bool -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (syntax._BasicPattern _x_4_0 then_expr_4_1 bp_position_4_2 -> case _x_4_0 (syntax.BVB _x_5_0 -> case _x_5_0 (True -> case _x_3_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 (syntax._BasicPattern _x_8_0 else_expr_8_1 bp_position_8_2 -> case _x_8_0 (syntax.BVB _x_9_0 -> case _x_9_0 (False -> case _x_7_1 (_predefined._Nil -> case _x_2 (general.No -> convertcases.boolean_case_is_if case_expr_0 then_expr_4_1 else_expr_8_1) ) ) ) ) ) (_predefined._Nil -> case _x_2 (general.Yes else_expr_8_0 -> convertcases.boolean_case_is_if case_expr_0 then_expr_4_1 else_expr_8_0) ) ) ) ) ) ) ) (_ -> False)
convertcases.is_then_or_else::B !_x_0 = case _x_0 (syntax.Case _x_1_0 -> case _x_1_0 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> convertcases.is_if_case case_expr_2_0 case_guards_2_1 case_default_2_2) ) (syntax.Let _x_1_0 -> case _x_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> convertcases.is_then_or_else let_expr_2_2) ) (_ -> True)
convertcases.then_part_exists_and_has_no_rooted_case::B !_x_0 case_default_1 = case _x_0 (_predefined._Cons alt_1_0 alts_1_1 -> case alt_1_0 (syntax._BasicPattern bp_value_2_0 bp_expr_2_1 bp_position_2_2 -> case bp_value_2_0 (syntax.BVB sign_of_alt_3_0 -> case sign_of_alt_3_0 (True -> convertcases.has_no_rooted_case bp_expr_2_1) (False -> convertcases.then_part_exists_and_has_no_rooted_case alts_1_1 case_default_1) ) ) ) (_predefined._Nil -> case case_default_1 (general.No -> False) (general.Yes then_expr_2_0 -> False) ) 
convertcases.is_nested_guard_case::B !_x_0 _x_1 _x_2::B case_expr_3 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (syntax._BasicPattern _x_2_0 bp_expr_2_1 bp_position_2_2 -> case _x_2_0 (syntax.BVB _x_3_0 -> case _x_3_0 (True -> case _x_1_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax._BasicPattern _x_6_0 false_expr_6_1 bp_position_6_2 -> case _x_6_0 (syntax.BVB _x_7_0 -> case _x_7_0 (False -> case _x_5_1 (_predefined._Nil -> case _x_1 (general.Yes _x_10_0 -> case _x_2 (False -> case (convertcases.is_then_or_else bp_expr_2_1) (True -> convertcases.is_then_or_else false_expr_6_1) (False -> False) ) ) (general.No -> case _x_2 (True -> convertcases.boolean_case_is_if case_expr_3 bp_expr_2_1 false_expr_6_1) (False -> case (convertcases.has_no_rooted_case bp_expr_2_1) (True -> convertcases.has_no_rooted_case false_expr_6_1) (False -> False) ) ) ) ) ) ) ) (_predefined._Nil -> case _x_2 (False -> case (convertcases.has_no_rooted_case bp_expr_2_1) (True -> <{convertcases._c;1197;37_444}> _x_1) (False -> False) ) ) (_ -> case _x_2 (False -> case (convertcases.has_no_rooted_case bp_expr_2_1) (True -> convertcases.is_nested_guard_case _x_1_1 _x_1 False case_expr_3) (False -> False) ) (True -> case _x_1_1 (_predefined._Nil -> case _x_1 (general.Yes else_expr_7_0 -> convertcases.boolean_case_is_if case_expr_3 bp_expr_2_1 else_expr_7_0) ) ) )) (False -> case _x_1_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax._BasicPattern _x_6_0 true_expr_6_1 bp_position_6_2 -> case _x_6_0 (syntax.BVB _x_7_0 -> case _x_7_0 (True -> case _x_5_1 (_predefined._Nil -> case _x_1 (general.Yes _x_10_0 -> case _x_2 (False -> case (convertcases.is_then_or_else bp_expr_2_1) (True -> convertcases.is_then_or_else true_expr_6_1) (False -> False) ) ) ) ) ) ) ) (_ -> case _x_2 (False -> convertcases.then_part_exists_and_has_no_rooted_case _x_1_1 _x_1) )) ) ) ) (_ -> False)
convertcases.has_no_rooted_case::B !_x_0 = case _x_0 (syntax.Case _x_1_0 -> case _x_1_0 (syntax._Case case_expr_2_0 _x_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> case _x_2_1 (syntax.BasicPatterns _x_3_0 patterns_3_1 -> case _x_3_0 (syntax.BT_Bool -> convertcases.is_nested_guard_case patterns_3_1 case_default_2_2 case_explicit_2_5 case_expr_2_0) ) (_ -> case_explicit_2_5)) ) (syntax.Let _x_1_0 -> case _x_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> convertcases.has_no_rooted_case let_expr_2_2) ) (_ -> True)
<{convertcases._c;1197;37_444}>::B !_x_0 = case _x_0 (general.Yes _x_1_0 -> True) (general.No -> False) 
convertcases.is_guard_case::B !_x_0 _x_1 _x_2::B case_expr_3 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (syntax._BasicPattern _x_2_0 bp_expr_2_1 bp_position_2_2 -> case _x_2_0 (syntax.BVB _x_3_0 -> case _x_3_0 (True -> case _x_1_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax._BasicPattern _x_6_0 false_expr_6_1 bp_position_6_2 -> case _x_6_0 (syntax.BVB _x_7_0 -> case _x_7_0 (False -> case _x_5_1 (_predefined._Nil -> case _x_1 (general.Yes _x_10_0 -> case _x_2 (False -> case (convertcases.is_then_or_else bp_expr_2_1) (True -> convertcases.is_then_or_else false_expr_6_1) (False -> False) ) ) (general.No -> case _x_2 (True -> convertcases.boolean_case_is_if case_expr_3 bp_expr_2_1 false_expr_6_1) ) ) ) ) ) ) (_ -> case _x_2 (False -> convertcases.has_no_rooted_case bp_expr_2_1) (True -> case _x_1_1 (_predefined._Nil -> case _x_1 (general.Yes else_expr_7_0 -> convertcases.boolean_case_is_if case_expr_3 bp_expr_2_1 else_expr_7_0) ) ) )) (False -> case _x_1_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax._BasicPattern _x_6_0 true_expr_6_1 bp_position_6_2 -> case _x_6_0 (syntax.BVB _x_7_0 -> case _x_7_0 (True -> case _x_5_1 (_predefined._Nil -> case _x_1 (general.Yes _x_10_0 -> case _x_2 (False -> case (convertcases.is_then_or_else bp_expr_2_1) (True -> convertcases.is_then_or_else true_expr_6_1) (False -> False) ) ) ) ) ) ) ) (_ -> case _x_2 (False -> convertcases.then_part_exists_and_has_no_rooted_case _x_1_1 _x_1) )) ) ) ) (_ -> False)
convertcases.is_guard_89::B !_x_0 case_default_1 case_explicit_2::B case_expr_3 = case _x_0 (syntax.BasicPatterns _x_1_0 patterns_1_1 -> case _x_1_0 (syntax.BT_Bool -> convertcases.is_guard_case patterns_1_1 case_default_1 case_explicit_2 case_expr_3) ) (_ -> False)
convertcases.is_lhs_var_86::B !_x_0 var_heap_1 = case _x_0 (syntax.Var _x_1_0 -> case _x_1_0 (syntax._BoundVar var_ident_2_0 var_info_ptr_2_1 var_expr_ptr_2_2 -> <{convertcases._c;640;25_445}> (Heap.sreadPtr var_info_ptr_2_1 var_heap_1)) ) (_ -> False)
<{convertcases._c;640;25_445}>::B !_x_0 = case _x_0 (syntax.VI_LocalLetVar -> False) (syntax.VI_LetExpression _x_1_0 -> False) (syntax.VI_StrictLetVar -> False) (_ -> True)
convertcases.case_kind_88 _x_0::B !_x_1 var_heap_2 = case _x_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> case (convertcases.is_guard_89 case_guards_1_1 case_default_1_2 case_explicit_1_5 case_expr_1_0) (True -> _Tuple2 convertcases.CaseKindGuard var_heap_2) (False -> case (case case_explicit_1_5 (True -> True) (False -> case _x_0 (True -> True) (False -> StdBool.not (convertcases.is_lhs_var_86 case_expr_1_0 var_heap_2)) ) ) (True -> _Tuple2 convertcases.CaseKindTransform var_heap_2) (False -> _Tuple2 convertcases.CaseKindLeave var_heap_2) ) ) 
convertcases.map_st_252 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_252 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distributeLets_137 !_vdistributeLets_0 !di_1 !l_2 !cp_info_3 = convertcases.map_st_252 (select _vdistributeLets_0::<{convertcases.distributeLets;}> 0 di_1) l_2 cp_info_3
convertcases.distributeLets_139 !_vdistributeLets_0 !di_1 !bind_2 !cp_info_3 = case bind_2 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = select _vdistributeLets_0::<{convertcases.distributeLets;}> 0 di_1 bind_src_1_0 cp_info_3 in <{_Tuple2!3}> (update bind_2::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_355 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.determine_input_parameter_84 x_1_0 s_1, _x_2_2 = convertcases.map_st_355 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_351 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.set_strict_let_expr_info_82 x_1_0 s_1, _x_2_2 = convertcases.map_st_351 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_361 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.refresh_variable_93 x_1_0 s_1, _x_2_2 = convertcases.map_st_361 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.fold_st_362 depth_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_362 depth_0 x_1_1 (convertcases.mark_local_let_var_of_pattern_expr_100 depth_0 a_1_0 st_2)) 
convertcases.fold_st_356 _x_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_356 _x_0 x_1_1 (convertcases.is_outer_var_98 _x_0 a_1_0 st_2)) 
convertcases.fold_st_357 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_357 x_1_1 (convertcases.reset_local_let_var_97 a_1_0 st_1)) 
convertcases.distribute_lets_in_default_92 di_0 ref_counts_in_default_1 !_x_2 ds_3 = case _x_2 (general.Yes expr_1_0 -> let _x_2_0 = convertcases.distribute_lets_in_pattern_expr_99 di_0 ref_counts_in_default_1 expr_1_0 ds_3 in _Tuple2 (general.Yes (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (general.No -> _Tuple2 general.No ds_3) 
convertcases.map_st_358 di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distribute_lets_in_alg_pattern_91 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_358 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distribute_lets_in_basic_pattern_87 di_0 !_x_1 ds_2 = case _x_1 (_Tuple2 ref_counts_1_0 pattern_1_1 -> let _x_2_0 = convertcases.distribute_lets_in_pattern_expr_99 di_0 ref_counts_1_0 (select pattern_1_1::syntax._BasicPattern 1) ds_2 in _Tuple2 (update pattern_1_1::syntax._BasicPattern [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_359 di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distribute_lets_in_basic_pattern_87 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_359 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.reexamine_local_let_expr_101 !di_0 !_x_1 !ds_2 = case di_0 (convertcases._DistributeInfo di_depth_1_0 di_explicit_case_depth_1_1 -> case _x_1 (convertcases._CountedVariable cv_variable_2_0 cv_count_2_1 -> case ds_2 (convertcases._DistributeState ds_lets_3_0 ds_var_heap_3_1 ds_expr_heap_3_2 -> case (StdBool.not (<{StdInt.<_17}> cv_count_2_1 1)) (True -> let _x_5_0 = Heap.readPtr cv_variable_2_0 ds_var_heap_3_1, lei_5_1 = select (select _x_5_0::_Tuple2 0)::_Tuple1 0 in case (<{StdInt.==_16}> di_depth_1_0 (select lei_5_1::convertcases._LetExpressionInfo 1)) (True -> convertcases.distributeLetsInLetExpression di_0 cv_variable_2_0 lei_5_1 (update ds_2::convertcases._DistributeState [1:select _x_5_0::_Tuple2 1])) (False -> update ds_2::convertcases._DistributeState [1:select _x_5_0::_Tuple2 1]) ) (False -> ds_2) ) ) ) 
convertcases.fold_st_363 di_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_363 di_0 x_1_1 (convertcases.reexamine_local_let_expr_101 di_0 a_1_0 st_2)) 
convertcases.distribute_lets_in_pattern_expr_99 !di_0 local_vars_1 pattern_expr_2 !ds_3 = case di_0 (convertcases._DistributeInfo di_depth_1_0 di_explicit_case_depth_1_1 -> case ds_3 (convertcases._DistributeState ds_lets_2_0 ds_var_heap_2_1 ds_expr_heap_2_2 -> let ds_3_0 = update ds_3::convertcases._DistributeState [1:convertcases.fold_st_362 di_depth_1_0 local_vars_1 ds_var_heap_2_1], _x_3_1 = convertcases.distributeLets_134 di_0 pattern_expr_2 (update ds_3_0::convertcases._DistributeState [0:_predefined._Nil]), _x_3_2 = convertcases.buildLetExpr (select _x_3_1::_Tuple2 0) (convertcases.fold_st_363 di_0 local_vars_1 (select (select (select _x_3_1::_Tuple2 1)::convertcases._DistributeState 0)::_Tuple2 1)) in _Tuple2 (select _x_3_2::_Tuple2 0) (update (select _x_3_2::_Tuple2 1)::convertcases._DistributeState [0:select ds_3_0::convertcases._DistributeState 0])) ) 
convertcases.distribute_lets_in_alg_pattern_91 di_0 !_x_1 !ds_2 = case _x_1 (_Tuple2 ref_counts_1_0 pattern_1_1 -> case ds_2 (convertcases._DistributeState ds_lets_2_0 ds_var_heap_2_1 ds_expr_heap_2_2 -> let _x_3_0 = convertcases.map_st_361 (select pattern_1_1::syntax._AlgebraicPattern 1) ds_var_heap_2_1, _x_3_1 = convertcases.distribute_lets_in_pattern_expr_99 di_0 ref_counts_1_0 (select pattern_1_1::syntax._AlgebraicPattern 2) (update ds_2::convertcases._DistributeState [1:select _x_3_0::_Tuple2 1]) in _Tuple2 (update pattern_1_1::syntax._AlgebraicPattern [1:select _x_3_0::_Tuple2 0,2:select _x_3_1::_Tuple2 0]) (select _x_3_1::_Tuple2 1)) ) 
convertcases.map_st_360 di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distribute_lets_in_alg_pattern_91 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_360 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distribute_lets_in_patterns_90 di_0 ref_counts_1 !_x_2 ds_3 = case _x_2 (syntax.AlgebraicPatterns conses_1_0 patterns_1_1 -> let _x_2_0 = convertcases.map_st_358 di_0 (convertcases.exactZip ref_counts_1 patterns_1_1) ds_3 in _Tuple2 (syntax.AlgebraicPatterns conses_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.BasicPatterns type_1_0 patterns_1_1 -> let _x_2_0 = convertcases.map_st_359 di_0 (convertcases.exactZip ref_counts_1 patterns_1_1) ds_3 in _Tuple2 (syntax.BasicPatterns type_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.OverloadedListPatterns conses_1_0 decons_expr_1_1 patterns_1_2 -> let _x_2_0 = convertcases.map_st_360 di_0 (convertcases.exactZip ref_counts_1 patterns_1_2) ds_3 in _Tuple2 (syntax.OverloadedListPatterns conses_1_0 decons_expr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) 
convertcases.distributeLets_135 !di_0 !kees_1 !ds_2 = case di_0 (convertcases._DistributeInfo di_depth_1_0 di_explicit_case_depth_1_1 -> case kees_1 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> case ds_2 (convertcases._DistributeState ds_lets_3_0 ds_var_heap_3_1 ds_expr_heap_3_2 -> let new_depth_4_0 = <{StdInt.+_6}> di_depth_1_0 1, new_di_4_1 = update di_0::convertcases._DistributeInfo [0:new_depth_4_0,1:<{convertcases._if;602;50_452}> case_explicit_2_5 new_depth_4_0 di_explicit_case_depth_1_1], _x_4_2 = Heap.readPtr case_info_ptr_2_4 ds_expr_heap_3_2, _x_4_3 = select _x_4_2::_Tuple2 0, _x_4_4 = select _x_4_3::_Tuple2 1, tot_ref_counts_4_5 = select _x_4_4::convertcases._RefCountsInCase 0, _x_4_6 = convertcases.mark_local_let_vars_85 case_explicit_2_5 new_depth_4_0 tot_ref_counts_4_5 ds_var_heap_3_1, _x_4_7 = convertcases.distribute_lets_in_patterns_90 new_di_4_1 (select _x_4_4::convertcases._RefCountsInCase 2) case_guards_2_1 (update ds_2::convertcases._DistributeState [1:select _x_4_6::_Tuple2 1,2:select _x_4_2::_Tuple2 1]), _x_4_8 = convertcases.distribute_lets_in_default_92 new_di_4_1 (select _x_4_4::convertcases._RefCountsInCase 1) case_default_2_2 (select _x_4_7::_Tuple2 1), ds_4_9 = select _x_4_8::_Tuple2 1, _x_4_10 = convertcases.fold_st_356 new_di_4_1 tot_ref_counts_4_5 (_Tuple2 False (select ds_4_9::convertcases._DistributeState 1)), _x_4_11 = convertcases.distributeLets_134 di_0 case_expr_2_0 (update ds_4_9::convertcases._DistributeState [1:convertcases.fold_st_357 (select _x_4_6::_Tuple2 0) (select _x_4_10::_Tuple2 1)]), kees_4_12 = update kees_1::syntax._Case [0:select _x_4_11::_Tuple2 0,1:select _x_4_7::_Tuple2 0,2:select _x_4_8::_Tuple2 0], ds_4_13 = select _x_4_11::_Tuple2 1, _x_4_14 = convertcases.case_kind_88 (select _x_4_10::_Tuple2 0) kees_4_12 (select ds_4_13::convertcases._DistributeState 1), _x_4_15::I = Heap.newPtr (syntax.EI_CaseTypeAndSplits (select _x_4_3::_Tuple2 0) (convertcases._SplitsInCase general.No _predefined._Nil (select _x_4_14::_Tuple2 0))) (select ds_4_13::convertcases._DistributeState 2) in <{_Tuple2!3}> (update kees_4_12::syntax._Case [4:select _x_4_15::_Tuple2 0]) (update ds_4_13::convertcases._DistributeState [1:select _x_4_14::_Tuple2 1,2:select _x_4_15::_Tuple2 1])) ) ) 
convertcases.map_st_345 !di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distributeLets_134 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_345 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distributeLets_344 !di_0 !l_1 !cp_info_2 = convertcases.map_st_345 di_0 l_1 cp_info_2
convertcases.distributeLets_136 !di_0 !_x_1 !cp_info_2 = case _x_1 (syntax.ArraySelection selector_1_0 expr_ptr_1_1 expr_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_2 cp_info_2 in <{_Tuple2!3}> (syntax.ArraySelection selector_1_0 expr_ptr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.DictionarySelection var_1_0 selectors_1_1 expr_ptr_1_2 expr_1_3 -> let _x_2_0 = convertcases.distributeLets_346 di_0 selectors_1_1 cp_info_2, _x_2_1 = convertcases.distributeLets_134 di_0 expr_1_3 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.DictionarySelection var_1_0 (select _x_2_0::_Tuple2 0) expr_ptr_1_2 (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (_ -> <{_Tuple2!3}> _x_1 cp_info_2)
convertcases.map_st_347 !di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distributeLets_136 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_347 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distributeLets_346 !di_0 !l_1 !cp_info_2 = convertcases.map_st_347 di_0 l_1 cp_info_2
convertcases.distributeLets_348 !di_0 !bind_1 !cp_info_2 = case bind_1 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = convertcases.distributeLets_134 di_0 bind_src_1_0 cp_info_2 in <{_Tuple2!3}> (update bind_1::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_350 !di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distributeLets_348 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_350 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distributeLets_349 !di_0 !l_1 !cp_info_2 = convertcases.map_st_350 di_0 l_1 cp_info_2
convertcases.distribute_lets_in_non_distributed_let_83 di_0 !_x_1 !ds_2 = case _x_1 (syntax._LetBind _x_1_0 lb_src_1_1 lb_position_1_2 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> case ds_2 (convertcases._DistributeState ds_lets_3_0 ds_var_heap_3_1 ds_expr_heap_3_2 -> let _x_4_0 = Heap.readPtr fv_info_ptr_2_2 ds_var_heap_3_1, lei_4_1 = select (select _x_4_0::_Tuple2 0)::_Tuple1 0 in case (<{StdInt.<_17}> 0 (select lei_4_1::convertcases._LetExpressionInfo 0)) (True -> convertcases.distributeLetsInLetExpression di_0 fv_info_ptr_2_2 lei_4_1 (update ds_2::convertcases._DistributeState [1:select _x_4_0::_Tuple2 1])) (False -> update ds_2::convertcases._DistributeState [1:select _x_4_0::_Tuple2 1]) ) ) ) 
convertcases.fold_st_354 di_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_354 di_0 x_1_1 (convertcases.distribute_lets_in_non_distributed_let_83 di_0 a_1_0 st_2)) 
convertcases.distributeLets_138 !di_0 !bind_1 !cp_info_2 = case bind_1 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 lb_src_1_1 cp_info_2 in <{_Tuple2!3}> (update bind_1::syntax._LetBind [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_353 !di_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.distributeLets_138 di_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_353 di_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.distributeLets_352 !di_0 !l_1 !cp_info_2 = convertcases.map_st_353 di_0 l_1 cp_info_2
convertcases.distributeLetsInLetExpression _x_0 let_var_info_ptr_1 !_x_2 !ds_3 = case _x_2 (convertcases._LetExpressionInfo lei_count_1_0 lei_depth_1_1 lei_var_1_2 lei_expression_1_3 _x_1_4 lei_type_1_5 -> case _x_1_4 (convertcases.LES_Moved -> ds_3) (convertcases.LES_Updated _x_2_0 -> ds_3) (convertcases.LES_Untouched -> case ds_3 (convertcases._DistributeState ds_lets_3_0 ds_var_heap_3_1 ds_expr_heap_3_2 -> let ptr_and_val_4_0 = _Tuple2 let_var_info_ptr_1 (syntax.VI_LetExpression (update _x_2::convertcases._LetExpressionInfo [4:convertcases.LES_Updated syntax.EE])), _x_4_1 = convertcases.distributeLets_134 _x_0 lei_expression_1_3 (update ds_3::convertcases._DistributeState [1:Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) ds_var_heap_3_1]), ds_4_2 = select _x_4_1::_Tuple2 1, ptr_and_val_4_3 = _Tuple2 let_var_info_ptr_1 (syntax.VI_LetExpression (update _x_2::convertcases._LetExpressionInfo [4:convertcases.LES_Updated (select _x_4_1::_Tuple2 0)])) in update ds_4_2::convertcases._DistributeState [0:_predefined._Cons let_var_info_ptr_1 (select ds_4_2::convertcases._DistributeState 0),1:Heap.writePtr (select ptr_and_val_4_3::_Tuple2 0) (select ptr_and_val_4_3::_Tuple2 1) (select ds_4_2::convertcases._DistributeState 1)]) ) ) 
convertcases.distributeLets_134 !di_0 !_x_1 !ds_2 = case di_0 (convertcases._DistributeInfo di_depth_1_0 di_explicit_case_depth_1_1 -> case _x_1 (syntax.Var var_2_0 -> case var_2_0 (syntax._BoundVar var_ident_3_0 var_info_ptr_3_1 var_expr_ptr_3_2 -> case ds_2 (convertcases._DistributeState ds_lets_4_0 ds_var_heap_4_1 ds_expr_heap_4_2 -> let !var_info_5_0 = Heap.sreadPtr var_info_ptr_3_1 ds_var_heap_4_1 in <{convertcases._c;473;11_448}> var_info_5_0 di_depth_1_0 var_info_ptr_3_1 di_0 ds_2 var_2_0) ) ) ) (_ -> case _x_1 (syntax.Case kees_1_0 -> let _x_2_0 = convertcases.distributeLets_135 di_0 kees_1_0 ds_2 in <{_Tuple2!3}> (syntax.Case (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.App app_1_0 -> case app_1_0 (syntax._App app_symb_2_0 app_args_2_1 app_info_ptr_2_2 -> let _x_3_0 = convertcases.distributeLets_344 di_0 app_args_2_1 ds_2 in <{_Tuple2!3}> (syntax.App (update app_1_0::syntax._App [1:select _x_3_0::_Tuple2 0])) (select _x_3_0::_Tuple2 1)) ) (<{syntax.@}> fun_expr_1_0 exprs_1_1 -> let _x_2_0 = convertcases.distributeLets_134 di_0 fun_expr_1_0 ds_2, _x_2_1 = convertcases.distributeLets_344 di_0 exprs_1_1 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (<{syntax.@}> (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.BasicExpr _x_1_0 -> <{_Tuple2!3}> _x_1 ds_2) (syntax.Selection opt_tuple_1_0 expr_1_1 selectors_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_1 ds_2, _x_2_1 = convertcases.distributeLets_346 di_0 selectors_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.Selection opt_tuple_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.Update expr1_1_0 selectors_1_1 expr2_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr1_1_0 ds_2, _x_2_1 = convertcases.distributeLets_346 di_0 selectors_1_1 (select _x_2_0::_Tuple2 1), _x_2_2 = convertcases.distributeLets_134 di_0 expr2_1_2 (select _x_2_1::_Tuple2 1) in <{_Tuple2!3}> (syntax.Update (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) (select _x_2_2::_Tuple2 1)) (syntax.RecordUpdate cons_symbol_1_0 expr_1_1 exprs_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_1 ds_2, _x_2_1 = convertcases.distributeLets_349 di_0 exprs_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.RecordUpdate cons_symbol_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 expr_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_2 ds_2 in <{_Tuple2!3}> (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.Let lad_1_0 -> case di_0 (convertcases._DistributeInfo di_depth_2_0 di_explicit_case_depth_2_1 -> case lad_1_0 (syntax._Let let_strict_binds_3_0 let_lazy_binds_3_1 let_expr_3_2 let_info_ptr_3_3 let_expr_position_3_4 -> case ds_2 (convertcases._DistributeState ds_lets_4_0 ds_var_heap_4_1 ds_expr_heap_4_2 -> let nr_of_strict_lets_5_0::I = StdList.length_47 let_strict_binds_3_0 in case (<{StdInt.==_16}> nr_of_strict_lets_5_0 0) (True -> let _x_7_0 = Heap.readPtr let_info_ptr_3_3 ds_expr_heap_4_2, _x_7_1 = select _x_7_0::_Tuple2 0, _x_7_2 = convertcases.map_st_351 let_strict_binds_3_0 (convertcases.set_let_expr_info_81 di_depth_2_0 let_lazy_binds_3_1 (select _x_7_1::_Tuple2 1) (StdList.drop nr_of_strict_lets_5_0 (select _x_7_1::_Tuple2 0)) ds_var_heap_4_1), _x_7_3 = convertcases.distributeLets_134 di_0 let_expr_3_2 (update ds_2::convertcases._DistributeState [1:select _x_7_2::_Tuple2 1,2:select _x_7_0::_Tuple2 1]) in <{_Tuple2!3}> (select _x_7_3::_Tuple2 0) (convertcases.fold_st_354 di_0 let_lazy_binds_3_1 (select (convertcases.distributeLets_352 di_0 (select _x_7_2::_Tuple2 0) (select _x_7_3::_Tuple2 1))::_Tuple2 1))) (False -> let _x_7_0 = Heap.readPtr let_info_ptr_3_3 ds_expr_heap_4_2, let_info_7_1 = select _x_7_0::_Tuple2 0, ref_counts_7_3 = select let_info_7_1::_Tuple2 1, let_type_7_4 = select let_info_7_1::_Tuple2 0, ds_var_heap_7_5 = convertcases.set_let_expr_info_81 di_depth_2_0 let_lazy_binds_3_1 ref_counts_7_3 (StdList.drop nr_of_strict_lets_5_0 let_type_7_4) ds_var_heap_4_1, _x_7_6 = convertcases.map_st_351 let_strict_binds_3_0 ds_var_heap_7_5, ds_var_heap_7_7 = select _x_7_6::_Tuple2 1, ds_expr_heap_7_8 = select _x_7_0::_Tuple2 1, _x_7_9 = convertcases.distributeLets_134 di_0 let_expr_3_2 (update ds_2::convertcases._DistributeState [1:ds_var_heap_7_7,2:ds_expr_heap_7_8]), let_expr_7_10 = select _x_7_9::_Tuple2 0, let_strict_binds_7_11 = select _x_7_6::_Tuple2 0, ds_7_12 = select _x_7_9::_Tuple2 1 in <{convertcases._c;528;15_451}> let_expr_7_10 nr_of_strict_lets_5_0 let_type_7_4 di_0 let_lazy_binds_3_1 let_strict_binds_7_11 ds_7_12 lad_1_0) ) ) ) ) (syntax.MatchExpr constructor_1_0 expr_1_1 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_1 ds_2 in <{_Tuple2!3}> (syntax.MatchExpr constructor_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.IsConstructor expr_1_0 cons_symbol_1_1 cons_arity_1_2 global_type_index_1_3 case_ident_1_4 position_1_5 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_0 ds_2 in <{_Tuple2!3}> (syntax.IsConstructor (select _x_2_0::_Tuple2 0) cons_symbol_1_1 cons_arity_1_2 global_type_index_1_3 case_ident_1_4 position_1_5) (select _x_2_0::_Tuple2 1)) (syntax.TypeCodeExpression _x_1_0 -> <{_Tuple2!3}> _x_1 ds_2) (syntax.AnyCodeExpr in_params_1_0 out_params_1_1 code_expr_1_2 -> case ds_2 (convertcases._DistributeState ds_lets_2_0 ds_var_heap_2_1 ds_expr_heap_2_2 -> let _x_3_0 = convertcases.map_st_355 in_params_1_0 ds_var_heap_2_1 in <{_Tuple2!3}> (syntax.AnyCodeExpr (select _x_3_0::_Tuple2 0) out_params_1_1 code_expr_1_2) (update ds_2::convertcases._DistributeState [1:select _x_3_0::_Tuple2 1])) ) (syntax.ABCCodeExpr _x_1_0 _x_1_1 -> <{_Tuple2!3}> _x_1 ds_2) (syntax.EE -> <{_Tuple2!3}> syntax.EE ds_2) (syntax.NoBind ptr_1_0 -> <{_Tuple2!3}> (syntax.NoBind ptr_1_0) ds_2) (syntax.FailExpr id_1_0 -> <{_Tuple2!3}> (syntax.FailExpr id_1_0) ds_2) (syntax.DictionariesFunction dictionaries_1_0 expr_1_1 expr_type_1_2 -> let _x_2_0 = convertcases.distributeLets_134 di_0 expr_1_1 ds_2 in <{_Tuple2!3}> (syntax.DictionariesFunction dictionaries_1_0 (select _x_2_0::_Tuple2 0) expr_type_1_2) (select _x_2_0::_Tuple2 1)) )
<{convertcases._if;602;50_452}>::I !case_explicit_0::B new_depth_1::I di_explicit_case_depth_2::I = case case_explicit_0 (True -> new_depth_1) (_ -> di_explicit_case_depth_2)
<{convertcases._c;528;15_451}> !let_expr_0 !nr_of_strict_lets_1::I let_type_2 !di_3 let_lazy_binds_4 !let_strict_binds_5 !ds_6 lad_7 = case let_expr_0 (syntax.Let inner_let_1_0 -> convertcases._f450_450 inner_let_1_0 nr_of_strict_lets_1 let_type_2 di_3 let_lazy_binds_4 let_strict_binds_5 ds_6 lad_7 let_expr_0) (_ -> <{convertcases._c;528;15_449}> nr_of_strict_lets_1 let_type_2 di_3 let_lazy_binds_4 let_strict_binds_5 ds_6 lad_7 let_expr_0)
convertcases._f450_450 !inner_let_0 !nr_of_strict_lets_1::I let_type_2 !di_3 !let_lazy_binds_4 !let_strict_binds_5 !ds_6 lad_7 let_expr_8 = case inner_let_0 (syntax._Let let_strict_binds_1_0 let_lazy_binds_1_1 let_expr_1_2 inner_let_info_ptr_1_3 let_expr_position_1_4 -> let _x_2_0 = convertcases.distributeLets_352 di_3 let_strict_binds_5 ds_6, ds_2_1 = convertcases.fold_st_354 di_3 let_lazy_binds_4 (select _x_2_0::_Tuple2 1), _x_2_2 = Heap.readPtr inner_let_info_ptr_1_3 (select ds_2_1::convertcases._DistributeState 2), _x_2_3 = Heap.newPtr (syntax.EI_LetType (<{StdList.++}> (StdList.take nr_of_strict_lets_1 let_type_2) (select (select _x_2_2::_Tuple2 0)::_Tuple1 0))) (select _x_2_2::_Tuple2 1) in <{_Tuple2!3}> (syntax.Let (update inner_let_0::syntax._Let [0:<{StdList.++}> (select _x_2_0::_Tuple2 0) (select inner_let_0::syntax._Let 0),3:select _x_2_3::_Tuple2 0])) (update ds_2_1::convertcases._DistributeState [2:select _x_2_3::_Tuple2 1])) (_ -> <{convertcases._c;528;15_449}> nr_of_strict_lets_1 let_type_2 di_3 let_lazy_binds_4 let_strict_binds_5 ds_6 lad_7 let_expr_8)
<{convertcases._c;528;15_449}> !nr_of_strict_lets_0::I let_type_1 !di_2 let_lazy_binds_3 !let_strict_binds_4 !ds_5 !lad_6 !let_expr_7 = let _x_1_0 = convertcases.distributeLets_352 di_2 let_strict_binds_4 ds_5, ds_1_1 = convertcases.fold_st_354 di_2 let_lazy_binds_3 (select _x_1_0::_Tuple2 1), _x_1_2 = Heap.newPtr (syntax.EI_LetType (StdList.take nr_of_strict_lets_0 let_type_1)) (select ds_1_1::convertcases._DistributeState 2) in <{_Tuple2!3}> (syntax.Let (update lad_6::syntax._Let [0:select _x_1_0::_Tuple2 0,1:_predefined._Nil,2:let_expr_7,3:select _x_1_2::_Tuple2 0])) (update ds_1_1::convertcases._DistributeState [2:select _x_1_2::_Tuple2 1])
<{convertcases._c;473;11_448}> !var_info_0 di_depth_1::I var_info_ptr_2 di_3 !ds_4 var_5 = case var_info_0 (syntax.VI_LetExpression lei_1_0 -> case (<{StdInt.==_16}> (select lei_1_0::convertcases._LetExpressionInfo 1) di_depth_1) (True -> case (convertcases._f447_447 (<{StdInt.==_16}> (select lei_1_0::convertcases._LetExpressionInfo 0) 1) lei_1_0) (True -> let _x_4_0 = convertcases.distributeLets_134 di_3 (select lei_1_0::convertcases._LetExpressionInfo 3) ds_4, lei_updated_expr_4_1 = select _x_4_0::_Tuple2 0, ds_4_2 = select _x_4_0::_Tuple2 1, ptr_and_val_4_3 = _Tuple2 var_info_ptr_2 (syntax.VI_LetExpression (update lei_1_0::convertcases._LetExpressionInfo [4:convertcases.LES_Updated lei_updated_expr_4_1])) in <{_Tuple2!3}> lei_updated_expr_4_1 (update ds_4_2::convertcases._DistributeState [1:Heap.writePtr (select ptr_and_val_4_3::_Tuple2 0) (select ptr_and_val_4_3::_Tuple2 1) (select ds_4_2::convertcases._DistributeState 1)])) (False -> <{_Tuple2!3}> (syntax.Var (update var_5::syntax._BoundVar [1:select (select lei_1_0::convertcases._LetExpressionInfo 2)::syntax._FreeVar 2])) (convertcases.distributeLetsInLetExpression di_3 var_info_ptr_2 lei_1_0 ds_4)) ) (False -> <{_Tuple2!3}> (syntax.Var (update var_5::syntax._BoundVar [1:select (select lei_1_0::convertcases._LetExpressionInfo 2)::syntax._FreeVar 2])) ds_4) ) (syntax.VI_CaseOrStrictLetVar var_info_ptr_1_0 -> <{_Tuple2!3}> (syntax.Var (update var_5::syntax._BoundVar [1:var_info_ptr_1_0])) ds_4) (_ -> <{_Tuple2!3}> (syntax.Var var_5) ds_4)
convertcases._f447_447::B !_x_0::B lei_1 = case _x_0 (True -> <{convertcases._c;476;46_446}> (select lei_1::convertcases._LetExpressionInfo 4)) (_ -> False)
<{convertcases._c;476;46_446}>::B !_x_0 = case _x_0 (convertcases.LES_Updated _x_1_0 -> False) (_ -> True)
convertcases.use_outer_alt_for_last_alt_104 !_x_0 si_1 = case _x_0 (general.No -> general.Yes si_1) (general.Yes _x_1_0 -> general.No) 
convertcases.incAltNr_144::I !alt_nr_0::I = <{StdInt.+_6}> alt_nr_0 1
convertcases.incAltNr_145 !next_alt_0 = case next_alt_0 (convertcases._NextAlt na_case_1_0 na_alt_nr_1_1 -> update next_alt_0::convertcases._NextAlt [1:convertcases.incAltNr_144 na_alt_nr_1_1]) 
convertcases.incAltNr_146 !_vincAltNr_0 !_x_1 = case _x_1 (general.No -> general.No) (general.Yes x_1_0 -> general.Yes (select _vincAltNr_0::<{convertcases.incAltNr;}> 0 x_1_0)) 
convertcases.incAltNr_364 !_x_0 = case _x_0 (general.No -> general.No) (general.Yes x_1_0 -> general.Yes (convertcases.incAltNr_145 x_1_0)) 
convertcases.incAltNr_147 !si_0 = case si_0 (convertcases._SplitInfo si_next_alt_1_0 si_force_next_alt_1_1 -> update si_0::convertcases._SplitInfo [0:convertcases.incAltNr_364 si_next_alt_1_0]) 
convertcases.split_alts_103 !_vfindSplitCases_0 _x_1 _x_2 !_x_3 ss_4 = case _x_3 (_predefined._Nil -> ss_4) (_predefined._Cons last_1_0 _x_1_1 -> case _x_2 (general.Yes si_2_0 -> case _x_1_1 (_predefined._Nil -> select _vfindSplitCases_0::<{convertcases.findSplitCases;}> 0 si_2_0 last_1_0 ss_4) ) (_ -> convertcases.split_alts_103 _vfindSplitCases_0 (convertcases.incAltNr_147 _x_1) _x_2 _x_1_1 (select _vfindSplitCases_0::<{convertcases.findSplitCases;}> 0 _x_1 last_1_0 ss_4))) 
convertcases.jumps_to_next_alt_64::B kees_0 case_info_ptr_1 !_x_2 _x_3 = case _x_2 (convertcases._SplitsInCase sic_next_alt_1_0 _x_1_1 sic_case_kind_1_2 -> case _x_1_1 (_predefined._Cons _x_2_0 _x_2_1 -> case _x_3 (syntax._Case case_expr_3_0 case_guards_3_1 case_default_3_2 case_ident_3_3 case_info_ptr_3_4 _x_3_5 case_default_pos_3_6 -> case _x_3_5 (False -> True) ) ) (_ -> case sic_case_kind_1_2 (convertcases.CaseKindTransform -> case _x_3 (syntax._Case case_expr_3_0 case_guards_3_1 case_default_3_2 case_ident_3_3 case_info_ptr_3_4 _x_3_5 case_default_pos_3_6 -> case _x_3_5 (False -> True) ) ) )) (_ -> False)
convertcases.findSplitCases_140 !_vfindSplitCases_0 !_x_1 !_x_2 !ss_3 = case _x_2 (general.No -> ss_3) (general.Yes x_1_0 -> select _vfindSplitCases_0::<{convertcases.findSplitCases;}> 0 _x_1 x_1_0 ss_3) 
convertcases.findSplitCases_150 !si_0 !_x_1 !ss_2 = case _x_1 (syntax._Let let_strict_binds_1_0 let_lazy_binds_1_1 let_expr_1_2 let_info_ptr_1_3 let_expr_position_1_4 -> convertcases.findSplitCases_141 si_0 let_expr_1_2 ss_2) 
convertcases.findSplitCases_367 !_x_0 !_x_1 !ss_2 = case _x_1 (general.No -> ss_2) (general.Yes x_1_0 -> convertcases.findSplitCases_141 _x_0 x_1_0 ss_2) 
convertcases.nextAlts !si_0 !kees_1 !ss_2 = case si_0 (convertcases._SplitInfo si_next_alt_1_0 si_force_next_alt_1_1 -> case si_next_alt_1_0 (general.Yes next_alt_2_0 -> case kees_1 (syntax._Case case_expr_3_0 case_guards_3_1 case_default_3_2 case_ident_3_3 case_info_ptr_3_4 case_explicit_3_5 case_default_pos_3_6 -> let jumps_4_0 = convertcases._f453_453 (StdBool.not (select kees_1::syntax._Case 5)) si_force_next_alt_1_1 kees_1 case_info_ptr_3_4 splits_4_3, _x_4_1 = Heap.readPtr case_info_ptr_3_4 (select ss_2::convertcases._SplitState 0), _x_4_2 = select _x_4_1::_Tuple2 0, splits_4_3::B = select _x_4_2::_Tuple2 1 in case (case jumps_4_0 (True -> StdBool.not (general.hasOption case_default_3_2)) (False -> False) ) (True -> let ss_6_0 = convertcases.findSplitCases_367 (update si_0::convertcases._SplitInfo [1:jumps_4_0]) case_default_3_2 (update ss_2::convertcases._SplitState [0:select _x_4_1::_Tuple2 1]), ptr_and_val_6_1 = _Tuple2 case_info_ptr_3_4 (syntax.EI_CaseTypeAndSplits (select _x_4_2::_Tuple2 0) (update splits_4_3::convertcases._SplitsInCase [0:general.Yes next_alt_2_0])), _x_6_2 = Heap.readPtr (select next_alt_2_0::convertcases._NextAlt 0) (Heap.writePtr (select ptr_and_val_6_1::_Tuple2 0) (select ptr_and_val_6_1::_Tuple2 1) (select ss_6_0::convertcases._SplitState 0)), _x_6_3 = select _x_6_2::_Tuple2 0, splits_6_4 = select _x_6_3::_Tuple2 1, ptr_and_val_6_5 = _Tuple2 (select next_alt_2_0::convertcases._NextAlt 0) (syntax.EI_CaseTypeAndSplits (select _x_6_3::_Tuple2 0) (update splits_6_4::convertcases._SplitsInCase [1:_predefined._Cons (convertcases._SplitCase (select next_alt_2_0::convertcases._NextAlt 1) general.No) (select splits_6_4::convertcases._SplitsInCase 1)])) in update ss_6_0::convertcases._SplitState [0:Heap.writePtr (select ptr_and_val_6_5::_Tuple2 0) (select ptr_and_val_6_5::_Tuple2 1) (select _x_6_2::_Tuple2 1)]) (False -> convertcases.findSplitCases_367 (update si_0::convertcases._SplitInfo [1:jumps_4_0]) case_default_3_2 (update ss_2::convertcases._SplitState [0:select _x_4_1::_Tuple2 1])) ) ) ) (_ -> case kees_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> convertcases.findSplitCases_367 si_0 case_default_1_2 ss_2) )
convertcases.findSplitCases_149 !si_0 !_x_1 !ss_2 = case _x_1 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> convertcases.findSplitCases_141 si_0 bp_expr_1_1 ss_2) 
convertcases.split_alts_366 _x_0 _x_1 !_x_2 !ss_3 = case _x_2 (_predefined._Nil -> ss_3) (_predefined._Cons last_1_0 _x_1_1 -> case _x_1 (general.Yes si_2_0 -> case _x_1_1 (_predefined._Nil -> convertcases.findSplitCases_149 si_2_0 last_1_0 ss_3) ) (_ -> convertcases.split_alts_366 (convertcases.incAltNr_147 _x_0) _x_1 _x_1_1 (convertcases.findSplitCases_149 _x_0 last_1_0 ss_3))) 
convertcases.findSplitCases_148 !si_0 !_x_1 !ss_2 = case _x_1 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> convertcases.findSplitCases_141 si_0 ap_expr_1_2 ss_2) 
convertcases.split_alts_365 _x_0 _x_1 !_x_2 !ss_3 = case _x_2 (_predefined._Nil -> ss_3) (_predefined._Cons last_1_0 _x_1_1 -> case _x_1 (general.Yes si_2_0 -> case _x_1_1 (_predefined._Nil -> convertcases.findSplitCases_148 si_2_0 last_1_0 ss_3) ) (_ -> convertcases.split_alts_365 (convertcases.incAltNr_147 _x_0) _x_1 _x_1_1 (convertcases.findSplitCases_148 _x_0 last_1_0 ss_3))) 
convertcases.split_guards_102 si_0 use_outer_alt_1 !_x_2 !ss_3 = case _x_2 (syntax.AlgebraicPatterns _x_1_0 alts_1_1 -> convertcases.split_alts_365 si_0 use_outer_alt_1 alts_1_1 ss_3) (syntax.BasicPatterns _x_1_0 alts_1_1 -> convertcases.split_alts_366 si_0 use_outer_alt_1 alts_1_1 ss_3) (syntax.OverloadedListPatterns _x_1_0 _x_1_1 alts_1_2 -> convertcases.split_alts_365 si_0 use_outer_alt_1 alts_1_2 ss_3) 
convertcases.findSplitCases_142 !si_0 !kees_1 !ss_2 = case kees_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> convertcases.nextAlts si_0 kees_1 (convertcases.split_guards_102 (update si_0::convertcases._SplitInfo [0:general.Yes (convertcases._NextAlt case_info_ptr_1_4 1),1:False]) (convertcases.use_outer_alt_for_last_alt_104 case_default_1_2 si_0) case_guards_1_1 ss_2)) 
convertcases.findSplitCases_141 !si_0 !_x_1 !ss_2 = case _x_1 (syntax.Let lad_1_0 -> convertcases.findSplitCases_150 si_0 lad_1_0 ss_2) (syntax.Case kees_1_0 -> convertcases.findSplitCases_142 si_0 kees_1_0 ss_2) (_ -> ss_2)
convertcases._f453_453::B !_x_0::B si_force_next_alt_1::B kees_2 case_info_ptr_3 splits_4 = case _x_0 (True -> case si_force_next_alt_1 (True -> True) (False -> convertcases.jumps_to_next_alt_64 kees_2 case_info_ptr_3 splits_4 kees_2) ) (_ -> False)
convertcases.eliminate_code_sharing_in_function_51 dcl_functions_0 main_dcl_module_n_1::I common_defs_2 !_x_3 !_x_4 = case _x_3 (syntax.TransformedBody body_1_0 -> case body_1_0 (syntax._TransformedBody tb_args_2_0 tb_rhs_2_1 -> case _x_4 (_Tuple2 collected_imports_3_0 cs_3_1 -> case cs_3_1 (convertcases._ConvertState cs_new_functions_4_0 cs_fun_heap_4_1 cs_var_heap_4_2 cs_expr_heap_4_3 cs_next_fun_nr_4_4 -> let _x_5_0 = convertcases.weightedRefCount_126 (convertcases._RCInfo (convertcases._CheckImportedInfo dcl_functions_0 common_defs_2 main_dcl_module_n_1) 1) tb_rhs_2_1 (convertcases._RCState _predefined._Nil collected_imports_3_0 cs_var_heap_4_2 cs_expr_heap_4_3), _x_5_1 = convertcases.distributeLets_134 (convertcases._DistributeInfo 1 0) tb_rhs_2_1 (convertcases._DistributeState _predefined._Nil (select _x_5_0::convertcases._RCState 2) (select _x_5_0::convertcases._RCState 3)), _x_5_2 = convertcases.buildLetExpr (select _x_5_1::_Tuple2 0) (select _x_5_1::_Tuple2 1), tb_rhs_5_3 = select _x_5_2::_Tuple2 0, _x_5_4 = select _x_5_2::_Tuple2 1, _x_5_5 = convertcases.findSplitCases_141 (convertcases._SplitInfo general.No False) tb_rhs_5_3 (convertcases._SplitState (select _x_5_4::convertcases._DistributeState 2) (select _x_5_4::convertcases._DistributeState 1)) in _Tuple2 (syntax.TransformedBody (update body_1_0::syntax._TransformedBody [1:tb_rhs_5_3])) (_Tuple2 (select _x_5_0::convertcases._RCState 1) (update cs_3_1::convertcases._ConvertState [2:select _x_5_5::convertcases._SplitState 1,3:select _x_5_5::convertcases._SplitState 0]))) ) ) ) 
convertcases.addLetVars !_x_0 !_x_1 bound_vars_2 = case _x_0 (_predefined._Cons _x_1_0 binds_1_1 -> case _x_1_0 (syntax._LetBind lb_dst_2_0 lb_src_2_1 lb_position_2_2 -> case _x_1 (_predefined._Cons bind_type_3_0 bind_types_3_1 -> convertcases.addLetVars binds_1_1 bind_types_3_1 (_predefined._Cons (_Tuple2 lb_dst_2_0 bind_type_3_0) bound_vars_2)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> bound_vars_2) ) 
convertcases.map_st_255 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_255 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertCases_167 !_vconvertCases_0 !ci_1 !l_2 !cs_3 = convertcases.map_st_255 (select _vconvertCases_0::<{convertcases.convertCases;}> 0 ci_1) l_2 cs_3
convertcases.case_is_degenerate_68 !_x_0 = case _x_0 (syntax._Case case_expr_1_0 _x_1_1 _x_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> case _x_1_1 (syntax.AlgebraicPatterns _x_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> case _x_1_2 (general.Yes defoult_4_0 -> _Tuple2 True defoult_4_0) ) ) (syntax.BasicPatterns _x_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> case _x_1_2 (general.Yes defoult_4_0 -> _Tuple2 True defoult_4_0) ) ) (syntax.OverloadedListPatterns _x_2_0 _x_2_1 _x_2_2 -> case _x_2_2 (_predefined._Nil -> case _x_1_2 (general.Yes defoult_4_0 -> _Tuple2 True defoult_4_0) ) ) ) (_ -> _Tuple2 False StdMisc.undef)
convertcases.store_VI_BoundVar_in_bound_vars_and_save_old_values !_x_0 old_fv_info_ptr_values_1 var_heap_2 = case _x_0 (_predefined._Cons _x_1_0 bound_vars_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 type_2_1 -> case _x_2_0 (syntax._FreeVar fv_def_level_3_0 fv_ident_3_1 fv_info_ptr_3_2 fv_count_3_3 -> let _x_4_0 = Heap.readPtr fv_info_ptr_3_2 var_heap_2, _x_4_1 = convertcases.store_VI_BoundVar_in_bound_vars_and_save_old_values bound_vars_1_1 old_fv_info_ptr_values_1 (Heap.writePtr fv_info_ptr_3_2 (syntax.VI_BoundVar type_2_1) (select _x_4_0::_Tuple2 1)) in _Tuple2 (_predefined._Cons (select _x_4_0::_Tuple2 0) (select _x_4_1::_Tuple2 0)) (select _x_4_1::_Tuple2 1)) ) ) (_predefined._Nil -> _Tuple2 old_fv_info_ptr_values_1 var_heap_2) 
convertcases.fold_st_232 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_232 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.retrieve_variable_71 !_x_0 !_x_1 = case _x_0 (_Tuple2 var_info_ptr_1_0 type_1_1 -> case _x_1 (_Tuple3 bound_vars_2_0 free_typed_vars_2_1 var_heap_2_2 -> let _x_3_0 = Heap.readPtr var_info_ptr_1_0 var_heap_2_2, _x_3_1 = select _x_3_0::_Tuple2 0, name_3_2 = select _x_3_1::_Tuple4 0 in _Tuple3 (_predefined._Cons (syntax.Var (syntax._BoundVar name_3_2 var_info_ptr_1_0 Heap.nilPtr)) bound_vars_2_0) (_predefined._Cons (_Tuple2 (syntax._FreeVar -1 name_3_2 (select _x_3_1::_Tuple4 1) (select _x_3_1::_Tuple4 2)) (select _x_3_1::_Tuple4 3)) free_typed_vars_2_1) (select _x_3_0::_Tuple2 1)) ) 
convertcases.fold_st_368 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_368 x_1_1 (convertcases.retrieve_variable_71 a_1_0 st_1)) 
convertcases.retrieve_variables !cp_free_vars_0 cp_var_heap_1 = convertcases.fold_st_368 cp_free_vars_0 (_Tuple3 _predefined._Nil _predefined._Nil cp_var_heap_1)
convertcases.fold_st_258 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_258 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.fold_st_257 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_257 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.bind_let_var_119 !_x_0 !_x_1 = case _x_0 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> case _x_1 (_Tuple2 local_vars_2_0 var_heap_2_1 -> let ptr_and_val_3_0 = _Tuple2 (select lb_dst_1_0::syntax._FreeVar 2) syntax.VI_LocalVar in _Tuple2 (_predefined._Cons lb_dst_1_0 local_vars_2_0) (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_2_1)) ) 
convertcases.copy_175 !var_0 !cp_info_1 = case var_0 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> case cp_info_1 (convertcases._CopyState cp_free_vars_2_0 cp_local_vars_2_1 cp_var_heap_2_2 -> let _x_3_0 = Heap.readPtr var_info_ptr_1_1 cp_var_heap_2_2, cp_var_heap_3_1 = select _x_3_0::_Tuple2 1 in <{convertcases._c;1869;11_454}> (select _x_3_0::_Tuple2 0) var_info_ptr_1_1 cp_info_1 cp_var_heap_3_1 var_0 var_ident_1_0) ) 
<{convertcases._c;1869;11_454}> !_x_0 var_info_ptr_1 !cp_info_2 !cp_var_heap_3 !var_4 var_ident_5 = case _x_0 (syntax.VI_FreeVar name_1_0 new_info_ptr_1_1 count_1_2 type_1_3 -> let cp_info_2_0 = update cp_info_2::convertcases._CopyState [2:cp_var_heap_3], ptr_and_val_2_1 = _Tuple2 var_info_ptr_1 (syntax.VI_FreeVar name_1_0 new_info_ptr_1_1 (<{StdInt.+_6}> count_1_2 StdInt.one_11) type_1_3) in <{_Tuple2!3}> (update var_4::syntax._BoundVar [1:new_info_ptr_1_1]) (update cp_info_2_0::convertcases._CopyState [2:Heap.writePtr (select ptr_and_val_2_1::_Tuple2 0) (select ptr_and_val_2_1::_Tuple2 1) (select cp_info_2_0::convertcases._CopyState 2)])) (syntax.VI_LocalVar -> <{_Tuple2!3}> var_4 (update cp_info_2::convertcases._CopyState [2:cp_var_heap_3])) (syntax.VI_BoundVar type_1_0 -> let cp_info_2_0 = update cp_info_2::convertcases._CopyState [2:cp_var_heap_3], _x_2_1 = Heap.newPtr (syntax.VI_Labelled_Empty "copy [BoundVar]") (select cp_info_2_0::convertcases._CopyState 2), new_info_ptr_2_2 = select _x_2_1::_Tuple2 0, ptr_and_val_2_3 = _Tuple2 var_info_ptr_1 (syntax.VI_FreeVar var_ident_5 new_info_ptr_2_2 1 type_1_0) in <{_Tuple2!3}> (update var_4::syntax._BoundVar [1:new_info_ptr_2_2]) (update cp_info_2_0::convertcases._CopyState [0:_predefined._Cons (_Tuple2 var_info_ptr_1 type_1_0) (select cp_info_2_0::convertcases._CopyState 0),2:Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_1::_Tuple2 1)])) (_ -> StdMisc.abort "copy [BoundVar] (convertcases)")
convertcases.map_st_260 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_260 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_184 !_vcopy_0 !l_1 !cp_info_2 = convertcases.map_st_260 (select _vcopy_0::<{convertcases.copy;}> 0) l_1 cp_info_2
convertcases.copy_177 !_vcopy_0 !_x_1 !cp_info_2 = case _x_1 (general.Yes expr_1_0 -> let _x_2_0 = select _vcopy_0::<{convertcases.copy;}> 0 expr_1_0 cp_info_2 in <{_Tuple2!3}> (general.Yes (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (general.No -> <{_Tuple2!3}> general.No cp_info_2) 
convertcases.fold_st_259 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_259 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.bind_pattern_var_120 !pattern_var_0 !_x_1 = case pattern_var_0 (syntax._FreeVar fv_def_level_1_0 fv_ident_1_1 fv_info_ptr_1_2 fv_count_1_3 -> case _x_1 (_Tuple2 local_vars_2_0 var_heap_2_1 -> let ptr_and_val_3_0 = _Tuple2 fv_info_ptr_1_2 syntax.VI_LocalVar in _Tuple2 (_predefined._Cons pattern_var_0 local_vars_2_0) (Heap.writePtr (select ptr_and_val_3_0::_Tuple2 0) (select ptr_and_val_3_0::_Tuple2 1) var_heap_2_1)) ) 
convertcases.copy_185 !_vcopy_0 !_vcopy_1 !t_2 !cp_info_3 = utilities.app2St (_Tuple2 (select _vcopy_0::<{convertcases.copy;}> 0) (select _vcopy_1::<{convertcases.copy;}> 0)) t_2 cp_info_3
convertcases.copy_187 !_vcopy_0 !bind_1 !cp_info_2 = case bind_1 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = select _vcopy_0::<{convertcases.copy;}> 0 bind_src_1_0 cp_info_2 in <{_Tuple2!3}> (update bind_1::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.fold_st_387 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_387 x_1_1 (convertcases.bind_pattern_var_120 a_1_0 st_1)) 
convertcases.fold_st_372 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_372 x_1_1 (convertcases.bind_let_var_119 a_1_0 st_1)) 
convertcases.fold_st_373 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_373 x_1_1 (convertcases.bind_let_var_119 a_1_0 st_1)) 
convertcases.map_st_370 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_176 x_1_0 s_1, _x_2_2 = convertcases.map_st_370 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_369 !l_0 !cp_info_1 = convertcases.map_st_370 l_0 cp_info_1
convertcases.copy_388 !t_0 !cp_info_1 = utilities.app2St (_Tuple2 convertcases.copy_176 convertcases.copy_369) t_0 cp_info_1
convertcases.copy_186 !bind_0 !cp_info_1 = case bind_0 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> let _x_2_0 = convertcases.copy_176 lb_src_1_1 cp_info_1 in <{_Tuple2!3}> (update bind_0::syntax._LetBind [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_375 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_186 x_1_0 s_1, _x_2_2 = convertcases.map_st_375 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_374 !l_0 !cp_info_1 = convertcases.map_st_375 l_0 cp_info_1
convertcases.copy_183 !pattern_0 !cp_info_1 = case pattern_0 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> let _x_2_0 = convertcases.copy_176 bp_expr_1_1 cp_info_1 in <{_Tuple2!3}> (update pattern_0::syntax._BasicPattern [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_386 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_183 x_1_0 s_1, _x_2_2 = convertcases.map_st_386 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_385 !l_0 !cp_info_1 = convertcases.map_st_386 l_0 cp_info_1
convertcases.copy_182 !pattern_0 !cp_info_1 = case pattern_0 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> case cp_info_1 (convertcases._CopyState cp_free_vars_2_0 cp_local_vars_2_1 cp_var_heap_2_2 -> let _x_3_0 = convertcases.fold_st_387 ap_vars_1_1 (_Tuple2 cp_local_vars_2_1 cp_var_heap_2_2), _x_3_1 = convertcases.copy_176 ap_expr_1_2 (update cp_info_1::convertcases._CopyState [1:select _x_3_0::_Tuple2 0,2:select _x_3_0::_Tuple2 1]) in <{_Tuple2!3}> (update pattern_0::syntax._AlgebraicPattern [2:select _x_3_1::_Tuple2 0]) (select _x_3_1::_Tuple2 1)) ) 
convertcases.map_st_384 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_182 x_1_0 s_1, _x_2_2 = convertcases.map_st_384 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_383 !l_0 !cp_info_1 = convertcases.map_st_384 l_0 cp_info_1
convertcases.copy_181 !_x_0 !cp_info_1 = case _x_0 (syntax.AlgebraicPatterns type_1_0 patterns_1_1 -> let _x_2_0 = convertcases.copy_383 patterns_1_1 cp_info_1 in <{_Tuple2!3}> (syntax.AlgebraicPatterns type_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.BasicPatterns type_1_0 patterns_1_1 -> let _x_2_0 = convertcases.copy_385 patterns_1_1 cp_info_1 in <{_Tuple2!3}> (syntax.BasicPatterns type_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.OverloadedListPatterns type_1_0 decons_expr_1_1 patterns_1_2 -> let _x_2_0 = convertcases.copy_383 patterns_1_2 cp_info_1, _x_2_1 = convertcases.copy_176 decons_expr_1_1 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.OverloadedListPatterns type_1_0 (select _x_2_1::_Tuple2 0) (select _x_2_0::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) 
convertcases.copy_391 !t_0 !cp_info_1 = utilities.app2St (_Tuple2 convertcases.copy_181 convertcases.copy_381) t_0 cp_info_1
convertcases.copy_392 !t_0 !cp_info_1 = utilities.app2St (_Tuple2 convertcases.copy_176 convertcases.copy_391) t_0 cp_info_1
convertcases.copy_179 !this_case_0 !cp_info_1 = case this_case_0 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> let _x_2_0 = convertcases.copy_392 (_Tuple2 case_expr_1_0 (_Tuple2 case_guards_1_1 case_default_1_2)) cp_info_1, _x_2_1 = select _x_2_0::_Tuple2 0, _x_2_2 = select _x_2_1::_Tuple2 1 in <{_Tuple2!3}> (update this_case_0::syntax._Case [0:select _x_2_1::_Tuple2 0,1:select _x_2_2::_Tuple2 0,2:select _x_2_2::_Tuple2 1]) (select _x_2_0::_Tuple2 1)) 
convertcases.copy_381 !_x_0 !cp_info_1 = case _x_0 (general.Yes expr_1_0 -> let _x_2_0 = convertcases.copy_176 expr_1_0 cp_info_1 in <{_Tuple2!3}> (general.Yes (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (general.No -> <{_Tuple2!3}> general.No cp_info_1) 
convertcases.copy_389 !t_0 !cp_info_1 = utilities.app2St (_Tuple2 convertcases.copy_176 convertcases.copy_381) t_0 cp_info_1
convertcases.copy_390 !t_0 !cp_info_1 = utilities.app2St (_Tuple2 convertcases.copy_176 convertcases.copy_389) t_0 cp_info_1
convertcases.copy_180 !cond_0 !cp_info_1 = case cond_0 (syntax._Conditional if_cond_1_0 if_then_1_1 if_else_1_2 -> let _x_2_0 = convertcases.copy_390 (_Tuple2 if_cond_1_0 (_Tuple2 if_then_1_1 if_else_1_2)) cp_info_1, _x_2_1 = select _x_2_0::_Tuple2 0, _x_2_2 = select _x_2_1::_Tuple2 1 in <{_Tuple2!3}> (update cond_0::syntax._Conditional [0:select _x_2_1::_Tuple2 0,1:select _x_2_2::_Tuple2 0,2:select _x_2_2::_Tuple2 1]) (select _x_2_0::_Tuple2 1)) 
convertcases.copy_178 !_x_0 !cp_info_1 = case _x_0 (syntax.DictionarySelection record_1_0 selectors_1_1 expr_ptr_1_2 index_expr_1_3 -> let _x_2_0 = convertcases.copy_176 index_expr_1_3 cp_info_1, _x_2_1 = convertcases.copy_376 selectors_1_1 (select _x_2_0::_Tuple2 1), _x_2_2 = convertcases.copy_175 record_1_0 (select _x_2_1::_Tuple2 1) in <{_Tuple2!3}> (syntax.DictionarySelection (select _x_2_2::_Tuple2 0) (select _x_2_1::_Tuple2 0) expr_ptr_1_2 (select _x_2_0::_Tuple2 0)) (select _x_2_2::_Tuple2 1)) (syntax.ArraySelection selector_1_0 expr_ptr_1_1 index_expr_1_2 -> let _x_2_0 = convertcases.copy_176 index_expr_1_2 cp_info_1 in <{_Tuple2!3}> (syntax.ArraySelection selector_1_0 expr_ptr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (_ -> <{_Tuple2!3}> _x_0 cp_info_1)
convertcases.map_st_377 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_178 x_1_0 s_1, _x_2_2 = convertcases.map_st_377 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_376 !l_0 !cp_info_1 = convertcases.map_st_377 l_0 cp_info_1
convertcases.copy_378 !bind_0 !cp_info_1 = case bind_0 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = convertcases.copy_176 bind_src_1_0 cp_info_1 in <{_Tuple2!3}> (update bind_0::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_380 !_x_0 !s_1 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.copy_378 x_1_0 s_1, _x_2_2 = convertcases.map_st_380 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.copy_379 !l_0 !cp_info_1 = convertcases.map_st_380 l_0 cp_info_1
convertcases.copy_176 !_x_0 !cp_info_1 = case _x_0 (syntax.Var var_1_0 -> let _x_2_0 = convertcases.copy_175 var_1_0 cp_info_1 in <{_Tuple2!3}> (syntax.Var (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.App app_1_0 -> case app_1_0 (syntax._App app_symb_2_0 app_args_2_1 app_info_ptr_2_2 -> let _x_3_0 = convertcases.copy_369 app_args_2_1 cp_info_1 in <{_Tuple2!3}> (syntax.App (update app_1_0::syntax._App [1:select _x_3_0::_Tuple2 0])) (select _x_3_0::_Tuple2 1)) ) (<{syntax.@}> fun_expr_1_0 exprs_1_1 -> let _x_2_0 = convertcases.copy_388 (_Tuple2 fun_expr_1_0 exprs_1_1) cp_info_1, _x_2_1 = select _x_2_0::_Tuple2 0 in <{_Tuple2!3}> (<{syntax.@}> (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1)) (select _x_2_0::_Tuple2 1)) (syntax.Let lad_1_0 -> case lad_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> case cp_info_1 (convertcases._CopyState cp_free_vars_3_0 cp_local_vars_3_1 cp_var_heap_3_2 -> let _x_4_0 = convertcases.fold_st_372 let_strict_binds_2_0 (_Tuple2 cp_local_vars_3_1 cp_var_heap_3_2), _x_4_1 = convertcases.fold_st_373 let_lazy_binds_2_1 (_Tuple2 (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)), _x_4_2 = convertcases.copy_374 let_strict_binds_2_0 (update cp_info_1::convertcases._CopyState [1:select _x_4_1::_Tuple2 0,2:select _x_4_1::_Tuple2 1]), _x_4_3 = convertcases.copy_374 let_lazy_binds_2_1 (select _x_4_2::_Tuple2 1), _x_4_4 = convertcases.copy_176 let_expr_2_2 (select _x_4_3::_Tuple2 1) in <{_Tuple2!3}> (syntax.Let (update lad_1_0::syntax._Let [0:select _x_4_2::_Tuple2 0,1:select _x_4_3::_Tuple2 0,2:select _x_4_4::_Tuple2 0])) (select _x_4_4::_Tuple2 1)) ) ) (syntax.Case case_expr_1_0 -> let _x_2_0 = convertcases.copy_179 case_expr_1_0 cp_info_1 in <{_Tuple2!3}> (syntax.Case (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.Conditional cond_1_0 -> let _x_2_0 = convertcases.copy_180 cond_1_0 cp_info_1 in <{_Tuple2!3}> (syntax.Conditional (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.BasicExpr _x_1_0 -> <{_Tuple2!3}> _x_0 cp_info_1) (syntax.Selection is_unique_1_0 expr_1_1 selectors_1_2 -> let _x_2_0 = convertcases.copy_176 expr_1_1 cp_info_1, _x_2_1 = convertcases.copy_376 selectors_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.Selection is_unique_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.Update expr1_1_0 selectors_1_1 expr2_1_2 -> let _x_2_0 = convertcases.copy_176 expr1_1_0 cp_info_1, _x_2_1 = convertcases.copy_376 selectors_1_1 (select _x_2_0::_Tuple2 1), _x_2_2 = convertcases.copy_176 expr2_1_2 (select _x_2_1::_Tuple2 1) in <{_Tuple2!3}> (syntax.Update (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) (select _x_2_2::_Tuple2 1)) (syntax.RecordUpdate cons_symbol_1_0 expr_1_1 exprs_1_2 -> let _x_2_0 = convertcases.copy_176 expr_1_1 cp_info_1, _x_2_1 = convertcases.copy_379 exprs_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.RecordUpdate cons_symbol_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 expr_1_2 -> let _x_2_0 = convertcases.copy_176 expr_1_2 cp_info_1 in <{_Tuple2!3}> (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.MatchExpr constructor_1_0 expr_1_1 -> let _x_2_0 = convertcases.copy_176 expr_1_1 cp_info_1 in <{_Tuple2!3}> (syntax.MatchExpr constructor_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.IsConstructor expr_1_0 cons_symbol_1_1 cons_arity_1_2 global_type_index_1_3 case_ident_1_4 position_1_5 -> let _x_2_0 = convertcases.copy_176 expr_1_0 cp_info_1 in <{_Tuple2!3}> (syntax.IsConstructor (select _x_2_0::_Tuple2 0) cons_symbol_1_1 cons_arity_1_2 global_type_index_1_3 case_ident_1_4 position_1_5) (select _x_2_0::_Tuple2 1)) (syntax.FailExpr _x_1_0 -> <{_Tuple2!3}> _x_0 cp_info_1) (syntax.EE -> <{_Tuple2!3}> syntax.EE cp_info_1) (syntax.NoBind ptr_1_0 -> <{_Tuple2!3}> (syntax.NoBind ptr_1_0) cp_info_1) (_ -> StdMisc.abort "copy (Expression) does not match")
convertcases.copy_371 !_vcopy_0 !t_1 !cp_info_2 = utilities.app2St (_Tuple2 convertcases.copy_176 (select _vcopy_0::<{convertcases.copy;}> 0)) t_1 cp_info_2
convertcases.copy_382 !_vcopy_0 !t_1 !cp_info_2 = utilities.app2St (_Tuple2 convertcases.copy_181 (select _vcopy_0::<{convertcases.copy;}> 0)) t_1 cp_info_2
convertcases.copy_case_expr_69 bound_vars_0 guards_and_default_1 var_heap_2 = let _x_1_0 = convertcases.store_VI_BoundVar_in_bound_vars_and_save_old_values bound_vars_0 _predefined._Nil var_heap_2, _x_1_1 = convertcases.copy_176 guards_and_default_1 (convertcases._CopyState _predefined._Nil _predefined._Nil (select _x_1_0::_Tuple2 1)), _x_1_2 = select _x_1_1::_Tuple2 1, _x_1_3 = convertcases.retrieve_variables (select _x_1_2::convertcases._CopyState 0) (select _x_1_2::convertcases._CopyState 2) in _Tuple6 (select _x_1_3::_Tuple3 0) (select _x_1_3::_Tuple3 1) (select _x_1_2::convertcases._CopyState 1) (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 0) (select _x_1_3::_Tuple3 2)
<{convertcases.c;1831;44_72}> !g_l_0 = <{convertcases.g_c1;1831;56_456}> g_l_0
<{convertcases.g_c1;1831;56_456}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{convertcases.g_c2;1831;56_455}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{convertcases.g_c2;1831;56_455}> !g_h_0 g_t_1 = case g_h_0 (_Tuple2 var_1_0 _x_1_1 -> _predefined._Cons var_1_0 (<{convertcases.c;1831;44_72}> g_t_1)) (_ -> <{convertcases.c;1831;44_72}> g_t_1)
<{convertcases.c;1835;41_73}> !g_l_0 = <{convertcases.g_c1;1835;54_458}> g_l_0
<{convertcases.g_c1;1835;54_458}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{convertcases.g_c2;1835;54_457}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{convertcases.g_c2;1835;54_457}> !g_h_0 g_t_1 = case g_h_0 (_Tuple2 _x_1_0 type_1_1 -> _predefined._Cons type_1_1 (<{convertcases.c;1835;41_73}> g_t_1)) (_ -> <{convertcases.c;1835;41_73}> g_t_1)
convertcases.getIdent !_x_0 fun_nr_1::I = case _x_0 (general.Yes ident_1_0 -> ident_1_0) (general.No -> syntax._Ident (<{StdString.+++_11}> "_f" (StdString.toString_5 fun_nr_1)) Heap.nilPtr) 
convertcases.newFunctionWithType !opt_id_0 !fun_bodies_1 !local_vars_2 !fun_type_3 !group_index_4::I !_x_5 = case _x_5 (_Tuple3 cs_next_fun_nr_1_0 cs_new_functions_1_1 cs_fun_heap_1_2 -> let fun_id_2_0 = convertcases.getIdent opt_id_0 cs_next_fun_nr_1_0, _x_2_1 = Heap.newPtr syntax.FI_Empty cs_fun_heap_1_2, fun_def_ptr_2_2 = select _x_2_1::_Tuple2 0, ptr_and_val_2_3 = _Tuple2 fun_def_ptr_2_2 (syntax.FI_Function (syntax._GeneratedFunction (syntax._FunDef fun_id_2_0 (select fun_type_3::syntax._SymbolType 3) scanner.NoPrio fun_bodies_1 (general.Yes fun_type_3) syntax.NoPos (syntax.FK_Function False) 0 (update (syntax._FunInfo _predefined._Nil -1 -1 _predefined._Nil _predefined._Nil _predefined._Nil 0)::syntax._FunInfo [1:group_index_4,4:local_vars_2])) syntax.II_Empty (syntax._ConsClasses 0 _predefined._Nil (_SystemStrictLists._nil_uts (<{_SystemStrictLists.UTSList;}> _SystemStrictLists._cons_uts_41 _SystemStrictLists._decons_uts_42)) False) cs_next_fun_nr_1_0)) in <{_Tuple2!3}> (syntax._SymbIdent fun_id_2_0 (syntax.SK_GeneratedFunction fun_def_ptr_2_2 cs_next_fun_nr_1_0)) (_Tuple3 (<{StdInt.+_6}> cs_next_fun_nr_1_0 StdInt.one_11) (_predefined._Cons fun_def_ptr_2_2 cs_new_functions_1_1) (Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_1::_Tuple2 1)))) 
convertcases.new_case_function opt_id_0 result_type_1 rhs_2 free_vars_3 local_vars_4 group_index_5::I !cs_6 = case cs_6 (convertcases._ConvertState cs_new_functions_1_0 cs_fun_heap_1_1 cs_var_heap_1_2 cs_expr_heap_1_3 cs_next_fun_nr_1_4 -> let _x_2_0 = convertcases.newFunctionWithType opt_id_0 (syntax.TransformedBody (syntax._TransformedBody (<{convertcases.c;1831;44_72}> free_vars_3) rhs_2)) local_vars_4 (select (expand_types.removeAnnotations_14 (syntax._SymbolType _predefined._Nil (<{convertcases.c;1835;41_73}> free_vars_3) syntax.NotStrict (StdList.length_47 free_vars_3) result_type_1 _predefined._Nil _predefined._Nil _predefined._Nil))::_Tuple2 1) group_index_5 (_Tuple3 (select cs_6::convertcases._ConvertState 4) (select cs_6::convertcases._ConvertState 0) (select cs_6::convertcases._ConvertState 1)), _x_2_1 = select _x_2_0::_Tuple2 1 in _Tuple2 (select _x_2_0::_Tuple2 0) (update cs_6::convertcases._ConvertState [0:select _x_2_1::_Tuple3 1,1:select _x_2_1::_Tuple3 2,4:select _x_2_1::_Tuple3 0])) 
convertcases.restore_old_fv_info_ptr_values !_x_0 _x_1 !var_heap_2 = case _x_0 (_predefined._Cons old_fv_info_ptr_value_1_0 old_fv_info_ptr_values_1_1 -> case _x_1 (_predefined._Cons _x_2_0 bound_vars_2_1 -> case _x_2_0 (_Tuple2 _x_3_0 type_3_1 -> case _x_3_0 (syntax._FreeVar fv_def_level_4_0 fv_ident_4_1 fv_info_ptr_4_2 fv_count_4_3 -> convertcases.restore_old_fv_info_ptr_values old_fv_info_ptr_values_1_1 bound_vars_2_1 (Heap.writePtr fv_info_ptr_4_2 old_fv_info_ptr_value_1_0 var_heap_2)) ) ) ) (_predefined._Nil -> var_heap_2) 
convertcases.new_case_function_and_restore_old_fv_info_ptr_values opt_id_0 result_type_1 rhs_2 free_vars_3 local_vars_4 bound_vars_5 old_fv_info_ptr_values_6 group_index_7::I common_defs_8 cs_9 = let _x_1_0 = convertcases.new_case_function opt_id_0 result_type_1 rhs_2 free_vars_3 local_vars_4 group_index_7 cs_9, cs_1_1 = select _x_1_0::_Tuple2 1 in _Tuple2 (select _x_1_0::_Tuple2 0) (update cs_1_1::convertcases._ConvertState [2:convertcases.restore_old_fv_info_ptr_values old_fv_info_ptr_values_6 bound_vars_5 (select cs_1_1::convertcases._ConvertState 2)])
convertcases.copy_case_expr_and_use_new_var_70 !bound_vars_0 !_x_1 new_info_ptr_2 guards_and_default_3 var_heap_4 = case _x_1 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> let _x_2_0 = convertcases.store_VI_BoundVar_in_bound_vars_and_save_old_values bound_vars_0 _predefined._Nil var_heap_4, var_heap_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = Heap.readPtr var_info_ptr_1_1 var_heap_2_1, var_heap_2_3 = select _x_2_2::_Tuple2 1, old_fv_info_ptr_values_2_4 = select _x_2_0::_Tuple2 0 in <{convertcases._c;1791;11_459}> (select _x_2_2::_Tuple2 0) guards_and_default_3 var_info_ptr_1_1 var_heap_2_3 var_ident_1_0 new_info_ptr_2 old_fv_info_ptr_values_2_4) 
<{convertcases._c;1791;11_459}> !_x_0 guards_and_default_1 var_info_ptr_2 var_heap_3 var_ident_4 new_info_ptr_5 old_fv_info_ptr_values_6 = case _x_0 (syntax.VI_BoundVar type_1_0 -> let ptr_and_val_2_0 = _Tuple2 var_info_ptr_2 (syntax.VI_FreeVar var_ident_4 new_info_ptr_5 0 type_1_0), _x_2_1 = convertcases.copy_176 guards_and_default_1 (convertcases._CopyState (_predefined._Cons (_Tuple2 var_info_ptr_2 type_1_0) _predefined._Nil) _predefined._Nil (Heap.writePtr (select ptr_and_val_2_0::_Tuple2 0) (select ptr_and_val_2_0::_Tuple2 1) var_heap_3)), _x_2_2 = select _x_2_1::_Tuple2 1, _x_2_3 = convertcases.retrieve_variables (select _x_2_2::convertcases._CopyState 0) (select _x_2_2::convertcases._CopyState 2) in _Tuple7 True (select _x_2_3::_Tuple3 0) (select _x_2_3::_Tuple3 1) (select _x_2_2::convertcases._CopyState 1) (select _x_2_1::_Tuple2 0) old_fv_info_ptr_values_6 (select _x_2_3::_Tuple3 2)) (syntax.VI_LocalVar -> let _x_2_0 = convertcases.copy_176 guards_and_default_1 (convertcases._CopyState _predefined._Nil _predefined._Nil var_heap_3), _x_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = convertcases.retrieve_variables (select _x_2_1::convertcases._CopyState 0) (select _x_2_1::convertcases._CopyState 2) in _Tuple7 False (select _x_2_2::_Tuple3 0) (select _x_2_2::_Tuple3 1) (select _x_2_1::convertcases._CopyState 1) (select _x_2_0::_Tuple2 0) old_fv_info_ptr_values_6 (select _x_2_2::_Tuple3 2)) 
convertcases.make_free_vars_111 !n_args_0::I !var_heap_1 = case (<{StdInt.<_17}> 0 n_args_0) (True -> let _x_2_0 = Heap.newPtr syntax.VI_Empty var_heap_1, _x_2_1 = convertcases.make_free_vars_111 (<{StdInt.-_7}> n_args_0 1) (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (_predefined._Cons (syntax._FreeVar -1 (syntax._Ident "_x" Heap.nilPtr) (select _x_2_0::_Tuple2 0) 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (False -> <{_Tuple2!3}> _predefined._Nil var_heap_1) 
convertcases.no_attribute_var_113::B !_x_0 = case _x_0 (syntax.TA_Unique -> True) (syntax.TA_None -> True) (syntax.TA_Multi -> True) (syntax.TA_Anonymous -> True) (syntax.TA_MultiOfPropagatingConsVar -> True) (_ -> False)
convertcases.new_vars_in_attribute_var_114 !_x_0 = case _x_0 (syntax.TA_Var attr_var_1_0 -> syntax.TA_Anonymous) (syntax.TA_RootVar attr_var_1_0 -> syntax.TA_Anonymous) 
convertcases.new_vars_in_algebraic_type_args_115 !_x_0 = case _x_0 (_predefined._Cons type_arg_1_0 type_args_1_1 -> _predefined._Cons (convertcases.new_vars_in_algebraic_type_112 type_arg_1_0) (convertcases.new_vars_in_algebraic_type_args_115 type_args_1_1)) (_predefined._Nil -> _predefined._Nil) 
convertcases.new_vars_in_algebraic_type_112 !_x_0 = case _x_0 (syntax._AType at_attribute_1_0 _x_1_1 -> case _x_1_1 (syntax.TV tv_2_0 -> case (convertcases.no_attribute_var_113 at_attribute_1_0) (True -> syntax._AType at_attribute_1_0 (syntax.TV (update tv_2_0::syntax._TypeVar [1:Heap.nilPtr]))) (False -> syntax._AType (convertcases.new_vars_in_attribute_var_114 at_attribute_1_0) (syntax.TV (update tv_2_0::syntax._TypeVar [1:Heap.nilPtr]))) ) (syntax.TA type_symbol_2_0 type_args_2_1 -> case (convertcases.no_attribute_var_113 at_attribute_1_0) (True -> syntax._AType at_attribute_1_0 (syntax.TA type_symbol_2_0 (convertcases.new_vars_in_algebraic_type_args_115 type_args_2_1))) (False -> syntax._AType (convertcases.new_vars_in_attribute_var_114 at_attribute_1_0) (syntax.TA type_symbol_2_0 (convertcases.new_vars_in_algebraic_type_args_115 type_args_2_1))) ) ) 
convertcases.convertNonRootFail !ci_0 ident_1 cs_2 = case ci_0 (convertcases._ConvertInfo ci_bound_vars_1_0 ci_group_index_1_1 ci_common_defs_1_2 ci_case_level_1_3 -> let _x_2_0 = convertcases.new_case_function (general.Yes ident_1) (syntax._AType syntax.TA_None (syntax.TV (syntax._TypeVar (syntax._Ident "a" Heap.nilPtr) Heap.nilPtr))) (syntax.FailExpr ident_1) _predefined._Nil _predefined._Nil ci_group_index_1_1 cs_2 in _Tuple2 (syntax.App (syntax._App (select _x_2_0::_Tuple2 0) _predefined._Nil Heap.nilPtr)) (select _x_2_0::_Tuple2 1)) 
convertcases.store_VI_FreeVar_in_dictionary_vars_and_save_old_values_117 !_x_0 old_fv_info_ptr_values_1 var_heap_2 = case _x_0 (_predefined._Cons _x_1_0 bound_vars_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 type_2_1 -> case _x_2_0 (syntax._FreeVar fv_def_level_3_0 fv_ident_3_1 fv_info_ptr_3_2 fv_count_3_3 -> let _x_4_0 = Heap.readPtr fv_info_ptr_3_2 var_heap_2, _x_4_1 = Heap.newPtr (syntax.VI_Labelled_Empty "convertCases [FreeVar]") (select _x_4_0::_Tuple2 1), _x_4_2 = convertcases.store_VI_FreeVar_in_dictionary_vars_and_save_old_values_117 bound_vars_1_1 old_fv_info_ptr_values_1 (Heap.writePtr fv_info_ptr_3_2 (syntax.VI_FreeVar fv_ident_3_1 (select _x_4_1::_Tuple2 0) 0 type_2_1) (select _x_4_1::_Tuple2 1)) in _Tuple2 (_predefined._Cons (select _x_4_0::_Tuple2 0) (select _x_4_2::_Tuple2 0)) (select _x_4_2::_Tuple2 1)) ) ) (_predefined._Nil -> _Tuple2 old_fv_info_ptr_values_1 var_heap_2) 
convertcases.fold_st_256 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_256 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.retrieve_dictionary_variable_116 !_x_0 !_x_1 = case _x_0 (_Tuple2 _x_1_0 type_1_1 -> case _x_1_0 (syntax._FreeVar fv_def_level_2_0 fv_ident_2_1 fv_info_ptr_2_2 fv_count_2_3 -> case _x_1 (_Tuple2 free_typed_vars_3_0 var_heap_3_1 -> let _x_4_0 = Heap.readPtr fv_info_ptr_2_2 var_heap_3_1, _x_4_1 = select _x_4_0::_Tuple2 0 in _Tuple2 (_predefined._Cons (_Tuple2 (syntax._FreeVar -1 (select _x_4_1::_Tuple4 0) (select _x_4_1::_Tuple4 1) (select _x_4_1::_Tuple4 2)) (select _x_4_1::_Tuple4 3)) free_typed_vars_3_0) (select _x_4_0::_Tuple2 1)) ) ) 
convertcases.fold_st_393 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_393 x_1_1 (convertcases.retrieve_dictionary_variable_116 a_1_0 st_1)) 
convertcases.retrieve_dictionary_variables_118 !cp_free_vars_0 cp_var_heap_1 = convertcases.fold_st_393 cp_free_vars_0 (_Tuple2 _predefined._Nil cp_var_heap_1)
convertcases.convertCases_168 !_vconvertCases_0 !_vconvertCases_1 !ci_2 !t_3 !cs_4 = utilities.app2St (_Tuple2 (select _vconvertCases_0::<{convertcases.convertCases;}> 0 ci_2) (select _vconvertCases_1::<{convertcases.convertCases;}> 0 ci_2)) t_3 cs_4
convertcases.convertCases_169 !_vconvertCases_0 !ci_1 !bind_2 !cs_3 = case bind_2 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = select _vconvertCases_0::<{convertcases.convertCases;}> 0 ci_1 bind_src_1_0 cs_3 in <{_Tuple2!3}> (update bind_2::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
<{convertcases.>_230}>::B !_vOrd_0 !x_1 !y_2 = select (select _vOrd_0::<{StdClass.Ord;}> 0)::<{StdOverloaded.<;}> 0 y_2 x_1
convertcases.uniq !_vEq_0 !_x_1 = case _x_1 (_predefined._Cons a_1_0 rest_1_1 -> case rest_1_1 (_predefined._Cons b_2_0 t_2_1 -> case (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 a_1_0 b_2_0) (True -> convertcases.uniq _vEq_0 rest_1_1) (False -> _predefined._Cons a_1_0 (convertcases.uniq _vEq_0 rest_1_1)) ) ) (_ -> _x_1)
convertcases.fold_st_253 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_253 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.split_153 !_vsplit_0 ci_1 !splits_2 state_3 = convertcases.fold_st_253 (select _vsplit_0::<{convertcases.split;}> 0 ci_1) splits_2 state_3
convertcases.splitIt_158 alt_nr_0::I l_1 = _Tuple2 (StdList.take alt_nr_0 l_1) (StdList.drop alt_nr_0 l_1)
convertcases.splitIt_157 alt_nr_0::I !_x_1 = case _x_1 (syntax.AlgebraicPatterns type_1_0 alts_1_1 -> let _x_2_0 = convertcases.splitIt_158 alt_nr_0 alts_1_1 in _Tuple2 (syntax.AlgebraicPatterns type_1_0 (select _x_2_0::_Tuple2 0)) (syntax.AlgebraicPatterns type_1_0 (select _x_2_0::_Tuple2 1))) (syntax.BasicPatterns type_1_0 alts_1_1 -> let _x_2_0 = convertcases.splitIt_158 alt_nr_0 alts_1_1 in _Tuple2 (syntax.BasicPatterns type_1_0 (select _x_2_0::_Tuple2 0)) (syntax.BasicPatterns type_1_0 (select _x_2_0::_Tuple2 1))) (syntax.OverloadedListPatterns type_1_0 decons_1_1 alts_1_2 -> let _x_2_0 = convertcases.splitIt_158 alt_nr_0 alts_1_2 in _Tuple2 (syntax.OverloadedListPatterns type_1_0 decons_1_1 (select _x_2_0::_Tuple2 0)) (syntax.OverloadedListPatterns type_1_0 decons_1_1 (select _x_2_0::_Tuple2 1))) 
convertcases.splitIt_155 alt_nr_0::I !kees_1 = case kees_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> let _x_2_0 = convertcases.splitIt_157 alt_nr_0 case_guards_1_1 in _Tuple2 (update kees_1::syntax._Case [1:select _x_2_0::_Tuple2 0,2:general.No]) (update kees_1::syntax._Case [1:select _x_2_0::_Tuple2 1])) 
convertcases.splitIt_156 alt_nr_0::I !case_type_1 = case case_type_1 (syntax._CaseType ct_pattern_type_1_0 ct_result_type_1_1 ct_cons_types_1_2 -> let _x_2_0 = convertcases.splitIt_158 alt_nr_0 ct_cons_types_1_2 in _Tuple2 (update case_type_1::syntax._CaseType [2:select _x_2_0::_Tuple2 0]) (update case_type_1::syntax._CaseType [2:select _x_2_0::_Tuple2 1])) 
<{convertcases.<_159}>::B !a_0 !b_1 = <{StdInt.<_17}> (select a_0::convertcases._SplitCase 0) (select b_1::convertcases._SplitCase 0)
<{convertcases.==_160}>::B !a_0 !b_1 = <{StdInt.==_16}> (select a_0::convertcases._SplitCase 0) (select b_1::convertcases._SplitCase 0)
convertcases.addDefault_161 !_vaddDefault_0 !_x_1 kees_2 expr_heap_3 = case _x_1 (general.Yes next_alt_1_0 -> select _vaddDefault_0::<{convertcases.addDefault;}> 0 next_alt_1_0 kees_2 expr_heap_3) (_ -> _Tuple2 kees_2 expr_heap_3)
<{convertcases.c;1461;29_109}> na_alt_nr_0::I !g_l_1 = <{convertcases.g_c1;1461;63_461}> g_l_1 na_alt_nr_0
<{convertcases.g_c1;1461;63_461}> !g_l_0 na_alt_nr_1::I = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{convertcases.g_c2;1461;63_460}> g_h_1_0 na_alt_nr_1 g_t_1_1) (_ -> _predefined._Nil)
<{convertcases.g_c2;1461;63_460}> !g_h_0 na_alt_nr_1::I g_t_2 = case g_h_0 (convertcases._SplitCase sc_alt_nr_1_0 _x_1_1 -> case _x_1_1 (general.Yes call_2_0 -> case (<{StdInt.==_16}> sc_alt_nr_1_0 na_alt_nr_1) (True -> _predefined._Cons call_2_0 (<{convertcases.c;1461;29_109}> na_alt_nr_1 g_t_2)) ) ) (_ -> <{convertcases.c;1461;29_109}> na_alt_nr_1 g_t_2)
convertcases.find_call_110 !_x_0 expr_heap_1 = case _x_0 (convertcases._NextAlt na_case_1_0 na_alt_nr_1_1 -> let _x_2_0 = Heap.readPtr na_case_1_0 expr_heap_1 in _Tuple2 (StdList.hd (<{convertcases.c;1461;29_109}> na_alt_nr_1_1 (select (select (select _x_2_0::_Tuple2 0)::_Tuple2 1)::convertcases._SplitsInCase 1))) (select _x_2_0::_Tuple2 1)) 
convertcases.toString_143 !_vtoString_0 !_x_1 = case _x_1 (general.No -> "") (general.Yes x_1_0 -> select _vtoString_0::<{StdOverloaded.toString;}> 0 x_1_0) 
convertcases.toString_394 !_x_0 = case _x_0 (general.No -> "") (general.Yes x_1_0 -> syntax.toString_2 x_1_0) 
convertcases.addDefault_163 expr_0 !kees_1 expr_heap_2 = case kees_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> case case_default_1_2 (general.No -> _Tuple2 (update kees_1::syntax._Case [2:general.Yes expr_0]) expr_heap_2) ) (_ -> StdMisc.abort (<{StdString.+++_11}> "trying to overwrite default of " (<{StdString.+++_11}> (StdString.toString_5 (Heap.ptrToInt (select kees_1::syntax._Case 4))) (<{StdString.+++_11}> " " (convertcases.toString_394 (select kees_1::syntax._Case 3))))))
convertcases.addDefault_162 next_alt_0 !kees_1 expr_heap_2 = let _x_1_0 = convertcases.find_call_110 next_alt_0 expr_heap_2 in convertcases.addDefault_163 (select _x_1_0::_Tuple2 0) kees_1 (select _x_1_0::_Tuple2 1)
convertcases.map_st_231 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_231 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.map_st_254 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_254 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertRootCases_165 !_vconvertRootCases_0 !ci_1 !l_2 cs_3 = convertcases.map_st_254 (select _vconvertRootCases_0::<{convertcases.convertRootCases;}> 0 ci_1) l_2 cs_3
convertcases.build_conditional_105 !_x_0::B !guard_1 !then_expr_2 !opt_else_expr_3 = case _x_0 (True -> syntax.Conditional (syntax._Conditional guard_1 then_expr_2 opt_else_expr_3)) (False -> case opt_else_expr_3 (general.Yes else_expr_2_0 -> syntax.Conditional (syntax._Conditional guard_1 else_expr_2_0 (general.Yes then_expr_2))) (general.No -> syntax.Conditional (syntax._Conditional (syntax.Conditional (syntax._Conditional guard_1 (syntax.BasicExpr (syntax.BVB False)) (general.Yes (syntax.BasicExpr (syntax.BVB True))))) then_expr_2 general.No)) ) 
convertcases.convertRootCases_164 !_vconvertRootCases_0 !ci_1 !_x_2 cs_3 = case _x_2 (general.Yes expr_1_0 -> let _x_2_0 = select _vconvertRootCases_0::<{convertcases.convertRootCases;}> 0 ci_1 expr_1_0 cs_3 in _Tuple2 (general.Yes (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (general.No -> _Tuple2 general.No cs_3) 
convertcases.addDefault_406 !_x_0 kees_1 expr_heap_2 = case _x_0 (general.Yes next_alt_1_0 -> convertcases.addDefault_162 next_alt_1_0 kees_1 expr_heap_2) (_ -> _Tuple2 kees_1 expr_heap_2)
<{convertcases.>_407}>::B !x_0 !y_1 = <{convertcases.<_159}> y_1 x_0
convertcases.uniq_408 !_x_0 = case _x_0 (_predefined._Cons a_1_0 rest_1_1 -> case rest_1_1 (_predefined._Cons b_2_0 t_2_1 -> case (<{convertcases.==_160}> a_1_0 b_2_0) (True -> convertcases.uniq_408 rest_1_1) (False -> _predefined._Cons a_1_0 (convertcases.uniq_408 rest_1_1)) ) ) (_ -> _x_0)
convertcases.convert_to_else_part_106 ci_0 sign_of_then_part_1::B !_x_2 case_default_3 cs_4 = case _x_2 (_predefined._Cons alt_1_0 alts_1_1 -> case alt_1_0 (syntax._BasicPattern bp_value_2_0 bp_expr_2_1 bp_position_2_2 -> case bp_value_2_0 (syntax.BVB sign_of_else_part_3_0 -> case (<{StdBool.==_3}> sign_of_then_part_1 sign_of_else_part_3_0) (True -> convertcases.convert_to_else_part_106 ci_0 sign_of_then_part_1 alts_1_1 case_default_3 (select (convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [3:convertcases.CaseLevelAfterGuardRoot]) bp_expr_2_1 cs_4)::_Tuple2 1)) (False -> let _x_5_0 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [3:convertcases.CaseLevelAfterGuardRoot]) bp_expr_2_1 cs_4 in _Tuple2 (general.Yes (select _x_5_0::_Tuple2 0)) (select _x_5_0::_Tuple2 1)) ) ) ) (_predefined._Nil -> case case_default_3 (general.Yes else_part_2_0 -> let _x_3_0 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [3:convertcases.CaseLevelAfterGuardRoot]) else_part_2_0 cs_4 in _Tuple2 (general.Yes (select _x_3_0::_Tuple2 0)) (select _x_3_0::_Tuple2 1)) (general.No -> _Tuple2 general.No cs_4) ) 
convertcases.convert_then_or_else_66 !_x_0 ci_1 cs_2 = case _x_0 (syntax.Let lad_1_0 -> case lad_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> case cs_2 (convertcases._ConvertState cs_new_functions_3_0 cs_fun_heap_3_1 cs_var_heap_3_2 cs_expr_heap_3_3 cs_next_fun_nr_3_4 -> let _x_4_0 = convertcases.convert_let_binds let_strict_binds_2_0 let_lazy_binds_2_1 let_info_ptr_2_3 ci_1 cs_2, _x_4_1 = convertcases.convert_condition let_expr_2_2 (select _x_4_0::_Tuple4 2) (select _x_4_0::_Tuple4 3) in _Tuple2 (syntax.Let (update lad_1_0::syntax._Let [0:select _x_4_0::_Tuple4 0,1:select _x_4_0::_Tuple4 1,2:select _x_4_1::_Tuple2 0])) (select _x_4_1::_Tuple2 1)) ) ) (_ -> convertcases.convert_condition _x_0 ci_1 cs_2)
convertcases.convert_case_to_if case_expr_0 then_expr_1 else_expr_2 ci_3 cs_4 = let _x_1_0 = convertcases.convert_condition case_expr_0 ci_3 cs_4, _x_1_1 = convertcases.convert_then_or_else_66 then_expr_1 ci_3 (select _x_1_0::_Tuple2 1), _x_1_2 = convertcases.convert_then_or_else_66 else_expr_2 ci_3 (select _x_1_1::_Tuple2 1) in _Tuple2 (syntax.Conditional (syntax._Conditional (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0) (general.Yes (select _x_1_2::_Tuple2 0)))) (select _x_1_2::_Tuple2 1)
convertcases.convert_condition !_x_0 ci_1 cs_2 = case _x_0 (syntax.Case _x_1_0 -> case _x_1_0 (syntax._Case case_expr_2_0 _x_2_1 _x_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> case _x_2_1 (syntax.BasicPatterns _x_3_0 _x_3_1 -> case _x_3_0 (syntax.BT_Bool -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 (syntax._BasicPattern _x_6_0 then_expr_6_1 bp_position_6_2 -> case _x_6_0 (syntax.BVB _x_7_0 -> case _x_7_0 (True -> case _x_5_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 (syntax._BasicPattern _x_10_0 else_expr_10_1 bp_position_10_2 -> case _x_10_0 (syntax.BVB _x_11_0 -> case _x_11_0 (False -> case _x_9_1 (_predefined._Nil -> case _x_2_2 (general.No -> convertcases.convert_case_to_if case_expr_2_0 then_expr_6_1 else_expr_10_1 ci_1 cs_2) ) ) ) ) ) (_predefined._Nil -> case _x_2_2 (general.Yes else_expr_10_0 -> convertcases.convert_case_to_if case_expr_2_0 then_expr_6_1 else_expr_10_0 ci_1 cs_2) ) ) ) ) ) ) ) ) ) (_ -> convertcases.convertCases_173 ci_1 _x_0 cs_2)
convertcases.convert_guard_107 !guard_0 ci_1 cs_2 = case (convertcases.has_no_rooted_non_if_cases guard_0) (True -> convertcases.convert_condition guard_0 ci_1 cs_2) (False -> convertcases.convertCases_173 ci_1 guard_0 cs_2) 
convertcases.convert_boolean_case_into_guard_108 ci_0 guard_1 !_x_2 case_default_3 case_info_ptr_4 cs_5 = case _x_2 (_predefined._Cons alt_1_0 alts_1_1 -> case alt_1_0 (syntax._BasicPattern bp_value_2_0 bp_expr_2_1 bp_position_2_2 -> case bp_value_2_0 (syntax.BVB sign_of_then_part_3_0 -> let _x_4_0 = convertcases.convert_guard_107 guard_1 ci_0 cs_5, _x_4_1 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [3:convertcases.CaseLevelAfterGuardRoot]) bp_expr_2_1 (select _x_4_0::_Tuple2 1), _x_4_2 = convertcases.convert_to_else_part_106 ci_0 sign_of_then_part_3_0 alts_1_1 case_default_3 (select _x_4_1::_Tuple2 1) in _Tuple2 (convertcases.build_conditional_105 sign_of_then_part_3_0 (select _x_4_0::_Tuple2 0) (select _x_4_1::_Tuple2 0) (select _x_4_2::_Tuple2 0)) (select _x_4_2::_Tuple2 1)) ) ) 
convertcases.convertRootCases_395 !ci_0 !_x_1 cs_2 = case _x_1 (general.Yes expr_1_0 -> let _x_2_0 = convertcases.convertRootCases_152 ci_0 expr_1_0 cs_2 in _Tuple2 (general.Yes (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (general.No -> _Tuple2 general.No cs_2) 
convertcases.convertRootCases_166 !ci_0 !pattern_1 cs_2 = case pattern_1 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> let _x_2_0 = convertcases.convertRootCases_152 ci_0 bp_expr_1_1 cs_2 in _Tuple2 (update pattern_1::syntax._BasicPattern [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_412 !ci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertRootCases_166 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_412 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertRootCases_411 !ci_0 !l_1 !cs_2 = convertcases.map_st_412 ci_0 l_1 cs_2
convertcases.convertRootCasesAlgebraicPattern_67 ci_0 !_x_1 cs_2 = case _x_1 (_Tuple2 pattern_1_0 arg_types_1_1 -> case pattern_1_0 (syntax._AlgebraicPattern ap_symbol_2_0 ap_vars_2_1 ap_expr_2_2 ap_position_2_3 -> let _x_3_0 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [0:<{StdList.++}> (convertcases.exactZip ap_vars_2_1 arg_types_1_1) (select ci_0::convertcases._ConvertInfo 0)]) ap_expr_2_2 cs_2 in _Tuple2 (update pattern_1_0::syntax._AlgebraicPattern [2:select _x_3_0::_Tuple2 0]) (select _x_3_0::_Tuple2 1)) ) 
convertcases.map_st_413 ci_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertRootCasesAlgebraicPattern_67 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_413 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertRootCasesAlgebraicPatterns ci_0 !l_1 cs_2 = convertcases.map_st_413 ci_0 l_1 cs_2
convertcases.convertRootCasesCasePatterns ci_0 !_x_1 _x_2 cs_3 = case _x_1 (syntax.BasicPatterns bt_1_0 patterns_1_1 -> let _x_2_0 = convertcases.convertRootCases_411 ci_0 patterns_1_1 cs_3 in _Tuple2 (syntax.BasicPatterns bt_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.AlgebraicPatterns gi_1_0 patterns_1_1 -> let _x_2_0 = convertcases.convertRootCasesAlgebraicPatterns ci_0 (convertcases.exactZip patterns_1_1 _x_2) cs_3 in _Tuple2 (syntax.AlgebraicPatterns gi_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.OverloadedListPatterns type_1_0 decons_expr_1_1 patterns_1_2 -> let _x_2_0 = convertcases.convertRootCasesAlgebraicPatterns ci_0 (convertcases.exactZip patterns_1_2 _x_2) cs_3 in _Tuple2 (syntax.OverloadedListPatterns type_1_0 decons_expr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) 
convertcases.split_154 ci_0 !split_1 !_x_2 = case split_1 (convertcases._SplitCase sc_alt_nr_1_0 sc_call_1_1 -> case _x_2 (_Tuple3 kees_2_0 case_type_2_1 cs_2_2 -> case cs_2_2 (convertcases._ConvertState cs_new_functions_3_0 cs_fun_heap_3_1 cs_var_heap_3_2 cs_expr_heap_3_3 cs_next_fun_nr_3_4 -> let _x_4_0 = convertcases.splitIt_155 sc_alt_nr_1_0 kees_2_0, _x_4_1 = convertcases.splitIt_156 sc_alt_nr_1_0 case_type_2_1, _x_4_2 = Heap.newPtr (syntax.EI_CaseTypeAndSplits (select _x_4_1::_Tuple2 1) (convertcases._SplitsInCase general.No _predefined._Nil convertcases.CaseKindUnknown)) cs_expr_heap_3_3, _x_4_3 = convertcases.convertNonRootCase ci_0 (update (select _x_4_0::_Tuple2 1)::syntax._Case [4:select _x_4_2::_Tuple2 0]) (update cs_2_2::convertcases._ConvertState [3:select _x_4_2::_Tuple2 1]), call_4_4 = select _x_4_3::_Tuple2 0, case_type1_4_5 = select _x_4_1::_Tuple2 0, cs_4_6 = select _x_4_3::_Tuple2 1, _x_4_7 = Heap.readPtr (select kees_2_0::syntax._Case 4) (select cs_4_6::convertcases._ConvertState 3), splits1_4_8 = select (select _x_4_7::_Tuple2 0)::_Tuple2 1, ptr_and_val_4_9 = _Tuple2 (select kees_2_0::syntax._Case 4) (syntax.EI_CaseTypeAndSplits case_type1_4_5 (update splits1_4_8::convertcases._SplitsInCase [1:_predefined._Cons (update split_1::convertcases._SplitCase [1:general.Yes call_4_4]) (select splits1_4_8::convertcases._SplitsInCase 1)])) in _Tuple3 (update (select _x_4_0::_Tuple2 0)::syntax._Case [2:general.Yes call_4_4]) case_type1_4_5 (update cs_4_6::convertcases._ConvertState [3:Heap.writePtr (select ptr_and_val_4_9::_Tuple2 0) (select ptr_and_val_4_9::_Tuple2 1) (select _x_4_7::_Tuple2 1)])) ) ) 
convertcases.fold_st_410 ci_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_410 ci_0 x_1_1 (convertcases.split_154 ci_0 a_1_0 st_2)) 
convertcases.split_409 ci_0 !splits_1 !state_2 = convertcases.fold_st_410 ci_0 splits_1 state_2
convertcases.splitCase ci_0 !kees_1 !cs_2 = case kees_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> case cs_2 (convertcases._ConvertState cs_new_functions_2_0 cs_fun_heap_2_1 cs_var_heap_2_2 cs_expr_heap_2_3 cs_next_fun_nr_2_4 -> let _x_3_0 = Heap.readPtr case_info_ptr_1_4 cs_expr_heap_2_3, _x_3_1 = select _x_3_0::_Tuple2 0, splits_3_2 = select _x_3_1::_Tuple2 1, sic_splits_3_3 = select splits_3_2::convertcases._SplitsInCase 1 in case (StdList.isEmpty sic_splits_3_3) (True -> let _x_5_0 = convertcases.addDefault_406 (select splits_3_2::convertcases._SplitsInCase 0) kees_1 (select _x_3_0::_Tuple2 1) in _Tuple2 (select _x_5_0::_Tuple2 0) (update cs_2::convertcases._ConvertState [3:select _x_5_0::_Tuple2 1])) (False -> let _x_5_0 = convertcases.addDefault_406 (select splits_3_2::convertcases._SplitsInCase 0) kees_1 (select _x_3_0::_Tuple2 1), case_type_5_1 = select _x_3_1::_Tuple2 0, ptr_and_val_5_2 = _Tuple2 case_info_ptr_1_4 (syntax.EI_CaseTypeAndSplits case_type_5_1 (update splits_3_2::convertcases._SplitsInCase [1:_predefined._Nil])), _x_5_3 = convertcases.split_409 ci_0 (convertcases.uniq_408 (StdOrdList.sortBy <{convertcases.>_407}> sic_splits_3_3)) (_Tuple3 (select _x_5_0::_Tuple2 0) case_type_5_1 (update cs_2::convertcases._ConvertState [3:Heap.writePtr (select ptr_and_val_5_2::_Tuple2 0) (select ptr_and_val_5_2::_Tuple2 1) (select _x_5_0::_Tuple2 1)])), cs_5_4 = select _x_5_3::_Tuple3 2 in _Tuple2 (select _x_5_3::_Tuple3 0) (update cs_5_4::convertcases._ConvertState [3:select cs_5_4::convertcases._ConvertState 3])) ) ) 
convertcases.map_st_399 !ci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertCases_173 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_399 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertCases_398 !ci_0 !l_1 !cs_2 = convertcases.map_st_399 ci_0 l_1 cs_2
convertcases.convertCases_414 !ci_0 !t_1 !cs_2 = utilities.app2St (_Tuple2 (convertcases.convertCases_173 ci_0) (convertcases.convertCases_398 ci_0)) t_1 cs_2
convertcases.convertCases_170 !ci_0 !bind_1 !cs_2 = case bind_1 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 lb_src_1_1 cs_2 in <{_Tuple2!3}> (update bind_1::syntax._LetBind [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_397 !ci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertCases_170 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_397 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertCases_396 !ci_0 !l_1 !cs_2 = convertcases.map_st_397 ci_0 l_1 cs_2
convertcases.convert_let_binds let_strict_binds_0 let_lazy_binds_1 let_info_ptr_2 !ci_3 !cs_4 = case ci_3 (convertcases._ConvertInfo ci_bound_vars_1_0 ci_group_index_1_1 ci_common_defs_1_2 ci_case_level_1_3 -> case cs_4 (convertcases._ConvertState cs_new_functions_2_0 cs_fun_heap_2_1 cs_var_heap_2_2 cs_expr_heap_2_3 cs_next_fun_nr_2_4 -> let _x_3_0 = Heap.readPtr let_info_ptr_2 cs_expr_heap_2_3, ci_3_1 = update ci_3::convertcases._ConvertInfo [0:convertcases.addLetVars (<{StdList.++}> let_strict_binds_0 let_lazy_binds_1) (select (select _x_3_0::_Tuple2 0)::_Tuple1 0) ci_bound_vars_1_0], _x_3_2 = convertcases.convertCases_396 ci_3_1 let_strict_binds_0 (update cs_4::convertcases._ConvertState [3:select _x_3_0::_Tuple2 1]), _x_3_3 = convertcases.convertCases_396 ci_3_1 let_lazy_binds_1 (select _x_3_2::_Tuple2 1) in _Tuple4 (select _x_3_2::_Tuple2 0) (select _x_3_3::_Tuple2 0) ci_3_1 (select _x_3_3::_Tuple2 1)) ) 
convertcases.convertCases_172 !ci_0 !lad_1 !cs_2 = case lad_1 (syntax._Let let_strict_binds_1_0 let_lazy_binds_1_1 let_expr_1_2 let_info_ptr_1_3 let_expr_position_1_4 -> let _x_2_0 = convertcases.convert_let_binds let_strict_binds_1_0 let_lazy_binds_1_1 let_info_ptr_1_3 ci_0 cs_2, _x_2_1 = convertcases.convertCases_173 (select _x_2_0::_Tuple4 2) let_expr_1_2 (select _x_2_0::_Tuple4 3) in <{_Tuple2!3}> (update lad_1::syntax._Let [0:select _x_2_0::_Tuple4 0,1:select _x_2_0::_Tuple4 1,2:select _x_2_1::_Tuple2 0]) (select _x_2_1::_Tuple2 1)) 
convertcases.convertCases_174 !ci_0 !_x_1 !cs_2 = case _x_1 (syntax.DictionarySelection record_1_0 selectors_1_1 expr_ptr_1_2 index_expr_1_3 -> let _x_2_0 = convertcases.convertCases_173 ci_0 index_expr_1_3 cs_2, _x_2_1 = convertcases.convertCases_401 ci_0 selectors_1_1 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.DictionarySelection record_1_0 (select _x_2_1::_Tuple2 0) expr_ptr_1_2 (select _x_2_0::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.ArraySelection selector_1_0 expr_ptr_1_1 index_expr_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 index_expr_1_2 cs_2 in <{_Tuple2!3}> (syntax.ArraySelection selector_1_0 expr_ptr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (_ -> <{_Tuple2!3}> _x_1 cs_2)
convertcases.map_st_402 !ci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertCases_174 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_402 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertCases_401 !ci_0 !l_1 !cs_2 = convertcases.map_st_402 ci_0 l_1 cs_2
convertcases.convertCases_403 !ci_0 !bind_1 !cs_2 = case bind_1 (general._Bind bind_src_1_0 bind_dst_1_1 -> let _x_2_0 = convertcases.convertCases_173 ci_0 bind_src_1_0 cs_2 in <{_Tuple2!3}> (update bind_1::general._Bind [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.map_st_405 !ci_0 !_x_1 !s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = convertcases.convertCases_403 ci_0 x_1_0 s_2, _x_2_2 = convertcases.map_st_405 ci_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
convertcases.convertCases_404 !ci_0 !l_1 !cs_2 = convertcases.map_st_405 ci_0 l_1 cs_2
convertcases.convertCases_173 !ci_0 !_x_1 !cs_2 = case _x_1 (syntax.App app_1_0 -> case app_1_0 (syntax._App app_symb_2_0 app_args_2_1 app_info_ptr_2_2 -> let _x_3_0 = convertcases.convertCases_398 ci_0 app_args_2_1 cs_2 in <{_Tuple2!3}> (syntax.App (update app_1_0::syntax._App [1:select _x_3_0::_Tuple2 0])) (select _x_3_0::_Tuple2 1)) ) (<{syntax.@}> fun_expr_1_0 exprs_1_1 -> let _x_2_0 = convertcases.convertCases_414 ci_0 (_Tuple2 fun_expr_1_0 exprs_1_1) cs_2, _x_2_1 = select _x_2_0::_Tuple2 0 in <{_Tuple2!3}> (<{syntax.@}> (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1)) (select _x_2_0::_Tuple2 1)) (syntax.Let lad_1_0 -> let _x_2_0 = convertcases.convertCases_172 ci_0 lad_1_0 cs_2 in <{_Tuple2!3}> (syntax.Let (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.Selection is_unique_1_0 expr_1_1 selectors_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 expr_1_1 cs_2, _x_2_1 = convertcases.convertCases_401 ci_0 selectors_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.Selection is_unique_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.Update expr1_1_0 selectors_1_1 expr2_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 expr1_1_0 cs_2, _x_2_1 = convertcases.convertCases_401 ci_0 selectors_1_1 (select _x_2_0::_Tuple2 1), _x_2_2 = convertcases.convertCases_173 ci_0 expr2_1_2 (select _x_2_1::_Tuple2 1) in <{_Tuple2!3}> (syntax.Update (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) (select _x_2_2::_Tuple2 1)) (syntax.RecordUpdate cons_symbol_1_0 expr_1_1 exprs_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 expr_1_1 cs_2, _x_2_1 = convertcases.convertCases_404 ci_0 exprs_1_2 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (syntax.RecordUpdate cons_symbol_1_0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (select _x_2_1::_Tuple2 1)) (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 expr_1_2 -> let _x_2_0 = convertcases.convertCases_173 ci_0 expr_1_2 cs_2 in <{_Tuple2!3}> (syntax.TupleSelect tuple_symbol_1_0 arg_nr_1_1 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.Case case_expr_1_0 -> let _x_2_0 = convertcases.findSplitCases_142 (convertcases._SplitInfo general.No False) case_expr_1_0 (convertcases._SplitState (select cs_2::convertcases._ConvertState 3) (select cs_2::convertcases._ConvertState 2)) in convertcases.convertNonRootCase ci_0 case_expr_1_0 (update cs_2::convertcases._ConvertState [2:select _x_2_0::convertcases._SplitState 1,3:select _x_2_0::convertcases._SplitState 0])) (syntax.MatchExpr constructor_1_0 expr_1_1 -> let _x_2_0 = convertcases.convertCases_173 ci_0 expr_1_1 cs_2 in <{_Tuple2!3}> (syntax.MatchExpr constructor_1_0 (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (syntax.IsConstructor expr_1_0 cons_symbol_1_1 cons_arity_1_2 global_type_index_1_3 case_ident_1_4 position_1_5 -> case ci_0 (convertcases._ConvertInfo ci_bound_vars_2_0 ci_group_index_2_1 ci_common_defs_2_2 ci_case_level_2_3 -> let var_id_3_0 = syntax._Ident "_x" Heap.nilPtr, _x_3_1 = convertcases.convertCases_173 ci_0 expr_1_0 cs_2, cs_3_2 = select _x_3_1::_Tuple2 1, _x_3_3 = Heap.newPtr syntax.VI_LocalVar (select cs_3_2::convertcases._ConvertState 2), new_info_ptr_3_4 = select _x_3_3::_Tuple2 0, _x_3_5 = convertcases.make_free_vars_111 cons_arity_1_2 (select _x_3_3::_Tuple2 1), _x_3_6 = Heap.newPtr syntax.EI_Empty (select cs_3_2::convertcases._ConvertState 3), _x_3_7 = convertcases.new_case_function (general.Yes case_ident_1_4) (syntax._AType syntax.TA_None (syntax.TB syntax.BT_Bool)) (syntax.Case (syntax._Case (syntax.Var (syntax._BoundVar var_id_3_0 new_info_ptr_3_4 Heap.nilPtr)) (syntax.AlgebraicPatterns global_type_index_1_3 (_predefined._Cons (syntax._AlgebraicPattern cons_symbol_1_1 (select _x_3_5::_Tuple2 0) (syntax.BasicExpr (syntax.BVB True)) position_1_5) _predefined._Nil)) (general.Yes (syntax.BasicExpr (syntax.BVB False))) general.No (select _x_3_6::_Tuple2 0) False syntax.NoPos)) (_predefined._Cons (_Tuple2 (syntax._FreeVar -1 var_id_3_0 new_info_ptr_3_4 0) (convertcases.new_vars_in_algebraic_type_112 (select (select (convertcases.select_280 (select (convertcases.select_272 ci_common_defs_2_2 (select cons_symbol_1_1::syntax._Global 1))::syntax._CommonDefs 1) (select (select cons_symbol_1_1::syntax._Global 0)::syntax._DefinedSymbol 2))::syntax._ConsDef 1)::syntax._SymbolType 4))) _predefined._Nil) _predefined._Nil (select ci_0::convertcases._ConvertInfo 1) (update cs_3_2::convertcases._ConvertState [2:select _x_3_5::_Tuple2 1,3:select _x_3_6::_Tuple2 1]) in <{_Tuple2!3}> (syntax.App (syntax._App (select _x_3_7::_Tuple2 0) (_predefined._Cons (select _x_3_1::_Tuple2 0) _predefined._Nil) Heap.nilPtr)) (select _x_3_7::_Tuple2 1)) ) (syntax.FailExpr ident_1_0 -> let _x_2_0 = convertcases.convertNonRootFail ci_0 ident_1_0 cs_2 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1)) (syntax.DictionariesFunction dictionaries_1_0 expr_1_1 expr_type_1_2 -> let _x_2_0 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [0:<{StdList.++}> dictionaries_1_0 (select ci_0::convertcases._ConvertInfo 0),3:convertcases.CaseLevelRoot]) expr_1_1 cs_2, cs_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = convertcases.store_VI_FreeVar_in_dictionary_vars_and_save_old_values_117 dictionaries_1_0 _predefined._Nil (select cs_2_1::convertcases._ConvertState 2), _x_2_3 = convertcases.store_VI_BoundVar_in_bound_vars_and_save_old_values (select ci_0::convertcases._ConvertInfo 0) (select _x_2_2::_Tuple2 0) (select _x_2_2::_Tuple2 1), _x_2_4 = convertcases.copy_176 (select _x_2_0::_Tuple2 0) (convertcases._CopyState _predefined._Nil _predefined._Nil (select _x_2_3::_Tuple2 1)), _x_2_5 = select _x_2_4::_Tuple2 1, _x_2_6 = convertcases.retrieve_variables (select _x_2_5::convertcases._CopyState 0) (select _x_2_5::convertcases._CopyState 2), _x_2_7 = convertcases.retrieve_dictionary_variables_118 dictionaries_1_0 (select _x_2_6::_Tuple3 2), _x_2_8 = convertcases.new_case_function general.No expr_type_1_2 (select _x_2_4::_Tuple2 0) (<{StdList.++}> (select _x_2_6::_Tuple3 1) (select _x_2_7::_Tuple2 0)) (select _x_2_5::convertcases._CopyState 1) (select ci_0::convertcases._ConvertInfo 1) (update cs_2_1::convertcases._ConvertState [2:select _x_2_7::_Tuple2 1]), cs_2_9 = select _x_2_8::_Tuple2 1 in <{_Tuple2!3}> (syntax.App (syntax._App (select _x_2_8::_Tuple2 0) (select _x_2_6::_Tuple3 0) Heap.nilPtr)) (update cs_2_9::convertcases._ConvertState [2:convertcases.restore_old_fv_info_ptr_values (select _x_2_3::_Tuple2 0) (<{StdList.++}> dictionaries_1_0 (select ci_0::convertcases._ConvertInfo 0)) (select cs_2_9::convertcases._ConvertState 2)])) (_ -> <{_Tuple2!3}> _x_1 cs_2)
convertcases.convertNonRootCase !ci_0 !kees_1 cs_2 = case ci_0 (convertcases._ConvertInfo ci_bound_vars_1_0 ci_group_index_1_1 ci_common_defs_1_2 ci_case_level_1_3 -> case kees_1 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> let _x_3_0 = convertcases.case_is_degenerate_68 kees_1 in case (select _x_3_0::_Tuple2 0) (True -> let _x_5_0 = Heap.readPtr case_info_ptr_2_4 (select cs_2::convertcases._ConvertState 3), _x_5_1 = convertcases.convertRootCases_152 (update ci_0::convertcases._ConvertInfo [3:convertcases.CaseLevelRoot]) (select _x_3_0::_Tuple2 1) (update cs_2::convertcases._ConvertState [3:select _x_5_0::_Tuple2 1]), cs_5_2 = select _x_5_1::_Tuple2 1, _x_5_3 = convertcases.copy_case_expr_69 ci_bound_vars_1_0 (select _x_5_1::_Tuple2 0) (select cs_5_2::convertcases._ConvertState 2), _x_5_4 = convertcases.new_case_function_and_restore_old_fv_info_ptr_values case_ident_2_3 (select (select (select _x_5_0::_Tuple2 0)::_Tuple2 0)::syntax._CaseType 1) (select _x_5_3::_Tuple6 3) (select _x_5_3::_Tuple6 1) (select _x_5_3::_Tuple6 2) ci_bound_vars_1_0 (select _x_5_3::_Tuple6 4) ci_group_index_1_1 ci_common_defs_1_2 (update cs_5_2::convertcases._ConvertState [2:select _x_5_3::_Tuple6 5]) in _Tuple2 (syntax.App (syntax._App (select _x_5_4::_Tuple2 0) (select _x_5_3::_Tuple6 0) Heap.nilPtr)) (select _x_5_4::_Tuple2 1)) (False -> <{convertcases._c;1724;7_469}> case_expr_2_0 ci_bound_vars_1_0 ci_0 kees_1 cs_2 case_info_ptr_2_4 case_ident_2_3 ci_group_index_1_1 ci_common_defs_1_2) ) ) 
convertcases.convertRootCases_152 !ci_0 !_x_1 cs_2 = case _x_1 (syntax.Let lad_1_0 -> case lad_1_0 (syntax._Let let_strict_binds_2_0 let_lazy_binds_2_1 let_expr_2_2 let_info_ptr_2_3 let_expr_position_2_4 -> case cs_2 (convertcases._ConvertState cs_new_functions_3_0 cs_fun_heap_3_1 cs_var_heap_3_2 cs_expr_heap_3_3 cs_next_fun_nr_3_4 -> let _x_4_0 = convertcases.convert_let_binds let_strict_binds_2_0 let_lazy_binds_2_1 let_info_ptr_2_3 ci_0 cs_2, let_strict_binds_4_1 = select _x_4_0::_Tuple4 0, _x_4_2 = convertcases.convertRootCases_152 (<{convertcases._if;1274;57_462}> (StdList.isEmpty let_strict_binds_4_1) ci_4_3) let_expr_2_2 (select _x_4_0::_Tuple4 3), ci_4_3 = select _x_4_0::_Tuple4 2 in _Tuple2 (syntax.Let (update lad_1_0::syntax._Let [0:let_strict_binds_4_1,1:select _x_4_0::_Tuple4 1,2:select _x_4_2::_Tuple2 0])) (select _x_4_2::_Tuple2 1)) ) ) (syntax.Case kees_1_0 -> case kees_1_0 (syntax._Case case_expr_2_0 case_guards_2_1 case_default_2_2 case_ident_2_3 case_info_ptr_2_4 case_explicit_2_5 case_default_pos_2_6 -> let _x_3_0 = Heap.readPtr case_info_ptr_2_4 (select cs_2::convertcases._ConvertState 3), cs_expr_heap_3_1 = select _x_3_0::_Tuple2 1 in <{convertcases._c;1281;11_466}> (select (select (select _x_3_0::_Tuple2 0)::_Tuple2 1)::convertcases._SplitsInCase 2) case_guards_2_1 ci_0 kees_1_0 cs_2 cs_expr_heap_3_1) ) (syntax.FailExpr _x_1_0 -> _Tuple2 _x_1 cs_2) (_ -> convertcases.convertCases_173 ci_0 _x_1 cs_2)
<{convertcases._c;1724;7_469}> !case_expr_0 ci_bound_vars_1 ci_2 kees_3 cs_4 case_info_ptr_5 case_ident_6 ci_group_index_7::I ci_common_defs_8 = case case_expr_0 (syntax.Var var_1_0 -> convertcases._f468_468 var_1_0 ci_bound_vars_1 ci_2 kees_3 cs_4 case_info_ptr_5 case_ident_6 ci_group_index_7 ci_common_defs_8 case_expr_0) (_ -> <{convertcases._c;1724;7_467}> case_ident_6 ci_bound_vars_1 ci_group_index_7 ci_common_defs_8 ci_2 kees_3 case_expr_0 cs_4 case_info_ptr_5)
convertcases._f468_468 !var_0 !ci_bound_vars_1 ci_2 kees_3 cs_4 case_info_ptr_5 case_ident_6 ci_group_index_7::I ci_common_defs_8 case_expr_9 = case var_0 (syntax._BoundVar var_ident_1_0 var_info_ptr_1_1 var_expr_ptr_1_2 -> let _x_2_0 = Heap.readPtr case_info_ptr_5 (select cs_4::convertcases._ConvertState 3), _x_2_1 = select _x_2_0::_Tuple2 0, case_type_2_2 = select _x_2_1::_Tuple2 0, splits_2_3 = select _x_2_1::_Tuple2 1, cs_expr_heap_2_4 = select _x_2_0::_Tuple2 1, cs_expr_heap_2_5 = Heap.writePtr case_info_ptr_5 (syntax.EI_CaseTypeAndSplits case_type_2_2 (update splits_2_3::convertcases._SplitsInCase [2:convertcases.CaseKindLeave])) cs_expr_heap_2_4, cs_2_6 = update cs_4::convertcases._ConvertState [3:cs_expr_heap_2_5], _x_2_7 = Heap.newPtr syntax.VI_Empty (select cs_2_6::convertcases._ConvertState 2), new_info_ptr_2_8 = select _x_2_7::_Tuple2 0, var_id_2_9 = syntax._Ident (select var_ident_1_0::syntax._Ident 0) Heap.nilPtr, case_free_var_2_10 = syntax._FreeVar -1 var_id_2_9 new_info_ptr_2_8 0, case_bound_var_2_11 = _Tuple2 case_free_var_2_10 (select case_type_2_2::syntax._CaseType 0), case_var_2_12 = syntax.Var (syntax._BoundVar var_id_2_9 new_info_ptr_2_8 Heap.nilPtr), kees_2_13 = update kees_3::syntax._Case [0:case_var_2_12,5:False], cs_var_heap_2_14 = select _x_2_7::_Tuple2 1, cs_2_15 = update cs_2_6::convertcases._ConvertState [2:cs_var_heap_2_14], _x_2_16 = convertcases.convertRootCases_152 (update ci_2::convertcases._ConvertInfo [0:_predefined._Cons case_bound_var_2_11 ci_bound_vars_1,3:convertcases.CaseLevelRoot]) (syntax.Case kees_2_13) cs_2_15, caseExpr_2_17 = select _x_2_16::_Tuple2 0, cs_2_18 = select _x_2_16::_Tuple2 1, cs_2_19 = update cs_2_18::convertcases._ConvertState [2:Heap.writePtr new_info_ptr_2_8 syntax.VI_LocalVar (select cs_2_18::convertcases._ConvertState 2)], _x_2_20 = convertcases.copy_case_expr_and_use_new_var_70 ci_bound_vars_1 var_0 new_info_ptr_2_8 caseExpr_2_17 (select cs_2_19::convertcases._ConvertState 2) in case (select _x_2_20::_Tuple7 0) (True -> let _x_4_0 = convertcases.new_case_function_and_restore_old_fv_info_ptr_values case_ident_6 (select case_type_2_2::syntax._CaseType 1) (select _x_2_20::_Tuple7 4) (select _x_2_20::_Tuple7 2) (select _x_2_20::_Tuple7 3) ci_bound_vars_1 (select _x_2_20::_Tuple7 5) ci_group_index_7 ci_common_defs_8 (update cs_2_19::convertcases._ConvertState [2:select _x_2_20::_Tuple7 6]) in _Tuple2 (syntax.App (syntax._App (select _x_4_0::_Tuple2 0) (select _x_2_20::_Tuple7 1) Heap.nilPtr)) (select _x_4_0::_Tuple2 1)) (False -> let _x_4_0 = convertcases.new_case_function_and_restore_old_fv_info_ptr_values case_ident_6 (select case_type_2_2::syntax._CaseType 1) (select _x_2_20::_Tuple7 4) (_predefined._Cons case_bound_var_2_11 (select _x_2_20::_Tuple7 2)) (select _x_2_20::_Tuple7 3) ci_bound_vars_1 (select _x_2_20::_Tuple7 5) ci_group_index_7 ci_common_defs_8 (update cs_2_19::convertcases._ConvertState [2:select _x_2_20::_Tuple7 6]) in _Tuple2 (syntax.App (syntax._App (select _x_4_0::_Tuple2 0) (_predefined._Cons case_expr_9 (select _x_2_20::_Tuple7 1)) Heap.nilPtr)) (select _x_4_0::_Tuple2 1)) ) (_ -> <{convertcases._c;1724;7_467}> case_ident_6 ci_bound_vars_1 ci_group_index_7 ci_common_defs_8 ci_2 kees_3 case_expr_9 cs_4 case_info_ptr_5)
<{convertcases._c;1724;7_467}> case_ident_0 ci_bound_vars_1 ci_group_index_2::I ci_common_defs_3 ci_4 kees_5 case_expr_6 cs_7 case_info_ptr_8 = let _x_1_0 = Heap.readPtr case_info_ptr_8 (select cs_7::convertcases._ConvertState 3), _x_1_1 = select _x_1_0::_Tuple2 0, case_type_1_2 = select _x_1_1::_Tuple2 0, var_id_1_3 = syntax._Ident "_x" Heap.nilPtr, cs_1_4 = update cs_7::convertcases._ConvertState [3:Heap.writePtr case_info_ptr_8 (syntax.EI_CaseTypeAndSplits case_type_1_2 (update (select _x_1_1::_Tuple2 1)::convertcases._SplitsInCase [2:convertcases.CaseKindLeave])) (select _x_1_0::_Tuple2 1)], _x_1_5 = Heap.newPtr syntax.VI_Empty (select cs_1_4::convertcases._ConvertState 2), new_info_ptr_1_6 = select _x_1_5::_Tuple2 0, case_bound_var_1_7 = _Tuple2 (syntax._FreeVar -1 var_id_1_3 new_info_ptr_1_6 0) (select case_type_1_2::syntax._CaseType 0), _x_1_8 = convertcases.convertCases_173 ci_4 case_expr_6 (update cs_1_4::convertcases._ConvertState [2:select _x_1_5::_Tuple2 1]), _x_1_9 = convertcases.convertRootCases_152 (update ci_4::convertcases._ConvertInfo [0:_predefined._Cons case_bound_var_1_7 ci_bound_vars_1,3:convertcases.CaseLevelRoot]) (syntax.Case (update kees_5::syntax._Case [0:syntax.Var (syntax._BoundVar var_id_1_3 new_info_ptr_1_6 Heap.nilPtr),5:False])) (select _x_1_8::_Tuple2 1), cs_1_10 = select _x_1_9::_Tuple2 1, cs_1_11 = update cs_1_10::convertcases._ConvertState [2:Heap.writePtr new_info_ptr_1_6 syntax.VI_LocalVar (select cs_1_10::convertcases._ConvertState 2)], _x_1_12 = convertcases.copy_case_expr_69 ci_bound_vars_1 (select _x_1_9::_Tuple2 0) (select cs_1_11::convertcases._ConvertState 2), _x_1_13 = convertcases.new_case_function_and_restore_old_fv_info_ptr_values case_ident_0 (select case_type_1_2::syntax._CaseType 1) (select _x_1_12::_Tuple6 3) (_predefined._Cons case_bound_var_1_7 (select _x_1_12::_Tuple6 1)) (select _x_1_12::_Tuple6 2) ci_bound_vars_1 (select _x_1_12::_Tuple6 4) ci_group_index_2 ci_common_defs_3 (update cs_1_11::convertcases._ConvertState [2:select _x_1_12::_Tuple6 5]) in _Tuple2 (syntax.App (syntax._App (select _x_1_13::_Tuple2 0) (_predefined._Cons (select _x_1_8::_Tuple2 0) (select _x_1_12::_Tuple6 0)) Heap.nilPtr)) (select _x_1_13::_Tuple2 1)
<{convertcases._c;1281;11_466}> !_x_0 case_guards_1 ci_2 kees_3 cs_4 cs_expr_heap_5 = case _x_0 (convertcases.CaseKindGuard -> <{convertcases._c;1283;20_465}> case_guards_1 ci_2 kees_3 cs_4 cs_expr_heap_5) (convertcases.CaseKindLeave -> let _x_2_0 = convertcases.splitCase ci_2 kees_3 (update cs_4::convertcases._ConvertState [3:cs_expr_heap_5]), kees_2_1 = select _x_2_0::_Tuple2 0, cs_2_2 = select _x_2_0::_Tuple2 1, _x_2_3 = Heap.readPtr (select kees_2_1::syntax._Case 4) (select cs_2_2::convertcases._ConvertState 3), _x_2_4 = convertcases.convertCases_173 ci_2 (select kees_2_1::syntax._Case 0) (update cs_2_2::convertcases._ConvertState [3:select _x_2_3::_Tuple2 1]), _x_2_5 = convertcases.convertRootCasesCasePatterns ci_2 (select kees_2_1::syntax._Case 1) (select (select (select _x_2_3::_Tuple2 0)::_Tuple2 0)::syntax._CaseType 2) (select _x_2_4::_Tuple2 1), _x_2_6 = convertcases.convertRootCases_395 ci_2 (select kees_2_1::syntax._Case 2) (select _x_2_5::_Tuple2 1) in _Tuple2 (syntax.Case (update kees_2_1::syntax._Case [0:select _x_2_4::_Tuple2 0,1:select _x_2_5::_Tuple2 0,2:select _x_2_6::_Tuple2 0])) (select _x_2_6::_Tuple2 1)) (convertcases.CaseKindTransform -> convertcases.convertNonRootCase ci_2 kees_3 (update cs_4::convertcases._ConvertState [3:cs_expr_heap_5])) (convertcases.CaseKindUnknown -> StdMisc.abort "convertRootCases, unknown casekind") 
<{convertcases._c;1283;20_465}> !case_guards_0 ci_1 kees_2 cs_3 cs_expr_heap_4 = case case_guards_0 (syntax.BasicPatterns _x_1_0 patterns_1_1 -> convertcases._f464_464 _x_1_0 ci_1 kees_2 cs_3 cs_expr_heap_4 patterns_1_1) (_ -> <{convertcases._c;1283;20_463}>)
convertcases._f464_464 !_x_0 ci_1 kees_2 cs_3 cs_expr_heap_4 !patterns_5 = case _x_0 (syntax.BT_Bool -> let _x_2_0 = convertcases.splitCase ci_1 kees_2 (update cs_3::convertcases._ConvertState [3:cs_expr_heap_4]), _x_2_1 = select _x_2_0::_Tuple2 0 in convertcases.convert_boolean_case_into_guard_108 ci_1 (select _x_2_1::syntax._Case 0) patterns_5 (select _x_2_1::syntax._Case 2) (select _x_2_1::syntax._Case 4) (select _x_2_0::_Tuple2 1)) (_ -> <{convertcases._c;1283;20_463}>)
<{convertcases._c;1283;20_463}> = StdMisc.abort "convertcases, convertRootCases: bool patterns expected"
<{convertcases._if;1274;57_462}> !_x_0::B !ci_1 = case _x_0 (True -> ci_1) (_ -> update ci_1::convertcases._ConvertInfo [3:convertcases.CaseLevelAfterGuardRoot])
convertcases.convertCases_400 !_vconvertCases_0 !ci_1 !t_2 !cs_3 = utilities.app2St (_Tuple2 (convertcases.convertCases_173 ci_1) (select _vconvertCases_0::<{convertcases.convertCases;}> 0 ci_1)) t_2 cs_3
convertcases.convertRootCases_151 !ci_0 !body_1 cs_2 = case body_1 (syntax._TransformedBody tb_args_1_0 tb_rhs_1_1 -> let _x_2_0 = convertcases.convertRootCases_152 ci_0 tb_rhs_1_1 cs_2 in _Tuple2 (update body_1::syntax._TransformedBody [1:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
convertcases.convertCasesInBody !_x_0 !_x_1 group_index_2::I common_defs_3 cs_4 = case _x_0 (syntax.TransformedBody body_1_0 -> case _x_1 (general.Yes type_2_0 -> let _x_3_0 = convertcases.convertRootCases_151 (convertcases._ConvertInfo (convertcases.exactZip (select body_1_0::syntax._TransformedBody 0) (select type_2_0::syntax._SymbolType 1)) group_index_2 common_defs_3 convertcases.CaseLevelRoot) body_1_0 cs_4 in _Tuple2 (syntax.TransformedBody (select _x_3_0::_Tuple2 0)) (select _x_3_0::_Tuple2 1)) ) 
convertcases.convert_function_50 !_vArray_0 group_index_1::I dcl_functions_2 common_defs_3 main_dcl_module_n_4::I fun_5::I !_x_6 = case _x_6 (_Tuple3 fun_defs_1_0 collected_imports_1_1 cs_1_2 -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 6 fun_defs_1_0 fun_5, _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 (select _x_2_0::_Tuple2 1) fun_5, _x_2_2 = select _x_2_0::_Tuple2 0, _x_2_3 = convertcases.eliminate_code_sharing_in_function_51 dcl_functions_2 main_dcl_module_n_4 common_defs_3 (select _x_2_2::syntax._FunDef 3) (_Tuple2 collected_imports_1_1 cs_1_2), _x_2_4 = select _x_2_3::_Tuple2 1, _x_2_5 = convertcases.convertCasesInBody (select _x_2_3::_Tuple2 0) (select _x_2_2::syntax._FunDef 4) group_index_1 common_defs_3 (select _x_2_4::_Tuple2 1) in _Tuple3 (select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_2_1::_Tuple2 1) fun_5 (update (select _x_2_1::_Tuple2 0)::syntax._FunDef [3:select _x_2_5::_Tuple2 0])) (select _x_2_4::_Tuple2 0) (select _x_2_5::_Tuple2 1)) 
convertcases.convert_functions_49 !_vArray_0 !_x_1 group_nr_2::I dcl_functions_3 common_defs_4 main_dcl_module_n_5::I !fun_defs_and_ci_6 = case _x_1 (checksupport.ComponentMember member_1_0 members_1_1 -> convertcases.convert_functions_49 _vArray_0 members_1_1 group_nr_2 dcl_functions_3 common_defs_4 main_dcl_module_n_5 (convertcases.convert_function_50 _vArray_0 group_nr_2 dcl_functions_3 common_defs_4 main_dcl_module_n_5 member_1_0 fun_defs_and_ci_6)) (checksupport.GeneratedComponentMember member_1_0 _x_1_1 members_1_2 -> convertcases.convert_functions_49 _vArray_0 members_1_2 group_nr_2 dcl_functions_3 common_defs_4 main_dcl_module_n_5 (convertcases.convert_function_50 _vArray_0 group_nr_2 dcl_functions_3 common_defs_4 main_dcl_module_n_5 member_1_0 fun_defs_and_ci_6)) (checksupport.NoComponentMembers -> fun_defs_and_ci_6) 
convertcases.convert_groups_48 !_vArray_0 !_vArray_1 !group_nr_2::I groups_3 dcl_functions_4 common_defs_5 main_dcl_module_n_6::I fun_defs_and_ci_7 = case (<{StdInt.==_16}> group_nr_2 (select _vArray_0::<{_SystemArray.Array;}> 4 groups_3)) (True -> _Tuple2 groups_3 fun_defs_and_ci_7) (False -> let _x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 6 groups_3 group_nr_2 in convertcases.convert_groups_48 _vArray_0 _vArray_1 (<{StdInt.+_6}> group_nr_2 StdInt.one_11) (select _x_2_0::_Tuple2 1) dcl_functions_4 common_defs_5 main_dcl_module_n_6 (convertcases.convert_functions_49 _vArray_1 (select (select _x_2_0::_Tuple2 0)::checksupport._Component 0) group_nr_2 dcl_functions_4 common_defs_5 main_dcl_module_n_6 fun_defs_and_ci_7)) 
convertcases.fold_st_218 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_218 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertcases.add_new_function_to_group_65 !main_dcl_module_n_0::I !fun_heap_1 !common_defs_2 !fun_ptr_3 !_x_4 = case _x_4 (_Tuple6 groups_1_0 fun_defs_1_1 imported_types_1_2 imported_conses_1_3 type_heaps_1_4 var_heap_1_5 -> let _x_2_0 = select (Heap.sreadPtr fun_ptr_3 fun_heap_1)::_Tuple1 0, gf_fun_def_2_1 = select _x_2_0::syntax._GeneratedFunction 0, _x_2_2 = select gf_fun_def_2_1::syntax._FunDef 8, fi_group_index_2_3::I = select _x_2_2::syntax._FunInfo 1, _x_2_4 = _SystemArray.uselect_6 groups_1_0 fi_group_index_2_3, group_2_5 = select _x_2_4::_Tuple2 0, _x_2_6 = expand_types.convertSymbolType (<{StdInt.==_16}> (StdInt.bitand (select _x_2_2::syntax._FunInfo 6) 2) 0) common_defs_2 (select (select gf_fun_def_2_1::syntax._FunDef 4)::_Tuple1 0) main_dcl_module_n_0 imported_types_1_2 imported_conses_1_3 type_heaps_1_4 var_heap_1_5 in <{_Tuple6!63}> (_SystemArray.update_5 (select _x_2_4::_Tuple2 1) fi_group_index_2_3 (update group_2_5::checksupport._Component [0:checksupport.ComponentMember (select _x_2_0::syntax._GeneratedFunction 3) (select group_2_5::checksupport._Component 0)])) (_predefined._Cons (update gf_fun_def_2_1::syntax._FunDef [4:general.Yes (select _x_2_6::_Tuple5 0)]) fun_defs_1_1) (select _x_2_6::_Tuple5 1) (select _x_2_6::_Tuple5 2) (select _x_2_6::_Tuple5 3) (select _x_2_6::_Tuple5 4)) 
convertcases.fold_st_415 main_dcl_module_n_0::I fun_heap_1 common_defs_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_415 main_dcl_module_n_0 fun_heap_1 common_defs_2 x_1_1 (convertcases.add_new_function_to_group_65 main_dcl_module_n_0 fun_heap_1 common_defs_2 a_1_0 st_4)) 
convertcases.addNewFunctionsToGroups !common_defs_0 fun_heap_1 !new_functions_2 !main_dcl_module_n_3::I !groups_4 !imported_types_5 !imported_conses_6 !type_heaps_7 !var_heap_8 = convertcases.fold_st_415 main_dcl_module_n_3 fun_heap_1 common_defs_0 new_functions_2 (_Tuple6 groups_4 _predefined._Nil imported_types_5 imported_conses_6 type_heaps_7 var_heap_8)
convertcases.split_52 !_x_0 !_x_1 = case _x_0 (syntax.SK_Function fun_ident_1_0 -> case _x_1 (_Tuple2 collected_functions_2_0 collected_conses_2_1 -> _Tuple2 (_predefined._Cons fun_ident_1_0 collected_functions_2_0) collected_conses_2_1) ) (syntax.SK_Constructor cons_ident_1_0 -> case _x_1 (_Tuple2 collected_functions_2_0 collected_conses_2_1 -> _Tuple2 collected_functions_2_0 (_predefined._Cons cons_ident_1_0 collected_conses_2_1)) ) 
<{convertcases.c;38;67_47}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{convertcases.c;38;67_47}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{convertcases.c;38;67_46}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{convertcases.c;38;67_46}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{convertcases.cu;38;45_45}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{convertcases.g_c1;38;55_470}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{convertcases.g_c1;38;55_470}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons fundef_1_0 g_t_1_1 -> <{convertcases.cu;38;45_45}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{convertcases.cu;38;45_44}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{convertcases.g_c1;38;55_471}> g_l_3 _vArray_0 c_a_1 c_i_2
<{convertcases.g_c1;38;55_471}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons fundef_1_0 g_t_1_1 -> <{convertcases.cu;38;45_44}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 fundef_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
convertcases.convert_groups_416 !_vArray_0 !group_nr_1::I !groups_2 dcl_functions_3 common_defs_4 main_dcl_module_n_5::I fun_defs_and_ci_6 = case (<{StdInt.==_16}> group_nr_1 (_SystemArray.size_4 groups_2)) (True -> _Tuple2 groups_2 fun_defs_and_ci_6) (False -> let _x_2_0 = _SystemArray.uselect_6 groups_2 group_nr_1 in convertcases.convert_groups_416 _vArray_0 (<{StdInt.+_6}> group_nr_1 StdInt.one_11) (select _x_2_0::_Tuple2 1) dcl_functions_3 common_defs_4 main_dcl_module_n_5 (convertcases.convert_functions_49 _vArray_0 (select (select _x_2_0::_Tuple2 0)::checksupport._Component 0) group_nr_1 dcl_functions_3 common_defs_4 main_dcl_module_n_5 fun_defs_and_ci_6)) 
convertcases.fold_st_417 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertcases.fold_st_417 x_1_1 (convertcases.split_52 a_1_0 st_1)) 
<{convertcases.c;38;67_420}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertcases.uselect_267 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{convertcases.c;38;67_420}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{convertcases.c;38;67_418}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertcases.uselect_267 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{convertcases.c;38;67_418}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
<{convertcases.cu;38;45_419}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{convertcases.g_c1;38;55_472}> g_l_2 <{_v+_0}> c_l_i_1
<{convertcases.g_c1;38;55_472}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons fundef_1_0 g_t_1_1 -> <{convertcases.cu;38;45_419}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{convertcases.cu;38;45_421}> !c_a_0 c_i_1::I !g_l_2 = <{convertcases.g_c1;38;55_473}> g_l_2 c_a_0 c_i_1
<{convertcases.g_c1;38;55_473}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons fundef_1_0 g_t_1_1 -> <{convertcases.cu;38;45_421}> (convertcases.update_266 c_a_1 c_i_2 fundef_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
convertcases.convert_function_424 group_index_0::I dcl_functions_1 common_defs_2 main_dcl_module_n_3::I fun_4::I !_x_5 = case _x_5 (_Tuple3 fun_defs_1_0 collected_imports_1_1 cs_1_2 -> let _x_2_0 = convertcases.uselect_267 fun_defs_1_0 fun_4, _x_2_1 = convertcases.uselect_267 (select _x_2_0::_Tuple2 1) fun_4, _x_2_2 = select _x_2_0::_Tuple2 0, _x_2_3 = convertcases.eliminate_code_sharing_in_function_51 dcl_functions_1 main_dcl_module_n_3 common_defs_2 (select _x_2_2::syntax._FunDef 3) (_Tuple2 collected_imports_1_1 cs_1_2), _x_2_4 = select _x_2_3::_Tuple2 1, _x_2_5 = convertcases.convertCasesInBody (select _x_2_3::_Tuple2 0) (select _x_2_2::syntax._FunDef 4) group_index_0 common_defs_2 (select _x_2_4::_Tuple2 1) in _Tuple3 (convertcases.update_266 (select _x_2_1::_Tuple2 1) fun_4 (update (select _x_2_1::_Tuple2 0)::syntax._FunDef [3:select _x_2_5::_Tuple2 0])) (select _x_2_4::_Tuple2 0) (select _x_2_5::_Tuple2 1)) 
convertcases.convert_functions_423 !_x_0 group_nr_1::I dcl_functions_2 common_defs_3 main_dcl_module_n_4::I !fun_defs_and_ci_5 = case _x_0 (checksupport.ComponentMember member_1_0 members_1_1 -> convertcases.convert_functions_423 members_1_1 group_nr_1 dcl_functions_2 common_defs_3 main_dcl_module_n_4 (convertcases.convert_function_424 group_nr_1 dcl_functions_2 common_defs_3 main_dcl_module_n_4 member_1_0 fun_defs_and_ci_5)) (checksupport.GeneratedComponentMember member_1_0 _x_1_1 members_1_2 -> convertcases.convert_functions_423 members_1_2 group_nr_1 dcl_functions_2 common_defs_3 main_dcl_module_n_4 (convertcases.convert_function_424 group_nr_1 dcl_functions_2 common_defs_3 main_dcl_module_n_4 member_1_0 fun_defs_and_ci_5)) (checksupport.NoComponentMembers -> fun_defs_and_ci_5) 
convertcases.convert_groups_422 !group_nr_0::I !groups_1 dcl_functions_2 common_defs_3 main_dcl_module_n_4::I fun_defs_and_ci_5 = case (<{StdInt.==_16}> group_nr_0 (_SystemArray.size_4 groups_1)) (True -> _Tuple2 groups_1 fun_defs_and_ci_5) (False -> let _x_2_0 = _SystemArray.uselect_6 groups_1 group_nr_0 in convertcases.convert_groups_422 (<{StdInt.+_6}> group_nr_0 StdInt.one_11) (select _x_2_0::_Tuple2 1) dcl_functions_2 common_defs_3 main_dcl_module_n_4 (convertcases.convert_functions_423 (select (select _x_2_0::_Tuple2 0)::checksupport._Component 0) group_nr_0 dcl_functions_2 common_defs_3 main_dcl_module_n_4 fun_defs_and_ci_5)) 
<{convertcases.cu;38;45_425}>::I !c_l_i_0::I !g_l_1 = <{convertcases.g_c1;38;55_474}> g_l_1 c_l_i_0
<{convertcases.g_c1;38;55_474}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons fundef_1_0 g_t_1_1 -> <{convertcases.cu;38;45_425}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
convertcases.convertCasesOfFunctions !groups_0 !main_dcl_module_n_1::I !dcl_functions_2 !common_defs_3 !fun_defs_4 !imported_types_5 !imported_conses_6 !var_heap_7 !type_heaps_8 !expr_heap_9 = let !nr_of_funs_1_0::I = convertcases.size_265 fun_defs_4, _x_1_1 = convertcases.convert_groups_422 0 groups_0 dcl_functions_2 common_defs_3 main_dcl_module_n_1 (_Tuple3 fun_defs_4 _predefined._Nil (convertcases._ConvertState _predefined._Nil Heap.newHeap var_heap_7 expr_heap_9 nr_of_funs_1_0)), _x_1_2 = select _x_1_1::_Tuple2 1, _x_1_3 = select _x_1_2::_Tuple3 2, _x_1_4 = convertcases.addNewFunctionsToGroups common_defs_3 (select _x_1_3::convertcases._ConvertState 1) (select _x_1_3::convertcases._ConvertState 0) main_dcl_module_n_1 (select _x_1_1::_Tuple2 0) imported_types_5 imported_conses_6 type_heaps_8 (select _x_1_3::convertcases._ConvertState 2), _x_1_5 = convertcases.fold_st_417 (select _x_1_2::_Tuple3 1) (_Tuple2 _predefined._Nil (select _x_1_4::_Tuple6 3)), fun_defs_1_6 = select _x_1_2::_Tuple3 0, _x_1_7 = convertcases.usize_268 fun_defs_1_6, new_fun_defs_1_8 = select _x_1_4::_Tuple6 1, _x_1_9 = convertcases.usize_268 fun_defs_1_6 in <{_Tuple8!255}> (select _x_1_5::_Tuple2 0) (select _x_1_4::_Tuple6 0) (<{convertcases.cu;38;45_421}> (convertcases._createArray_261 (<{convertcases.cu;38;45_425}> 0 (<{StdList.++}> (<{convertcases.c;38;67_418}> 0 (<{StdInt.-_7}> (select _x_1_7::_Tuple2 0) 1) (select _x_1_7::_Tuple2 1)) new_fun_defs_1_8))) 0 (<{StdList.++}> (<{convertcases.c;38;67_420}> 0 (<{StdInt.-_7}> (select _x_1_9::_Tuple2 0) 1) (select _x_1_9::_Tuple2 1)) new_fun_defs_1_8)) (select _x_1_4::_Tuple6 2) (select _x_1_5::_Tuple2 1) (select _x_1_4::_Tuple6 5) (select _x_1_4::_Tuple6 4) (select _x_1_3::convertcases._ConvertState 3)
<{convertcases.c;1850;44_74}> index_0 !g_l_1 = <{convertcases.g_c1;1850;55_475}> g_l_1 index_0
<{convertcases.g_c1;1850;55_475}> !g_l_0 index_1 = case g_l_0 (_predefined._Cons pattern_1_0 g_t_1_1 -> _predefined._Cons (syntax.AlgebraicPatterns index_1 (_predefined._Cons pattern_1_0 _predefined._Nil)) (<{convertcases.c;1850;44_74}> index_1 g_t_1_1)) (_ -> _predefined._Nil)
<{convertcases.c;1852;44_75}> basicType_0 !g_l_1 = <{convertcases.g_c1;1852;55_476}> g_l_1 basicType_0
<{convertcases.g_c1;1852;55_476}> !g_l_0 basicType_1 = case g_l_0 (_predefined._Cons pattern_1_0 g_t_1_1 -> _predefined._Cons (syntax.BasicPatterns basicType_1 (_predefined._Cons pattern_1_0 _predefined._Nil)) (<{convertcases.c;1852;44_75}> basicType_1 g_t_1_1)) (_ -> _predefined._Nil)
<{convertcases.c;1854;60_76}> type_0 decons_expr_1 !g_l_2 = <{convertcases.g_c1;1854;71_477}> g_l_2 type_0 decons_expr_1
<{convertcases.g_c1;1854;71_477}> !g_l_0 type_1 decons_expr_2 = case g_l_0 (_predefined._Cons pattern_1_0 g_t_1_1 -> _predefined._Cons (syntax.OverloadedListPatterns type_1 decons_expr_2 (_predefined._Cons pattern_1_0 _predefined._Nil)) (<{convertcases.c;1854;60_76}> type_1 decons_expr_2 g_t_1_1)) (_ -> _predefined._Nil)
convertcases.splitGuards !_x_0 = case _x_0 (syntax.AlgebraicPatterns index_1_0 patterns_1_1 -> <{convertcases.c;1850;44_74}> index_1_0 patterns_1_1) (syntax.BasicPatterns basicType_1_0 patterns_1_1 -> <{convertcases.c;1852;44_75}> basicType_1_0 patterns_1_1) (syntax.OverloadedListPatterns type_1_0 decons_expr_1_1 patterns_1_2 -> <{convertcases.c;1854;60_76}> type_1_0 decons_expr_1_1 patterns_1_2) 
convertcases.convertCases_171 !ci_0 !dynamik_1 !cs_2 = case dynamik_1 (syntax._DynamicExpr dyn_expr_1_0 dyn_opt_type_1_1 dyn_info_ptr_1_2 dyn_type_code_1_3 -> let _x_2_0 = convertcases.convertCases_173 ci_0 dyn_expr_1_0 cs_2 in <{_Tuple2!3}> (update dynamik_1::syntax._DynamicExpr [0:select _x_2_0::_Tuple2 0]) (select _x_2_0::_Tuple2 1)) 
<{convertcases.<<<_188}> !file_0 !_x_1 = case _x_1 (syntax.EI_Empty -> <{StdFile.<<<_38}> file_0 "*Empty*") (syntax.EI_CaseType _x_1_0 -> <{StdFile.<<<_38}> file_0 "CaseType") 
<{convertcases.<<<_189}> !file_0 !ptr_1 = <{StdFile.<<<_36}> file_0 (Heap.ptrToInt ptr_1)
<{convertcases.TD;LetVarInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;LetExpressionInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;RefCountsInCase}> _x_0::B = _predefined._Nil
<{convertcases.TD;SplitsInCase}> _x_0::B = _predefined._Nil
<{convertcases.TD;CaseLevel}> _x_0::B = _predefined._Nil
<{convertcases.TD;ConvertInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;CheckImportedInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;RCInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;RCState}> _x_0::B = _predefined._Nil
<{convertcases.TD;PreviousLetVarInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;CountedVariable}> _x_0::B = _predefined._Nil
<{convertcases.TD;LetExpressionStatus}> _x_0::B = _predefined._Nil
<{convertcases.TD;DistributeInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;DistributeState}> _x_0::B = _predefined._Nil
<{convertcases.TD;SplitCase}> _x_0::B = _predefined._Nil
<{convertcases.TD;NextAlt}> _x_0::B = _predefined._Nil
<{convertcases.TD;CaseAltNr}> _x_0::B = _predefined._Nil
<{convertcases.TD;CaseKind}> _x_0::B = _predefined._Nil
<{convertcases.TD;SplitState}> _x_0::B = _predefined._Nil
<{convertcases.TD;SplitInfo}> _x_0::B = _predefined._Nil
<{convertcases.TD;ConvertState}> _x_0::B = _predefined._Nil
<{convertcases.TD;CopyState}> _x_0::B = _predefined._Nil
<{convertcases.TD;weightedRefCount;}> _x_0::B = _predefined._Nil
<{convertcases.TD;distributeLets;}> _x_0::B = _predefined._Nil
<{convertcases.TD;findSplitCases;}> _x_0::B = _predefined._Nil
<{convertcases.TD;incAltNr;}> _x_0::B = _predefined._Nil
<{convertcases.TD;convertRootCases;}> _x_0::B = _predefined._Nil
<{convertcases.TD;split;}> _x_0::B = _predefined._Nil
<{convertcases.TD;splitIt;}> _x_0::B = _predefined._Nil
<{convertcases.TD;addDefault;}> _x_0::B = _predefined._Nil
<{convertcases.TD;convertCases;}> _x_0::B = _predefined._Nil
<{convertcases.TD;copy;}> _x_0::B = _predefined._Nil

:: convertcases.CaseLevel = convertcases.CaseLevelRoot | convertcases.CaseLevelAfterGuardRoot
:: convertcases.LetExpressionStatus = convertcases.LES_Untouched | convertcases.LES_Moved | convertcases.LES_Updated !a1
:: convertcases.CaseKind = convertcases.CaseKindUnknown | convertcases.CaseKindGuard | convertcases.CaseKindLeave | convertcases.CaseKindTransform

|| Converted Records
:: convertcases._LetVarInfo = {!convertcases.lvi_count::I, !convertcases.lvi_depth::I, !convertcases.lvi_new::B, !convertcases.lvi_var, !convertcases.lvi_expression, !convertcases.lvi_previous}

:: convertcases._LetExpressionInfo = {!convertcases.lei_count::I, !convertcases.lei_depth::I, !convertcases.lei_var, !convertcases.lei_expression, !convertcases.lei_status, !convertcases.lei_type}

:: convertcases._RefCountsInCase = {!convertcases.rcc_all_variables, !convertcases.rcc_default_variables, !convertcases.rcc_pattern_variables}

:: convertcases._SplitsInCase = {convertcases.sic_next_alt, convertcases.sic_splits, convertcases.sic_case_kind}

:: convertcases._ConvertInfo = {!convertcases.ci_bound_vars, !convertcases.ci_group_index, !convertcases.ci_common_defs, !convertcases.ci_case_level}

:: convertcases._CheckImportedInfo = {!convertcases.cii_dcl_functions, !convertcases.cii_common_defs, !convertcases.cii_main_dcl_module_n::I}

:: convertcases._RCInfo = {!convertcases.rci_imported, !convertcases.rci_depth::I}

:: convertcases._RCState = {!convertcases.rcs_free_vars, !convertcases.rcs_imports, !convertcases.rcs_var_heap, !convertcases.rcs_expr_heap}

:: convertcases._PreviousLetVarInfo = {!convertcases.plvi_count::I, !convertcases.plvi_depth::I, !convertcases.plvi_new::B}

:: convertcases._CountedVariable = {!convertcases.cv_variable, !convertcases.cv_count::I}

:: convertcases._DistributeInfo = {!convertcases.di_depth::I, !convertcases.di_explicit_case_depth::I}

:: convertcases._DistributeState = {!convertcases.ds_lets, !convertcases.ds_var_heap, !convertcases.ds_expr_heap}

:: convertcases._SplitCase = {convertcases.sc_alt_nr, convertcases.sc_call}

:: convertcases._NextAlt = {convertcases.na_case, convertcases.na_alt_nr}

:: convertcases._SplitState = {!convertcases.ss_expr_heap, !convertcases.ss_var_heap}

:: convertcases._SplitInfo = {!convertcases.si_next_alt, !convertcases.si_force_next_alt::B}

:: convertcases._ConvertState = {!convertcases.cs_new_functions, !convertcases.cs_fun_heap, !convertcases.cs_var_heap, !convertcases.cs_expr_heap, !convertcases.cs_next_fun_nr}

:: convertcases._CopyState = {!convertcases.cp_free_vars, !convertcases.cp_local_vars, !convertcases.cp_var_heap}

:: <{convertcases.weightedRefCount;}> = {!convertcases.weightedRefCount}

:: <{convertcases.distributeLets;}> = {!convertcases.distributeLets}

:: <{convertcases.findSplitCases;}> = {!convertcases.findSplitCases}

:: <{convertcases.incAltNr;}> = {!convertcases.incAltNr}

:: <{convertcases.convertRootCases;}> = {!convertcases.convertRootCases}

:: <{convertcases.split;}> = {!convertcases.split}

:: <{convertcases.splitIt;}> = {!convertcases.splitIt}

:: <{convertcases.addDefault;}> = {!convertcases.addDefault}

:: <{convertcases.convertCases;}> = {!convertcases.convertCases}

:: <{convertcases.copy;}> = {!convertcases.copy}

