|| ?module? Version


Version.versionCompare !expected_0 !observed_1 = case (<{StdInt.<_17}> (select expected_0::Version._VersionInfo 0) (select observed_1::Version._VersionInfo 0)) (True -> case (StdBool.not (<{StdInt.<_17}> (select expected_0::Version._VersionInfo 0) (select observed_1::Version._VersionInfo 1))) (True -> Version.VersionsAreCompatible) (False -> Version.VersionObservedIsTooNew) ) (False -> case (<{StdInt.==_16}> (select expected_0::Version._VersionInfo 0) (select observed_1::Version._VersionInfo 0)) (True -> Version.VersionsAreCompatible) (False -> case (StdBool.not (<{StdInt.<_17}> (select observed_1::Version._VersionInfo 0) (select expected_0::Version._VersionInfo 2))) (True -> Version.VersionsAreCompatible) (False -> Version.VersionObservedIsTooOld) ) ) 
<{Version.TD;VersionInfo}> _x_0::B = _predefined._Nil
<{Version.TD;VersionsCompatability}> _x_0::B = _predefined._Nil

:: Version.VersionsCompatability = Version.VersionsAreCompatible | Version.VersionObservedIsTooOld | Version.VersionObservedIsTooNew

|| Converted Records
:: Version._VersionInfo = {Version.versionCurrent::I, Version.versionOldestDefinition::I, Version.versionOldestImplementation::I}

