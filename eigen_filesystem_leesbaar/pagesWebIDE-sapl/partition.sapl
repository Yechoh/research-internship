|| ?module? partition


partition.fold_st_76 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_76 op_0 x_1_1 (op_0 a_1_0 st_2)) 
partition.push_on_dep_stack_18 !fun_index_0::I !pi_1 = case pi_1 (partition._PartitioningInfo pi_marks_1_0 pi_next_num_1_1 pi_next_group_1_2 pi_groups_1_3 pi_deps_1_4 -> update pi_1::partition._PartitioningInfo [0:_SystemArray.update_13 pi_marks_1_0 fun_index_0 pi_next_num_1_1,1:<{StdInt.+_6}> pi_next_num_1_1 StdInt.one_11,4:_predefined._Cons fun_index_0 pi_deps_1_4]) 
<{partition.c;74;60_14}> d_0::I !g_l_1 = <{partition.g_c1;74;66_152}> g_l_1 d_0
<{partition.g_c1;74;66_152}> !g_l_0 d_1::I = case g_l_0 (_predefined._Cons fc_1_0 g_t_1_1 -> case (<{partition._c;74;92_151}> fc_1_0 d_1) (True -> _predefined._Cons fc_1_0 (<{partition.c;74;60_14}> d_1 g_t_1_1)) (False -> <{partition.c;74;60_14}> d_1 g_t_1_1) ) (_ -> _predefined._Nil)
<{partition._c;74;92_151}>::B !fc_0 d_1::I = case fc_0 (syntax.FunCall idx_1_0 _x_1_1 -> <{StdInt.==_16}> idx_1_0 d_1) (_ -> False)
partition.set_rec_prop::I !non_recursive_0::B !fi_properties_1::I = case non_recursive_0 (True -> StdInt.bitor fi_properties_1 4) (False -> StdInt.bitand fi_properties_1 (StdInt.bitnot 4)) 
partition.close_group_15 !n_r_known_0::B !non_recursive_1::B !fun_index_2::I !_x_3 !marks_4 !group_5 !max_fun_nr_6::I !group_number_7::I !fun_defs_8 = case _x_3 (_predefined._Cons d_1_0 ds_1_1 -> case (<{StdInt.==_16}> d_1_0 fun_index_2) (True -> let _x_3_0 = partition.uselect_94 fun_defs_8 d_1_0, fd_3_1 = select _x_3_0::_Tuple2 0 in <{_Tuple4!15}> ds_1_1 (_SystemArray.update_13 marks_4 d_1_0 max_fun_nr_6) (checksupport.ComponentMember d_1_0 group_5) (partition.update_93 (select _x_3_0::_Tuple2 1) d_1_0 (update fd_3_1::syntax._FunDef [8:update (select fd_3_1::syntax._FunDef 8)::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop (<{partition._c;71;31_153}> n_r_known_0 non_recursive_1 fun_index_2 d_1_0 fd_3_1) (select (select fd_3_1::syntax._FunDef 8)::syntax._FunInfo 6)]]))) (False -> let non_recursive_3_0 = <{partition._c;71;31_154}> n_r_known_0 non_recursive_1 fun_index_2 d_1_0 fd_3_2, _x_3_1 = partition.uselect_94 fun_defs_8 d_1_0, fd_3_2::B = select _x_3_1::_Tuple2 0 in partition.close_group_15 True non_recursive_3_0 fun_index_2 ds_1_1 (_SystemArray.update_13 marks_4 d_1_0 max_fun_nr_6) (checksupport.ComponentMember d_1_0 group_5) max_fun_nr_6 group_number_7 (partition.update_93 (select _x_3_1::_Tuple2 1) d_1_0 (update fd_3_2::syntax._FunDef [8:update (select fd_3_2::syntax._FunDef 8)::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop non_recursive_3_0 (select (select fd_3_2::syntax._FunDef 8)::syntax._FunInfo 6)]]))) ) 
<{partition._c;71;31_154}>::B !n_r_known_0::B non_recursive_1::B fun_index_2::I d_3::I fd_4 = case n_r_known_0 (True -> non_recursive_1) (_ -> case (<{StdInt.==_16}> fun_index_2 d_3) (True -> StdList.isEmpty (<{partition.c;74;60_14}> d_3 (select (select fd_4::syntax._FunDef 8)::syntax._FunInfo 0))) (False -> False) )
<{partition._c;71;31_153}>::B !n_r_known_0::B non_recursive_1::B fun_index_2::I d_3::I fd_4 = case n_r_known_0 (True -> non_recursive_1) (_ -> case (<{StdInt.==_16}> fun_index_2 d_3) (True -> StdList.isEmpty (<{partition.c;74;60_14}> d_3 (select (select fd_4::syntax._FunDef 8)::syntax._FunInfo 0))) (False -> False) )
partition.try_to_close_group_19 !fun_index_0::I !fun_nr_1::I !min_dep_2::I !max_fun_nr_3::I !fun_defs_4 !pi_5 = case pi_5 (partition._PartitioningInfo pi_marks_1_0 pi_next_num_1_1 pi_next_group_1_2 pi_groups_1_3 pi_deps_1_4 -> case (StdBool.not (<{StdInt.<_17}> min_dep_2 fun_nr_1)) (True -> let _x_3_0 = partition.close_group_15 False False fun_index_0 pi_deps_1_4 pi_marks_1_0 checksupport.NoComponentMembers max_fun_nr_3 pi_next_group_1_2 fun_defs_4 in <{_Tuple3!7}> max_fun_nr_3 (select _x_3_0::_Tuple4 3) (update pi_5::partition._PartitioningInfo [0:select _x_3_0::_Tuple4 1,2:<{StdInt.+_6}> pi_next_group_1_2 StdInt.one_11,3:_predefined._Cons (select _x_3_0::_Tuple4 2) pi_groups_1_3,4:select _x_3_0::_Tuple4 0])) (False -> <{_Tuple3!7}> min_dep_2 fun_defs_4 pi_5) ) 
partition.visit_functions_13 !_x_0 !min_dep_1::I !max_fun_nr_2::I !fun_defs_3 !pi_4 = case _x_0 (_predefined._Cons _x_1_0 funs_1_1 -> case _x_1_0 (syntax.FunCall fc_index_2_0 _x_2_1 -> case pi_4 (partition._PartitioningInfo pi_marks_3_0 pi_next_num_3_1 pi_next_group_3_2 pi_groups_3_3 pi_deps_3_4 -> let !mark_4_0::I = _SystemArray.select_11 pi_marks_3_0 fc_index_2_0 in case (<{StdInt.==_16}> mark_4_0 -1) (True -> let _x_6_0::I = partition.partitionate_function_17 fc_index_2_0 max_fun_nr_2 fun_defs_3 pi_4, mark_6_1 = select _x_6_0::_Tuple3 0 in partition.visit_functions_13 funs_1_1 (<{partition._c;48;16_155}> (<{StdInt.<_17}> min_dep_1 mark_6_1) min_dep_1 mark_6_1) max_fun_nr_2 (select _x_6_0::_Tuple3 1) (select _x_6_0::_Tuple3 2)) (False -> partition.visit_functions_13 funs_1_1 (<{partition._c;48;16_156}> (<{StdInt.<_17}> min_dep_1 mark_4_0) min_dep_1 mark_4_0) max_fun_nr_2 fun_defs_3 pi_4) ) ) (syntax.DclFunCall module_index_2_0 fc_index_2_1 -> partition.visit_functions_13 funs_1_1 min_dep_1 max_fun_nr_2 fun_defs_3 pi_4) ) (_predefined._Nil -> <{_Tuple3!7}> min_dep_1 fun_defs_3 pi_4) 
partition.partitionate_function_17 !fun_index_0::I !max_fun_nr_1::I !fun_defs_2 !pi_3 = case pi_3 (partition._PartitioningInfo pi_marks_1_0 pi_next_num_1_1 pi_next_group_1_2 pi_groups_1_3 pi_deps_1_4 -> let _x_2_0 = partition.uselect_94 fun_defs_2 fun_index_0, _x_2_1 = partition.visit_functions_13 (select (select (select _x_2_0::_Tuple2 0)::syntax._FunDef 8)::syntax._FunInfo 0) max_fun_nr_1 max_fun_nr_1 (select _x_2_0::_Tuple2 1) (partition.push_on_dep_stack_18 fun_index_0 pi_3) in partition.try_to_close_group_19 fun_index_0 pi_next_num_1_1 (select _x_2_1::_Tuple3 0) max_fun_nr_1 (select _x_2_1::_Tuple3 1) (select _x_2_1::_Tuple3 2)) 
<{partition._c;48;16_156}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
<{partition._c;48;16_155}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
partition.partitionate_functions_16 !max_fun_nr_0::I !ir_1 !_x_2 = case ir_1 (syntax._IndexRange ir_from_1_0 ir_to_1_1 -> case _x_2 (_Tuple2 fun_defs_2_0 pi_2_1 -> case pi_2_1 (partition._PartitioningInfo pi_marks_3_0 pi_next_num_3_1 pi_next_group_3_2 pi_groups_3_3 pi_deps_3_4 -> case (<{StdInt.==_16}> ir_from_1_0 ir_to_1_1) (True -> <{_Tuple2!3}> fun_defs_2_0 pi_2_1) (False -> case (<{StdInt.==_16}> (_SystemArray.select_11 pi_marks_3_0 ir_from_1_0) -1) (True -> let _x_6_0 = partition.partitionate_function_17 ir_from_1_0 max_fun_nr_0 fun_defs_2_0 pi_2_1 in partition.partitionate_functions_16 max_fun_nr_0 (update ir_1::syntax._IndexRange [0:<{StdInt.+_6}> ir_from_1_0 StdInt.one_11]) (_Tuple2 (select _x_6_0::_Tuple3 1) (select _x_6_0::_Tuple3 2))) (False -> partition.partitionate_functions_16 max_fun_nr_0 (update ir_1::syntax._IndexRange [0:<{StdInt.+_6}> ir_from_1_0 StdInt.one_11]) (_Tuple2 fun_defs_2_0 pi_2_1)) ) ) ) ) 
<{partition.cu;23;46_12}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{partition.g_c1;23;55_157}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{partition.g_c1;23;55_157}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;23;46_12}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{partition.cu;23;46_11}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{partition.g_c1;23;55_158}> g_l_3 _vArray_0 c_a_1 c_i_2
<{partition.g_c1;23;55_158}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;23;46_11}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (checksupport._Component group_1_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
partition.fold_st_112 max_fun_nr_0::I !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_112 max_fun_nr_0 x_1_1 (partition.partitionate_functions_16 max_fun_nr_0 a_1_0 st_2)) 
<{partition.cu;23;46_113}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{partition.g_c1;23;55_159}> g_l_2 <{_v+_0}> c_l_i_1
<{partition.g_c1;23;55_159}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;23;46_113}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{partition.cu;23;46_114}> !c_a_0 c_i_1::I !g_l_2 = <{partition.g_c1;23;55_160}> g_l_2 c_a_0 c_i_1
<{partition.g_c1;23;55_160}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;23;46_114}> (_SystemArray.update_5 c_a_1 c_i_2 (checksupport._Component group_1_0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{partition.cu;23;46_115}>::I !c_l_i_0::I !g_l_1 = <{partition.g_c1;23;55_161}> g_l_1 c_l_i_0
<{partition.g_c1;23;55_161}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;23;46_115}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
partition.partitionateFunctions !fun_defs_0 !ranges_1 = let !max_fun_nr_1_0::I = partition.size_92 fun_defs_0, _x_1_1 = partition.fold_st_112 max_fun_nr_1_0 ranges_1 (_Tuple2 fun_defs_0 (partition._PartitioningInfo (_SystemArray.createArray_9 max_fun_nr_1_0 -1) 0 0 _predefined._Nil _predefined._Nil)), pi_groups_1_2 = select (select _x_1_1::_Tuple2 1)::partition._PartitioningInfo 3 in <{_Tuple2!3}> (<{partition.cu;23;46_114}> (_SystemArray._createArray_0 (<{partition.cu;23;46_115}> 0 (StdList.reverse pi_groups_1_2))) 0 (StdList.reverse pi_groups_1_2)) (select _x_1_1::_Tuple2 0)
partition.fold_st_77 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_77 op_0 x_1_1 (op_0 a_1_0 st_2)) 
partition.get_predef_symbols_for_transform !cs_predef_symbols_0 = let _x_1_0 = partition.uselect_102 cs_predef_symbols_0 148, _x_1_1 = partition.uselect_102 (select _x_1_0::_Tuple2 1) 125, _x_1_2 = partition.uselect_102 (select _x_1_1::_Tuple2 1) 126 in <{_Tuple2!3}> (transform._PredefSymbolsForTransform (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0) (select _x_1_2::_Tuple2 0)) (select _x_1_2::_Tuple2 1)
partition.determine_ref_counts !fd_0 pi_collect_1 = case fd_0 (syntax._FunDef fun_ident_1_0 fun_arity_1_1 fun_priority_1_2 fun_body_1_3 fun_type_1_4 fun_pos_1_5 fun_kind_1_6 fun_lifted_1_7 fun_info_1_8 -> case fun_body_1_3 (syntax.TransformedBody _x_2_0 -> case _x_2_0 (syntax._TransformedBody tb_args_3_0 tb_rhs_3_1 -> let _x_4_0 = transform.determineVariablesAndRefCounts tb_args_3_0 tb_rhs_3_1 pi_collect_1 in _Tuple2 (update fd_0::syntax._FunDef [3:syntax.TransformedBody (syntax._TransformedBody (select _x_4_0::_Tuple5 1) (select _x_4_0::_Tuple5 0))]) (select _x_4_0::_Tuple5 4)) ) ) (_ -> _Tuple2 fd_0 pi_collect_1)
partition.push_on_dep_stack_31 !fun_index_0::I !pi_1 = case pi_1 (<{partition._PartitioningInfo`}> pi_marks`_1_0 pi_next_num`_1_1 pi_next_group`_1_2 pi_groups`_1_3 pi_deps`_1_4 pi_collect`_1_5 -> update pi_1::<{partition._PartitioningInfo`}> [0:_SystemArray.update_13 <{pi_marks`_1_0}> fun_index_0 <{pi_next_num`_1_1}>,1:<{StdInt.+_6}> <{pi_next_num`_1_1}> StdInt.one_11,4:_predefined._Cons fun_index_0 <{pi_deps`_1_4}>]) 
<{partition.c;190;60_27}> d_0::I !g_l_1 = <{partition.g_c1;190;66_163}> g_l_1 d_0
<{partition.g_c1;190;66_163}> !g_l_0 d_1::I = case g_l_0 (_predefined._Cons fc_1_0 g_t_1_1 -> case (<{partition._c;190;92_162}> fc_1_0 d_1) (True -> _predefined._Cons fc_1_0 (<{partition.c;190;60_27}> d_1 g_t_1_1)) (False -> <{partition.c;190;60_27}> d_1 g_t_1_1) ) (_ -> _predefined._Nil)
<{partition._c;190;92_162}>::B !fc_0 d_1::I = case fc_0 (syntax.FunCall idx_1_0 _x_1_1 -> <{StdInt.==_16}> idx_1_0 d_1) (_ -> False)
partition.close_group_28 !n_r_known_0::B !non_recursive_1::B !fun_index_2::I !_x_3 !marks_4 !group_5 !max_fun_nr_6::I !group_number_7::I !fun_defs_8 = case _x_3 (_predefined._Cons d_1_0 ds_1_1 -> case (<{StdInt.==_16}> d_1_0 fun_index_2) (True -> let _x_3_0 = partition.uselect_94 fun_defs_8 d_1_0, fd_3_1 = select _x_3_0::_Tuple2 0 in <{_Tuple4!15}> ds_1_1 (_SystemArray.update_13 marks_4 d_1_0 max_fun_nr_6) (checksupport.ComponentMember d_1_0 group_5) (partition.update_93 (select _x_3_0::_Tuple2 1) d_1_0 (update fd_3_1::syntax._FunDef [8:update (select fd_3_1::syntax._FunDef 8)::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop (<{partition._c;187;31_164}> n_r_known_0 non_recursive_1 fun_index_2 d_1_0 fd_3_1) (select (select fd_3_1::syntax._FunDef 8)::syntax._FunInfo 6)]]))) (False -> let non_recursive_3_0 = <{partition._c;187;31_165}> n_r_known_0 non_recursive_1 fun_index_2 d_1_0 fd_3_2, _x_3_1 = partition.uselect_94 fun_defs_8 d_1_0, fd_3_2::B = select _x_3_1::_Tuple2 0 in partition.close_group_28 True non_recursive_3_0 fun_index_2 ds_1_1 (_SystemArray.update_13 marks_4 d_1_0 max_fun_nr_6) (checksupport.ComponentMember d_1_0 group_5) max_fun_nr_6 group_number_7 (partition.update_93 (select _x_3_1::_Tuple2 1) d_1_0 (update fd_3_2::syntax._FunDef [8:update (select fd_3_2::syntax._FunDef 8)::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop non_recursive_3_0 (select (select fd_3_2::syntax._FunDef 8)::syntax._FunInfo 6)]]))) ) 
<{partition._c;187;31_165}>::B !n_r_known_0::B non_recursive_1::B fun_index_2::I d_3::I fd_4 = case n_r_known_0 (True -> non_recursive_1) (_ -> case (<{StdInt.==_16}> fun_index_2 d_3) (True -> StdList.isEmpty (<{partition.c;190;60_27}> d_3 (select (select fd_4::syntax._FunDef 8)::syntax._FunInfo 0))) (False -> False) )
<{partition._c;187;31_164}>::B !n_r_known_0::B non_recursive_1::B fun_index_2::I d_3::I fd_4 = case n_r_known_0 (True -> non_recursive_1) (_ -> case (<{StdInt.==_16}> fun_index_2 d_3) (True -> StdList.isEmpty (<{partition.c;190;60_27}> d_3 (select (select fd_4::syntax._FunDef 8)::syntax._FunInfo 0))) (False -> False) )
partition.try_to_close_group_32 !fun_index_0::I !fun_nr_1::I !min_dep_2::I !max_fun_nr_3::I !fun_defs_4 !pi_5 = case pi_5 (<{partition._PartitioningInfo`}> pi_marks`_1_0 pi_next_num`_1_1 pi_next_group`_1_2 pi_groups`_1_3 pi_deps`_1_4 pi_collect`_1_5 -> case (StdBool.not (<{StdInt.<_17}> min_dep_2 fun_nr_1)) (True -> let _x_3_0 = partition.close_group_28 False False fun_index_0 <{pi_deps`_1_4}> <{pi_marks`_1_0}> checksupport.NoComponentMembers max_fun_nr_3 <{pi_next_group`_1_2}> fun_defs_4 in <{_Tuple3!7}> max_fun_nr_3 (select _x_3_0::_Tuple4 3) (update pi_5::<{partition._PartitioningInfo`}> [0:select _x_3_0::_Tuple4 1,2:<{StdInt.+_6}> <{pi_next_group`_1_2}> StdInt.one_11,3:_predefined._Cons (select _x_3_0::_Tuple4 2) <{pi_groups`_1_3}>,4:select _x_3_0::_Tuple4 0])) (False -> <{_Tuple3!7}> min_dep_2 fun_defs_4 pi_5) ) 
partition.anon_49 !_x_0 = case _x_0 (general._Bind bind_src_1_0 bind_dst_1_1 -> bind_src_1_0) 
partition.fold_st_87 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_87 op_0 x_1_1 (op_0 a_1_0 st_2)) 
partition.find_calls_54 !_vfind_calls_0 !fc_info_1 !els_2 !fc_state_3 = partition.fold_st_87 (select _vfind_calls_0::<{partition.find_calls;}> 0 fc_info_1) els_2 fc_state_3
partition.get_index_50 fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax.SK_Function _x_1_0 -> case _x_1_0 (syntax._Global glob_object_2_0 glob_module_2_1 -> case (case (<{StdInt.==_16}> (select fc_info_0::partition._FindCallsInfo 0) glob_module_2_1) (True -> case (<{StdInt.<_17}> glob_object_2_0 (select fc_info_0::partition._FindCallsInfo 2)) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> glob_object_2_0 (select fc_info_0::partition._FindCallsInfo 1))) ) (False -> False) ) (True -> update fc_state_2::partition._FindCallsState [0:_predefined._Cons (syntax.FunCall glob_object_2_0 0) (select fc_state_2::partition._FindCallsState 0)]) (False -> update fc_state_2::partition._FindCallsState [0:_predefined._Cons (syntax.DclFunCall glob_module_2_1 glob_object_2_0) (select fc_state_2::partition._FindCallsState 0)]) ) ) (syntax.SK_Constructor idx_1_0 -> fc_state_2) (syntax.SK_LocalMacroFunction idx_1_0 -> update fc_state_2::partition._FindCallsState [0:_predefined._Cons (syntax.FunCall idx_1_0 0) (select fc_state_2::partition._FindCallsState 0)]) (syntax.SK_GeneratedFunction fun_ptr_1_0 idx_1_1 -> update fc_state_2::partition._FindCallsState [0:_predefined._Cons (syntax.GeneratedFunCall idx_1_1 fun_ptr_1_0) (select fc_state_2::partition._FindCallsState 0)]) 
partition.find_calls_55 !_vfind_calls_0 !fc_info_1 !_x_2 !fc_state_3 = case _x_2 (general.Yes e_1_0 -> select _vfind_calls_0::<{partition.find_calls;}> 0 fc_info_1 e_1_0 fc_state_3) (general.No -> fc_state_3) 
partition.find_calls_59 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._App app_symb_1_0 app_args_1_1 app_info_ptr_1_2 -> let !fc_state_2_0 = partition.get_index_50 fc_info_0 (select app_symb_1_0::syntax._SymbIdent 1) fc_state_2 in partition.find_calls_116 fc_info_0 app_args_1_1 fc_state_2_0) 
partition.find_calls_63 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._LetBind lb_dst_1_0 lb_src_1_1 lb_position_1_2 -> partition.find_calls_58 fc_info_0 lb_src_1_1 fc_state_2) 
partition.fold_st_121 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_121 fc_info_0 x_1_1 (partition.find_calls_63 fc_info_0 a_1_0 st_2)) 
partition.find_calls_120 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_121 fc_info_0 els_1 fc_state_2
partition.find_calls_60 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._Let let_strict_binds_1_0 let_lazy_binds_1_1 let_expr_1_2 let_info_ptr_1_3 let_expr_position_1_4 -> partition.find_calls_120 fc_info_0 (<{StdList.++}> let_strict_binds_1_0 let_lazy_binds_1_1) (partition.find_calls_58 fc_info_0 let_expr_1_2 fc_state_2)) 
partition.find_calls_66 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._BasicPattern bp_value_1_0 bp_expr_1_1 bp_position_1_2 -> partition.find_calls_58 fc_info_0 bp_expr_1_1 fc_state_2) 
partition.fold_st_126 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_126 fc_info_0 x_1_1 (partition.find_calls_66 fc_info_0 a_1_0 st_2)) 
partition.find_calls_125 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_126 fc_info_0 els_1 fc_state_2
partition.find_calls_67 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._DynamicPattern dp_var_1_0 dp_type_1_1 dp_type_code_1_2 dp_rhs_1_3 dp_position_1_4 -> partition.find_calls_58 fc_info_0 dp_rhs_1_3 fc_state_2) 
partition.fold_st_128 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_128 fc_info_0 x_1_1 (partition.find_calls_67 fc_info_0 a_1_0 st_2)) 
partition.find_calls_127 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_128 fc_info_0 els_1 fc_state_2
partition.find_calls_65 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._AlgebraicPattern ap_symbol_1_0 ap_vars_1_1 ap_expr_1_2 ap_position_1_3 -> partition.find_calls_58 fc_info_0 ap_expr_1_2 fc_state_2) 
partition.fold_st_124 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_124 fc_info_0 x_1_1 (partition.find_calls_65 fc_info_0 a_1_0 st_2)) 
partition.find_calls_123 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_124 fc_info_0 els_1 fc_state_2
partition.find_calls_64 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax.AlgebraicPatterns _x_1_0 pats_1_1 -> partition.find_calls_123 fc_info_0 pats_1_1 fc_state_2) (syntax.BasicPatterns _x_1_0 pats_1_1 -> partition.find_calls_125 fc_info_0 pats_1_1 fc_state_2) (syntax.DynamicPatterns pats_1_0 -> partition.find_calls_127 fc_info_0 pats_1_0 fc_state_2) (syntax.OverloadedListPatterns _x_1_0 expr_1_1 pats_1_2 -> partition.find_calls_123 fc_info_0 pats_1_2 (partition.find_calls_58 fc_info_0 expr_1_1 fc_state_2)) (syntax.NoPattern -> fc_state_2) (_ -> StdMisc.abort "Undefined pattern in CasePatterns\n")
partition.find_calls_122 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (general.Yes e_1_0 -> partition.find_calls_58 fc_info_0 e_1_0 fc_state_2) (general.No -> fc_state_2) 
partition.find_calls_61 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._Case case_expr_1_0 case_guards_1_1 case_default_1_2 case_ident_1_3 case_info_ptr_1_4 case_explicit_1_5 case_default_pos_1_6 -> let !fc_state_2_0 = partition.find_calls_58 fc_info_0 case_expr_1_0 fc_state_2, !fc_state_2_1 = partition.find_calls_122 fc_info_0 case_default_1_2 fc_state_2_0 in partition.find_calls_64 fc_info_0 case_guards_1_1 fc_state_2_1) 
partition.find_calls_62 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax.RecordSelection _x_1_0 _x_1_1 -> fc_state_2) (syntax.ArraySelection _x_1_0 _x_1_1 expr_1_2 -> partition.find_calls_58 fc_info_0 expr_1_2 fc_state_2) (syntax.DictionarySelection _x_1_0 sells_1_1 _x_1_2 expr_1_3 -> partition.find_calls_58 fc_info_0 expr_1_3 (partition.find_calls_118 fc_info_0 sells_1_1 fc_state_2)) (_ -> StdMisc.abort "Undefined pattern in Selection\n")
partition.fold_st_119 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_119 fc_info_0 x_1_1 (partition.find_calls_62 fc_info_0 a_1_0 st_2)) 
partition.find_calls_118 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_119 fc_info_0 els_1 fc_state_2
partition.fold_st_117 !fc_info_0 !_x_1 !st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_117 fc_info_0 x_1_1 (partition.find_calls_58 fc_info_0 a_1_0 st_2)) 
partition.find_calls_116 !fc_info_0 !els_1 !fc_state_2 = partition.fold_st_117 fc_info_0 els_1 fc_state_2
partition.find_calls_58 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax.Var _x_1_0 -> fc_state_2) (syntax.App app_1_0 -> partition.find_calls_59 fc_info_0 app_1_0 fc_state_2) (<{syntax.@}> exp_1_0 exps_1_1 -> partition.find_calls_116 fc_info_0 exps_1_1 (partition.find_calls_58 fc_info_0 exp_1_0 fc_state_2)) (syntax.Let lete_1_0 -> partition.find_calls_60 fc_info_0 lete_1_0 fc_state_2) (syntax.Case kees_1_0 -> partition.find_calls_61 fc_info_0 kees_1_0 fc_state_2) (syntax.Selection _x_1_0 exp_1_1 sells_1_2 -> partition.find_calls_118 fc_info_0 sells_1_2 (partition.find_calls_58 fc_info_0 exp_1_1 fc_state_2)) (syntax.Update e1_1_0 sl_1_1 e2_1_2 -> let !fc_state_2_0 = partition.find_calls_58 fc_info_0 e1_1_0 fc_state_2, !fc_state_2_1 = partition.find_calls_118 fc_info_0 sl_1_1 fc_state_2_0 in partition.find_calls_58 fc_info_0 e2_1_2 fc_state_2_1) (syntax.RecordUpdate _x_1_0 expr_1_1 bexps_1_2 -> let !fc_state_2_0 = partition.find_calls_58 fc_info_0 expr_1_1 fc_state_2 in partition.find_calls_116 fc_info_0 (StdList.map partition.anon_49 bexps_1_2) fc_state_2_0) (syntax.TupleSelect _x_1_0 _x_1_1 expr_1_2 -> partition.find_calls_58 fc_info_0 expr_1_2 fc_state_2) (syntax.BasicExpr _x_1_0 -> fc_state_2) (syntax.AnyCodeExpr _x_1_0 _x_1_1 _x_1_2 -> fc_state_2) (syntax.ABCCodeExpr _x_1_0 _x_1_1 -> fc_state_2) (syntax.MatchExpr _x_1_0 expr_1_1 -> partition.find_calls_58 fc_info_0 expr_1_1 fc_state_2) (syntax.IsConstructor expr_1_0 _x_1_1 _x_1_2 _x_1_3 _x_1_4 _x_1_5 -> partition.find_calls_58 fc_info_0 expr_1_0 fc_state_2) (syntax.EE -> fc_state_2) (syntax.NoBind _x_1_0 -> fc_state_2) (syntax.FailExpr _x_1_0 -> fc_state_2) (syntax.DictionariesFunction dictionaries_1_0 expr_1_1 expr_type_1_2 -> partition.find_calls_58 fc_info_0 expr_1_1 fc_state_2) 
partition.find_calls_57 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax._TransformedBody tb_args_1_0 tb_rhs_1_1 -> partition.find_calls_58 fc_info_0 tb_rhs_1_1 fc_state_2) 
partition.find_calls_56 !fc_info_0 !_x_1 !fc_state_2 = case _x_1 (syntax.TransformedBody tb_1_0 -> partition.find_calls_57 fc_info_0 tb_1_0 fc_state_2) (_ -> StdMisc.abort (<{StdString.+++_11}> "Undefined pattern in FunctionBody: " (<{StdString.+++_11}> (StdString.toString_5 (select fc_info_0::partition._FindCallsInfo 3)) (<{StdString.+++_11}> "?" (<{StdString.+++_11}> (StdString.toString_5 (select fc_info_0::partition._FindCallsInfo 1)) (<{StdString.+++_11}> "?" (<{StdString.+++_11}> (StdString.toString_5 (select fc_info_0::partition._FindCallsInfo 2)) "\n")))))))
partition.visit_functions_26 def_max_0::I def_min_1::I main_dcl_module_n_2::I !_x_3 !min_dep_4::I !max_fun_nr_5::I !fun_defs_6 !pi_7 = case _x_3 (_predefined._Cons _x_1_0 funs_1_1 -> case _x_1_0 (syntax.FunCall fc_index_2_0 _x_2_1 -> case pi_7 (<{partition._PartitioningInfo`}> pi_marks`_3_0 pi_next_num`_3_1 pi_next_group`_3_2 pi_groups`_3_3 pi_deps`_3_4 pi_collect`_3_5 -> let !mark_4_0::I = _SystemArray.select_11 <{pi_marks`_3_0}> fc_index_2_0 in case (<{StdInt.==_16}> mark_4_0 -1) (True -> let _x_6_0::I = partition.partitionate_function_30 def_max_0 def_min_1 main_dcl_module_n_2 fc_index_2_0 max_fun_nr_5 fun_defs_6 pi_7, mark_6_1 = select _x_6_0::_Tuple3 0 in partition.visit_functions_26 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_166}> (<{StdInt.<_17}> min_dep_4 mark_6_1) min_dep_4 mark_6_1) max_fun_nr_5 (select _x_6_0::_Tuple3 1) (select _x_6_0::_Tuple3 2)) (False -> partition.visit_functions_26 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_167}> (<{StdInt.<_17}> min_dep_4 mark_4_0) min_dep_4 mark_4_0) max_fun_nr_5 fun_defs_6 pi_7) ) ) (syntax.DclFunCall module_index_2_0 fc_index_2_1 -> partition.visit_functions_26 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 min_dep_4 max_fun_nr_5 fun_defs_6 pi_7) ) (_predefined._Nil -> <{_Tuple3!7}> min_dep_4 fun_defs_6 pi_7) 
partition.partitionate_function_30 !def_max_0::I !def_min_1::I !main_dcl_module_n_2::I !fun_index_3::I !max_fun_nr_4::I !fun_defs_5 !pi_6 = case pi_6 (<{partition._PartitioningInfo`}> pi_marks`_1_0 pi_next_num`_1_1 pi_next_group`_1_2 pi_groups`_1_3 pi_deps`_1_4 pi_collect`_1_5 -> let _x_2_0 = partition.uselect_94 fun_defs_5 fun_index_3, _x_2_1 = partition.determine_ref_counts (select _x_2_0::_Tuple2 0) <{pi_collect`_1_5}>, fd_2_2 = select _x_2_1::_Tuple2 0, fi_calls_2_3 = select (partition.find_calls_56 (partition._FindCallsInfo main_dcl_module_n_2 def_min_1 def_max_0 fun_index_3) (select fd_2_2::syntax._FunDef 3) (partition._FindCallsState _predefined._Nil))::partition._FindCallsState 0, _x_2_4 = partition.visit_functions_26 def_max_0 def_min_1 main_dcl_module_n_2 fi_calls_2_3 max_fun_nr_4 max_fun_nr_4 (partition.update_93 (select _x_2_0::_Tuple2 1) fun_index_3 (update fd_2_2::syntax._FunDef [8:update (select fd_2_2::syntax._FunDef 8)::syntax._FunInfo [0:fi_calls_2_3]])) (partition.push_on_dep_stack_31 fun_index_3 (update pi_6::<{partition._PartitioningInfo`}> [5:select _x_2_1::_Tuple2 1])) in partition.try_to_close_group_32 fun_index_3 <{pi_next_num`_1_1}> (select _x_2_4::_Tuple3 0) max_fun_nr_4 (select _x_2_4::_Tuple3 1) (select _x_2_4::_Tuple3 2)) 
<{partition._c;48;16_167}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
<{partition._c;48;16_166}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
partition.partitionate_functions_29 def_max_0::I def_min_1::I main_dcl_module_n_2::I !max_fun_nr_3::I !ir_4 !_x_5 = case ir_4 (syntax._IndexRange ir_from_1_0 ir_to_1_1 -> case _x_5 (_Tuple2 fun_defs_2_0 pi_2_1 -> case pi_2_1 (<{partition._PartitioningInfo`}> pi_marks`_3_0 pi_next_num`_3_1 pi_next_group`_3_2 pi_groups`_3_3 pi_deps`_3_4 pi_collect`_3_5 -> case (<{StdInt.==_16}> ir_from_1_0 ir_to_1_1) (True -> <{_Tuple2!3}> fun_defs_2_0 pi_2_1) (False -> case (<{StdInt.==_16}> (_SystemArray.select_11 <{pi_marks`_3_0}> ir_from_1_0) -1) (True -> let _x_6_0 = partition.partitionate_function_30 def_max_0 def_min_1 main_dcl_module_n_2 ir_from_1_0 max_fun_nr_3 fun_defs_2_0 pi_2_1 in partition.partitionate_functions_29 def_max_0 def_min_1 main_dcl_module_n_2 max_fun_nr_3 (update ir_4::syntax._IndexRange [0:<{StdInt.+_6}> ir_from_1_0 StdInt.one_11]) (_Tuple2 (select _x_6_0::_Tuple3 1) (select _x_6_0::_Tuple3 2))) (False -> partition.partitionate_functions_29 def_max_0 def_min_1 main_dcl_module_n_2 max_fun_nr_3 (update ir_4::syntax._IndexRange [0:<{StdInt.+_6}> ir_from_1_0 StdInt.one_11]) (_Tuple2 fun_defs_2_0 pi_2_1)) ) ) ) ) 
<{partition.cu;127;46_25}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{partition.g_c1;127;55_168}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{partition.g_c1;127;55_168}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;127;46_25}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{partition.cu;127;46_24}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{partition.g_c1;127;55_169}> g_l_3 _vArray_0 c_a_1 c_i_2
<{partition.g_c1;127;55_169}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;127;46_24}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (checksupport._Component group_1_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
partition.fold_st_129 def_max_0::I def_min_1::I main_dcl_module_n_2::I max_fun_nr_3::I !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> partition.fold_st_129 def_max_0 def_min_1 main_dcl_module_n_2 max_fun_nr_3 x_1_1 (partition.partitionate_functions_29 def_max_0 def_min_1 main_dcl_module_n_2 max_fun_nr_3 a_1_0 st_5)) 
<{partition.cu;127;46_130}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{partition.g_c1;127;55_170}> g_l_2 <{_v+_0}> c_l_i_1
<{partition.g_c1;127;55_170}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;127;46_130}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{partition.cu;127;46_131}> !c_a_0 c_i_1::I !g_l_2 = <{partition.g_c1;127;55_171}> g_l_2 c_a_0 c_i_1
<{partition.g_c1;127;55_171}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;127;46_131}> (_SystemArray.update_5 c_a_1 c_i_2 (checksupport._Component group_1_0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{partition.cu;127;46_132}>::I !c_l_i_0::I !g_l_1 = <{partition.g_c1;127;55_172}> g_l_1 c_l_i_0
<{partition.g_c1;127;55_172}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> <{partition.cu;127;46_132}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
<{partition.partitionateFunctions`}> !fun_defs_0 !ranges_1 !main_dcl_module_n_2::I !def_min_3::I !def_max_4::I !predef_symbols_5 !var_heap_6 !sym_heap_7 !error_admin_8 = let !max_fun_nr_1_0::I = partition.size_92 fun_defs_0, _x_1_1 = partition.get_predef_symbols_for_transform predef_symbols_5, _x_1_2 = partition.fold_st_129 def_max_4 def_min_3 main_dcl_module_n_2 max_fun_nr_1_0 ranges_1 (_Tuple2 fun_defs_0 (<{partition._PartitioningInfo`}> (_SystemArray.createArray_9 max_fun_nr_1_0 -1) 0 0 _predefined._Nil _predefined._Nil (transform._CollectState var_heap_6 sym_heap_7 error_admin_8 (select _x_1_1::_Tuple2 0)))), _x_1_3 = select _x_1_2::_Tuple2 1, <{pi_groups`_1_4}> = select _x_1_3::<{partition._PartitioningInfo`}> 3, <{pi_collect`_1_5}> = select _x_1_3::<{partition._PartitioningInfo`}> 5 in <{_Tuple6!63}> (<{partition.cu;127;46_131}> (_SystemArray._createArray_0 (<{partition.cu;127;46_132}> 0 (StdList.reverse <{pi_groups`_1_4}>))) 0 (StdList.reverse <{pi_groups`_1_4}>)) (select _x_1_2::_Tuple2 0) (select _x_1_1::_Tuple2 1) (select <{pi_collect`_1_5}>::transform._CollectState 0) (select <{pi_collect`_1_5}>::transform._CollectState 1) (select <{pi_collect`_1_5}>::transform._CollectState 2)
partition.map_st_78 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = partition.map_st_78 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
<{partition.c;104;30_20}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{partition.c;104;30_20}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{partition.cu;105;15_22}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{partition.g_c1;105;20_173}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{partition.g_c1;105;20_173}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{partition.cu;105;15_22}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{partition.cu;105;15_21}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{partition.g_c1;105;20_174}> g_l_3 _vArray_0 c_a_1 c_i_2
<{partition.g_c1;105;20_174}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{partition.cu;105;15_21}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 e_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{partition.cu;105;15_133}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{partition.g_c1;105;20_175}> g_l_2 <{_v+_0}> c_l_i_1
<{partition.g_c1;105;20_175}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{partition.cu;105;15_133}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{partition.cu;105;15_134}>::I !c_l_i_0::I !g_l_1 = <{partition.g_c1;105;20_176}> g_l_1 c_l_i_0
<{partition.g_c1;105;20_176}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{partition.cu;105;15_134}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
partition.aMapSt_23 !_vArray_0 !_vArray_1 f_2 a_3 s_4 = let _x_1_0 = select _vArray_0::<{_SystemArray.Array;}> 7 a_3, _x_1_1 = partition.map_st_78 f_2 (<{partition.c;104;30_20}> _vArray_0 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)) s_4, l_1_2 = select _x_1_1::_Tuple2 0 in _Tuple2 (<{partition.cu;105;15_21}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 0 (<{partition.cu;105;15_134}> 0 l_1_2)) 0 l_1_2) (select _x_1_1::_Tuple2 1)
<{partition.c;104;30_136}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_94 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{partition.c;104;30_136}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
partition.aMapSt_135 !_vArray_0 f_1 a_2 s_3 = let _x_1_0 = partition.usize_95 a_2, _x_1_1 = partition.map_st_78 f_1 (<{partition.c;104;30_136}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)) s_3, l_1_2 = select _x_1_1::_Tuple2 0 in _Tuple2 (<{partition.cu;105;15_21}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 0 (<{partition.cu;105;15_134}> 0 l_1_2)) 0 l_1_2) (select _x_1_1::_Tuple2 1)
<{partition.cu;105;15_138}> !c_a_0 c_i_1::I !g_l_2 = <{partition.g_c1;105;20_177}> g_l_2 c_a_0 c_i_1
<{partition.g_c1;105;20_177}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{partition.cu;105;15_138}> (partition.update_93 c_a_1 c_i_2 e_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
partition.aMapSt_137 f_0 a_1 s_2 = let _x_1_0 = partition.usize_95 a_1, _x_1_1 = partition.map_st_78 f_0 (<{partition.c;104;30_136}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)) s_2, l_1_2 = select _x_1_1::_Tuple2 0 in _Tuple2 (<{partition.cu;105;15_138}> (partition._createArray_88 (<{partition.cu;105;15_134}> 0 l_1_2)) 0 l_1_2) (select _x_1_1::_Tuple2 1)
partition.stripStrictLets !fun_defs_0 !predef_symbols_1 !var_heap_2 !sym_heap_3 !error_admin_4 = let _x_1_0 = partition.get_predef_symbols_for_transform predef_symbols_1, _x_1_1 = partition.aMapSt_137 partition.determine_ref_counts fun_defs_0 (transform._CollectState var_heap_2 sym_heap_3 error_admin_4 (select _x_1_0::_Tuple2 0)), collect_state_1_2 = select _x_1_1::_Tuple2 1 in <{_Tuple5!31}> (select _x_1_1::_Tuple2 0) (select _x_1_0::_Tuple2 1) (select collect_state_1_2::transform._CollectState 0) (select collect_state_1_2::transform._CollectState 1) (select collect_state_1_2::transform._CollectState 2)
partition.component_members_to_list !_x_0 = case _x_0 (checksupport.ComponentMember member_1_0 members_1_1 -> _predefined._Cons member_1_0 (partition.component_members_to_list members_1_1)) (checksupport.GeneratedComponentMember member_1_0 _x_1_1 members_1_2 -> _predefined._Cons member_1_0 (partition.component_members_to_list members_1_2)) (checksupport.NoComponentMembers -> _predefined._Nil) 
<{partition.cu;213;43_34}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{partition.g_c1;213;50_178}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{partition.g_c1;213;50_178}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons fun_1_0 g_t_1_1 -> <{partition.cu;213;43_34}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{partition.cu;213;43_33}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{partition.g_c1;213;50_179}> g_l_3 _vArray_0 c_a_1 c_i_2
<{partition.g_c1;213;50_179}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons fun_1_0 g_t_1_1 -> <{partition.cu;213;43_33}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (partition._Mark fun_1_0 -1)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{partition.cu;213;43_139}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{partition.g_c1;213;50_180}> g_l_2 <{_v+_0}> c_l_i_1
<{partition.g_c1;213;50_180}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons fun_1_0 g_t_1_1 -> <{partition.cu;213;43_139}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{partition.cu;213;43_140}>::I !c_l_i_0::I !g_l_1 = <{partition.g_c1;213;50_181}> g_l_1 c_l_i_0
<{partition.g_c1;213;50_181}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons fun_1_0 g_t_1_1 -> <{partition.cu;213;43_140}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
partition.create_marks !_vArray_0 max_fun_nr_1 !functions_2 = <{partition.cu;213;43_33}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 0 (<{partition.cu;213;43_140}> 0 (partition.component_members_to_list functions_2))) 0 (partition.component_members_to_list functions_2)
partition.get_mark_86::I !i_0::I !marks_1 !fun_2::I !max_fun_nr_3::I = case (<{StdInt.<_17}> i_0 (partition.size_108 marks_1)) (True -> case (StdBool.not (<{StdInt.==_16}> (select (partition.select_107 marks_1 i_0)::partition._Mark 0) fun_2)) (True -> partition.get_mark_86 (<{StdInt.+_6}> i_0 1) marks_1 fun_2 max_fun_nr_3) (False -> select (partition.select_107 marks_1 i_0)::partition._Mark 1) ) (False -> max_fun_nr_3) 
partition.get_mark_85::I !i_0::I !marks_1 !fun_2::I !max_fun_nr_3::I = case (<{StdInt.<_17}> i_0 (partition.size_108 marks_1)) (True -> case (StdBool.not (<{StdInt.==_16}> (select (partition.select_107 marks_1 i_0)::partition._Mark 0) fun_2)) (True -> partition.get_mark_85 (<{StdInt.+_6}> i_0 1) marks_1 fun_2 max_fun_nr_3) (False -> select (partition.select_107 marks_1 i_0)::partition._Mark 1) ) (False -> max_fun_nr_3) 
<{partition.cu;237;50_81}> !_vArray_0 !_vArray_1 val_2::I fun_3::I c_a_4 !c_i_5::I !g_s_6::I g_a_7 = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_7 c_i_5, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_81}> _vArray_0 _vArray_1 val_2 fun_3 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{partition._if;237;11_182}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_3) m_2_2 val_2)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6 g_a_2_0) (False -> c_a_4) 
<{partition._if;237;11_182}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_141}> !_vArray_0 val_1::I fun_2::I c_a_3 !c_i_4::I !g_s_5::I g_a_6 = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_6 c_i_4, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_141}> _vArray_0 val_1 fun_2 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{partition._if;237;11_183}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_2) m_2_2 val_1)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5 g_a_2_0) (False -> c_a_3) 
<{partition._if;237;11_183}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_142}> val_0::I fun_1::I !c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_5 c_i_3, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_142}> val_0 fun_1 (partition.update_109 c_a_2 c_i_3 (<{partition._if;237;11_184}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_1) m_2_2 val_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{partition._if;237;11_184}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
partition.push_on_dep_stack_44 !fun_index_0::I !pi_1 = case pi_1 (<{partition._PartitioningInfo``}> pi_marks``_1_0 pi_next_num``_1_1 pi_next_group``_1_2 pi_groups``_1_3 pi_deps``_1_4 pi_collect``_1_5 -> let _x_2_0::I = partition.usize_111 <{pi_marks``_1_0}>, g_s2_2_1 = <{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1 in update pi_1::<{partition._PartitioningInfo``}> [0:<{partition.cu;237;50_142}> <{pi_next_num``_1_1}> fun_index_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_2_1 StdInt.one_11)) 0 g_s2_2_1 (select _x_2_0::_Tuple2 1),1:<{StdInt.+_6}> <{pi_next_num``_1_1}> StdInt.one_11,4:checksupport.ComponentMember fun_index_0 <{pi_deps``_1_4}>]) 
partition.get_mark_84::I !i_0::I !marks_1 !fun_2::I !max_fun_nr_3::I = case (<{StdInt.<_17}> i_0 (partition.size_108 marks_1)) (True -> case (StdBool.not (<{StdInt.==_16}> (select (partition.select_107 marks_1 i_0)::partition._Mark 0) fun_2)) (True -> partition.get_mark_84 (<{StdInt.+_6}> i_0 1) marks_1 fun_2 max_fun_nr_3) (False -> select (partition.select_107 marks_1 i_0)::partition._Mark 1) ) (False -> max_fun_nr_3) 
partition.get_mark_83::I !i_0::I !marks_1 !fun_2::I !max_fun_nr_3::I = case (<{StdInt.<_17}> i_0 (partition.size_108 marks_1)) (True -> case (StdBool.not (<{StdInt.==_16}> (select (partition.select_107 marks_1 i_0)::partition._Mark 0) fun_2)) (True -> partition.get_mark_83 (<{StdInt.+_6}> i_0 1) marks_1 fun_2 max_fun_nr_3) (False -> select (partition.select_107 marks_1 i_0)::partition._Mark 1) ) (False -> max_fun_nr_3) 
<{partition.cu;237;50_82}> !_vArray_0 !_vArray_1 val_2::I fun_3::I c_a_4 !c_i_5::I !g_s_6::I g_a_7 = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_7 c_i_5, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_82}> _vArray_0 _vArray_1 val_2 fun_3 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{partition._if;237;11_185}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_3) m_2_2 val_2)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6 g_a_2_0) (False -> c_a_4) 
<{partition._if;237;11_185}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_143}> !_vArray_0 val_1::I fun_2::I c_a_3 !c_i_4::I !g_s_5::I g_a_6 = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_6 c_i_4, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_143}> _vArray_0 val_1 fun_2 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{partition._if;237;11_186}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_2) m_2_2 val_1)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5 g_a_2_0) (False -> c_a_3) 
<{partition._if;237;11_186}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_144}> val_0::I fun_1::I !c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_5 c_i_3, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_144}> val_0 fun_1 (partition.update_109 c_a_2 c_i_3 (<{partition._if;237;11_187}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_1) m_2_2 val_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{partition._if;237;11_187}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
partition.push_generated_function_on_dep_stack_45 !fun_index_0::I !fun_ptr_1 !pi_2 = case pi_2 (<{partition._PartitioningInfo``}> pi_marks``_1_0 pi_next_num``_1_1 pi_next_group``_1_2 pi_groups``_1_3 pi_deps``_1_4 pi_collect``_1_5 -> let _x_2_0::I = partition.usize_111 <{pi_marks``_1_0}>, g_s2_2_1 = <{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1 in update pi_2::<{partition._PartitioningInfo``}> [0:<{partition.cu;237;50_144}> <{pi_next_num``_1_1}> fun_index_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_2_1 StdInt.one_11)) 0 g_s2_2_1 (select _x_2_0::_Tuple2 1),1:<{StdInt.+_6}> <{pi_next_num``_1_1}> StdInt.one_11,4:checksupport.GeneratedComponentMember fun_index_0 fun_ptr_1 <{pi_deps``_1_4}>]) 
<{partition.cu;237;50_80}> !_vArray_0 !_vArray_1 val_2::I fun_3::I c_a_4 !c_i_5::I !g_s_6::I g_a_7 = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_7 c_i_5, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_80}> _vArray_0 _vArray_1 val_2 fun_3 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{partition._if;237;11_188}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_3) m_2_2 val_2)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6 g_a_2_0) (False -> c_a_4) 
<{partition._if;237;11_188}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_79}> !_vArray_0 !_vArray_1 val_2::I fun_3::I c_a_4 !c_i_5::I !g_s_6::I g_a_7 = case (StdBool.not (<{StdInt.<_17}> g_s_6 c_i_5)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_7 c_i_5, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_79}> _vArray_0 _vArray_1 val_2 fun_3 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 (<{partition._if;237;11_189}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_3) m_2_2 val_2)) (<{StdInt.+_6}> c_i_5 StdInt.one_11) g_s_6 g_a_2_0) (False -> c_a_4) 
<{partition._if;237;11_189}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.c;370;35_36}> d_0::I !g_l_1 = <{partition.g_c1;370;41_191}> g_l_1 d_0
<{partition.g_c1;370;41_191}> !g_l_0 d_1::I = case g_l_0 (_predefined._Cons fc_1_0 g_t_1_1 -> case (<{partition._c;371;39_190}> fc_1_0 d_1) (True -> _predefined._Cons fc_1_0 (<{partition.c;370;35_36}> d_1 g_t_1_1)) (False -> <{partition.c;370;35_36}> d_1 g_t_1_1) ) (_ -> _predefined._Nil)
<{partition._c;371;39_190}>::B !fc_0 d_1::I = case fc_0 (syntax.FunCall idx_1_0 _x_1_1 -> <{StdInt.==_16}> idx_1_0 d_1) (syntax.GeneratedFunCall idx_1_0 _x_1_1 -> <{StdInt.==_16}> idx_1_0 d_1) (_ -> False)
partition.determine_if_function_non_recursive_38::B !n_r_known_0::B !fun_index_1::I !d_2::I !fi_calls_3 !non_recursive_4::B = case n_r_known_0 (True -> non_recursive_4) (False -> case (<{StdInt.==_16}> fun_index_1 d_2) (True -> StdList.isEmpty (<{partition.c;370;35_36}> d_2 fi_calls_3)) (False -> False) ) 
<{partition.cu;237;50_146}> !_vArray_0 val_1::I fun_2::I c_a_3 !c_i_4::I !g_s_5::I g_a_6 = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_6 c_i_4, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_146}> _vArray_0 val_1 fun_2 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{partition._if;237;11_192}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_2) m_2_2 val_1)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5 g_a_2_0) (False -> c_a_3) 
<{partition._if;237;11_192}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_145}> !_vArray_0 val_1::I fun_2::I c_a_3 !c_i_4::I !g_s_5::I g_a_6 = case (StdBool.not (<{StdInt.<_17}> g_s_5 c_i_4)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_6 c_i_4, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_145}> _vArray_0 val_1 fun_2 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 (<{partition._if;237;11_193}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_2) m_2_2 val_1)) (<{StdInt.+_6}> c_i_4 StdInt.one_11) g_s_5 g_a_2_0) (False -> c_a_3) 
<{partition._if;237;11_193}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_148}> val_0::I fun_1::I !c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_5 c_i_3, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_148}> val_0 fun_1 (partition.update_109 c_a_2 c_i_3 (<{partition._if;237;11_194}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_1) m_2_2 val_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{partition._if;237;11_194}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
<{partition.cu;237;50_147}> val_0::I fun_1::I !c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = partition.uselect_110 g_a_5 c_i_3, m_2_2 = select _x_2_1::_Tuple2 0 in <{partition.cu;237;50_147}> val_0 fun_1 (partition.update_109 c_a_2 c_i_3 (<{partition._if;237;11_195}> (<{StdInt.==_16}> (select m_2_2::partition._Mark 0) fun_1) m_2_2 val_0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{partition._if;237;11_195}> !_x_0::B !m_1 val_2::I = case _x_0 (True -> update m_1::partition._Mark [1:val_2]) (_ -> m_1)
partition.close_group_37 !n_r_known_0::B !non_recursive_1::B !fun_index_2::I !_x_3 !marks_4 !group_5 !max_fun_nr_6::I !group_number_7::I !fun_defs_8 !fun_heap_9 = case _x_3 (checksupport.ComponentMember d_1_0 ds_1_1 -> case (<{StdInt.==_16}> d_1_0 fun_index_2) (True -> let _x_3_0 = partition.usize_111 marks_4, g_s2_3_1 = <{StdInt.-_7}> (select _x_3_0::_Tuple2 0) 1, _x_3_2 = select (partition.select_91 fun_defs_8 d_1_0)::syntax._FunDef 8, _x_3_3::I = partition.uselect_94 (select _x_3_2::_Tuple2 1) d_1_0, fun_info_3_4 = select _x_3_2::_Tuple2 0 in <{_Tuple5!31}> ds_1_1 (<{partition.cu;237;50_147}> max_fun_nr_6 d_1_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_3_1 StdInt.one_11)) 0 g_s2_3_1 (select _x_3_0::_Tuple2 1)) (checksupport.ComponentMember d_1_0 group_5) (partition.update_93 (select _x_3_3::_Tuple2 1) d_1_0 (update (select _x_3_3::_Tuple2 0)::syntax._FunDef [8:update fun_info_3_4::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop (partition.determine_if_function_non_recursive_38 n_r_known_0 fun_index_2 d_1_0 (select fun_info_3_4::syntax._FunInfo 0) non_recursive_1) (select fun_info_3_4::syntax._FunInfo 6)]])) fun_heap_9) (False -> let _x_3_0 = select (partition.select_91 fun_defs_8 d_1_0)::syntax._FunDef 8, fun_info_3_1::I = select _x_3_0::_Tuple2 0, non_recursive_3_2 = partition.determine_if_function_non_recursive_38 n_r_known_0 fun_index_2 d_1_0 (select fun_info_3_1::syntax._FunInfo 0) non_recursive_1, _x_3_3::B = partition.usize_111 marks_4, g_s2_3_4 = <{StdInt.-_7}> (select _x_3_3::_Tuple2 0) 1, _x_3_5 = partition.uselect_94 (select _x_3_0::_Tuple2 1) d_1_0 in partition.close_group_37 True non_recursive_3_2 fun_index_2 ds_1_1 (<{partition.cu;237;50_147}> max_fun_nr_6 d_1_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_3_4 StdInt.one_11)) 0 g_s2_3_4 (select _x_3_3::_Tuple2 1)) (checksupport.ComponentMember d_1_0 group_5) max_fun_nr_6 group_number_7 (partition.update_93 (select _x_3_5::_Tuple2 1) d_1_0 (update (select _x_3_5::_Tuple2 0)::syntax._FunDef [8:update fun_info_3_1::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop non_recursive_3_2 (select fun_info_3_1::syntax._FunInfo 6)]])) fun_heap_9) ) (checksupport.GeneratedComponentMember d_1_0 fun_ptr_1_1 ds_1_2 -> case (<{StdInt.==_16}> d_1_0 fun_index_2) (True -> let _x_3_0 = partition.usize_111 marks_4, g_s2_3_1 = <{StdInt.-_7}> (select _x_3_0::_Tuple2 0) 1, _x_3_2 = Heap.readPtr fun_ptr_1_1 fun_heap_9, gf_3_3::I = select (select _x_3_2::_Tuple2 0)::_Tuple1 0, fun_info_3_4 = select (select gf_3_3::syntax._GeneratedFunction 0)::syntax._FunDef 8 in <{_Tuple5!31}> ds_1_2 (<{partition.cu;237;50_148}> max_fun_nr_6 d_1_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_3_1 StdInt.one_11)) 0 g_s2_3_1 (select _x_3_0::_Tuple2 1)) (checksupport.GeneratedComponentMember d_1_0 fun_ptr_1_1 group_5) fun_defs_8 (Heap.writePtr fun_ptr_1_1 (syntax.FI_Function (update gf_3_3::syntax._GeneratedFunction [0:update (select gf_3_3::syntax._GeneratedFunction 0)::syntax._FunDef [8:update fun_info_3_4::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop (partition.determine_if_function_non_recursive_38 n_r_known_0 fun_index_2 d_1_0 (select fun_info_3_4::syntax._FunInfo 0) non_recursive_1) (select fun_info_3_4::syntax._FunInfo 6)]]])) (select _x_3_2::_Tuple2 1))) (False -> let _x_3_0::I = Heap.readPtr fun_ptr_1_1 fun_heap_9, gf_3_1 = select (select _x_3_0::_Tuple2 0)::_Tuple1 0, fun_info_3_2::B = select (select gf_3_1::syntax._GeneratedFunction 0)::syntax._FunDef 8, non_recursive_3_3 = partition.determine_if_function_non_recursive_38 n_r_known_0 fun_index_2 d_1_0 (select fun_info_3_2::syntax._FunInfo 0) non_recursive_1, _x_3_4 = partition.usize_111 marks_4, g_s2_3_5 = <{StdInt.-_7}> (select _x_3_4::_Tuple2 0) 1 in partition.close_group_37 True non_recursive_3_3 fun_index_2 ds_1_2 (<{partition.cu;237;50_148}> max_fun_nr_6 d_1_0 (partition._createArray_104 (<{StdInt.+_6}> g_s2_3_5 StdInt.one_11)) 0 g_s2_3_5 (select _x_3_4::_Tuple2 1)) (checksupport.GeneratedComponentMember d_1_0 fun_ptr_1_1 group_5) max_fun_nr_6 group_number_7 fun_defs_8 (Heap.writePtr fun_ptr_1_1 (syntax.FI_Function (update gf_3_1::syntax._GeneratedFunction [0:update (select gf_3_1::syntax._GeneratedFunction 0)::syntax._FunDef [8:update fun_info_3_2::syntax._FunInfo [1:group_number_7,6:partition.set_rec_prop non_recursive_3_3 (select fun_info_3_2::syntax._FunInfo 6)]]])) (select _x_3_0::_Tuple2 1))) ) 
partition.try_to_close_group_46 !fun_index_0::I !fun_nr_1::I !min_dep_2::I !max_fun_nr_3::I !fun_defs_4 !fun_heap_5 !pi_6 = case pi_6 (<{partition._PartitioningInfo``}> pi_marks``_1_0 pi_next_num``_1_1 pi_next_group``_1_2 pi_groups``_1_3 pi_deps``_1_4 pi_collect``_1_5 -> case (StdBool.not (<{StdInt.<_17}> min_dep_2 fun_nr_1)) (True -> let _x_3_0 = partition.close_group_37 False False fun_index_0 <{pi_deps``_1_4}> <{pi_marks``_1_0}> checksupport.NoComponentMembers max_fun_nr_3 <{pi_next_group``_1_2}> fun_defs_4 fun_heap_5 in <{_Tuple4!15}> max_fun_nr_3 (select _x_3_0::_Tuple5 3) (select _x_3_0::_Tuple5 4) (update pi_6::<{partition._PartitioningInfo``}> [0:select _x_3_0::_Tuple5 1,2:<{StdInt.+_6}> <{pi_next_group``_1_2}> StdInt.one_11,3:_predefined._Cons (select _x_3_0::_Tuple5 2) <{pi_groups``_1_3}>,4:select _x_3_0::_Tuple5 0])) (False -> <{_Tuple4!15}> min_dep_2 fun_defs_4 fun_heap_5 pi_6) ) 
partition.partitionate_generated_function_41 !def_max_0::I !def_min_1::I !main_dcl_module_n_2::I !fun_index_3::I !fun_ptr_4 !max_fun_nr_5::I !fun_defs_6 !fun_heap_7 !pi_8 = case pi_8 (<{partition._PartitioningInfo``}> pi_marks``_1_0 pi_next_num``_1_1 pi_next_group``_1_2 pi_groups``_1_3 pi_deps``_1_4 pi_collect``_1_5 -> let _x_2_0 = Heap.readPtr fun_ptr_4 fun_heap_7, gf_2_1 = select (select _x_2_0::_Tuple2 0)::_Tuple1 0, _x_2_2 = partition.determine_ref_counts (select gf_2_1::syntax._GeneratedFunction 0) <{pi_collect``_1_5}>, fd_2_3 = select _x_2_2::_Tuple2 0, fi_calls_2_4 = select (partition.find_calls_56 (partition._FindCallsInfo main_dcl_module_n_2 def_min_1 def_max_0 fun_index_3) (select fd_2_3::syntax._FunDef 3) (partition._FindCallsState _predefined._Nil))::partition._FindCallsState 0 in partition.visit_functions_and_try_to_close_group_42 def_max_0 def_min_1 main_dcl_module_n_2 fi_calls_2_4 fun_index_3 <{pi_next_num``_1_1}> max_fun_nr_5 fun_defs_6 (Heap.writePtr fun_ptr_4 (syntax.FI_Function (update gf_2_1::syntax._GeneratedFunction [0:update fd_2_3::syntax._FunDef [8:update (select fd_2_3::syntax._FunDef 8)::syntax._FunInfo [0:fi_calls_2_4]]])) (select _x_2_0::_Tuple2 1)) (partition.push_generated_function_on_dep_stack_45 fun_index_3 fun_ptr_4 (update pi_8::<{partition._PartitioningInfo``}> [5:select _x_2_2::_Tuple2 1]))) 
partition.visit_functions_43 def_max_0::I def_min_1::I main_dcl_module_n_2::I !_x_3 !min_dep_4::I !max_fun_nr_5::I !fun_defs_6 !fun_heap_7 !pi_8 = case _x_3 (_predefined._Cons _x_1_0 funs_1_1 -> case _x_1_0 (syntax.FunCall fc_index_2_0 _x_2_1 -> case pi_8 (<{partition._PartitioningInfo``}> pi_marks``_3_0 pi_next_num``_3_1 pi_next_group``_3_2 pi_groups``_3_3 pi_deps``_3_4 pi_collect``_3_5 -> let !mark_4_0::I = partition.get_mark_83 0 <{pi_marks``_3_0}> fc_index_2_0 max_fun_nr_5 in case (<{StdInt.==_16}> mark_4_0 -1) (True -> let _x_6_0::I = partition.partitionate_function_40 def_max_0 def_min_1 main_dcl_module_n_2 fc_index_2_0 max_fun_nr_5 fun_defs_6 fun_heap_7 pi_8, mark_6_1 = select _x_6_0::_Tuple4 0 in partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_196}> (<{StdInt.<_17}> min_dep_4 mark_6_1) min_dep_4 mark_6_1) max_fun_nr_5 (select _x_6_0::_Tuple4 1) (select _x_6_0::_Tuple4 2) (select _x_6_0::_Tuple4 3)) (False -> partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_197}> (<{StdInt.<_17}> min_dep_4 mark_4_0) min_dep_4 mark_4_0) max_fun_nr_5 fun_defs_6 fun_heap_7 pi_8) ) ) (syntax.GeneratedFunCall fc_index_2_0 fun_ptr_2_1 -> case pi_8 (<{partition._PartitioningInfo``}> pi_marks``_3_0 pi_next_num``_3_1 pi_next_group``_3_2 pi_groups``_3_3 pi_deps``_3_4 pi_collect``_3_5 -> let !mark_4_0::I = partition.get_mark_84 0 <{pi_marks``_3_0}> fc_index_2_0 max_fun_nr_5 in case (<{StdInt.==_16}> mark_4_0 -1) (True -> let _x_6_0::I = partition.partitionate_generated_function_41 def_max_0 def_min_1 main_dcl_module_n_2 fc_index_2_0 fun_ptr_2_1 max_fun_nr_5 fun_defs_6 fun_heap_7 pi_8, mark_6_1 = select _x_6_0::_Tuple4 0 in partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_198}> (<{StdInt.<_17}> min_dep_4 mark_6_1) min_dep_4 mark_6_1) max_fun_nr_5 (select _x_6_0::_Tuple4 1) (select _x_6_0::_Tuple4 2) (select _x_6_0::_Tuple4 3)) (False -> partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 (<{partition._c;48;16_199}> (<{StdInt.<_17}> min_dep_4 mark_4_0) min_dep_4 mark_4_0) max_fun_nr_5 fun_defs_6 fun_heap_7 pi_8) ) ) (syntax.DclFunCall module_index_2_0 fc_index_2_1 -> partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 funs_1_1 min_dep_4 max_fun_nr_5 fun_defs_6 fun_heap_7 pi_8) ) (_predefined._Nil -> <{_Tuple4!15}> min_dep_4 fun_defs_6 fun_heap_7 pi_8) 
partition.visit_functions_and_try_to_close_group_42 def_max_0::I def_min_1::I main_dcl_module_n_2::I !fi_calls_3 !fun_index_4::I !<{pi_next_num``_5}>::I !max_fun_nr_6::I !fun_defs_7 !fun_heap_8 !pi_9 = let _x_1_0 = partition.visit_functions_43 def_max_0 def_min_1 main_dcl_module_n_2 fi_calls_3 max_fun_nr_6 max_fun_nr_6 fun_defs_7 fun_heap_8 pi_9 in partition.try_to_close_group_46 fun_index_4 <{pi_next_num``_5}> (select _x_1_0::_Tuple4 0) max_fun_nr_6 (select _x_1_0::_Tuple4 1) (select _x_1_0::_Tuple4 2) (select _x_1_0::_Tuple4 3)
partition.partitionate_function_40 !def_max_0::I !def_min_1::I !main_dcl_module_n_2::I !fun_index_3::I !max_fun_nr_4::I !fun_defs_5 !fun_heap_6 !pi_7 = case pi_7 (<{partition._PartitioningInfo``}> pi_marks``_1_0 pi_next_num``_1_1 pi_next_group``_1_2 pi_groups``_1_3 pi_deps``_1_4 pi_collect``_1_5 -> let _x_2_0 = partition.uselect_94 fun_defs_5 fun_index_3, _x_2_1 = partition.determine_ref_counts (select _x_2_0::_Tuple2 0) <{pi_collect``_1_5}>, fd_2_2 = select _x_2_1::_Tuple2 0, fi_calls_2_3 = select (partition.find_calls_56 (partition._FindCallsInfo main_dcl_module_n_2 def_min_1 def_max_0 fun_index_3) (select fd_2_2::syntax._FunDef 3) (partition._FindCallsState _predefined._Nil))::partition._FindCallsState 0 in partition.visit_functions_and_try_to_close_group_42 def_max_0 def_min_1 main_dcl_module_n_2 fi_calls_2_3 fun_index_3 <{pi_next_num``_1_1}> max_fun_nr_4 (partition.update_93 (select _x_2_0::_Tuple2 1) fun_index_3 (update fd_2_2::syntax._FunDef [8:update (select fd_2_2::syntax._FunDef 8)::syntax._FunInfo [0:fi_calls_2_3]])) fun_heap_6 (partition.push_on_dep_stack_44 fun_index_3 (update pi_7::<{partition._PartitioningInfo``}> [5:select _x_2_1::_Tuple2 1]))) 
<{partition._c;48;16_199}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
<{partition._c;48;16_198}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
<{partition._c;48;16_197}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
<{partition._c;48;16_196}>::I !_x_0::B min_dep_1::I mark_2::I = case _x_0 (True -> min_dep_1) (_ -> mark_2)
partition.partitionate_component_39 def_max_0::I def_min_1::I main_dcl_module_n_2::I !_x_3 !max_fun_nr_4::I !_x_5 = case _x_3 (checksupport.ComponentMember member_1_0 members_1_1 -> case _x_5 (_Tuple3 fun_defs_2_0 fun_heap_2_1 pi_2_2 -> case pi_2_2 (<{partition._PartitioningInfo``}> pi_marks``_3_0 pi_next_num``_3_1 pi_next_group``_3_2 pi_groups``_3_3 pi_deps``_3_4 pi_collect``_3_5 -> case (<{StdInt.==_16}> (partition.get_mark_85 0 <{pi_marks``_3_0}> member_1_0 max_fun_nr_4) -1) (True -> let _x_5_0 = partition.partitionate_function_40 def_max_0 def_min_1 main_dcl_module_n_2 member_1_0 max_fun_nr_4 fun_defs_2_0 fun_heap_2_1 pi_2_2 in partition.partitionate_component_39 def_max_0 def_min_1 main_dcl_module_n_2 members_1_1 max_fun_nr_4 (_Tuple3 (select _x_5_0::_Tuple4 1) (select _x_5_0::_Tuple4 2) (select _x_5_0::_Tuple4 3))) (False -> partition.partitionate_component_39 def_max_0 def_min_1 main_dcl_module_n_2 members_1_1 max_fun_nr_4 (_Tuple3 fun_defs_2_0 fun_heap_2_1 pi_2_2)) ) ) ) (checksupport.GeneratedComponentMember member_1_0 fun_ptr_1_1 members_1_2 -> case _x_5 (_Tuple3 fun_defs_2_0 fun_heap_2_1 pi_2_2 -> case pi_2_2 (<{partition._PartitioningInfo``}> pi_marks``_3_0 pi_next_num``_3_1 pi_next_group``_3_2 pi_groups``_3_3 pi_deps``_3_4 pi_collect``_3_5 -> case (<{StdInt.==_16}> (partition.get_mark_86 0 <{pi_marks``_3_0}> member_1_0 max_fun_nr_4) -1) (True -> let _x_5_0 = partition.partitionate_generated_function_41 def_max_0 def_min_1 main_dcl_module_n_2 member_1_0 fun_ptr_1_1 max_fun_nr_4 fun_defs_2_0 fun_heap_2_1 pi_2_2 in partition.partitionate_component_39 def_max_0 def_min_1 main_dcl_module_n_2 members_1_2 max_fun_nr_4 (_Tuple3 (select _x_5_0::_Tuple4 1) (select _x_5_0::_Tuple4 2) (select _x_5_0::_Tuple4 3))) (False -> partition.partitionate_component_39 def_max_0 def_min_1 main_dcl_module_n_2 members_1_2 max_fun_nr_4 (_Tuple3 fun_defs_2_0 fun_heap_2_1 pi_2_2)) ) ) ) (checksupport.NoComponentMembers -> case _x_5 (_Tuple3 fun_defs_2_0 fun_heap_2_1 pi_2_2 -> <{_Tuple3!7}> fun_defs_2_0 fun_heap_2_1 pi_2_2) ) 
<{partition.c;260;46_35}> !g_l_0 = <{partition.g_c1;260;55_200}> g_l_0
<{partition.g_c1;260;55_200}> !g_l_0 = case g_l_0 (_predefined._Cons group_1_0 g_t_1_1 -> _predefined._Cons (checksupport._Component group_1_0) (<{partition.c;260;46_35}> g_t_1_1)) (_ -> _predefined._Nil)
<{partition.cu;213;43_150}> !c_a_0 c_i_1::I !g_l_2 = <{partition.g_c1;213;50_201}> g_l_2 c_a_0 c_i_1
<{partition.g_c1;213;50_201}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons fun_1_0 g_t_1_1 -> <{partition.cu;213;43_150}> (partition.update_109 c_a_1 c_i_2 (partition._Mark fun_1_0 -1)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
partition.create_marks_149 max_fun_nr_0 !functions_1 = <{partition.cu;213;43_150}> (partition._createArray_104 (<{partition.cu;213;43_140}> 0 (partition.component_members_to_list functions_1))) 0 (partition.component_members_to_list functions_1)
<{partition.partitionateFunctions``}> !max_fun_nr_0::I !next_group_1::I !fun_defs_2 !functions_3 !main_dcl_module_n_4::I !def_min_5::I !def_max_6::I !fun_heap_7 !predef_symbols_8 !var_heap_9 !sym_heap_10 !error_admin_11 = let _x_1_0 = partition.get_predef_symbols_for_transform predef_symbols_8, _x_1_1 = partition.partitionate_component_39 def_max_6 def_min_5 main_dcl_module_n_4 functions_3 max_fun_nr_0 (_Tuple3 fun_defs_2 fun_heap_7 (<{partition._PartitioningInfo``}> (partition.create_marks_149 max_fun_nr_0 functions_3) 0 next_group_1 _predefined._Nil checksupport.NoComponentMembers (transform._CollectState var_heap_9 sym_heap_10 error_admin_11 (select _x_1_0::_Tuple2 0)))), _x_1_2 = select _x_1_1::_Tuple3 2, <{pi_collect``_1_3}> = select _x_1_2::<{partition._PartitioningInfo``}> 5 in <{_Tuple8!255}> (select _x_1_2::<{partition._PartitioningInfo``}> 2) (<{partition.c;260;46_35}> (StdList.reverse (select _x_1_2::<{partition._PartitioningInfo``}> 3))) (select _x_1_1::_Tuple3 0) (select _x_1_1::_Tuple3 1) (select _x_1_0::_Tuple2 1) (select <{pi_collect``_1_3}>::transform._CollectState 0) (select <{pi_collect``_1_3}>::transform._CollectState 1) (select <{pi_collect``_1_3}>::transform._CollectState 2)
partition.dummy_predef_symbol = predef._PredefinedSymbol 0 0
partition.dummy_predef_symbols = transform._PredefSymbolsForTransform partition.dummy_predef_symbol partition.dummy_predef_symbol partition.dummy_predef_symbol
<{partition.TD;PartitioningInfo}> _x_0::B = _predefined._Nil
<{partition.TD;PartitioningInfo`}> _x_0::B = _predefined._Nil
<{partition.TD;PartitioningInfo``}> _x_0::B = _predefined._Nil
<{partition.TD;Marks}> _x_0::B = _predefined._Nil
<{partition.TD;Mark}> _x_0::B = _predefined._Nil
<{partition.TD;FindCallsInfo}> _x_0::B = _predefined._Nil
<{partition.TD;FindCallsState}> _x_0::B = _predefined._Nil
<{partition.TD;find_calls;}> _x_0::B = _predefined._Nil


|| Converted Records
:: partition._PartitioningInfo = {!partition.pi_marks, !partition.pi_next_num::I, !partition.pi_next_group::I, !partition.pi_groups, !partition.pi_deps}

:: <{partition._PartitioningInfo`}> = {!<{partition.pi_marks`}>, !<{partition.pi_next_num`}>::I, !<{partition.pi_next_group`}>::I, !<{partition.pi_groups`}>, !<{partition.pi_deps`}>, !<{partition.pi_collect`}>}

:: <{partition._PartitioningInfo``}> = {!<{partition.pi_marks``}>, !<{partition.pi_next_num``}>::I, !<{partition.pi_next_group``}>::I, !<{partition.pi_groups``}>, !<{partition.pi_deps``}>, !<{partition.pi_collect``}>}

:: partition._Mark = {!partition.m_fun::I, !partition.m_mark::I}

:: partition._FindCallsInfo = {!partition.main_dcl_module_n, !partition.def_min::I, !partition.def_max::I, !partition.fun_index::I}

:: partition._FindCallsState = {!partition.fun_calls}

:: <{partition.find_calls;}> = {!partition.find_calls}

