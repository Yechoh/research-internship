|| ?module? convertimportedtypes


convertimportedtypes.fold_st_21 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_21 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertimportedtypes.i_fold_st_20 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_20 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
convertimportedtypes.determine_abstract_type_12 !_vArray_0 dcl_type_defs_1 type_index_2::I abstract_type_indexes_3 = <{convertimportedtypes._c;72;11_126}> (select (select _vArray_0::<{_SystemArray.Array;}> 3 dcl_type_defs_1 type_index_2)::syntax._TypeDef 5) type_index_2 abstract_type_indexes_3
<{convertimportedtypes._c;72;11_126}> !_x_0 type_index_1::I abstract_type_indexes_2 = case _x_0 (syntax.AbstractType _x_1_0 -> _predefined._Cons type_index_1 abstract_type_indexes_2) (_ -> abstract_type_indexes_2)
convertimportedtypes.fold_st_19 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_19 op_0 x_1_1 (op_0 a_1_0 st_2)) 
convertimportedtypes.convert_imported_function_15 !_vArray_0 !_vArray_1 !main_dcl_module_n_2::I dcl_functions_3 !common_defs_4 !_x_5 !_x_6 = case _x_5 (syntax._Global glob_object_1_0 glob_module_1_1 -> case _x_6 (_Tuple4 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3 -> let !_x_3_0 = select _vArray_1::<{_SystemArray.Array;}> 3 (select _vArray_0::<{_SystemArray.Array;}> 3 dcl_functions_3 glob_module_1_1) glob_object_1_0, !_x_3_1 = expand_types.convertSymbolType False common_defs_4 (select _x_3_0::syntax._FunType 3) main_dcl_module_n_2 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3, ptr_and_val_3_2 = _Tuple2 (select _x_3_0::syntax._FunType 6) (syntax.VI_ExpandedType (select _x_3_1::_Tuple5 0)) in _Tuple4 (select _x_3_1::_Tuple5 1) (select _x_3_1::_Tuple5 2) (select _x_3_1::_Tuple5 3) (Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_1::_Tuple5 4))) ) 
convertimportedtypes.i_fold_st_18 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_18 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
convertimportedtypes.convert_type_of_imported_field_11 !_vArray_0 !_vArray_1 !main_dcl_module_n_2::I !common_defs_3 module_index_4 selector_defs_5 fields_6 field_index_7::I !_x_8 = case _x_8 (_Tuple4 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3 -> let !field_index_2_0::I = select (select _vArray_0::<{_SystemArray.Array;}> 3 fields_6 field_index_7)::syntax._FieldSymbol 2, !_x_2_1 = select _vArray_1::<{_SystemArray.Array;}> 3 selector_defs_5 field_index_2_0, !_x_2_2 = expand_types.convertSymbolType False common_defs_3 (select _x_2_1::syntax._SelectorDef 2) main_dcl_module_n_2 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3, ptr_and_val_2_3 = _Tuple2 (select _x_2_1::syntax._SelectorDef 6) (syntax.VI_ExpandedType (select _x_2_2::_Tuple5 0)) in _Tuple4 (select _x_2_2::_Tuple5 1) (select _x_2_2::_Tuple5 2) (select _x_2_2::_Tuple5 3) (Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_2::_Tuple5 4))) 
convertimportedtypes.convert_type_of_imported_field_81 !_vArray_0 !main_dcl_module_n_1::I !common_defs_2 module_index_3 selector_defs_4 !fields_5 !field_index_6::I !_x_7 = case _x_7 (_Tuple4 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3 -> let !field_index_2_0::I = select (convertimportedtypes.select_52 fields_5 field_index_6)::syntax._FieldSymbol 2, !_x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 3 selector_defs_4 field_index_2_0, !_x_2_2 = expand_types.convertSymbolType False common_defs_2 (select _x_2_1::syntax._SelectorDef 2) main_dcl_module_n_1 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3, ptr_and_val_2_3 = _Tuple2 (select _x_2_1::syntax._SelectorDef 6) (syntax.VI_ExpandedType (select _x_2_2::_Tuple5 0)) in _Tuple4 (select _x_2_2::_Tuple5 1) (select _x_2_2::_Tuple5 2) (select _x_2_2::_Tuple5 3) (Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_2::_Tuple5 4))) 
convertimportedtypes.i_fold_st_82 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_82 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
convertimportedtypes.convert_type_of_imported_field_83 !main_dcl_module_n_0::I !common_defs_1 module_index_2 !selector_defs_3 !fields_4 !field_index_5::I !_x_6 = case _x_6 (_Tuple4 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3 -> let !field_index_2_0::I = select (convertimportedtypes.select_52 fields_4 field_index_5)::syntax._FieldSymbol 2, !_x_2_1 = convertimportedtypes.select_60 selector_defs_3 field_index_2_0, !_x_2_2 = expand_types.convertSymbolType False common_defs_1 (select _x_2_1::syntax._SelectorDef 2) main_dcl_module_n_0 imported_types_1_0 conses_1_1 type_heaps_1_2 var_heap_1_3, ptr_and_val_2_3 = _Tuple2 (select _x_2_1::syntax._SelectorDef 6) (syntax.VI_ExpandedType (select _x_2_2::_Tuple5 0)) in _Tuple4 (select _x_2_2::_Tuple5 1) (select _x_2_2::_Tuple5 2) (select _x_2_2::_Tuple5 3) (Heap.writePtr (select ptr_and_val_2_3::_Tuple2 0) (select ptr_and_val_2_3::_Tuple2 1) (select _x_2_2::_Tuple5 4))) 
convertimportedtypes.i_fold_st_84 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> convertimportedtypes.i_fold_st_84 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
convertimportedtypes.i_fold_st_85 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_85 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
convertimportedtypes.i_fold_st_86 main_dcl_module_n_0::I common_defs_1 module_index_2 selector_defs_3 fields_4 !fr_5::I !to_6::I !st_7 = case (StdBool.not (<{StdInt.<_17}> fr_5 to_6)) (True -> st_7) (False -> convertimportedtypes.i_fold_st_86 main_dcl_module_n_0 common_defs_1 module_index_2 selector_defs_3 fields_4 (<{StdInt.+_6}> fr_5 StdInt.one_11) to_6 (convertimportedtypes.convert_type_of_imported_field_83 main_dcl_module_n_0 common_defs_1 module_index_2 selector_defs_3 fields_4 fr_5 st_7)) 
convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_0::I common_defs_1 !_x_2 imported_types_3 type_heaps_4 var_heap_5 = case _x_2 (_predefined._Nil -> _Tuple3 imported_types_3 type_heaps_4 var_heap_5) (_predefined._Cons _x_1_0 conses_1_1 -> case _x_1_0 (syntax._Global glob_object_2_0 glob_module_2_1 -> let !_x_3_0 = convertimportedtypes.select_28 common_defs_1 glob_module_2_1, !_x_3_1 = convertimportedtypes.select_36 (select (convertimportedtypes.select_28 common_defs_1 glob_module_2_1)::syntax._CommonDefs 1) glob_object_2_0, !_x_3_2 = expand_types.convertSymbolType False common_defs_1 (select _x_3_1::syntax._ConsDef 1) main_dcl_module_n_0 imported_types_3 conses_1_1 type_heaps_4 var_heap_5, !var_heap_3_3 = Heap.writePtr (select ptr_and_val_3_5::_Tuple2 0) (select ptr_and_val_3_5::_Tuple2 1) (select _x_3_2::_Tuple5 4), !_x_3_4 = convertimportedtypes.select_44 (_SystemArray.select_43 (select _x_3_2::_Tuple5 1) glob_module_2_1) (select _x_3_1::syntax._ConsDef 4), ptr_and_val_3_5 = _Tuple2 (select _x_3_1::syntax._ConsDef 6) (syntax.VI_ExpandedType (select _x_3_2::_Tuple5 0)) in <{convertimportedtypes._c;104;11_129}> (select (select _x_3_4::_Tuple2 0)::syntax._TypeDef 5) main_dcl_module_n_0 common_defs_1 glob_module_2_1 _x_3_0 _x_3_4 _x_3_2 var_heap_3_3) ) 
<{convertimportedtypes._c;104;11_129}> !_x_0 main_dcl_module_n_1::I common_defs_2 glob_module_3::I _x_4 _x_5 !_x_6 var_heap_7 = case _x_0 (syntax.RecordType _x_1_0 -> convertimportedtypes._f128_128 _x_1_0 main_dcl_module_n_1 common_defs_2 glob_module_3 _x_4 _x_5 _x_6 var_heap_7) (_ -> <{convertimportedtypes._c;104;11_127}> main_dcl_module_n_1 common_defs_2 _x_6 _x_5 var_heap_7)
convertimportedtypes._f128_128 !_x_0 main_dcl_module_n_1::I common_defs_2 glob_module_3::I _x_4 _x_5 !_x_6 var_heap_7 = case _x_0 (syntax._RecordType rt_constructor_1_0 rt_fields_1_1 rt_is_boxed_record_1_2 -> let _x_2_0 = convertimportedtypes.i_fold_st_86 main_dcl_module_n_1 common_defs_2 glob_module_3 (select _x_4::syntax._CommonDefs 2) rt_fields_1_1 0 (convertimportedtypes.size_53 rt_fields_1_1) (_Tuple4 (select _x_5::_Tuple2 1) (select _x_6::_Tuple5 2) (select _x_6::_Tuple5 3) var_heap_7) in convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_1 common_defs_2 (select _x_2_0::_Tuple4 1) (select _x_2_0::_Tuple4 0) (select _x_2_0::_Tuple4 2) (select _x_2_0::_Tuple4 3)) (_ -> <{convertimportedtypes._c;104;11_127}> main_dcl_module_n_1 common_defs_2 _x_6 _x_5 var_heap_7)
<{convertimportedtypes._c;104;11_127}> main_dcl_module_n_0::I common_defs_1 !_x_2 _x_3 var_heap_4 = convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_0 common_defs_1 (select _x_2::_Tuple5 2) (select _x_3::_Tuple2 1) (select _x_2::_Tuple5 3) var_heap_4
convertimportedtypes.fold_st_87 !_vArray_0 !_vArray_1 main_dcl_module_n_2::I dcl_functions_3 common_defs_4 !_x_5 !st_6 = case _x_5 (_predefined._Nil -> st_6) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_87 _vArray_0 _vArray_1 main_dcl_module_n_2 dcl_functions_3 common_defs_4 x_1_1 (convertimportedtypes.convert_imported_function_15 _vArray_0 _vArray_1 main_dcl_module_n_2 dcl_functions_3 common_defs_4 a_1_0 st_6)) 
convertimportedtypes.convert_imported_type_specs_14 !_vArray_0 !_vArray_1 main_dcl_module_n_2::I dcl_functions_3 common_defs_4 !imported_conses_5 !imported_functions_6 imported_types_7 type_heaps_8 var_heap_9 = let _x_1_0 = convertimportedtypes.fold_st_87 _vArray_0 _vArray_1 main_dcl_module_n_2 dcl_functions_3 common_defs_4 imported_functions_6 (_Tuple4 imported_types_7 imported_conses_5 type_heaps_8 var_heap_9) in convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_2 common_defs_4 (select _x_1_0::_Tuple4 1) (select _x_1_0::_Tuple4 0) (select _x_1_0::_Tuple4 2) (select _x_1_0::_Tuple4 3)
<{convertimportedtypes.cu;63;92_10}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{convertimportedtypes.cu;63;92_10}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
convertimportedtypes.insert_abstract_type_13 !_vArray_0 type_index_1::I type_defs_2 = let _x_1_0 = select _vArray_0::<{_SystemArray.Array;}> 6 type_defs_2 type_index_1 in select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_1_0::_Tuple2 1) type_index_1 (update (select _x_1_0::_Tuple2 0)::syntax._TypeDef [5:syntax.AbstractType 0])
convertimportedtypes.determine_abstract_type_88 !dcl_type_defs_0 !type_index_1::I abstract_type_indexes_2 = <{convertimportedtypes._c;72;11_130}> (select (convertimportedtypes.select_44 dcl_type_defs_0 type_index_1)::syntax._TypeDef 5) type_index_1 abstract_type_indexes_2
<{convertimportedtypes._c;72;11_130}> !_x_0 type_index_1::I abstract_type_indexes_2 = case _x_0 (syntax.AbstractType _x_1_0 -> _predefined._Cons type_index_1 abstract_type_indexes_2) (_ -> abstract_type_indexes_2)
convertimportedtypes.i_fold_st_89 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_89 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
convertimportedtypes.convert_imported_function_92 !_vArray_0 !main_dcl_module_n_1::I dcl_functions_2 !common_defs_3 !_x_4 !_x_5 = case _x_4 (syntax._Global glob_object_1_0 glob_module_1_1 -> case _x_5 (_Tuple4 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3 -> let !_x_3_0 = select _vArray_0::<{_SystemArray.Array;}> 3 (_SystemArray.select_43 dcl_functions_2 glob_module_1_1) glob_object_1_0, !_x_3_1 = expand_types.convertSymbolType False common_defs_3 (select _x_3_0::syntax._FunType 3) main_dcl_module_n_1 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3, ptr_and_val_3_2 = _Tuple2 (select _x_3_0::syntax._FunType 6) (syntax.VI_ExpandedType (select _x_3_1::_Tuple5 0)) in _Tuple4 (select _x_3_1::_Tuple5 1) (select _x_3_1::_Tuple5 2) (select _x_3_1::_Tuple5 3) (Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_1::_Tuple5 4))) ) 
convertimportedtypes.fold_st_91 !_vArray_0 main_dcl_module_n_1::I dcl_functions_2 common_defs_3 !_x_4 !st_5 = case _x_4 (_predefined._Nil -> st_5) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_91 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 x_1_1 (convertimportedtypes.convert_imported_function_92 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 a_1_0 st_5)) 
convertimportedtypes.convert_imported_type_specs_90 !_vArray_0 main_dcl_module_n_1::I dcl_functions_2 common_defs_3 !imported_conses_4 !imported_functions_5 imported_types_6 type_heaps_7 var_heap_8 = let _x_1_0 = convertimportedtypes.fold_st_91 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 imported_functions_5 (_Tuple4 imported_types_6 imported_conses_4 type_heaps_7 var_heap_8) in convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_1 common_defs_3 (select _x_1_0::_Tuple4 1) (select _x_1_0::_Tuple4 0) (select _x_1_0::_Tuple4 2) (select _x_1_0::_Tuple4 3)
<{convertimportedtypes.cu;63;92_94}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertimportedtypes.uselect_47 g_a_4 c_i_2 in <{convertimportedtypes.cu;63;92_94}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
convertimportedtypes.insert_abstract_type_93 !type_index_0::I !type_defs_1 = let _x_1_0 = convertimportedtypes.uselect_47 type_defs_1 type_index_0 in convertimportedtypes.update_46 (select _x_1_0::_Tuple2 1) type_index_0 (update (select _x_1_0::_Tuple2 0)::syntax._TypeDef [5:syntax.AbstractType 0])
convertimportedtypes.fold_st_95 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_95 x_1_1 (convertimportedtypes.insert_abstract_type_93 a_1_0 st_1)) 
convertimportedtypes.i_fold_st_96 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> convertimportedtypes.i_fold_st_96 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
convertimportedtypes.convert_imported_function_99 !main_dcl_module_n_0::I !dcl_functions_1 !common_defs_2 !_x_3 !_x_4 = case _x_3 (syntax._Global glob_object_1_0 glob_module_1_1 -> case _x_4 (_Tuple4 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3 -> let !_x_3_0 = convertimportedtypes.select_76 (_SystemArray.select_43 dcl_functions_1 glob_module_1_1) glob_object_1_0, !_x_3_1 = expand_types.convertSymbolType False common_defs_2 (select _x_3_0::syntax._FunType 3) main_dcl_module_n_0 imported_types_2_0 imported_conses_2_1 type_heaps_2_2 var_heap_2_3, ptr_and_val_3_2 = _Tuple2 (select _x_3_0::syntax._FunType 6) (syntax.VI_ExpandedType (select _x_3_1::_Tuple5 0)) in _Tuple4 (select _x_3_1::_Tuple5 1) (select _x_3_1::_Tuple5 2) (select _x_3_1::_Tuple5 3) (Heap.writePtr (select ptr_and_val_3_2::_Tuple2 0) (select ptr_and_val_3_2::_Tuple2 1) (select _x_3_1::_Tuple5 4))) ) 
convertimportedtypes.fold_st_98 main_dcl_module_n_0::I dcl_functions_1 common_defs_2 !_x_3 !st_4 = case _x_3 (_predefined._Nil -> st_4) (_predefined._Cons a_1_0 x_1_1 -> convertimportedtypes.fold_st_98 main_dcl_module_n_0 dcl_functions_1 common_defs_2 x_1_1 (convertimportedtypes.convert_imported_function_99 main_dcl_module_n_0 dcl_functions_1 common_defs_2 a_1_0 st_4)) 
convertimportedtypes.convert_imported_type_specs_97 main_dcl_module_n_0::I dcl_functions_1 common_defs_2 !imported_conses_3 !imported_functions_4 imported_types_5 type_heaps_6 var_heap_7 = let _x_1_0 = convertimportedtypes.fold_st_98 main_dcl_module_n_0 dcl_functions_1 common_defs_2 imported_functions_4 (_Tuple4 imported_types_5 imported_conses_3 type_heaps_6 var_heap_7) in convertimportedtypes.convert_imported_constructors_16 main_dcl_module_n_0 common_defs_2 (select _x_1_0::_Tuple4 1) (select _x_1_0::_Tuple4 0) (select _x_1_0::_Tuple4 2) (select _x_1_0::_Tuple4 3)
<{convertimportedtypes.cu;63;92_100}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertimportedtypes.uselect_47 g_a_3 c_i_1 in <{convertimportedtypes.cu;63;92_100}> (convertimportedtypes.update_46 c_a_0 c_i_1 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
convertimportedtypes.i_fold_st_101 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_101 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
convertimportedtypes.i_fold_st_102 dcl_type_defs_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_102 dcl_type_defs_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (convertimportedtypes.determine_abstract_type_88 dcl_type_defs_0 fr_1 st_3)) 
convertimportedtypes.convertImportedTypeSpecifications !main_dcl_module_n_0::I !dcl_mods_1 !dcl_functions_2 !common_defs_3 !imported_conses_4 !imported_functions_5 !imported_types_6 !type_heaps_7 !var_heap_8 = let _x_1_0 = convertimportedtypes.select_68 dcl_mods_1 main_dcl_module_n_0 in case (select _x_1_0::syntax._DclModule 11) (True -> let _x_3_0 = select _x_1_0::syntax._DclModule 7, com_type_defs_3_1 = select _x_3_0::syntax._CommonDefs 0, abstract_type_indexes_3_2 = convertimportedtypes.i_fold_st_102 com_type_defs_3_1 0 (convertimportedtypes.size_45 com_type_defs_3_1) _predefined._Nil in case (StdList.isEmpty abstract_type_indexes_3_2) (True -> convertimportedtypes.convert_imported_type_specs_97 main_dcl_module_n_0 dcl_functions_2 common_defs_3 imported_conses_4 imported_functions_5 imported_types_6 type_heaps_7 var_heap_8) (False -> let !_x_5_0 = _SystemArray.uselect_46 imported_types_6 main_dcl_module_n_0, !type_defs_5_1 = convertimportedtypes.fold_st_95 abstract_type_indexes_3_2 (<{convertimportedtypes.cu;63;92_100}> (convertimportedtypes._createArray_41 (<{StdInt.+_6}> g_s2_5_5 StdInt.one_11)) 0 g_s2_5_5 (select _x_5_4::_Tuple2 1)), !_x_5_2 = convertimportedtypes.convert_imported_type_specs_97 main_dcl_module_n_0 dcl_functions_2 common_defs_3 imported_conses_4 imported_functions_5 (_SystemArray.update_45 (select _x_5_0::_Tuple2 1) main_dcl_module_n_0 type_defs_5_1) type_heaps_7 var_heap_8, icl_type_defs_5_3::I = select _x_5_0::_Tuple2 0, _x_5_4 = convertimportedtypes.usize_48 icl_type_defs_5_3, g_s2_5_5 = <{StdInt.-_7}> (select _x_5_4::_Tuple2 0) 1 in <{_Tuple3!7}> (_SystemArray.update_45 (select _x_5_2::_Tuple3 0) main_dcl_module_n_0 icl_type_defs_5_3) (select _x_5_2::_Tuple3 1) (select _x_5_2::_Tuple3 2)) ) (False -> convertimportedtypes.convert_imported_type_specs_97 main_dcl_module_n_0 dcl_functions_2 common_defs_3 imported_conses_4 imported_functions_5 imported_types_6 type_heaps_7 var_heap_8) 
<{convertimportedtypes.cu;13;34_5}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{convertimportedtypes.cu;13;34_5}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
convertimportedtypes.i_fold_st_24 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_24 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
convertimportedtypes.convert_dcl_function_7 !_vArray_0 !main_dcl_module_n_1::I dcl_functions_2 !common_defs_3 dcl_index_4::I !_x_5 = case _x_5 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 3 dcl_functions_2 dcl_index_4, !_x_2_1 = expand_types.convertSymbolType False common_defs_3 (select _x_2_0::syntax._FunType 3) main_dcl_module_n_1 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._FunType 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_103 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_103 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
convertimportedtypes.i_fold_st_104 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> convertimportedtypes.i_fold_st_104 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
convertimportedtypes.i_fold_st_105 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_105 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
convertimportedtypes.i_fold_st_106 !_vArray_0 main_dcl_module_n_1::I dcl_functions_2 common_defs_3 !fr_4::I !to_5::I !st_6 = case (StdBool.not (<{StdInt.<_17}> fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_106 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 (<{StdInt.+_6}> fr_4 StdInt.one_11) to_5 (convertimportedtypes.convert_dcl_function_7 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 fr_4 st_6)) 
convertimportedtypes.convert_dcl_functions_6 !_vArray_0 main_dcl_module_n_1::I dcl_functions_2 common_defs_3 !types_and_heaps_4 = convertimportedtypes.i_fold_st_106 _vArray_0 main_dcl_module_n_1 dcl_functions_2 common_defs_3 0 (select _vArray_0::<{_SystemArray.Array;}> 4 dcl_functions_2) types_and_heaps_4
convertimportedtypes.i_fold_st_23 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_23 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
convertimportedtypes.convert_constructor_type_8 !_vArray_0 !main_dcl_module_n_1::I !common_defs_2 cons_defs_3 cons_index_4::I !_x_5 = case _x_5 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 3 cons_defs_3 cons_index_4, !_x_2_1 = expand_types.convertSymbolType False common_defs_2 (select _x_2_0::syntax._ConsDef 1) main_dcl_module_n_1 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._ConsDef 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_107 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_107 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
convertimportedtypes.i_fold_st_108 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> convertimportedtypes.i_fold_st_108 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
convertimportedtypes.i_fold_st_109 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_109 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
convertimportedtypes.i_fold_st_110 !_vArray_0 main_dcl_module_n_1::I common_defs_2 cons_defs_3 !fr_4::I !to_5::I !st_6 = case (StdBool.not (<{StdInt.<_17}> fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_110 _vArray_0 main_dcl_module_n_1 common_defs_2 cons_defs_3 (<{StdInt.+_6}> fr_4 StdInt.one_11) to_5 (convertimportedtypes.convert_constructor_type_8 _vArray_0 main_dcl_module_n_1 common_defs_2 cons_defs_3 fr_4 st_6)) 
convertimportedtypes.convertConstructorTypes !_vArray_0 cons_defs_1 main_dcl_module_n_2::I common_defs_3 !types_and_heaps_4 = convertimportedtypes.i_fold_st_110 _vArray_0 main_dcl_module_n_2 common_defs_3 cons_defs_1 0 (select _vArray_0::<{_SystemArray.Array;}> 4 cons_defs_1) types_and_heaps_4
convertimportedtypes.i_fold_st_22 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_22 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
convertimportedtypes.convert_selector_type_9 !_vArray_0 !main_dcl_module_n_1::I !common_defs_2 selector_defs_3 sel_index_4::I !_x_5 = case _x_5 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 3 selector_defs_3 sel_index_4, !_x_2_1 = expand_types.convertSymbolType False common_defs_2 (select _x_2_0::syntax._SelectorDef 2) main_dcl_module_n_1 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._SelectorDef 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_111 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_111 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
convertimportedtypes.i_fold_st_112 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> convertimportedtypes.i_fold_st_112 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
convertimportedtypes.i_fold_st_113 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> convertimportedtypes.i_fold_st_113 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
convertimportedtypes.i_fold_st_114 !_vArray_0 main_dcl_module_n_1::I common_defs_2 selector_defs_3 !fr_4::I !to_5::I !st_6 = case (StdBool.not (<{StdInt.<_17}> fr_4 to_5)) (True -> st_6) (False -> convertimportedtypes.i_fold_st_114 _vArray_0 main_dcl_module_n_1 common_defs_2 selector_defs_3 (<{StdInt.+_6}> fr_4 StdInt.one_11) to_5 (convertimportedtypes.convert_selector_type_9 _vArray_0 main_dcl_module_n_1 common_defs_2 selector_defs_3 fr_4 st_6)) 
convertimportedtypes.convertSelectorTypes !_vArray_0 selector_defs_1 main_dcl_module_n_2::I common_defs_3 !types_and_heaps_4 = convertimportedtypes.i_fold_st_114 _vArray_0 main_dcl_module_n_2 common_defs_3 selector_defs_1 0 (select _vArray_0::<{_SystemArray.Array;}> 4 selector_defs_1) types_and_heaps_4
<{convertimportedtypes.cu;13;34_115}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertimportedtypes.uselect_31 g_a_4 c_i_2 in <{convertimportedtypes.cu;13;34_115}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
convertimportedtypes.convert_dcl_function_118 !main_dcl_module_n_0::I !dcl_functions_1 !common_defs_2 !dcl_index_3::I !_x_4 = case _x_4 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = convertimportedtypes.select_76 dcl_functions_1 dcl_index_3, !_x_2_1 = expand_types.convertSymbolType False common_defs_2 (select _x_2_0::syntax._FunType 3) main_dcl_module_n_0 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._FunType 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_117 main_dcl_module_n_0::I dcl_functions_1 common_defs_2 !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_117 main_dcl_module_n_0 dcl_functions_1 common_defs_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (convertimportedtypes.convert_dcl_function_118 main_dcl_module_n_0 dcl_functions_1 common_defs_2 fr_3 st_5)) 
convertimportedtypes.convert_dcl_functions_116 main_dcl_module_n_0::I !dcl_functions_1 common_defs_2 !types_and_heaps_3 = convertimportedtypes.i_fold_st_117 main_dcl_module_n_0 dcl_functions_1 common_defs_2 0 (convertimportedtypes.size_77 dcl_functions_1) types_and_heaps_3
convertimportedtypes.convert_constructor_type_121 !main_dcl_module_n_0::I !common_defs_1 !cons_defs_2 !cons_index_3::I !_x_4 = case _x_4 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = convertimportedtypes.select_36 cons_defs_2 cons_index_3, !_x_2_1 = expand_types.convertSymbolType False common_defs_1 (select _x_2_0::syntax._ConsDef 1) main_dcl_module_n_0 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._ConsDef 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_120 main_dcl_module_n_0::I common_defs_1 cons_defs_2 !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_120 main_dcl_module_n_0 common_defs_1 cons_defs_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (convertimportedtypes.convert_constructor_type_121 main_dcl_module_n_0 common_defs_1 cons_defs_2 fr_3 st_5)) 
convertimportedtypes.convertConstructorTypes_119 !cons_defs_0 main_dcl_module_n_1::I common_defs_2 !types_and_heaps_3 = convertimportedtypes.i_fold_st_120 main_dcl_module_n_1 common_defs_2 cons_defs_0 0 (convertimportedtypes.size_37 cons_defs_0) types_and_heaps_3
convertimportedtypes.convert_selector_type_124 !main_dcl_module_n_0::I !common_defs_1 !selector_defs_2 !sel_index_3::I !_x_4 = case _x_4 (_Tuple4 imported_types_1_0 imported_conses_1_1 var_heap_1_2 type_heaps_1_3 -> let !_x_2_0 = convertimportedtypes.select_60 selector_defs_2 sel_index_3, !_x_2_1 = expand_types.convertSymbolType False common_defs_1 (select _x_2_0::syntax._SelectorDef 2) main_dcl_module_n_0 imported_types_1_0 imported_conses_1_1 type_heaps_1_3 var_heap_1_2, ptr_and_val_2_2 = _Tuple2 (select _x_2_0::syntax._SelectorDef 6) (syntax.VI_ExpandedType (select _x_2_1::_Tuple5 0)) in _Tuple4 (select _x_2_1::_Tuple5 1) (select _x_2_1::_Tuple5 2) (Heap.writePtr (select ptr_and_val_2_2::_Tuple2 0) (select ptr_and_val_2_2::_Tuple2 1) (select _x_2_1::_Tuple5 4)) (select _x_2_1::_Tuple5 3)) 
convertimportedtypes.i_fold_st_123 main_dcl_module_n_0::I common_defs_1 selector_defs_2 !fr_3::I !to_4::I !st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> convertimportedtypes.i_fold_st_123 main_dcl_module_n_0 common_defs_1 selector_defs_2 (<{StdInt.+_6}> fr_3 StdInt.one_11) to_4 (convertimportedtypes.convert_selector_type_124 main_dcl_module_n_0 common_defs_1 selector_defs_2 fr_3 st_5)) 
convertimportedtypes.convertSelectorTypes_122 !selector_defs_0 main_dcl_module_n_1::I common_defs_2 !types_and_heaps_3 = convertimportedtypes.i_fold_st_123 main_dcl_module_n_1 common_defs_2 selector_defs_0 0 (convertimportedtypes.size_61 selector_defs_0) types_and_heaps_3
<{convertimportedtypes.cu;13;34_125}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = convertimportedtypes.uselect_31 g_a_3 c_i_1 in <{convertimportedtypes.cu;13;34_125}> (convertimportedtypes.update_30 c_a_0 c_i_1 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
convertimportedtypes.convertDclModule !main_dcl_module_n_0::I !dcl_mods_1 !common_defs_2 !imported_types_3 !imported_conses_4 !var_heap_5 !type_heaps_6 = let _x_1_0 = convertimportedtypes.select_68 dcl_mods_1 main_dcl_module_n_0 in case (select _x_1_0::syntax._DclModule 11) (True -> let !_x_3_0 = _SystemArray.uselect_46 imported_types_3 main_dcl_module_n_0, !common_defs_3_1 = <{convertimportedtypes.cu;13;34_125}> (convertimportedtypes._createArray_25 (<{StdInt.+_6}> g_s2_3_8 StdInt.one_11)) 0 g_s2_3_8 (select _x_3_7::_Tuple2 1), !common_defs_3_2 = convertimportedtypes.update_30 common_defs_3_1 main_dcl_module_n_0 dcl_common_3_6, !types_and_heaps_3_3 = convertimportedtypes.convert_dcl_functions_116 main_dcl_module_n_0 (select _x_1_0::syntax._DclModule 1) common_defs_3_2 (_Tuple4 (_SystemArray.update_45 (select _x_3_0::_Tuple2 1) main_dcl_module_n_0 (select dcl_common_3_6::syntax._CommonDefs 0)) imported_conses_4 var_heap_5 type_heaps_6), !types_and_heaps_3_4 = convertimportedtypes.convertConstructorTypes_119 (select dcl_common_3_6::syntax._CommonDefs 1) main_dcl_module_n_0 common_defs_3_2 types_and_heaps_3_3, !_x_3_5 = convertimportedtypes.convertSelectorTypes_122 (select dcl_common_3_6::syntax._CommonDefs 2) main_dcl_module_n_0 common_defs_3_2 types_and_heaps_3_4, dcl_common_3_6::I = select _x_1_0::syntax._DclModule 7, _x_3_7 = convertimportedtypes.usize_32 common_defs_2, g_s2_3_8 = <{StdInt.-_7}> (select _x_3_7::_Tuple2 0) 1 in <{_Tuple4!15}> (_SystemArray.update_45 (select _x_3_5::_Tuple4 0) main_dcl_module_n_0 (select _x_3_0::_Tuple2 0)) (select _x_3_5::_Tuple4 1) (select _x_3_5::_Tuple4 2) (select _x_3_5::_Tuple4 3)) (False -> <{_Tuple4!15}> imported_types_3 imported_conses_4 var_heap_5 type_heaps_6) 
convertimportedtypes.convertIclModule !main_dcl_module_n_0::I !common_defs_1 !imported_types_2 !imported_conses_3 !var_heap_4 !type_heaps_5 = let !types_and_heaps_1_0 = convertimportedtypes.convertConstructorTypes_119 (select (convertimportedtypes.select_28 common_defs_1 main_dcl_module_n_0)::syntax._CommonDefs 1) main_dcl_module_n_0 common_defs_1 (_Tuple4 imported_types_2 imported_conses_3 var_heap_4 type_heaps_5) in convertimportedtypes.convertSelectorTypes_122 (select (convertimportedtypes.select_28 common_defs_1 main_dcl_module_n_0)::syntax._CommonDefs 2) main_dcl_module_n_0 common_defs_1 types_and_heaps_1_0


|| Converted Records
