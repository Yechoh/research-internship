|| ?module? TypeUnify


TypeUnify.reduceArities !_x_0 = case _x_0 (TypeDef.Func ts_1_0 r_1_1 cc_1_2 -> case (<{StdInt.<_17}> 1 (StdList.length_47 ts_1_0)) (True -> TypeDef.Func (_predefined._Cons (TypeUnify.reduceArities (StdList.hd ts_1_0)) _predefined._Nil) (TypeUnify.reduceArities (TypeDef.Func (StdList.tl ts_1_0) r_1_1 cc_1_2)) cc_1_2) (False -> TypeDef.Func (StdList.map TypeUnify.reduceArities ts_1_0) (TypeUnify.reduceArities r_1_1) cc_1_2) ) (TypeDef.Type s_1_0 ts_1_1 -> TypeDef.Type s_1_0 (StdList.map TypeUnify.reduceArities ts_1_1)) (TypeDef.Cons v_1_0 ts_1_1 -> TypeDef.Cons v_1_0 (StdList.map TypeUnify.reduceArities ts_1_1)) (TypeDef.Uniq t_1_0 -> TypeDef.Uniq (TypeUnify.reduceArities t_1_0)) (TypeDef.Var v_1_0 -> TypeDef.Var v_1_0) (TypeDef.Forall tvs_1_0 t_1_1 cc_1_2 -> TypeDef.Forall tvs_1_0 (TypeUnify.reduceArities t_1_1) cc_1_2) 
TypeUnify.flip_64 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUnify.flip_63 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUnify.rename_8 s_0 v_1 = _Tuple2 v_1 (TypeDef.Var (<{StdString.+++_11}> v_1 s_0))
TypeUnify.flip_165 !a_0 !b_1 = TypeUtil.assign2 b_1 a_0
TypeUnify.flip_166 !_x_0 _x_1 a_2 b_3 = Control.Monad.foldM _x_0 _x_1 b_3 a_2
TypeUnify.flip_167 _x_0 a_1 b_2 = Control.Monad.foldM (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) _x_0 b_2 a_1
TypeUnify.appendToVars_9 s_0 t_1 = Data.Maybe.fromJust (TypeUnify.flip_167 TypeUnify.flip_165 (StdList.map (TypeUnify.rename_8 s_0) (TypeDef.allVars t_1)) t_1)
TypeUnify.prepare_unification !b_0::B db_1 !_x_2 = case _x_2 (TypeDef.Func _x_1_0 t_1_1 _x_1_2 -> case _x_1_0 (_predefined._Nil -> TypeUnify.prepare_unification b_0 db_1 t_1_1) ) (_ -> let _x_1_0 = TypeUtil.resolve_synonyms db_1 _x_2 in _Tuple2 (select _x_1_0::_Tuple2 0) (TypeUnify.appendToVars_9 (<{TypeUnify._if;29;21_182}> b_0) (TypeUnify.reduceArities (TypeUtil.propagate_uniqueness (select _x_1_0::_Tuple2 1)))))
<{TypeUnify._if;29;21_182}> !b_0::B = case b_0 (True -> "l") (_ -> "r")
TypeUnify.endsWith_12::B !n_0 !_x_1 = case _x_1 (_Tuple2 h_1_0 _x_1_1 -> <{StdString.==_2}> (<{StdString.%_10}> h_1_0 (_Tuple2 (<{StdInt.-_7}> (_SystemArray.size_20 h_1_0) (_SystemArray.size_20 n_0)) (<{StdInt.-_7}> (_SystemArray.size_20 h_1_0) 1))) n_0) 
TypeUnify.flip_66 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUnify.flip_65 !f_0 a_1 b_2 = f_0 b_2 a_1
TypeUnify.rm_10 !_vArray_0 !<{_v%_1}> s_2 = select <{_v%_1}>::<{StdOverloaded.%;}> 0 s_2 (_Tuple2 0 (<{StdInt.-_7}> (select _vArray_0::<{_SystemArray.Array;}> 4 s_2) 2))
TypeUnify.rm_168 !<{_v%_0}> s_1 = select <{_v%_0}>::<{StdOverloaded.%;}> 0 s_1 (_Tuple2 0 (<{StdInt.-_7}> (_SystemArray.size_20 s_1) 2))
TypeUnify.rm_169 !s_0 = <{StdString.%_10}> s_0 (_Tuple2 0 (<{StdInt.-_7}> (_SystemArray.size_20 s_0) 2))
TypeUnify.anon_11 v_0 = _Tuple2 v_0 (TypeDef.Var (TypeUnify.rm_169 v_0))
TypeUnify.flip_170 !a_0 !b_1 = TypeUtil.assign2 b_1 a_0
TypeUnify.flip_171 !_x_0 _x_1 a_2 b_3 = Control.Monad.foldM _x_0 _x_1 b_3 a_2
TypeUnify.flip_172 _x_0 a_1 b_2 = Control.Monad.foldM (<{Control.Monad.Monad;}> Control.Monad.bind_25 (<{Control.Applicative.Applicative;}> <{Control.Applicative.<*>_14}> Control.Applicative.pure_15 (<{Data.Functor.Functor;}> Data.Maybe.fmap_12))) _x_0 b_2 a_1
TypeUnify.removeEnds_13 !_x_0 = case _x_0 (_Tuple2 v_1_0 t_1_1 -> _Tuple2 (TypeUnify.rm_169 v_1_0) (Data.Maybe.fromJust (TypeUnify.flip_172 TypeUnify.flip_170 (StdList.map TypeUnify.anon_11 (TypeDef.allVars t_1_1)) t_1_1))) 
TypeUnify.finish_unification !syns_0 !tvs_1 = let _x_1_0 = _Tuple2 (StdList.filter (TypeUnify.endsWith_12 "l") tvs_1) (StdList.filter (TypeUnify.endsWith_12 "r") tvs_1), _x_1_1 = _Tuple2 (StdList.map TypeUnify.removeEnds_13 (select _x_1_0::_Tuple2 0)) (StdList.map TypeUnify.removeEnds_13 (select _x_1_0::_Tuple2 1)) in TypeDef._Unifier (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1) (TypeDef.removeDupTypedefs syns_0)
TypeUnify.toMESystem !t1_0 !t2_1 = TypeUnify._MESystem _predefined._Nil (_predefined._Cons (_Tuple2 0 (TypeUnify.ME (_predefined._Cons "type" _predefined._Nil) (_predefined._Cons t1_0 (_predefined._Cons t2_1 _predefined._Nil)))) _predefined._Nil)
TypeUnify.anon_84 !f_0 g_1 x_2 = f_0 (g_1 x_2)
TypeUnify.snd_83 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.anon_16::B !<{_v<_0}> !_x_1 !_x_2 = case _x_1 (_Tuple2 a_1_0 b_1_1 -> case _x_2 (_Tuple2 c_2_0 d_2_1 -> select <{_v<_0}>::<{StdOverloaded.<;}> 0 a_1_0 c_2_0) ) 
<{TypeUnify.c;97;45_20}> v_0 !g_l_1 = <{TypeUnify.g_c1;97;51_183}> g_l_1 v_0
<{TypeUnify.g_c1;97;51_183}> !g_l_0 v_1 = case g_l_0 (_predefined._Cons v`_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 <{v`_1_0}> (TypeDef.Var v_1)) (<{TypeUnify.c;97;45_20}> v_1 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUnify.c;97;18_19}> v_0 !g_l_1 = <{TypeUnify.g_c1;97;23_184}> g_l_1 v_0
<{TypeUnify.g_c1;97;23_184}> !g_l_0 v_1 = case g_l_0 (_predefined._Cons t_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 v_1 t_1_0) (<{TypeUnify.c;97;18_19}> v_1 g_t_1_1)) (_ -> _predefined._Nil)
TypeUnify.solution_26 !_x_0 = case _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 mes_1_1 -> case _x_1_0 (TypeUnify.ME _x_2_0 ts_2_1 -> case _x_2_0 (_predefined._Cons v_3_0 vs_3_1 -> <{StdList.++}> (<{TypeUnify.c;97;18_19}> v_3_0 ts_2_1) (<{StdList.++}> (<{TypeUnify.c;97;45_20}> v_3_0 vs_3_1) (TypeUnify.solution_26 mes_1_1))) ) ) 
TypeUnify.count_21::I !vs_0 !_x_1 = case _x_1 (TypeDef.Var v_1_0 -> case (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) v_1_0 vs_0) (True -> 1) (False -> 0) ) (TypeDef.Cons v_1_0 ts_1_1 -> <{StdInt.+_6}> (<{TypeUnify._if;106;32_185}> (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) v_1_0 vs_0)) (StdList.sum_72 (StdList.map (TypeUnify.count_21 vs_0) ts_1_1))) (TypeDef.Type _x_1_0 ts_1_1 -> StdList.sum_72 (StdList.map (TypeUnify.count_21 vs_0) ts_1_1)) (TypeDef.Func is_1_0 r_1_1 _x_1_2 -> StdList.sum_72 (StdList.map (TypeUnify.count_21 vs_0) (_predefined._Cons r_1_1 is_1_0))) (TypeDef.Uniq t_1_0 -> TypeUnify.count_21 vs_0 t_1_0) 
<{TypeUnify._if;106;32_185}>::I !_x_0::B = case _x_0 (True -> 1) (_ -> 0)
TypeUnify.removeFromCounters_27 !vs_0 !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 mes_1_1 -> case _x_1_0 (_Tuple2 i_2_0 me_2_1 -> case me_2_1 (TypeUnify.ME _x_3_0 ts_3_1 -> _predefined._Cons (_Tuple2 (<{StdInt.-_7}> i_2_0 (StdList.sum_72 (StdList.map (TypeUnify.count_21 vs_0) ts_3_1))) me_2_1) (TypeUnify.removeFromCounters_27 vs_0 mes_1_1)) ) ) 
TypeUnify.snd_82 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.fst_81 !tuple_0 = select tuple_0::_Tuple2 0
TypeUnify.snd_80 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.fst_79 !tuple_0 = select tuple_0::_Tuple2 0
TypeUnify.snd_78 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.snd_77 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.fst_76 !tuple_0 = select tuple_0::_Tuple2 0
TypeUnify.snd_75 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.fst_74 !tuple_0 = select tuple_0::_Tuple2 0
<{TypeUnify.<>_73}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
TypeUnify.snd_72 !tuple_0 = select tuple_0::_Tuple2 1
TypeUnify.fst_71 !tuple_0 = select tuple_0::_Tuple2 0
<{TypeUnify.<>_70}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
TypeUnify.anon_69 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{TypeUnify.<>_68}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
TypeUnify.anon_30 t_0 = case (TypeDef.isForall t_0) (True -> TypeDef.fromForall t_0) (False -> t_0) 
TypeUnify.makemulteq_52 ts_0 = let _x_1_0 = Data.List.partition TypeDef.isVar ts_0 in _predefined._Cons (TypeUnify.ME (StdList.map TypeDef.fromVar (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1)) _predefined._Nil
TypeUnify.anon_31 !_x_0 = case _x_0 (TypeDef.Type n_1_0 _x_1_1 -> n_1_0) 
TypeUnify.anon_32 !_x_0 = case _x_0 (TypeDef.Type _x_1_0 ts_1_1 -> ts_1_1) 
TypeUnify.anon_33 !_x_0 = case _x_0 (TypeDef.Type _x_1_0 ts_1_1 -> ts_1_1) 
<{TypeUnify.c;155;44_34}> i_0::I !g_l_1 = <{TypeUnify.g_c1;155;49_186}> g_l_1 i_0
<{TypeUnify.g_c1;155;49_186}> !g_l_0 i_1::I = case g_l_0 (_predefined._Cons a_1_0 g_t_1_1 -> _predefined._Cons (<{StdList.!!}> a_1_0 i_1) (<{TypeUnify.c;155;44_34}> i_1 g_t_1_1)) (_ -> _predefined._Nil)
TypeUnify.anon_36 !_x_0 = case _x_0 (TypeDef.Func is_1_0 t_1_1 _x_1_2 -> _predefined._Cons t_1_1 is_1_0) 
<{TypeUnify.c;164;44_37}> i_0::I !g_l_1 = <{TypeUnify.g_c1;164;49_187}> g_l_1 i_0
<{TypeUnify.g_c1;164;49_187}> !g_l_0 i_1::I = case g_l_0 (_predefined._Cons t_1_0 g_t_1_1 -> _predefined._Cons (<{StdList.!!}> t_1_0 i_1) (<{TypeUnify.c;164;44_37}> i_1 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUnify.c;169;28_39}> !g_l_0 = <{TypeUnify.g_c1;169;43_189}> g_l_0
<{TypeUnify.g_c1;169;43_189}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;169;43_188}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;169;43_188}> !g_h_0 g_t_1 = case g_h_0 (TypeDef.Cons _x_1_0 ts_1_1 -> _predefined._Cons (StdList.length_47 ts_1_1) (<{TypeUnify.c;169;28_39}> g_t_1)) (_ -> <{TypeUnify.c;169;28_39}> g_t_1)
TypeUnify.anon_40 !_x_0 = case _x_0 (TypeDef.Cons v_1_0 ts_1_1 -> _predefined._Cons (TypeDef.Var v_1_0) ts_1_1) 
<{TypeUnify.c;174;48_41}> i_0::I !g_l_1 = <{TypeUnify.g_c1;174;53_190}> g_l_1 i_0
<{TypeUnify.g_c1;174;53_190}> !g_l_0 i_1::I = case g_l_0 (_predefined._Cons l_1_0 g_t_1_1 -> _predefined._Cons (<{StdList.!!}> l_1_0 i_1) (<{TypeUnify.c;174;48_41}> i_1 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUnify.c;180;22_43}> maxlen_0::I !g_l_1 = <{TypeUnify.g_c1;180;37_192}> g_l_1 maxlen_0
<{TypeUnify.g_c1;180;37_192}> !g_l_0 maxlen_1::I = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;180;37_191}> g_h_1_0 maxlen_1 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;180;37_191}> !g_h_0 maxlen_1::I g_t_2 = case g_h_0 (TypeDef.Cons v_1_0 ts_1_1 -> case (<{StdInt.==_16}> (StdList.length_47 ts_1_1) maxlen_1) (True -> _predefined._Cons v_1_0 (<{TypeUnify.c;180;22_43}> maxlen_1 g_t_2)) ) (_ -> <{TypeUnify.c;180;22_43}> maxlen_1 g_t_2)
<{TypeUnify.c;181;49_44}> minlen_0::I !g_l_1 = <{TypeUnify.g_c1;181;64_194}> g_l_1 minlen_0
<{TypeUnify.g_c1;181;64_194}> !g_l_0 minlen_1::I = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;181;64_193}> g_h_1_0 minlen_1 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;181;64_193}> !g_h_0 minlen_1::I g_t_2 = case g_h_0 (TypeDef.Cons v_1_0 ts_1_1 -> _predefined._Cons (StdList.splitAt (<{StdInt.-_7}> (StdList.length_47 ts_1_1) minlen_1) ts_1_1) (<{TypeUnify.c;181;49_44}> minlen_1 g_t_2)) (_ -> <{TypeUnify.c;181;49_44}> minlen_1 g_t_2)
<{TypeUnify.c;182;78_45}> !g_l_0 g_l_1 = <{TypeUnify.g_c1;182;68_199}> g_l_0 g_l_1
<{TypeUnify.g_c1;182;68_199}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c1;182;91_198}> g_l_1 g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c1;182;91_198}> !g_l_0 g_h_1 g_t_2 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;182;68_197}> g_h_1 g_h_1_0 g_t_2 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;182;68_197}> !g_h_0 !g_h_1 g_t_2 g_t_3 = case g_h_0 (_Tuple2 init_1_0 _x_1_1 -> <{TypeUnify.g_c2;182;91_196}> g_h_1 init_1_0 g_t_2 g_t_3) (_ -> <{TypeUnify.c;182;78_45}> g_t_2 g_t_3)
<{TypeUnify.g_c2;182;91_196}> !g_h_0 init_1 g_t_2 g_t_3 = case g_h_0 (TypeDef.Cons v_1_0 _x_1_1 -> _predefined._Cons (<{TypeUnify._if;182;16_195}> (StdList.isEmpty init_1) v_1_0 init_1) (<{TypeUnify.c;182;78_45}> g_t_2 g_t_3)) (_ -> <{TypeUnify.c;182;78_45}> g_t_2 g_t_3)
<{TypeUnify._if;182;16_195}> !_x_0::B v_1 init_2 = case _x_0 (True -> TypeDef.Var v_1) (_ -> TypeDef.Cons v_1 init_2)
<{TypeUnify.c;184;44_46}> i_0::I !g_l_1 = <{TypeUnify.g_c1;184;49_200}> g_l_1 i_0
<{TypeUnify.g_c1;184;49_200}> !g_l_0 i_1::I = case g_l_0 (_predefined._Cons r_1_0 g_t_1_1 -> _predefined._Cons (<{StdList.!!}> r_1_0 i_1) (<{TypeUnify.c;184;44_46}> i_1 g_t_1_1)) (_ -> _predefined._Nil)
TypeUnify.anon_48::B t_0 = case (TypeDef.isCons t_0) (True -> True) (False -> TypeDef.isType t_0) 
TypeUnify.anon_51 !_x_0 = case _x_0 (TypeDef.Uniq t_1_0 -> t_1_0) 
TypeUnify.anon_50 !_x_0 = case _x_0 (_Tuple2 cpaf_1_0 front_1_1 -> _Tuple2 (TypeDef.Uniq cpaf_1_0) front_1_1) 
TypeUnify.anon_174::I !g_0 x_1 = StdList.length_47 (g_0 x_1)
<{TypeUnify.<>_175}>::B !x_0::I !y_1::I = StdBool.not (<{StdInt.==_16}> x_0 y_1)
<{TypeUnify.<>_173}>::B !x_0::I !y_1::I = StdBool.not (<{StdInt.==_16}> x_0 y_1)
<{TypeUnify.<>_176}>::B !x_0::I !y_1::I = StdBool.not (<{StdInt.==_16}> x_0 y_1)
TypeUnify.anon_177::I !x_0 = StdList.length_47 (TypeUnify.anon_32 x_0)
<{TypeUnify.c;212;64_49}> !g_l_0 g_l_1 = <{TypeUnify.g_c1;212;49_202}> g_l_0 g_l_1
<{TypeUnify.c;184;59_47}> rests_0 !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (TypeUnify.commonPartAndFrontier (<{TypeUnify.c;184;44_46}> i_1 rests_0)) (<{TypeUnify.c;184;59_47}> rests_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{TypeUnify.c;174;63_42}> lists_0 !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (TypeUnify.commonPartAndFrontier (<{TypeUnify.c;174;48_41}> i_1 lists_0)) (<{TypeUnify.c;174;63_42}> lists_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{TypeUnify.c;164;59_38}> types_0 !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (TypeUnify.commonPartAndFrontier (<{TypeUnify.c;164;44_37}> i_1 types_0)) (<{TypeUnify.c;164;59_38}> types_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{TypeUnify.c;155;58_35}> args_0 !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (TypeUnify.commonPartAndFrontier (<{TypeUnify.c;155;44_34}> i_1 args_0)) (<{TypeUnify.c;155;58_35}> args_0 (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
TypeUnify.commonPartAndFrontier !ts_0 = case (StdList.isEmpty ts_0) (True -> Data.Maybe.Nothing) (False -> case (StdList.any TypeDef.isForall ts_0) (True -> TypeUnify.commonPartAndFrontier (StdList.map TypeUnify.anon_30 ts_0)) (False -> case (StdList.any TypeDef.isVar ts_0) (True -> Data.Maybe.Just (_Tuple2 (StdList.hd (StdList.filter TypeDef.isVar ts_0)) (TypeUnify.makemulteq_52 ts_0))) (False -> case (StdList.all TypeDef.isType ts_0) (True -> let names_5_0 = StdList.map TypeUnify.anon_31 ts_0 in case (<{TypeUnify.<>_173}> 1 (StdList.length_47 (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) names_5_0))) (True -> Data.Maybe.Nothing) (False -> let lengths_7_0 = StdList.map TypeUnify.anon_177 ts_0 in case (<{TypeUnify.<>_175}> 1 (StdList.length_47 (StdList.removeDup_63 lengths_7_0))) (True -> Data.Maybe.Nothing) (False -> let len_9_0::I = StdList.hd lengths_7_0 in case (<{StdInt.==_16}> len_9_0 0) (True -> Data.Maybe.Just (_Tuple2 (TypeDef.Type (StdList.hd names_5_0) _predefined._Nil) _predefined._Nil)) (False -> let args_11_0 = StdList.map TypeUnify.anon_33 ts_0, cpafs_11_1 = <{TypeUnify.c;155;58_35}> args_11_0 0 (<{StdInt.-_7}> len_9_0 1) in case (StdList.any Data.Maybe.isNothing cpafs_11_1) (True -> Data.Maybe.Nothing) (False -> let cfs_13_0 = StdList.map Data.Maybe.fromJust cpafs_11_1, _x_13_1 = _Tuple2 (StdList.map TypeUnify.fst_71 cfs_13_0) (StdList.map TypeUnify.snd_72 cfs_13_0) in Data.Maybe.Just (_Tuple2 (TypeDef.Type (StdList.hd names_5_0) (select _x_13_1::_Tuple2 0)) (StdList.flatten (select _x_13_1::_Tuple2 1)))) ) ) ) ) (False -> case (StdList.all TypeDef.isFunc ts_0) (True -> let types_6_0 = StdList.map TypeUnify.anon_36 ts_0, lengths_6_1 = StdList.map StdList.length_47 types_6_0 in case (<{TypeUnify.<>_176}> 1 (StdList.length_47 (StdList.removeDup_63 lengths_6_1))) (True -> Data.Maybe.Nothing) (False -> let len_8_0 = StdList.hd lengths_6_1, cpafs_8_1::I = <{TypeUnify.c;164;59_38}> types_6_0 0 (<{StdInt.-_7}> len_8_0 1) in case (StdList.any Data.Maybe.isNothing cpafs_8_1) (True -> Data.Maybe.Nothing) (False -> let cfs_10_0 = StdList.map Data.Maybe.fromJust cpafs_8_1, _x_10_1 = _Tuple2 (StdList.map TypeUnify.fst_74 cfs_10_0) (StdList.map TypeUnify.snd_75 cfs_10_0), _x_10_2 = select _x_10_1::_Tuple2 0 in Data.Maybe.Just (_Tuple2 (TypeDef.Func (select _x_10_2::_Tuple2 1) (select _x_10_2::_Tuple2 0) _predefined._Nil) (StdList.flatten (select _x_10_1::_Tuple2 1)))) ) ) (False -> case (StdList.all TypeDef.isCons ts_0) (True -> let lengths_7_0 = <{TypeUnify.c;169;28_39}> ts_0 in case (<{StdInt.==_16}> 1 (StdList.length_47 (StdList.removeDup_63 lengths_7_0))) (True -> let lists_9_0 = StdList.map TypeUnify.anon_40 ts_0, len_9_1::I = StdList.hd lengths_7_0, cpafs_9_2 = <{TypeUnify.c;174;63_42}> lists_9_0 0 len_9_1 in case (StdList.any Data.Maybe.isNothing cpafs_9_2) (True -> Data.Maybe.Nothing) (False -> let cfs_11_0 = StdList.map Data.Maybe.fromJust cpafs_9_2, _x_11_1 = _Tuple2 (StdList.map TypeUnify.fst_76 cfs_11_0) (StdList.map TypeUnify.snd_77 cfs_11_0), _x_11_2 = select _x_11_1::_Tuple2 0 in Data.Maybe.Just (_Tuple2 (TypeDef.Cons (select (select _x_11_2::_Tuple2 0)::_Tuple1 0) (select _x_11_2::_Tuple2 1)) (StdList.flatten (select _x_11_1::_Tuple2 1)))) ) (False -> let _x_9_0 = _Tuple2 (StdOrdList.minList_18 lengths_7_0) (StdOrdList.maxList_15 lengths_7_0), minlen_9_1 = select _x_9_0::_Tuple2 0, splits_9_2 = <{TypeUnify.c;181;49_44}> minlen_9_1 ts_0, rests_9_3::I = StdList.map TypeUnify.snd_78 splits_9_2, cpafs_9_4 = <{TypeUnify.c;184;59_47}> rests_9_3 0 (<{StdInt.-_7}> minlen_9_1 1) in case (StdList.any Data.Maybe.isNothing cpafs_9_4) (True -> Data.Maybe.Nothing) (False -> let types_11_0 = <{TypeUnify.c;182;78_45}> splits_9_2 ts_0, cpaf_11_1 = TypeUnify.commonPartAndFrontier types_11_0 in case (Data.Maybe.isNothing cpaf_11_1) (True -> Data.Maybe.Nothing) (False -> let _x_13_0 = Data.Maybe.fromJust cpaf_11_1, cp_13_1 = select _x_13_0::_Tuple2 0 in case (TypeDef.isCons cp_13_1) (True -> let cfs_15_1 = StdList.map Data.Maybe.fromJust cpafs_9_4, _x_15_2 = _Tuple2 (StdList.map TypeUnify.fst_79 cfs_15_1) (StdList.map TypeUnify.snd_80 cfs_15_1) in Data.Maybe.Just (_Tuple2 (TypeDef.Cons (select cp_13_1::_Tuple2 0) (<{StdList.++}> (select cp_13_1::_Tuple2 1) (select _x_15_2::_Tuple2 0))) (StdList.flatten (_predefined._Cons (select _x_13_0::_Tuple2 1) (select _x_15_2::_Tuple2 1))))) (False -> let cfs_15_0 = StdList.map Data.Maybe.fromJust cpafs_9_4, _x_15_1 = _Tuple2 (StdList.map TypeUnify.fst_79 cfs_15_0) (StdList.map TypeUnify.snd_80 cfs_15_0) in Data.Maybe.Just (_Tuple2 (TypeDef.Cons (select cp_13_1::_Tuple1 0) (select _x_15_1::_Tuple2 0)) (StdList.flatten (_predefined._Cons (select _x_13_0::_Tuple2 1) (select _x_15_1::_Tuple2 1))))) ) ) ) ) (False -> case (StdList.all TypeUnify.anon_48 ts_0) (True -> let types_8_0 = StdList.filter TypeDef.isType ts_0, cpaft_8_1 = TypeUnify.commonPartAndFrontier types_8_0 in case (Data.Maybe.isNothing cpaft_8_1) (True -> Data.Maybe.Nothing) (False -> let conses_10_0 = StdList.filter TypeDef.isCons ts_0, cpafc_10_1 = TypeUnify.commonPartAndFrontier conses_10_0 in case (Data.Maybe.isNothing cpafc_10_1) (True -> Data.Maybe.Nothing) (False -> let _x_12_0 = Data.Maybe.fromJust cpafc_10_1, cpc_12_1 = select _x_12_0::_Tuple2 0 in case (TypeDef.isVar cpc_12_1) (True -> let _x_14_0 = Data.Maybe.fromJust cpaft_8_1, cpt_14_1 = select _x_14_0::_Tuple2 0 in Data.Maybe.Just (_Tuple2 cpt_14_1 (<{StdList.++}> (_predefined._Cons (TypeUnify.ME (_predefined._Cons (select cpc_12_1::_Tuple1 0) _predefined._Nil) (_predefined._Cons cpt_14_1 _predefined._Nil)) _predefined._Nil) (<{StdList.++}> (select _x_14_0::_Tuple2 1) (select _x_12_0::_Tuple2 1))))) (False -> let _x_14_0 = Data.Maybe.fromJust cpaft_8_1, cpt_14_1 = select _x_14_0::_Tuple2 0, cptts_14_3 = select cpt_14_1::_Tuple2 1, cpcts_14_5 = select cpc_12_1::_Tuple2 1 in case (<{StdInt.<_17}> (StdList.length_47 cptts_14_3) (StdList.length_47 cpcts_14_5)) (True -> Data.Maybe.Nothing) (False -> let _x_16_0 = StdList.splitAt (<{StdInt.-_7}> (StdList.length_47 cptts_14_3) (StdList.length_47 cpcts_14_5)) cptts_14_3, cptts_unify_16_1 = select _x_16_0::_Tuple2 1, cpafs_16_2 = <{TypeUnify.c;212;64_49}> cptts_unify_16_1 cpcts_14_5 in case (StdList.any Data.Maybe.isNothing cpafs_16_2) (True -> Data.Maybe.Nothing) (False -> let cptts_curry_18_0 = select _x_16_0::_Tuple2 0, cfs_18_1 = StdList.map Data.Maybe.fromJust cpafs_16_2, _x_18_2 = _Tuple2 (StdList.map TypeUnify.fst_81 cfs_18_1) (StdList.map TypeUnify.snd_82 cfs_18_1), cps_18_3 = select _x_18_2::_Tuple2 0, cps_18_4 = <{StdList.++}> cptts_curry_18_0 cps_18_3 in case (StdList.isEmpty cps_18_4) (True -> Data.Maybe.Just (_Tuple2 (TypeDef.Var (select cpc_12_1::_Tuple2 0)) (<{StdList.++}> (StdList.flatten (select _x_18_2::_Tuple2 1)) (<{StdList.++}> (select _x_14_0::_Tuple2 1) (select _x_12_0::_Tuple2 1))))) (False -> let cpcv_20_0 = select cpc_12_1::_Tuple2 0 in Data.Maybe.Just (_Tuple2 (TypeDef.Cons cpcv_20_0 cps_18_4) (<{StdList.++}> (StdList.flatten (select _x_18_2::_Tuple2 1)) (<{StdList.++}> (_predefined._Cons (TypeUnify.ME (_predefined._Cons cpcv_20_0 _predefined._Nil) (_predefined._Cons (TypeDef.Type (select cpt_14_1::_Tuple2 0) cptts_curry_18_0) _predefined._Nil)) _predefined._Nil) (<{StdList.++}> (select _x_14_0::_Tuple2 1) (select _x_12_0::_Tuple2 1)))))) ) ) ) ) ) ) (False -> case (StdList.all TypeDef.isUniq ts_0) (True -> <{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.Maybe.fmap_12) TypeUnify.anon_50 (TypeUnify.commonPartAndFrontier (StdList.map TypeUnify.anon_51 ts_0))) (False -> Data.Maybe.Nothing) ) ) ) ) ) ) ) 
<{TypeUnify.g_c1;212;49_202}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons t_1_0 g_t_1_1 -> <{TypeUnify.g_c1;212;68_201}> g_l_1 t_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c1;212;68_201}> !g_l_0 t_1 g_t_2 = case g_l_0 (_predefined._Cons c_1_0 g_t_1_1 -> _predefined._Cons (TypeUnify.commonPartAndFrontier (_predefined._Cons t_1 (_predefined._Cons c_1_0 _predefined._Nil))) (<{TypeUnify.c;212;64_49}> g_t_2 g_t_1_1)) (_ -> _predefined._Nil)
<{TypeUnify.c;84;45_17}> !g_l_0 = <{TypeUnify.g_c1;84;50_203}> g_l_0
<{TypeUnify.g_c1;84;50_203}> !g_l_0 = case g_l_0 (_predefined._Cons f_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 0 f_1_0) (<{TypeUnify.c;84;45_17}> g_t_1_1)) (_ -> _predefined._Nil)
TypeUnify.lookup_25 vs_0 !_x_1 = case _x_1 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons me_1_0 mes_1_1 -> case me_1_0 (_Tuple2 i_2_0 _x_2_1 -> case _x_2_1 (TypeUnify.ME vars_3_0 _x_3_1 -> case (StdList.isEmpty (Data.List.intersect (<{StdOverloaded.==;}> <{StdString.==_2}>) vs_0 vars_3_0)) (True -> TypeUnify.lookup_25 vs_0 mes_1_1) (False -> Data.Maybe.Just me_1_0) ) ) ) 
<{TypeUnify.==_53}>::B !_x_0 !_x_1 = case _x_0 (TypeUnify.ME a_1_0 b_1_1 -> case _x_1 (TypeUnify.ME c_2_0 d_2_1 -> case (<{StdList.==_45}> (<{StdOverloaded.==;}> <{StdString.==_2}>) a_1_0 c_2_0) (True -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{TypeDef.==_22}>) b_1_1 d_2_1) (False -> False) ) ) 
TypeUnify.compactify_29 !_x_0 = case _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 mes_1_1 -> case _x_1_0 (_Tuple2 c_2_0 _x_2_1 -> case _x_2_1 (TypeUnify.ME vars_3_0 types_3_1 -> <{TypeUnify._c;124;42_204}> (TypeUnify.lookup_25 vars_3_0 mes_1_1) c_2_0 vars_3_0 types_3_1 mes_1_1) ) ) 
<{TypeUnify._c;124;42_204}> !_x_0 c_1::I vars_2 types_3 mes_4 = case _x_0 (Data.Maybe.Nothing -> _predefined._Cons (_Tuple2 c_1 (TypeUnify.ME vars_2 types_3)) (TypeUnify.compactify_29 mes_4)) (Data.Maybe.Just me_1_0 -> case me_1_0 (_Tuple2 c`_2_0 _x_2_1 -> case _x_2_1 (TypeUnify.ME vars`_3_0 types`_3_1 -> TypeUnify.compactify_29 (_predefined._Cons (_Tuple2 (<{StdInt.+_6}> c_1 <{c`_2_0}>) (TypeUnify.ME (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) (<{StdList.++}> vars_2 <{vars`_3_0}>)) (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{TypeDef.==_22}>)) (<{StdList.++}> types_3 <{types`_3_1}>)))) (StdList.removeMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> (<{StdTuple.==_4}> (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdInt.==_16}>)) (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{TypeUnify.==_53}>))))) me_1_0 mes_4))) ) ) 
TypeUnify.snd_67 !tuple_0 = select tuple_0::_Tuple2 1
<{TypeUnify.c;120;20_23}> v_0 !g_l_1 = <{TypeUnify.g_c1;120;33_206}> g_l_1 v_0
<{TypeUnify.g_c1;120;33_206}> !g_l_0 v_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;120;33_205}> g_h_1_0 v_1 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;120;33_205}> !g_h_0 v_1 g_t_2 = case g_h_0 (TypeUnify.ME _x_1_0 ts_1_1 -> _predefined._Cons (StdList.length_47 (StdList.filter (<{TypeDef.isVarOrCons`}> v_1) (StdList.flatten (StdList.map TypeDef.subtypes ts_1_1)))) (<{TypeUnify.c;120;20_23}> v_1 g_t_2)) (_ -> <{TypeUnify.c;120;20_23}> v_1 g_t_2)
TypeUnify.count_24::I !mes_0 v_1 = StdList.sum_72 (<{TypeUnify.c;120;20_23}> v_1 mes_0)
<{TypeUnify.c;113;45_22}> mes_0 !g_l_1 = <{TypeUnify.g_c1;113;64_208}> g_l_1 mes_0
<{TypeUnify.g_c1;113;64_208}> !g_l_0 mes_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{TypeUnify.g_c2;113;64_207}> g_h_1_0 mes_1 g_t_1_1) (_ -> _predefined._Nil)
<{TypeUnify.g_c2;113;64_207}> !g_h_0 mes_1 g_t_2 = case g_h_0 (TypeUnify.ME vars_1_0 _x_1_1 -> _predefined._Cons (_Tuple2 (StdList.sum_72 (StdList.map (TypeUnify.count_24 mes_1) vars_1_0)) g_h_0) (<{TypeUnify.c;113;45_22}> mes_1 g_t_2)) (_ -> <{TypeUnify.c;113;45_22}> mes_1 g_t_2)
TypeUnify.updateCounters_28 !eqs_0 = let mes_1_0 = StdList.map TypeUnify.snd_67 eqs_0 in <{TypeUnify.c;113;45_22}> mes_1_0 mes_1_0
<{TypeUnify.c;60;46_14}> ts_0 g_t_1 v_2 !g_l_3 = <{TypeUnify.g_c1;60;50_210}> g_l_3 v_2 ts_0 g_t_1
<{TypeUnify.c;60;36_15}> ts_0 !g_l_1 = <{TypeUnify.g_c1;60;41_209}> g_l_1 ts_0
<{TypeUnify.g_c1;60;50_210}> !g_l_0 v_1 ts_2 g_t_3 = case g_l_0 (_predefined._Cons t_1_0 g_t_1_1 -> _predefined._Cons (_Tuple2 v_1 t_1_0) (<{TypeUnify.c;60;46_14}> ts_2 g_t_3 v_1 g_t_1_1)) (_ -> <{TypeUnify.c;60;36_15}> ts_2 g_t_3)
<{TypeUnify.g_c1;60;41_209}> !g_l_0 ts_1 = case g_l_0 (_predefined._Cons v_1_0 g_t_1_1 -> <{TypeUnify.c;60;46_14}> ts_1 g_t_1_1 v_1_0 ts_1) (_ -> _predefined._Nil)
TypeUnify.allAssignments !_x_0 = case _x_0 (TypeUnify.ME vs_1_0 ts_1_1 -> <{TypeUnify.c;60;36_15}> ts_1_1 vs_1_0) 
TypeUnify.anon_18::B !_vEq_0 univars_1 !_x_2 = case _x_2 (_Tuple2 v_1_0 t_1_1 -> case (StdBool.not (TypeDef.isVar t_1_1)) (True -> StdList.isMember _vEq_0 v_1_0 univars_1) (False -> False) ) 
TypeUnify.anon_178::B !_x_0 !_x_1 = case _x_0 (_Tuple2 a_1_0 b_1_1 -> case _x_1 (_Tuple2 c_2_0 d_2_1 -> <{StdInt.<_17}> a_1_0 c_2_0) ) 
TypeUnify.anon_180 !g_0 x_1 = TypeUnify.allAssignments (g_0 x_1)
TypeUnify.anon_179::B univars_0 !_x_1 = case _x_1 (_Tuple2 v_1_0 t_1_1 -> case (StdBool.not (TypeDef.isVar t_1_1)) (True -> StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) v_1_0 univars_0) (False -> False) ) 
TypeUnify.anon_181 !x_0 = TypeUnify.allAssignments (TypeUnify.snd_83 x_0)
TypeUnify.unify2 !_x_0 = case _x_0 (TypeUnify._MESystem solved_1_0 unsolved_1_1 -> let unsolved_2_0 = StdOrdList.sortBy TypeUnify.anon_178 unsolved_1_1 in case (StdList.isEmpty unsolved_2_0) (True -> Data.Maybe.Just (TypeUnify.solution_26 solved_1_0)) (False -> let _x_4_0 = StdList.hd unsolved_2_0 in case (StdBool.not (<{StdInt.==_16}> (select _x_4_0::_Tuple2 0) 0)) (True -> Data.Maybe.Nothing) (False -> let me_6_0 = select _x_4_0::_Tuple2 1, types_6_2 = select me_6_0::_Tuple2 1 in case (StdList.isEmpty types_6_2) (True -> TypeUnify.unify2 (TypeUnify._MESystem (_predefined._Cons me_6_0 solved_1_0) (TypeUnify.removeFromCounters_27 (select me_6_0::_Tuple2 0) (StdList.tl unsolved_2_0)))) (False -> let cPaF_8_0 = TypeUnify.commonPartAndFrontier types_6_2 in case (Data.Maybe.isNothing cPaF_8_0) (True -> Data.Maybe.Nothing) (False -> let unsolved_10_0 = StdList.tl unsolved_2_0, _x_10_1 = Data.Maybe.fromJust cPaF_8_0, frontier_10_2 = select _x_10_1::_Tuple2 1, unsolved_10_3 = TypeUnify.updateCounters_28 (TypeUnify.compactify_29 (<{StdList.++}> unsolved_10_0 (<{TypeUnify.c;84;45_17}> frontier_10_2))) in case (StdList.any (TypeUnify.anon_179 (StdList.flatten (StdList.map TypeDef.allUniversalVars types_6_2))) (StdList.flatten (StdList.map TypeUnify.anon_181 unsolved_10_3))) (True -> Data.Maybe.Nothing) (False -> TypeUnify.unify2 (TypeUnify._MESystem (_predefined._Cons (TypeUnify.ME (select me_6_0::_Tuple2 0) (_predefined._Cons (select _x_10_1::_Tuple2 0) _predefined._Nil)) solved_1_0) unsolved_10_3)) ) ) ) ) ) 
TypeUnify.unify !_x_0 !t1_1 !t2_2 = TypeUnify.unify2 (TypeUnify.toMESystem t1_1 t2_2)
TypeUnify.toGenericClassOrGeneric_92 !x_0 = case x_0 (TypeDef.Class x11_1_0 -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.CONS x11_1_0))) (TypeDef.Generic x21_1_0 x22_1_1 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.CONS (StdGeneric.PAIR x21_1_0 x22_1_1)))) 
TypeUnify.toGenericKind_120 !x_0 = case x_0 (TypeDef.KindConst -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.CONS StdGeneric.UNIT))) (TypeDef.KindArrow x21_1_0 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.CONS x21_1_0))) 
TypeUnify.gEq_Kind_56::B x1_0 x2_1 = GenEq.gEq_OBJECT_13 (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 GenEq.gEq_UNIT_7) (GenEq.gEq_CONS_10 (GenEq.gEq__List_16 TypeUnify.gEq_Kind_56))) (TypeUnify.toGenericKind_120 x1_0) (TypeUnify.toGenericKind_120 x2_1)
TypeUnify.gEq_ClassOrGeneric_54::B x1_0 x2_1 = GenEq.gEq_OBJECT_13 (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 GenEq.gEq__String_6) (GenEq.gEq_CONS_10 (GenEq.gEq_PAIR_8 GenEq.gEq__String_6 TypeUnify.gEq_Kind_56))) (TypeUnify.toGenericClassOrGeneric_92 x1_0) (TypeUnify.toGenericClassOrGeneric_92 x2_1)
TypeUnify.toGenericType_111 !x_0 = case x_0 (TypeDef.Type x11_1_0 x12_1_1 -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.LEFT (StdGeneric.CONS (StdGeneric.PAIR x11_1_0 x12_1_1))))) (TypeDef.Func x21_1_0 x22_1_1 x23_1_2 -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.RIGHT (StdGeneric.LEFT (StdGeneric.CONS (StdGeneric.PAIR x21_1_0 (StdGeneric.PAIR x22_1_1 x23_1_2))))))) (TypeDef.Var x31_1_0 -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.RIGHT (StdGeneric.RIGHT (StdGeneric.CONS x31_1_0))))) (TypeDef.Cons x41_1_0 x42_1_1 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.LEFT (StdGeneric.LEFT (StdGeneric.CONS (StdGeneric.PAIR x41_1_0 x42_1_1)))))) (TypeDef.Uniq x51_1_0 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.LEFT (StdGeneric.RIGHT (StdGeneric.CONS x51_1_0))))) (TypeDef.Forall x61_1_0 x62_1_1 x63_1_2 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.RIGHT (StdGeneric.LEFT (StdGeneric.CONS (StdGeneric.PAIR x61_1_0 (StdGeneric.PAIR x62_1_1 x63_1_2))))))) (TypeDef.Arrow x71_1_0 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.RIGHT (StdGeneric.RIGHT (StdGeneric.CONS x71_1_0))))) 
TypeUnify.gEq_Type_55::B x1_0 x2_1 = GenEq.gEq_OBJECT_13 (GenEq.gEq_EITHER_9 (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 (GenEq.gEq_PAIR_8 GenEq.gEq__String_6 (GenEq.gEq__List_16 TypeUnify.gEq_Type_55))) (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 (GenEq.gEq_PAIR_8 (GenEq.gEq__List_16 TypeUnify.gEq_Type_55) (GenEq.gEq_PAIR_8 TypeUnify.gEq_Type_55 (GenEq.gEq__List_16 (GenEq.gEq__Tuple2_17 TypeUnify.gEq_ClassOrGeneric_54 TypeUnify.gEq_Type_55))))) (GenEq.gEq_CONS_10 GenEq.gEq__String_6))) (GenEq.gEq_EITHER_9 (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 (GenEq.gEq_PAIR_8 GenEq.gEq__String_6 (GenEq.gEq__List_16 TypeUnify.gEq_Type_55))) (GenEq.gEq_CONS_10 TypeUnify.gEq_Type_55)) (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 (GenEq.gEq_PAIR_8 (GenEq.gEq__List_16 TypeUnify.gEq_Type_55) (GenEq.gEq_PAIR_8 TypeUnify.gEq_Type_55 (GenEq.gEq__List_16 (GenEq.gEq__Tuple2_17 TypeUnify.gEq_ClassOrGeneric_54 TypeUnify.gEq_Type_55))))) (GenEq.gEq_CONS_10 (Data.Maybe.gEq_Maybe_13 TypeUnify.gEq_Type_55))))) (TypeUnify.toGenericType_111 x1_0) (TypeUnify.toGenericType_111 x2_1)
<{TypeUnify.TD;MultiEq}> _x_0::B = _predefined._Nil
<{TypeUnify.TD;MESystem}> _x_0::B = _predefined._Nil
<{TypeUnify.TD;CommonPart}> _x_0::B = _predefined._Nil
<{TypeUnify.TD;Frontier}> _x_0::B = _predefined._Nil

:: TypeUnify.MultiEq = TypeUnify.ME !a1 !a2

|| Converted Records
:: TypeUnify._MESystem = {!TypeUnify.solved, !TypeUnify.unsolved}

:: <{TypeUnify.gEq_s;}> = {!TypeUnify.gEq_s}

:: <{TypeUnify.gEq_ss;}> = {!TypeUnify.gEq_ss}

:: <{TypeUnify.gEq_sss;}> = {!TypeUnify.gEq_sss}

:: <{TypeUnify.gEq_ssss;}> = {!TypeUnify.gEq_ssss}

:: <{TypeUnify.gEq_sssss;}> = {!TypeUnify.gEq_sssss}

:: <{TypeUnify.gEq_ssssss;}> = {!TypeUnify.gEq_ssssss}

:: <{TypeUnify.gEq_sssssss;}> = {!TypeUnify.gEq_sssssss}

:: <{TypeUnify.gEq_ssssssss;}> = {!TypeUnify.gEq_ssssssss}

:: <{TypeUnify.gEq_sssssssss;}> = {!TypeUnify.gEq_sssssssss}

:: <{TypeUnify.bimap_s;}> = {TypeUnify.bimap_s}

:: <{TypeUnify.bimap_ss;}> = {TypeUnify.bimap_ss}

:: <{TypeUnify.bimap_sss;}> = {TypeUnify.bimap_sss}

