|| ?module? typeproperties


typeproperties.EmptyTypeClassification = typeproperties._TypeClassification typeproperties.BT_Empty typeproperties.BT_Empty
typeproperties.signClassToSign !_x_0 !index_1::I = case _x_0 (typeproperties._SignClassification sc_pos_vect_1_0 sc_neg_vect_1_1 -> typeproperties._Sign (StdBool.not (<{StdInt.==_16}> (StdInt.bitand sc_pos_vect_1_0 (<{StdInt.<<}> 1 index_1)) 0)) (StdBool.not (<{StdInt.==_16}> (StdInt.bitand sc_neg_vect_1_1 (<{StdInt.<<}> 1 index_1)) 0))) 
typeproperties.treeRetrieve !<{_v=<_0}> !_vkey_1 !search_key_2 !_x_3 = case _x_3 (typeproperties.BT_Empty -> general.No) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> let cmp_2_0::I = select <{_v=<_0}>::<{compare_types.=<;}> 0 search_key_2 (select _vkey_1::<{typeproperties.key;}> 0 el_1_0) in case (<{StdInt.==_16}> cmp_2_0 0) (True -> general.Yes el_1_0) (False -> case (<{StdInt.==_16}> cmp_2_0 -1) (True -> typeproperties.treeRetrieve <{_v=<_0}> _vkey_1 search_key_2 left_1_1) (False -> typeproperties.treeRetrieve <{_v=<_0}> _vkey_1 search_key_2 right_1_2) ) ) 
typeproperties.key_23 !_x_0 = case _x_0 (typeproperties._TypeSign ts_cons_var_signs_1_0 ts_type_sign_1_1 -> ts_cons_var_signs_1_0) 
<{typeproperties.=<_26}>::I !sc1_0 !sc2_1 = case (<{StdInt.==_16}> (select sc1_0::typeproperties._SignClassification 0) (select sc2_1::typeproperties._SignClassification 0)) (True -> case (<{StdInt.==_16}> (select sc1_0::typeproperties._SignClassification 1) (select sc2_1::typeproperties._SignClassification 1)) (True -> 0) (False -> case (<{StdInt.<_17}> (select sc1_0::typeproperties._SignClassification 1) (select sc2_1::typeproperties._SignClassification 1)) (True -> -1) (False -> 1) ) ) (False -> case (<{StdInt.<_17}> (select sc1_0::typeproperties._SignClassification 0) (select sc2_1::typeproperties._SignClassification 0)) (True -> -1) (False -> 1) ) 
typeproperties.treeRetrieve_33 !_vkey_0 !search_key_1 !_x_2 = case _x_2 (typeproperties.BT_Empty -> general.No) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> let cmp_2_0::I = <{compare_types.=<_7}> (<{compare_types.=<;}> <{typeproperties.=<_26}>) search_key_1 (select _vkey_0::<{typeproperties.key;}> 0 el_1_0) in case (<{StdInt.==_16}> cmp_2_0 0) (True -> general.Yes el_1_0) (False -> case (<{StdInt.==_16}> cmp_2_0 -1) (True -> typeproperties.treeRetrieve_33 _vkey_0 search_key_1 left_1_1) (False -> typeproperties.treeRetrieve_33 _vkey_0 search_key_1 right_1_2) ) ) 
typeproperties.treeRetrieve_34 !search_key_0 !_x_1 = case _x_1 (typeproperties.BT_Empty -> general.No) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> let cmp_2_0::I = <{compare_types.=<_7}> (<{compare_types.=<;}> <{typeproperties.=<_26}>) search_key_0 (typeproperties.key_23 el_1_0) in case (<{StdInt.==_16}> cmp_2_0 0) (True -> general.Yes el_1_0) (False -> case (<{StdInt.==_16}> cmp_2_0 -1) (True -> typeproperties.treeRetrieve_34 search_key_0 left_1_1) (False -> typeproperties.treeRetrieve_34 search_key_0 right_1_2) ) ) 
typeproperties.retrieveSignClassification !cons_classes_0 !_x_1 = case _x_1 (typeproperties._TypeClassification tc_signs_1_0 tc_props_1_1 -> typeproperties.treeRetrieve_34 cons_classes_0 tc_signs_1_0) 
typeproperties.key_24 !_x_0 = case _x_0 (typeproperties._TypeProp ts_cons_var_props_1_0 ts_type_prop_1_1 -> ts_cons_var_props_1_0) 
typeproperties.treeRetrieve_35 !_vkey_0 !search_key_1 !_x_2 = case _x_2 (typeproperties.BT_Empty -> general.No) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> let cmp_2_0::I = <{compare_types.=<_7}> (<{compare_types.=<;}> <{compare_types.=<_3}>) search_key_1 (select _vkey_0::<{typeproperties.key;}> 0 el_1_0) in case (<{StdInt.==_16}> cmp_2_0 0) (True -> general.Yes el_1_0) (False -> case (<{StdInt.==_16}> cmp_2_0 -1) (True -> typeproperties.treeRetrieve_35 _vkey_0 search_key_1 left_1_1) (False -> typeproperties.treeRetrieve_35 _vkey_0 search_key_1 right_1_2) ) ) 
typeproperties.treeRetrieve_36 !search_key_0 !_x_1 = case _x_1 (typeproperties.BT_Empty -> general.No) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> let cmp_2_0::I = <{compare_types.=<_7}> (<{compare_types.=<;}> <{compare_types.=<_3}>) search_key_0 (typeproperties.key_24 el_1_0) in case (<{StdInt.==_16}> cmp_2_0 0) (True -> general.Yes el_1_0) (False -> case (<{StdInt.==_16}> cmp_2_0 -1) (True -> typeproperties.treeRetrieve_36 search_key_0 left_1_1) (False -> typeproperties.treeRetrieve_36 search_key_0 right_1_2) ) ) 
typeproperties.retrievePropClassification !cons_classes_0 !_x_1 = case _x_1 (typeproperties._TypeClassification tc_signs_1_0 tc_props_1_1 -> typeproperties.treeRetrieve_36 cons_classes_0 tc_props_1_1) 
typeproperties.treeInsert !<{_v=<_0}> !_vkey_1 !new_key_2 !el_3 !_x_4 = case _x_4 (typeproperties.BT_Empty -> typeproperties.BT_Node el_3 typeproperties.BT_Empty typeproperties.BT_Empty) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> case (<{StdInt.==_16}> (select <{_v=<_0}>::<{compare_types.=<;}> 0 new_key_2 (select _vkey_1::<{typeproperties.key;}> 0 el_1_0)) -1) (True -> typeproperties.BT_Node el_1_0 (typeproperties.treeInsert <{_v=<_0}> _vkey_1 new_key_2 el_3 left_1_1) right_1_2) (False -> typeproperties.BT_Node el_1_0 left_1_1 (typeproperties.treeInsert <{_v=<_0}> _vkey_1 new_key_2 el_3 right_1_2)) ) 
typeproperties.treeInsert_37 !_vkey_0 !new_key_1 !el_2 !_x_3 = case _x_3 (typeproperties.BT_Empty -> typeproperties.BT_Node el_2 typeproperties.BT_Empty typeproperties.BT_Empty) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> case (<{StdInt.==_16}> (<{compare_types.=<_7}> (<{compare_types.=<;}> <{typeproperties.=<_26}>) new_key_1 (select _vkey_0::<{typeproperties.key;}> 0 el_1_0)) -1) (True -> typeproperties.BT_Node el_1_0 (typeproperties.treeInsert_37 _vkey_0 new_key_1 el_2 left_1_1) right_1_2) (False -> typeproperties.BT_Node el_1_0 left_1_1 (typeproperties.treeInsert_37 _vkey_0 new_key_1 el_2 right_1_2)) ) 
typeproperties.treeInsert_38 !new_key_0 !el_1 !_x_2 = case _x_2 (typeproperties.BT_Empty -> typeproperties.BT_Node el_1 typeproperties.BT_Empty typeproperties.BT_Empty) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> case (<{StdInt.==_16}> (<{compare_types.=<_7}> (<{compare_types.=<;}> <{typeproperties.=<_26}>) new_key_0 (typeproperties.key_23 el_1_0)) -1) (True -> typeproperties.BT_Node el_1_0 (typeproperties.treeInsert_38 new_key_0 el_1 left_1_1) right_1_2) (False -> typeproperties.BT_Node el_1_0 left_1_1 (typeproperties.treeInsert_38 new_key_0 el_1 right_1_2)) ) 
typeproperties.addSignClassification !hio_signs_0 !sign_class_1 !tc_2 = case tc_2 (typeproperties._TypeClassification tc_signs_1_0 tc_props_1_1 -> update tc_2::typeproperties._TypeClassification [0:typeproperties.treeInsert_38 hio_signs_0 (typeproperties._TypeSign hio_signs_0 sign_class_1) tc_signs_1_0]) 
typeproperties.treeInsert_39 !_vkey_0 !new_key_1 !el_2 !_x_3 = case _x_3 (typeproperties.BT_Empty -> typeproperties.BT_Node el_2 typeproperties.BT_Empty typeproperties.BT_Empty) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> case (<{StdInt.==_16}> (<{compare_types.=<_7}> (<{compare_types.=<;}> <{compare_types.=<_3}>) new_key_1 (select _vkey_0::<{typeproperties.key;}> 0 el_1_0)) -1) (True -> typeproperties.BT_Node el_1_0 (typeproperties.treeInsert_39 _vkey_0 new_key_1 el_2 left_1_1) right_1_2) (False -> typeproperties.BT_Node el_1_0 left_1_1 (typeproperties.treeInsert_39 _vkey_0 new_key_1 el_2 right_1_2)) ) 
typeproperties.treeInsert_40 !new_key_0 !el_1 !_x_2 = case _x_2 (typeproperties.BT_Empty -> typeproperties.BT_Node el_1 typeproperties.BT_Empty typeproperties.BT_Empty) (typeproperties.BT_Node el_1_0 left_1_1 right_1_2 -> case (<{StdInt.==_16}> (<{compare_types.=<_7}> (<{compare_types.=<;}> <{compare_types.=<_3}>) new_key_0 (typeproperties.key_24 el_1_0)) -1) (True -> typeproperties.BT_Node el_1_0 (typeproperties.treeInsert_40 new_key_0 el_1 left_1_1) right_1_2) (False -> typeproperties.BT_Node el_1_0 left_1_1 (typeproperties.treeInsert_40 new_key_0 el_1 right_1_2)) ) 
typeproperties.addPropClassification !hio_props_0 !prop_class_1::I !tc_2 = case tc_2 (typeproperties._TypeClassification tc_signs_1_0 tc_props_1_1 -> update tc_2::typeproperties._TypeClassification [1:typeproperties.treeInsert_40 hio_props_0 (typeproperties._TypeProp hio_props_0 prop_class_1) tc_props_1_1]) 
<{typeproperties.<<<_6}> !file_0 !_x_1 = case _x_1 (typeproperties._Sign pos_sign_1_0 neg_sign_1_1 -> case pos_sign_1_0 (True -> case neg_sign_1_1 (True -> <{StdFile.<<<_38}> file_0 "T") (False -> <{StdFile.<<<_38}> file_0 "+") ) (False -> case neg_sign_1_1 (True -> <{StdFile.<<<_38}> file_0 "-") (False -> <{StdFile.<<<_38}> file_0 "L") ) ) 
<{typeproperties.*_7}> !sign1_0 !sign2_1 = case (select sign1_0::typeproperties._Sign 0) (True -> case (select sign1_0::typeproperties._Sign 1) (True -> sign1_0) (False -> sign2_1) ) (False -> case (select sign1_0::typeproperties._Sign 1) (True -> typeproperties._Sign (select sign2_1::typeproperties._Sign 1) (select sign2_1::typeproperties._Sign 0)) (False -> sign1_0) ) 
typeproperties.key_25 !_x_0 = case _x_0 (typeproperties._VarBind vb_number_1_0 vb_value_1_1 -> vb_number_1_0) 
<{typeproperties.TD;TypeClassification}> _x_0::B = _predefined._Nil
<{typeproperties.TD;SignClassification}> _x_0::B = _predefined._Nil
<{typeproperties.TD;PropClassification}> _x_0::B = _predefined._Nil
<{typeproperties.TD;Sign}> _x_0::B = _predefined._Nil
<{typeproperties.TD;TypeSign}> _x_0::B = _predefined._Nil
<{typeproperties.TD;TypeProp}> _x_0::B = _predefined._Nil
<{typeproperties.TD;VarBind}> _x_0::B = _predefined._Nil
<{typeproperties.TD;TypeSignTree}> _x_0::B = _predefined._Nil
<{typeproperties.TD;TypePropTree}> _x_0::B = _predefined._Nil
<{typeproperties.TD;EnvTree}> _x_0::B = _predefined._Nil
<{typeproperties.TD;BinTree}> _x_0::B = _predefined._Nil
<{typeproperties.TD;key;}> _x_0::B = _predefined._Nil

:: typeproperties.BinTree = typeproperties.BT_Node !a1 !a2 !a3 | typeproperties.BT_Empty

|| Converted Records
:: typeproperties._TypeClassification = {typeproperties.tc_signs, typeproperties.tc_props}

:: typeproperties._SignClassification = {!typeproperties.sc_pos_vect, !typeproperties.sc_neg_vect}

:: typeproperties._Sign = {!typeproperties.pos_sign::B, !typeproperties.neg_sign::B}

:: typeproperties._TypeSign = {!typeproperties.ts_cons_var_signs, !typeproperties.ts_type_sign}

:: typeproperties._TypeProp = {!typeproperties.ts_cons_var_props, !typeproperties.ts_type_prop}

:: typeproperties._VarBind = {!typeproperties.vb_number, !typeproperties.vb_value}

:: <{typeproperties.key;}> = {!typeproperties.key}

