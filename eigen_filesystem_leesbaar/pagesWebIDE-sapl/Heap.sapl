|| ?module? Heap


Heap.newHeap = Heap._Heap (Heap.Heap 0)
Heap.make_nilPtr = error "no AnyCodeExpr"
Heap.nilPtr =: Heap.make_nilPtr
Heap.isNilPtr::B !p_0 = error "no AnyCodeExpr"
Heap.newPtr !v_0 !h_1 = error "no AnyCodeExpr"
Heap.readPtr !p_0 !h_1 = error "no AnyCodeExpr"
Heap.writePtr !p_0 !v_1 !h_2 = error "no AnyCodeExpr"
Heap.sreadPtr !p_0 !h_1 = error "no AnyCodeExpr"
Heap.allocPtr = error "no AnyCodeExpr"
Heap.initPtr !p_0 !v_1 !h_2 !w_3 = error "no AnyCodeExpr"
Heap.ptrToInt2::I !p_0 = error "no AnyCodeExpr"
Heap.ptrToInt::I !p_0 = case (Heap.isNilPtr p_0) (True -> 0) (False -> Heap.ptrToInt2 p_0) 
<{Heap.==_10}>::B !p1_0 !p2_1 = error "no AnyCodeExpr"
<{Heap.TD;Heap}> _x_0::B = _predefined._Nil
<{Heap.TD;HeapN}> _x_0::B = _predefined._Nil
<{Heap.TD;Ptr}> _x_0::B = _predefined._Nil
<{Heap.TD;PtrN}> _x_0::B = _predefined._Nil

:: Heap.PtrN = Heap.Ptr !a1 !a2
:: Heap.HeapN = Heap.Heap !a1::I

|| Converted Records
:: Heap._Heap = {!Heap.heap}

:: Heap._Ptr = {!Heap.pointer}

