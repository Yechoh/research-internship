|| ?module? containers


containers.addNr !n_0::I !_x_1 = case _x_1 (containers.EndNumbers -> case (<{StdInt.<_17}> n_0 32) (True -> containers.Numbers (<{StdInt.<<}> 1 n_0) containers.EndNumbers) (False -> containers.Numbers 0 (containers.addNr (<{StdInt.-_7}> n_0 32) containers.EndNumbers)) ) (containers.Numbers module_numbers_1_0 rest_module_numbers_1_1 -> case (<{StdInt.<_17}> n_0 32) (True -> containers.Numbers (StdInt.bitor module_numbers_1_0 (<{StdInt.<<}> 1 n_0)) rest_module_numbers_1_1) (False -> containers.Numbers module_numbers_1_0 (containers.addNr (<{StdInt.-_7}> n_0 32) rest_module_numbers_1_1)) ) 
containers.inNumberSet::B !n_0::I !_x_1 = case _x_1 (containers.EndNumbers -> False) (containers.Numbers module_numbers_1_0 rest_module_numbers_1_1 -> case (<{StdInt.<_17}> n_0 32) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand module_numbers_1_0 (<{StdInt.<<}> 1 n_0)) 0)) (False -> containers.inNumberSet (<{StdInt.-_7}> n_0 32) rest_module_numbers_1_1) ) 
containers.numberSetUnion !_x_0 !x_1 = case _x_0 (containers.EndNumbers -> x_1) (_ -> case x_1 (containers.EndNumbers -> _x_0) (containers.Numbers i2_1_0 tail2_1_1 -> case _x_0 (containers.Numbers i1_2_0 tail1_2_1 -> containers.Numbers (StdInt.bitor i1_2_0 i2_1_0) (containers.numberSetUnion tail1_2_1 tail2_1_1)) ) )
containers.nsFromTo !i_0::I = case (StdBool.not (<{StdInt.<_17}> 0 i_0)) (True -> containers.EndNumbers) (False -> case (StdBool.not (<{StdInt.<_17}> 31 i_0)) (True -> containers.Numbers (StdInt.bitnot (<{StdInt.<<}> -1 i_0)) containers.EndNumbers) (False -> containers.Numbers -1 (containers.nsFromTo (<{StdInt.-_7}> i_0 32))) ) 
containers.loop2_59 !_vArray_0 a_1 !_x_2::I !accu_3 = case _x_2 (-1 -> accu_3) (_ -> containers.loop2_59 _vArray_0 a_1 (<{StdInt.-_7}> _x_2 1) (containers.Numbers (select _vArray_0::<{_SystemArray.Array;}> 3 a_1 _x_2) accu_3))
containers.loop_58 !_vArray_0 a_1 !_x_2::I = case _x_2 (-1 -> containers.EndNumbers) (_ -> case (<{StdInt.==_16}> (select _vArray_0::<{_SystemArray.Array;}> 3 a_1 _x_2) 0) (True -> containers.loop_58 _vArray_0 a_1 (<{StdInt.-_7}> _x_2 1)) (False -> containers.loop2_59 _vArray_0 a_1 _x_2 containers.EndNumbers) )
containers.loop2_80 a_0 !_x_1::I !accu_2 = case _x_1 (-1 -> accu_2) (_ -> containers.loop2_80 a_0 (<{StdInt.-_7}> _x_1 1) (containers.Numbers (_SystemArray.select_11 a_0 _x_1) accu_2))
containers.loop_79 a_0 !_x_1::I = case _x_1 (-1 -> containers.EndNumbers) (_ -> case (<{StdInt.==_16}> (_SystemArray.select_11 a_0 _x_1) 0) (True -> containers.loop_79 a_0 (<{StdInt.-_7}> _x_1 1)) (False -> containers.loop2_80 a_0 _x_1 containers.EndNumbers) )
containers.bitvectToNumberSet !a_0 = containers.loop_79 a_0 (<{StdInt.-_7}> (_SystemArray.size_12 a_0) 1)
containers.last_one_bit_in_byte_57 !i_0::I !n_1::I = let mask_1_0::I = <{StdInt.<<}> 1 i_0 in case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand n_1 mask_1_0) 0)) (True -> <{_Tuple2!3}> i_0 mask_1_0) (False -> containers.last_one_bit_in_byte_57 (<{StdInt.-_7}> i_0 1) n_1) 
containers.last_one_bit_56 !n_0::I = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand n_0 4278190080) 0)) (True -> containers.last_one_bit_in_byte_57 31 n_0) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand n_0 16711680) 0)) (True -> containers.last_one_bit_in_byte_57 23 n_0) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand n_0 65280) 0)) (True -> containers.last_one_bit_in_byte_57 15 n_0) (False -> containers.last_one_bit_in_byte_57 7 n_0) ) ) 
containers.add_numbers_in_word_55 !n_0::I !i_1::I rest_l_2 = case (<{StdInt.==_16}> n_0 0) (True -> rest_l_2) (False -> let _x_2_0 = containers.last_one_bit_56 n_0 in containers.add_numbers_in_word_55 (StdInt.bitand n_0 (StdInt.bitnot (select _x_2_0::_Tuple2 1))) i_1 (_predefined._Cons (<{StdInt.+_6}> (select _x_2_0::_Tuple2 0) i_1) rest_l_2)) 
containers.numberset_to_list_54 !_x_0 !i_1::I = case _x_0 (containers.EndNumbers -> _predefined._Nil) (containers.Numbers n_1_0 rest_ns_1_1 -> containers.add_numbers_in_word_55 n_1_0 i_1 (containers.numberset_to_list_54 rest_ns_1_1 (<{StdInt.+_6}> i_1 32))) 
containers.numberSetToList !ns_0 = containers.numberset_to_list_54 ns_0 0
containers.bitvectCreate !_x_0::I = case _x_0 (0 -> _SystemArray._createArray_8 0) (_ -> _SystemArray.createArray_9 (<{StdInt.+_6}> (<{StdInt.>>}> (<{StdInt.-_7}> _x_0 1) 5) 1) 0)
containers.bitvectSelect::B !index_0::I !a_1 = StdBool.not (<{StdInt.==_16}> (StdInt.bitand (_SystemArray.select_11 a_1 (<{StdInt.>>}> index_0 5)) (<{StdInt.<<}> 1 (StdInt.bitand index_0 31))) 0)
containers.bitvectTestAndSet !index_0::I !a_1 = let !a_bit_index_1_0::I = _SystemArray.select_11 a_1 bit_index_1_2, new_a_bit_index_1_1::I = StdInt.bitor a_bit_index_1_0 (<{StdInt.<<}> 1 (StdInt.bitand index_0 31)), bit_index_1_2::I = <{StdInt.>>}> index_0 5 in <{_Tuple2!3}> (<{StdInt.==_16}> new_a_bit_index_1_1 a_bit_index_1_0) (_SystemArray.update_13 a_1 bit_index_1_2 new_a_bit_index_1_1)
containers.bitvectSet !index_0::I !a_1 = let !bit_index_1_0::I = <{StdInt.>>}> index_0 5, !a_bit_index_1_1::I = _SystemArray.select_11 a_1 bit_index_1_0 in _SystemArray.update_13 a_1 bit_index_1_0 (StdInt.bitor a_bit_index_1_1 (<{StdInt.<<}> 1 (StdInt.bitand index_0 31)))
containers.bitvectReset !index_0::I !a_1 = let !bit_index_1_0::I = <{StdInt.>>}> index_0 5, !a_bit_index_1_1::I = _SystemArray.select_11 a_1 bit_index_1_0 in _SystemArray.update_13 a_1 bit_index_1_0 (StdInt.bitand a_bit_index_1_1 (StdInt.bitnot (<{StdInt.<<}> 1 (StdInt.bitand index_0 31))))
containers.set_bits_60 !_vArray_0 index_1::I !n_bits_2::I a_3 = case (StdBool.not (<{StdInt.<_17}> 0 n_bits_2)) (True -> a_3) (False -> case (<{StdInt.<_17}> n_bits_2 32) (True -> let _x_3_0 = select _vArray_0::<{_SystemArray.Array;}> 6 a_3 index_1 in select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_3_0::_Tuple2 1) index_1 (StdInt.bitor (select _x_3_0::_Tuple2 0) (StdInt.bitnot (<{StdInt.<<}> -1 n_bits_2)))) (False -> containers.set_bits_60 _vArray_0 (<{StdInt.+_6}> index_1 1) (<{StdInt.-_7}> n_bits_2 32) (select _vArray_0::<{_SystemArray.Array;}> 5 a_3 index_1 -1)) ) 
containers.set_bits_81 index_0::I !n_bits_1::I !a_2 = case (StdBool.not (<{StdInt.<_17}> 0 n_bits_1)) (True -> a_2) (False -> case (<{StdInt.<_17}> n_bits_1 32) (True -> let _x_3_0 = _SystemArray.uselect_14 a_2 index_0 in _SystemArray.update_13 (select _x_3_0::_Tuple2 1) index_0 (StdInt.bitor (select _x_3_0::_Tuple2 0) (StdInt.bitnot (<{StdInt.<<}> -1 n_bits_1)))) (False -> containers.set_bits_81 (<{StdInt.+_6}> index_0 1) (<{StdInt.-_7}> n_bits_1 32) (_SystemArray.update_13 a_2 index_0 -1)) ) 
containers.bitvectSetFirstN !n_bits_0::I !a_1 = containers.set_bits_81 0 n_bits_0 a_1
<{containers.cu;173;23_61}> !_vArray_0 a_1 !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> <{containers.cu;173;23_61}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 a_1 i_2 0) (<{StdInt.+_6}> i_2 StdInt.one_11) g_s_3) (False -> a_1) 
<{containers.cu;173;23_82}> !a_0 !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> <{containers.cu;173;23_82}> (_SystemArray.update_13 a_0 i_1 0) (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2) (False -> a_0) 
containers.bitvectResetAll !arr_0 = let !size_1_0::I = _SystemArray.size_12 arr_0 in <{containers.cu;173;23_82}> arr_0 0 (<{StdInt.-_7}> size_1_0 1)
containers.add_strictness !index_0::I !_x_1 = case _x_1 (syntax.NotStrict -> case (<{StdInt.<_17}> index_0 32) (True -> syntax.Strict (<{StdInt.<<}> 1 index_0)) (False -> syntax.StrictList 0 (containers.add_strictness (<{StdInt.-_7}> index_0 32) syntax.NotStrict)) ) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> index_0 32) (True -> syntax.Strict (StdInt.bitor s_1_0 (<{StdInt.<<}> 1 index_0))) (False -> syntax.StrictList s_1_0 (containers.add_strictness (<{StdInt.-_7}> index_0 32) syntax.NotStrict)) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> index_0 32) (True -> syntax.StrictList (StdInt.bitor s_1_0 (<{StdInt.<<}> 1 index_0)) l_1_1) (False -> syntax.StrictList s_1_0 (containers.add_strictness (<{StdInt.-_7}> index_0 32) l_1_1)) ) 
containers.first_n_strict !_x_0::I = case _x_0 (0 -> syntax.NotStrict) (_ -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.Strict (StdInt.bitnot (<{StdInt.<<}> -1 _x_0))) (False -> syntax.StrictList -1 (containers.first_n_strict (<{StdInt.-_7}> _x_0 32))) )
containers.shift_or !_x_0 n_1::I !s2_2::I = case _x_0 (syntax.NotStrict -> case (<{StdInt.==_16}> s2_2 0) (True -> syntax.NotStrict) (False -> syntax.Strict s2_2) ) (syntax.Strict s_1_0 -> let new_s2_2_0::I = <{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 n_1) in case (<{StdInt.==_16}> new_s2_2_0 0) (True -> syntax.Strict (StdInt.bitor (<{StdInt.<<}> s_1_0 n_1) s2_2)) (False -> syntax.StrictList (StdInt.bitor (<{StdInt.<<}> s_1_0 n_1) s2_2) (syntax.Strict new_s2_2_0)) ) (syntax.StrictList s_1_0 l_1_1 -> syntax.StrictList (StdInt.bitor (<{StdInt.<<}> s_1_0 n_1) s2_2) (containers.shift_or l_1_1 n_1 (<{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 n_1)))) 
containers.insert_n_strictness_values_at_beginning !_x_0::I !s_1 = case _x_0 (0 -> s_1) (_ -> case s_1 (syntax.NotStrict -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.Strict (StdInt.bitnot (<{StdInt.<<}> -1 _x_0))) (False -> syntax.StrictList -1 (containers.first_n_strict (<{StdInt.-_7}> _x_0 32))) ) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> _x_0 32) (True -> let s2_3_0::I = <{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 _x_0) in case (<{StdInt.==_16}> s2_3_0 0) (True -> syntax.Strict (StdInt.bitor (StdInt.bitnot (<{StdInt.<<}> -1 _x_0)) (<{StdInt.<<}> s_1_0 _x_0))) (False -> syntax.StrictList (StdInt.bitor (StdInt.bitnot (<{StdInt.<<}> -1 _x_0)) (<{StdInt.<<}> s_1_0 _x_0)) (syntax.Strict s2_3_0)) ) (False -> syntax.StrictList -1 (containers.first_n_strict (<{StdInt.-_7}> _x_0 32))) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.StrictList (StdInt.bitor (StdInt.bitnot (<{StdInt.<<}> -1 _x_0)) (<{StdInt.<<}> s_1_0 _x_0)) (containers.shift_or l_1_1 _x_0 (<{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 _x_0)))) (False -> syntax.StrictList -1 (containers.insert_n_strictness_values_at_beginning (<{StdInt.-_7}> _x_0 32) l_1_1)) ) )
containers.insert_n_lazy_values_at_beginning !_x_0::I !s_1 = case _x_0 (0 -> s_1) (_ -> case s_1 (syntax.NotStrict -> syntax.NotStrict) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> _x_0 32) (True -> let s2_3_0::I = <{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 _x_0) in case (<{StdInt.==_16}> s2_3_0 0) (True -> syntax.Strict (<{StdInt.<<}> s_1_0 _x_0)) (False -> syntax.StrictList (<{StdInt.<<}> s_1_0 _x_0) (syntax.Strict s2_3_0)) ) (False -> syntax.StrictList -1 (containers.first_n_strict (<{StdInt.-_7}> _x_0 32))) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.StrictList (<{StdInt.<<}> s_1_0 _x_0) (containers.shift_or l_1_1 _x_0 (<{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> 31 _x_0)))) (False -> syntax.StrictList -1 (containers.insert_n_lazy_values_at_beginning (<{StdInt.-_7}> _x_0 32) l_1_1)) ) )
containers.arg_strictness_annotation !_x_0::I !_x_1 = case _x_1 (syntax.NotStrict -> syntax.AN_None) (syntax.Strict s_1_0 -> case (case (<{StdInt.<_17}> _x_0 32) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand s_1_0 (<{StdInt.<<}> 1 _x_0)) 0)) (False -> False) ) (True -> syntax.AN_Strict) (False -> syntax.AN_None) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> _x_0 32) (True -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand s_1_0 (<{StdInt.<<}> 1 _x_0)) 0)) (True -> syntax.AN_Strict) (False -> syntax.AN_None) ) (False -> containers.arg_strictness_annotation (<{StdInt.-_7}> _x_0 32) l_1_1) ) 
containers.arg_is_strict::B !_x_0::I !_x_1 = case _x_1 (syntax.NotStrict -> False) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> _x_0 32) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand s_1_0 (<{StdInt.<<}> 1 _x_0)) 0)) (False -> False) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> _x_0 32) (True -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand s_1_0 (<{StdInt.<<}> 1 _x_0)) 0)) (False -> containers.arg_is_strict (<{StdInt.-_7}> _x_0 32) l_1_1) ) 
containers.is_not_strict::B !_x_0 = case _x_0 (syntax.NotStrict -> True) (syntax.Strict s_1_0 -> <{StdInt.==_16}> s_1_0 0) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.==_16}> s_1_0 0) (True -> containers.is_not_strict l_1_1) (False -> False) ) 
containers.equal_strictness_lists::B !_x_0 !_x_1 = case _x_0 (syntax.NotStrict -> case _x_1 (syntax.NotStrict -> True) (syntax.Strict s_2_0 -> <{StdInt.==_16}> s_2_0 0) (syntax.StrictList s_2_0 l_2_1 -> case (<{StdInt.==_16}> s_2_0 0) (True -> containers.is_not_strict l_2_1) (False -> False) ) ) (syntax.Strict s_1_0 -> case _x_1 (syntax.NotStrict -> <{StdInt.==_16}> s_1_0 0) (syntax.Strict s2_2_0 -> <{StdInt.==_16}> s_1_0 s2_2_0) (syntax.StrictList s2_2_0 l_2_1 -> case (<{StdInt.==_16}> s_1_0 s2_2_0) (True -> containers.is_not_strict l_2_1) (False -> False) ) ) (syntax.StrictList s_1_0 l_1_1 -> case _x_1 (syntax.NotStrict -> case (<{StdInt.==_16}> s_1_0 0) (True -> containers.is_not_strict l_1_1) (False -> False) ) (syntax.Strict s2_2_0 -> case (<{StdInt.==_16}> s_1_0 s2_2_0) (True -> containers.is_not_strict l_1_1) (False -> False) ) (syntax.StrictList s2_2_0 l2_2_1 -> case (<{StdInt.==_16}> s_1_0 s2_2_0) (True -> containers.equal_strictness_lists l_1_1 l2_2_1) (False -> False) ) ) 
containers.more_or_equal_strictness_lists::B !_x_0 !s2_1 = case _x_0 (syntax.NotStrict -> containers.is_not_strict s2_1) (syntax.Strict s_1_0 -> case s2_1 (syntax.NotStrict -> True) (syntax.Strict s2_2_0 -> <{StdInt.==_16}> (StdInt.bitand (StdInt.bitnot s_1_0) s2_2_0) 0) (syntax.StrictList s2_2_0 l_2_1 -> case (<{StdInt.==_16}> (StdInt.bitand (StdInt.bitnot s_1_0) s2_2_0) 0) (True -> containers.is_not_strict l_2_1) (False -> False) ) ) (syntax.StrictList s_1_0 l_1_1 -> case s2_1 (syntax.NotStrict -> True) (syntax.Strict s2_2_0 -> <{StdInt.==_16}> (StdInt.bitand (StdInt.bitnot s_1_0) s2_2_0) 0) (syntax.StrictList s2_2_0 l2_2_1 -> case (<{StdInt.==_16}> (StdInt.bitand (StdInt.bitnot s_1_0) s2_2_0) 0) (True -> containers.more_or_equal_strictness_lists l_1_1 l2_2_1) (False -> False) ) ) 
containers.append_strictness !strictness_0::I !_x_1 = case _x_1 (syntax.NotStrict -> syntax.Strict strictness_0) (syntax.Strict s_1_0 -> syntax.StrictList s_1_0 (syntax.Strict strictness_0)) (syntax.StrictList s_1_0 l_1_1 -> syntax.StrictList s_1_0 (containers.append_strictness strictness_0 l_1_1)) 
containers.add_next_strict !strictness_index_0::I !strictness_1::I !strictness_list_2 = case (<{StdInt.<_17}> strictness_index_0 32) (True -> <{_Tuple3!7}> (<{StdInt.+_6}> strictness_index_0 1) (StdInt.bitor strictness_1 (<{StdInt.<<}> 1 strictness_index_0)) strictness_list_2) (False -> <{_Tuple3!7}> 0 2147483648 (containers.append_strictness strictness_1 strictness_list_2)) 
containers.add_next_not_strict !strictness_index_0::I !strictness_1::I !strictness_list_2 = case (<{StdInt.<_17}> strictness_index_0 32) (True -> <{_Tuple3!7}> (<{StdInt.+_6}> strictness_index_0 1) strictness_1 strictness_list_2) (False -> <{_Tuple3!7}> 0 0 (containers.append_strictness strictness_1 strictness_list_2)) 
containers.first_n_are_strict::B !_x_0::I !_x_1 = case _x_0 (0 -> True) (_ -> case _x_1 (syntax.NotStrict -> False) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> 32 _x_0) (True -> False) (False -> case (<{StdInt.==_16}> _x_0 32) (True -> <{StdInt.==_16}> s_1_0 4294967295) (False -> let m_4_0::I = <{StdInt.-_7}> (<{StdInt.<<}> 1 _x_0) 1 in <{StdInt.==_16}> (StdInt.bitand s_1_0 m_4_0) m_4_0) ) ) (syntax.StrictList s_1_0 l_1_1 -> case (StdBool.not (<{StdInt.<_17}> _x_0 32)) (True -> case (<{StdInt.==_16}> s_1_0 4294967295) (True -> containers.first_n_are_strict (<{StdInt.-_7}> _x_0 32) l_1_1) (False -> False) ) (False -> let m_3_0::I = <{StdInt.-_7}> (<{StdInt.<<}> 1 _x_0) 1 in <{StdInt.==_16}> (StdInt.bitand s_1_0 m_3_0) m_3_0) ) )
containers.remove_first_n !_x_0::I !s_1 = case _x_0 (0 -> s_1) (_ -> case s_1 (syntax.NotStrict -> syntax.NotStrict) (syntax.Strict s_1_0 -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.Strict (<{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> _x_0 1))) (False -> syntax.NotStrict) ) (syntax.StrictList s_1_0 l_1_1 -> case (<{StdInt.<_17}> _x_0 32) (True -> syntax.StrictList (StdInt.bitor (<{StdInt.>>}> (StdInt.bitand (<{StdInt.>>}> s_1_0 1) 2147483647) (<{StdInt.-_7}> _x_0 1)) (<{StdInt.<<}> (<{containers._c;381;14_110}> l_1_1) (<{StdInt.-_7}> 32 _x_0))) (containers.remove_first_n _x_0 l_1_1)) (False -> containers.remove_first_n (<{StdInt.-_7}> _x_0 32) l_1_1) ) )
<{containers._c;381;14_110}>::I !l_0 = case l_0 (syntax.Strict s_1_0 -> s_1_0) (syntax.StrictList s_1_0 _x_1_1 -> s_1_0) (syntax.NotStrict -> 0) 
containers.ikhEmpty = containers.IntKeyHashtable 0 0 0 (_SystemArray._createArray_0 0)
containers.i_fold_st_76 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> containers.i_fold_st_76 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
<{containers.cu;422;26_64}> !<{_v<_0}> !_vone_1 !<{_v+_2}> !_vone_3 !<{_v+_4}> c_l_i_5 i_6 g_s_7 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_7 i_6)) (True -> <{containers.cu;422;26_64}> <{_v<_0}> _vone_1 <{_v+_2}> _vone_3 <{_v+_4}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_5 (select _vone_1::<{StdOverloaded.one;}> 0)) (select <{_v+_4}>::<{StdOverloaded.+;}> 0 i_6 (select _vone_3::<{StdOverloaded.one;}> 0)) g_s_7) (False -> c_l_i_5) 
<{containers.cu;422;26_63}> !<{_v<_0}> !_vArray_1 !_vone_2 !<{_v+_3}> c_a_4 c_i_5::I i_6 g_s_7 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_7 i_6)) (True -> <{containers.cu;422;26_63}> <{_v<_0}> _vArray_1 _vone_2 <{_v+_3}> (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_4 c_i_5 containers.IKT_Leaf) (<{StdInt.+_6}> c_i_5 StdInt.one_11) (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_6 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_7) (False -> c_a_4) 
containers.fold_st_77 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> containers.fold_st_77 op_0 x_1_1 (op_0 a_1_0 st_2)) 
containers.flatten_67 !_x_0 accu_1 = case _x_0 (containers.IKT_Leaf -> accu_1) (containers.IKT_Node int_key_1_0 value_1_1 left_1_2 right_1_3 -> containers.flatten_67 left_1_2 (_predefined._Cons (_Tuple2 int_key_1_0 value_1_1) (containers.flatten_67 right_1_3 accu_1))) 
containers.iktFlatten !ikt_0 = containers.flatten_67 ikt_0 _predefined._Nil
containers.iktUInsert !overide_0::B !int_key_1::I !value_2 !_x_3 = case _x_3 (containers.IKT_Leaf -> <{_Tuple2!3}> True (containers.IKT_Node int_key_1 value_2 containers.IKT_Leaf containers.IKT_Leaf)) (containers.IKT_Node key2_1_0 value2_1_1 left_1_2 right_1_3 -> case (<{StdInt.<_17}> int_key_1 key2_1_0) (True -> let _x_3_0 = containers.iktUInsert overide_0 int_key_1 value_2 left_1_2 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (containers.IKT_Node key2_1_0 value2_1_1 (select _x_3_0::_Tuple2 1) right_1_3)) (False -> case (<{StdInt.<_17}> key2_1_0 int_key_1) (True -> let _x_4_0 = containers.iktUInsert overide_0 int_key_1 value_2 right_1_3 in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (containers.IKT_Node key2_1_0 value2_1_1 left_1_2 (select _x_4_0::_Tuple2 1))) (False -> case overide_0 (True -> <{_Tuple2!3}> False (containers.IKT_Node int_key_1 value_2 left_1_2 right_1_3)) (False -> <{_Tuple2!3}> False (containers.IKT_Node key2_1_0 value2_1_1 left_1_2 right_1_3)) ) ) ) 
<{containers.cu;422;26_83}> !_vone_0 !<{_v+_1}> !_vone_2 !<{_v+_3}> c_l_i_4 !i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 i_5)) (True -> <{containers.cu;422;26_83}> _vone_0 <{_v+_1}> _vone_2 <{_v+_3}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_4 (select _vone_0::<{StdOverloaded.one;}> 0)) (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_5 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_6) (False -> c_l_i_4) 
<{containers.cu;422;26_84}> !_vArray_0 !_vone_1 !<{_v+_2}> c_a_3 c_i_4::I !i_5::I !g_s_6::I = case (StdBool.not (<{StdInt.<_17}> g_s_6 i_5)) (True -> <{containers.cu;422;26_84}> _vArray_0 _vone_1 <{_v+_2}> (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_3 c_i_4 containers.IKT_Leaf) (<{StdInt.+_6}> c_i_4 StdInt.one_11) (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_5 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_6) (False -> c_a_3) 
containers.i_fold_st_85 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> containers.i_fold_st_85 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
<{containers.cu;422;26_87}>::I !<{_v+_0}> !_vone_1 !<{_v+_2}> c_l_i_3::I !i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 i_4)) (True -> <{containers.cu;422;26_87}> <{_v+_0}> _vone_1 <{_v+_2}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 c_l_i_3 StdInt.one_11) (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_4 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_5) (False -> c_l_i_3) 
<{containers.cu;422;26_88}> !_vone_0 !<{_v+_1}> !c_a_2 c_i_3::I !i_4::I !g_s_5::I = case (StdBool.not (<{StdInt.<_17}> g_s_5 i_4)) (True -> <{containers.cu;422;26_88}> _vone_0 <{_v+_1}> (_SystemArray.update_5 c_a_2 c_i_3 containers.IKT_Leaf) (<{StdInt.+_6}> c_i_3 StdInt.one_11) (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_4 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_5) (False -> c_a_2) 
containers.i_fold_st_89 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> containers.i_fold_st_89 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
<{containers.cu;422;26_90}>::I !_vone_0 !<{_v+_1}> !c_l_i_2::I !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> <{containers.cu;422;26_90}> _vone_0 <{_v+_1}> (<{StdInt.+_6}> c_l_i_2 StdInt.one_11) (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_3 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_4) (False -> c_l_i_2) 
<{containers.cu;422;26_91}> !<{_v+_0}> !c_a_1 c_i_2::I !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> <{containers.cu;422;26_91}> <{_v+_0}> (_SystemArray.update_5 c_a_1 c_i_2 containers.IKT_Leaf) (<{StdInt.+_6}> c_i_2 StdInt.one_11) (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_3 StdInt.one_11) g_s_4) (False -> c_a_1) 
containers.i_fold_st_92 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> containers.i_fold_st_92 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
<{containers.cu;422;26_93}>::I !<{_v+_0}> !c_l_i_1::I !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> <{containers.cu;422;26_93}> <{_v+_0}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_2 StdInt.one_11) g_s_3) (False -> c_l_i_1) 
<{containers.cu;422;26_94}> !c_a_0 c_i_1::I !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> <{containers.cu;422;26_94}> (_SystemArray.update_5 c_a_0 c_i_1 containers.IKT_Leaf) (<{StdInt.+_6}> c_i_1 StdInt.one_11) (<{StdInt.+_6}> i_2 StdInt.one_11) g_s_3) (False -> c_a_0) 
<{containers.cu;422;26_96}>::I !c_l_i_0::I !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> <{containers.cu;422;26_96}> (<{StdInt.+_6}> c_l_i_0 StdInt.one_11) (<{StdInt.+_6}> i_1 StdInt.one_11) g_s_2) (False -> c_l_i_0) 
containers.anon_65 !_x_0 !ikh_1 = case _x_0 (_Tuple2 key_1_0 value_1_1 -> select (containers.ikhInsert False key_1_0 value_1_1 ikh_1)::_Tuple2 1) 
containers.fold_st_86 !_x_0 !st_1 = case _x_0 (_predefined._Nil -> st_1) (_predefined._Cons a_1_0 x_1_1 -> containers.fold_st_86 x_1_1 (containers.anon_65 a_1_0 st_1)) 
containers.rehashTree_66 !index_0::I !_x_1 = case _x_1 (_Tuple2 old_entries_1_0 ikh_1_1 -> let !_x_2_0 = _SystemArray.replace_2 old_entries_1_0 index_0 containers.IKT_Leaf, !list_2_1 = containers.iktFlatten (select _x_2_0::_Tuple2 0), !ikh_2_2 = containers.fold_st_86 list_2_1 ikh_1_1 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 1) ikh_2_2) 
containers.i_fold_st_95 !fr_0::I !to_1::I !st_2 = case (StdBool.not (<{StdInt.<_17}> fr_0 to_1)) (True -> st_2) (False -> containers.i_fold_st_95 (<{StdInt.+_6}> fr_0 StdInt.one_11) to_1 (containers.rehashTree_66 fr_0 st_2)) 
containers.grow !old_entries_0 = let !size_1_0::I = _SystemArray.size_4 old_entries_0, !new_size_1_1::I = <{containers._if;420;15_111}> (<{StdInt.==_16}> size_1_0 0) size_1_0, !new_entries_1_2 = <{containers.cu;422;26_94}> (_SystemArray._createArray_0 (<{containers.cu;422;26_96}> 0 1 new_size_1_1)) 0 1 new_size_1_1, !ikh_1_3 = containers.IntKeyHashtable (<{StdInt./_10}> (<{StdInt.*_9}> new_size_1_1 80) 100) 0 (<{StdInt.-_7}> new_size_1_1 1) new_entries_1_2, !_x_1_4 = containers.i_fold_st_95 0 size_1_0 (_Tuple2 old_entries_0 ikh_1_3) in select _x_1_4::_Tuple2 1
containers.ikhInsert !overide_0::B !int_key_1::I !value_2 !_x_3 = case _x_3 (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 ikh_entries_1_3 -> case (StdBool.not (<{StdInt.<_17}> ikh_nr_of_entries_1_1 ikh_rehash_threshold_1_0)) (True -> containers.ikhInsert overide_0 int_key_1 value_2 (containers.grow ikh_entries_1_3)) (False -> let !hash_value_3_0::I = StdInt.bitand int_key_1 ikh_bitmask_1_2, !_x_3_1 = _SystemArray.uselect_6 ikh_entries_1_3 hash_value_3_0, !_x_3_2 = containers.iktUInsert overide_0 int_key_1 value_2 (select _x_3_1::_Tuple2 0), !ikh_entries_3_3 = _SystemArray.update_5 (select _x_3_1::_Tuple2 1) hash_value_3_0 (select _x_3_2::_Tuple2 1), is_new_3_4::B = select _x_3_2::_Tuple2 0 in case is_new_3_4 (True -> <{_Tuple2!3}> is_new_3_4 (containers.IntKeyHashtable ikh_rehash_threshold_1_0 (<{StdInt.+_6}> ikh_nr_of_entries_1_1 1) ikh_bitmask_1_2 ikh_entries_3_3)) (False -> <{_Tuple2!3}> is_new_3_4 (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 ikh_entries_3_3)) ) ) 
<{containers._if;420;15_111}>::I !_x_0::B size_1::I = case _x_0 (True -> 2) (_ -> <{StdInt.*_9}> 2 size_1)
<{containers.ikhInsert`}> !overide_0::B !int_key_1::I !value_2 !ikh_3 = select (containers.ikhInsert overide_0 int_key_1 value_2 ikh_3)::_Tuple2 1
containers.iktSearch !int_key_0::I !_x_1 = case _x_1 (containers.IKT_Leaf -> general.No) (containers.IKT_Node key2_1_0 value_1_1 left_1_2 right_1_3 -> case (<{StdInt.<_17}> int_key_0 key2_1_0) (True -> containers.iktSearch int_key_0 left_1_2) (False -> case (<{StdInt.<_17}> key2_1_0 int_key_0) (True -> containers.iktSearch int_key_0 right_1_3) (False -> general.Yes value_1_1) ) ) 
containers.ikhSearch !int_key_0::I !_x_1 = case _x_1 (containers.IntKeyHashtable _x_1_0 _x_1_1 ikh_bitmask_1_2 ikh_entries_1_3 -> case (<{StdInt.==_16}> (_SystemArray.size_4 ikh_entries_1_3) 0) (True -> general.No) (False -> containers.iktSearch int_key_0 (_SystemArray.select_3 ikh_entries_1_3 (StdInt.bitand int_key_0 ikh_bitmask_1_2))) ) 
<{containers.iktSearch`}> !int_key_0::I !_x_1 = case _x_1 (containers.IKT_Node key2_1_0 value_1_1 left_1_2 right_1_3 -> case (<{StdInt.<_17}> int_key_0 key2_1_0) (True -> <{containers.iktSearch`}> int_key_0 left_1_2) (False -> case (<{StdInt.<_17}> key2_1_0 int_key_0) (True -> <{containers.iktSearch`}> int_key_0 right_1_3) (False -> value_1_1) ) ) (containers.IKT_Leaf -> StdMisc.abort "iktSearch`: key not found") 
<{containers.ikhSearch`}> !int_key_0::I !_x_1 = case _x_1 (containers.IntKeyHashtable _x_1_0 _x_1_1 ikh_bitmask_1_2 ikh_entries_1_3 -> case (<{StdInt.==_16}> (_SystemArray.size_4 ikh_entries_1_3) 0) (True -> StdMisc.abort "ikhSearch`: key not found") (False -> <{containers.iktSearch`}> int_key_0 (_SystemArray.select_3 ikh_entries_1_3 (StdInt.bitand int_key_0 ikh_bitmask_1_2))) ) 
containers.yes !value_0 = <{_Tuple2!3}> True (general.Yes value_0)
containers.iktUSearch !int_key_0::I !_x_1 = case _x_1 (containers.IKT_Leaf -> <{_Tuple2!3}> general.No containers.IKT_Leaf) (containers.IKT_Node key2_1_0 value_1_1 left_1_2 right_1_3 -> case (<{StdInt.<_17}> int_key_0 key2_1_0) (True -> let _x_3_0 = containers.iktUSearch int_key_0 left_1_2 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (containers.IKT_Node key2_1_0 value_1_1 (select _x_3_0::_Tuple2 1) right_1_3)) (False -> case (<{StdInt.<_17}> key2_1_0 int_key_0) (True -> let _x_4_0 = containers.iktUSearch int_key_0 right_1_3 in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (containers.IKT_Node key2_1_0 value_1_1 left_1_2 (select _x_4_0::_Tuple2 1))) (False -> <{_Tuple2!3}> (select (containers.yes value_1_1)::_Tuple2 1) (containers.IKT_Node key2_1_0 value_1_1 left_1_2 right_1_3)) ) ) 
containers.ikhUSearch !int_key_0::I !_x_1 = case _x_1 (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 ikh_entries_1_3 -> case (<{StdInt.==_16}> (_SystemArray.size_4 ikh_entries_1_3) 0) (True -> <{_Tuple2!3}> general.No (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 ikh_entries_1_3)) (False -> let hash_value_3_0 = StdInt.bitand int_key_0 ikh_bitmask_1_2, _x_3_1 = _SystemArray.uselect_6 ikh_entries_1_3 hash_value_3_0, _x_3_2::I = containers.iktUSearch int_key_0 (select _x_3_1::_Tuple2 0) in <{_Tuple2!3}> (select _x_3_2::_Tuple2 0) (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 (_SystemArray.update_5 (select _x_3_1::_Tuple2 1) hash_value_3_0 (select _x_3_2::_Tuple2 1)))) ) 
containers.is_empty_module_n_set::B !_x_0 = case _x_0 (containers.EndNumbers -> True) (containers.Numbers _x_1_0 module_numbers_1_1 -> case _x_1_0 (0 -> containers.is_empty_module_n_set module_numbers_1_1) ) (_ -> False)
containers.first_one_bit_in_byte::I !n_0::I !module_numbers_1::I = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand module_numbers_1 (<{StdInt.<<}> 1 n_0)) 0)) (True -> n_0) (False -> containers.first_one_bit_in_byte (<{StdInt.+_6}> n_0 1) module_numbers_1) 
containers.first_one_bit::I !module_numbers_0::I = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand module_numbers_0 255) 0)) (True -> containers.first_one_bit_in_byte 0 module_numbers_0) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand module_numbers_0 65280) 0)) (True -> containers.first_one_bit_in_byte 8 module_numbers_0) (False -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand module_numbers_0 16711680) 0)) (True -> containers.first_one_bit_in_byte 16 module_numbers_0) (False -> containers.first_one_bit_in_byte 24 module_numbers_0) ) ) 
containers.remove_first_module_number !_x_0 = case _x_0 (containers.Numbers _x_1_0 rest_module_numbers_1_1 -> case _x_1_0 (0 -> let _x_3_0 = containers.remove_first_module_number rest_module_numbers_1_1 in _Tuple2 (<{StdInt.+_6}> (select _x_3_0::_Tuple2 0) 32) (containers.Numbers 0 (select _x_3_0::_Tuple2 1))) (_ -> let bit_n_2_0::I = containers.first_one_bit _x_1_0 in _Tuple2 bit_n_2_0 (containers.Numbers (StdInt.bitand _x_1_0 (StdInt.bitnot (<{StdInt.<<}> 1 bit_n_2_0))) rest_module_numbers_1_1))) 
containers.i_fold_st_78 !<{_v<_0}> !_vone_1 !<{_v+_2}> op_3 fr_4 to_5 st_6 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 fr_4 to_5)) (True -> st_6) (False -> containers.i_fold_st_78 <{_v<_0}> _vone_1 <{_v+_2}> op_3 (select <{_v+_2}>::<{StdOverloaded.+;}> 0 fr_4 (select _vone_1::<{StdOverloaded.one;}> 0)) to_5 (op_3 fr_4 st_6)) 
containers.word_or_62 !_vArray_0 !_vArray_1 i_2::I !_x_3 = case _x_3 (_Tuple3 has_changed_1_0 op1_1_1 op2_1_2 -> let !_x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 6 op1_1_1 i_2, !_x_2_1 = select _vArray_1::<{_SystemArray.Array;}> 6 op2_1_2 i_2, op1_i_2_2::I = select _x_2_0::_Tuple2 0, op2_i_2_3::I = select _x_2_1::_Tuple2 0, or_2_4::I = StdInt.bitor op1_i_2_2 op2_i_2_3 in case (<{StdInt.==_16}> or_2_4 op2_i_2_3) (True -> _Tuple3 has_changed_1_0 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> _Tuple3 True (select _x_2_0::_Tuple2 1) (select _vArray_1::<{_SystemArray.Array;}> 5 (select _x_2_1::_Tuple2 1) i_2 or_2_4)) ) 
containers.word_or_97 !_vArray_0 !i_1::I !_x_2 = case _x_2 (_Tuple3 has_changed_1_0 op1_1_1 op2_1_2 -> let !_x_2_0 = _SystemArray.uselect_14 op1_1_1 i_1, !_x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 op2_1_2 i_1, op1_i_2_2::I = select _x_2_0::_Tuple2 0, op2_i_2_3::I = select _x_2_1::_Tuple2 0, or_2_4::I = StdInt.bitor op1_i_2_2 op2_i_2_3 in case (<{StdInt.==_16}> or_2_4 op2_i_2_3) (True -> _Tuple3 has_changed_1_0 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> _Tuple3 True (select _x_2_0::_Tuple2 1) (select _vArray_0::<{_SystemArray.Array;}> 5 (select _x_2_1::_Tuple2 1) i_1 or_2_4)) ) 
containers.i_fold_st_98 !_vone_0 !<{_v+_1}> op_2 !fr_3::I !to_4::I st_5 = case (StdBool.not (<{StdInt.<_17}> fr_3 to_4)) (True -> st_5) (False -> containers.i_fold_st_98 _vone_0 <{_v+_1}> op_2 (select <{_v+_1}>::<{StdOverloaded.+;}> 0 fr_3 (select _vone_0::<{StdOverloaded.one;}> 0)) to_4 (op_2 fr_3 st_5)) 
containers.word_or_99 !i_0::I !_x_1 = case _x_1 (_Tuple3 has_changed_1_0 op1_1_1 op2_1_2 -> let !_x_2_0 = _SystemArray.uselect_14 op1_1_1 i_0, !_x_2_1 = _SystemArray.uselect_14 op2_1_2 i_0, op1_i_2_2::I = select _x_2_0::_Tuple2 0, op2_i_2_3::I = select _x_2_1::_Tuple2 0, or_2_4::I = StdInt.bitor op1_i_2_2 op2_i_2_3 in case (<{StdInt.==_16}> or_2_4 op2_i_2_3) (True -> _Tuple3 has_changed_1_0 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> _Tuple3 True (select _x_2_0::_Tuple2 1) (_SystemArray.update_13 (select _x_2_1::_Tuple2 1) i_0 or_2_4)) ) 
containers.i_fold_st_100 !<{_v+_0}> op_1 !fr_2::I !to_3::I st_4 = case (StdBool.not (<{StdInt.<_17}> fr_2 to_3)) (True -> st_4) (False -> containers.i_fold_st_100 <{_v+_0}> op_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 fr_2 StdInt.one_11) to_3 (op_1 fr_2 st_4)) 
containers.i_fold_st_101 op_0 !fr_1::I !to_2::I st_3 = case (StdBool.not (<{StdInt.<_17}> fr_1 to_2)) (True -> st_3) (False -> containers.i_fold_st_101 op_0 (<{StdInt.+_6}> fr_1 StdInt.one_11) to_2 (op_0 fr_1 st_3)) 
containers.i_fold_st_102 !fr_0::I !to_1::I !st_2 = case (StdBool.not (<{StdInt.<_17}> fr_0 to_1)) (True -> st_2) (False -> containers.i_fold_st_102 (<{StdInt.+_6}> fr_0 StdInt.one_11) to_1 (containers.word_or_99 fr_0 st_2)) 
containers.bitvectOr !op1_0 !op2_1 = let !size_1_0::I = _SystemArray.size_12 op1_0 in containers.i_fold_st_102 0 size_1_0 (_Tuple3 False op1_0 op2_1)
containers.lts_68 !_vtoString_0 del_1 !_x_2 = case _x_2 (_predefined._Cons a_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{StdString.+++_11}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 a_1_0) "]") (_ -> <{StdString.+++_11}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 a_1_0) (<{StdString.+++_11}> del_1 (containers.lts_68 _vtoString_0 del_1 _x_1_1)))) 
containers.listToString !_vtoString_0 _x_1 !_x_2 = case _x_2 (_predefined._Nil -> "[]") (_ -> <{StdString.+++_11}> "[" (containers.lts_68 _vtoString_0 _x_1 _x_2))
containers.toString_75 !_vtoString_0 !_vtoString_1 !_x_2 = case _x_2 (_Tuple2 a_1_0 b_1_1 -> <{StdString.+++_11}> "(" (<{StdString.+++_11}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 a_1_0) (<{StdString.+++_11}> "," (<{StdString.+++_11}> (select _vtoString_1::<{StdOverloaded.toString;}> 0 b_1_1) ")")))) 
containers.toString_103 !_vtoString_0 !_x_1 = case _x_1 (_Tuple2 a_1_0 b_1_1 -> <{StdString.+++_11}> "(" (<{StdString.+++_11}> (StdString.toString_5 a_1_0) (<{StdString.+++_11}> "," (<{StdString.+++_11}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 b_1_1) ")")))) 
containers.lts_105 !_vtoString_0 del_1 !_x_2 = case _x_2 (_predefined._Cons a_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{StdString.+++_11}> (containers.toString_103 _vtoString_0 a_1_0) "]") (_ -> <{StdString.+++_11}> (containers.toString_103 _vtoString_0 a_1_0) (<{StdString.+++_11}> del_1 (containers.lts_105 _vtoString_0 del_1 _x_1_1)))) 
containers.listToString_104 !_vtoString_0 _x_1 !_x_2 = case _x_2 (_predefined._Nil -> "[]") (_ -> <{StdString.+++_11}> "[" (containers.lts_105 _vtoString_0 _x_1 _x_2))
containers.toString_38 !_vtoString_0 !ikt_1 = containers.listToString_104 _vtoString_0 "," (containers.iktFlatten ikt_1)
<{containers.c;557;31_69}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{containers.c;557;31_69}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{containers.c;557;31_106}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_6 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{containers.c;557;31_106}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
containers.arrayToList_70 !arr_0 = let _x_1_0 = _SystemArray.usize_7 arr_0 in <{containers.c;557;31_106}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)
containers.toString_74 !_vtoString_0 !arr_1 = containers.listToString _vtoString_0 " , " (containers.arrayToList_70 arr_1)
containers.lts_109 !_vtoString_0 del_1 !_x_2 = case _x_2 (_predefined._Cons a_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{StdString.+++_11}> (containers.toString_38 _vtoString_0 a_1_0) "]") (_ -> <{StdString.+++_11}> (containers.toString_38 _vtoString_0 a_1_0) (<{StdString.+++_11}> del_1 (containers.lts_109 _vtoString_0 del_1 _x_1_1)))) 
containers.listToString_108 !_vtoString_0 _x_1 !_x_2 = case _x_2 (_predefined._Nil -> "[]") (_ -> <{StdString.+++_11}> "[" (containers.lts_109 _vtoString_0 _x_1 _x_2))
containers.toString_107 !_vtoString_0 !arr_1 = containers.listToString_108 _vtoString_0 " , " (containers.arrayToList_70 arr_1)
containers.toString_39 !_vtoString_0 !_x_1 = case _x_1 (containers.IntKeyHashtable ikh_rehash_threshold_1_0 ikh_nr_of_entries_1_1 ikh_bitmask_1_2 ikh_entries_1_3 -> <{StdString.+++_11}> "(IKH " (<{StdString.+++_11}> (StdString.toString_5 ikh_rehash_threshold_1_0) (<{StdString.+++_11}> " " (<{StdString.+++_11}> (StdString.toString_5 ikh_nr_of_entries_1_1) (<{StdString.+++_11}> " " (<{StdString.+++_11}> (StdString.toString_5 ikh_bitmask_1_2) (<{StdString.+++_11}> " " (containers.toString_107 _vtoString_0 ikh_entries_1_3)))))))) 
<{containers.TD;NumberSet}> _x_0::B = _predefined._Nil
<{containers.TD;LargeBitvect}> _x_0::B = _predefined._Nil
<{containers.TD;IntKey}> _x_0::B = _predefined._Nil
<{containers.TD;IntKeyHashtable}> _x_0::B = _predefined._Nil
<{containers.TD;IntKeyTree}> _x_0::B = _predefined._Nil

:: containers.NumberSet = containers.Numbers !a1::I !a2 | containers.EndNumbers
:: containers.IntKeyHashtable = containers.IntKeyHashtable !a1::I !a2::I !a3::I !a4
:: containers.IntKeyTree = containers.IKT_Leaf | containers.IKT_Node !a1 a2 !a3 !a4

|| Converted Records
