|| ?module? expand_types


expand_types.simplifyAndCheckTypeApplication !_x_0 !type_args_1 = case _x_0 (syntax.TA type_cons_1_0 cons_args_1_1 -> case type_cons_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 type_index_2_2 type_prop_2_3 -> <{_Tuple2!3}> True (syntax.TA (update type_cons_1_0::syntax._TypeSymbIdent [1:<{StdInt.+_6}> type_arity_2_1 (StdList.length_47 type_args_1)]) (<{StdList.++}> cons_args_1_1 type_args_1))) ) (syntax.TAS type_cons_1_0 cons_args_1_1 strictness_1_2 -> case type_cons_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 type_index_2_2 type_prop_2_3 -> <{_Tuple2!3}> True (syntax.TAS (update type_cons_1_0::syntax._TypeSymbIdent [1:<{StdInt.+_6}> type_arity_2_1 (StdList.length_47 type_args_1)]) (<{StdList.++}> cons_args_1_1 type_args_1) strictness_1_2)) ) (<{syntax.:@:}> _x_1_0 type_args1_1_1 -> case _x_1_0 (syntax.CV tv_2_0 -> <{_Tuple2!3}> True (<{syntax.:@:}> (syntax.CV tv_2_0) (<{StdList.++}> type_args1_1_1 type_args_1))) ) (syntax.TArrow -> case type_args_1 (_predefined._Cons type1_2_0 _x_2_1 -> case _x_2_1 (_predefined._Cons type2_3_0 _x_3_1 -> case _x_3_1 (_predefined._Nil -> <{_Tuple2!3}> True (<{syntax.-->}> type1_2_0 type2_3_0)) ) (_predefined._Nil -> <{_Tuple2!3}> True (syntax.TArrow1 type1_2_0)) ) ) (syntax.TArrow1 type1_1_0 -> case type_args_1 (_predefined._Cons type2_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> <{_Tuple2!3}> True (<{syntax.-->}> type1_1_0 type2_2_0)) ) ) (syntax.TV tv_1_0 -> <{_Tuple2!3}> True (<{syntax.:@:}> (syntax.CV tv_1_0) type_args_1)) (syntax.TempV i_1_0 -> <{_Tuple2!3}> True (<{syntax.:@:}> (syntax.TempCV i_1_0) type_args_1)) (_ -> <{_Tuple2!3}> False _x_0)
expand_types.simplifyTypeApplication !type_0 !type_args_1 = let _x_1_0 = expand_types.simplifyAndCheckTypeApplication type_0 type_args_1 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> StdMisc.abort "expand_types.simplifyTypeApplication: unexpected error") (False -> select _x_1_0::_Tuple2 1) 
expand_types.map_st_52 f_0 !_x_1 s_2 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0 = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = f_0 x_1_0 s_2, _x_2_2 = expand_types.map_st_52 f_0 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0 = _predefined._dummyForStrictAlias s_2 in _Tuple2 _predefined._Nil s_2_0) 
expand_types.anon_27 type_0 class_cons_vars_1::I = _Tuple2 (syntax._AType (<{expand_types._if;126;55_112}> (StdBool.not (<{StdInt.==_16}> (StdInt.bitand class_cons_vars_1 1) 0))) type_0) (<{StdInt.>>}> class_cons_vars_1 1)
<{expand_types._if;126;55_112}> !_x_0::B = case _x_0 (True -> syntax.TA_MultiOfPropagatingConsVar) (_ -> syntax.TA_Multi)
expand_types.map_st_89 !_x_0 !s_1::I = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> let !s_2_0::I = _predefined._dummyForStrictAlias (select _x_2_2::_Tuple2 1), _x_2_1 = expand_types.anon_27 x_1_0 s_1, _x_2_2 = expand_types.map_st_89 xs_1_1 (select _x_2_1::_Tuple2 1) in _Tuple2 (_predefined._Cons (select _x_2_1::_Tuple2 0) (select _x_2_2::_Tuple2 0)) s_2_0) (_predefined._Nil -> let !s_2_0::I = _predefined._dummyForStrictAlias s_1 in _Tuple2 _predefined._Nil s_2_0) 
expand_types.add_types_of_dictionary_28 !_vArray_0 common_defs_1 !_x_2 = case _x_2 (syntax._TypeContext _x_1_0 tc_types_1_1 tc_var_1_2 -> case _x_1_0 (syntax.TCGeneric _x_2_0 -> case _x_2_0 (syntax._GenericTypeContext gtc_generic_3_0 gtc_kind_3_1 gtc_class_3_2 _x_3_3 -> case _x_3_3 (syntax._GlobalIndex gi_module_4_0 gi_index_4_1 -> let !generict_dict_ident_5_0 = select (expand_types.select_60 (select (select _vArray_0::<{_SystemArray.Array;}> 3 common_defs_1 gi_module_4_0)::syntax._CommonDefs 0) gi_index_4_1)::syntax._TypeDef 0 in syntax._AType syntax.TA_Multi (syntax.TA (update syntax.newTypeSymbIdentCAF::syntax._TypeSymbIdent [0:generict_dict_ident_5_0,1:1,2:syntax._Global gi_index_4_1 gi_module_4_0]) (_predefined._Cons (syntax._AType syntax.TA_Multi (StdList.hd tc_types_1_1)) _predefined._Nil))) ) ) (syntax.TCClass _x_2_0 -> case _x_2_0 (syntax._Global _x_3_0 glob_module_3_1 -> case _x_3_0 (syntax._DefinedSymbol ds_ident_4_0 ds_arity_4_1 ds_index_4_2 -> let _x_5_0 = expand_types.select_68 (select (select _vArray_0::<{_SystemArray.Array;}> 3 common_defs_1 glob_module_3_1)::syntax._CommonDefs 3) ds_index_4_2, _x_5_1 = select _x_5_0::syntax._ClassDef 5 in syntax._AType syntax.TA_Multi (syntax.TA (update syntax.newTypeSymbIdentCAF::syntax._TypeSymbIdent [0:select _x_5_1::syntax._DefinedSymbol 0,1:select _x_5_0::syntax._ClassDef 1,2:syntax._Global (select _x_5_1::syntax._DefinedSymbol 2) glob_module_3_1]) (select (expand_types.map_st_89 tc_types_1_1 (select _x_5_0::syntax._ClassDef 7))::_Tuple2 0))) ) ) ) 
expand_types.add_types_of_dictionary_90 !common_defs_0 !_x_1 = case _x_1 (syntax._TypeContext _x_1_0 tc_types_1_1 tc_var_1_2 -> case _x_1_0 (syntax.TCGeneric _x_2_0 -> case _x_2_0 (syntax._GenericTypeContext gtc_generic_3_0 gtc_kind_3_1 gtc_class_3_2 _x_3_3 -> case _x_3_3 (syntax._GlobalIndex gi_module_4_0 gi_index_4_1 -> let !generict_dict_ident_5_0 = select (expand_types.select_60 (select (expand_types.select_76 common_defs_0 gi_module_4_0)::syntax._CommonDefs 0) gi_index_4_1)::syntax._TypeDef 0 in syntax._AType syntax.TA_Multi (syntax.TA (update syntax.newTypeSymbIdentCAF::syntax._TypeSymbIdent [0:generict_dict_ident_5_0,1:1,2:syntax._Global gi_index_4_1 gi_module_4_0]) (_predefined._Cons (syntax._AType syntax.TA_Multi (StdList.hd tc_types_1_1)) _predefined._Nil))) ) ) (syntax.TCClass _x_2_0 -> case _x_2_0 (syntax._Global _x_3_0 glob_module_3_1 -> case _x_3_0 (syntax._DefinedSymbol ds_ident_4_0 ds_arity_4_1 ds_index_4_2 -> let _x_5_0 = expand_types.select_68 (select (expand_types.select_76 common_defs_0 glob_module_3_1)::syntax._CommonDefs 3) ds_index_4_2, _x_5_1 = select _x_5_0::syntax._ClassDef 5 in syntax._AType syntax.TA_Multi (syntax.TA (update syntax.newTypeSymbIdentCAF::syntax._TypeSymbIdent [0:select _x_5_1::syntax._DefinedSymbol 0,1:select _x_5_0::syntax._ClassDef 1,2:syntax._Global (select _x_5_1::syntax._DefinedSymbol 2) glob_module_3_1]) (select (expand_types.map_st_89 tc_types_1_1 (select _x_5_0::syntax._ClassDef 7))::_Tuple2 0))) ) ) ) 
expand_types.addTypesOfDictionaries !common_defs_0 !type_contexts_1 !type_args_2 = utilities.mapAppend (expand_types.add_types_of_dictionary_90 common_defs_0) type_contexts_1 type_args_2
expand_types.expandSynTypes_6 !_vexpandSynTypes_0 !_vexpandSynTypes_1 !rem_annots_2::I !common_defs_3 !_x_4 !ets_5 = case _x_4 (_Tuple2 type1_1_0 type2_1_1 -> let !_x_2_0 = select _vexpandSynTypes_0::<{expand_types.expandSynTypes;}> 0 rem_annots_2 common_defs_3 type1_1_0 ets_5, !_x_2_1 = select _vexpandSynTypes_1::<{expand_types.expandSynTypes;}> 0 rem_annots_2 common_defs_3 type2_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (expand_types._f113_113 (select _x_2_0::_Tuple3 0) _x_2_1) (_Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) 
expand_types._f113_113::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple3 0)
expand_types.expandSynTypes_45 !_vexpandSynTypes_0 !rem_annots_1::I !common_defs_2 !_x_3 !ets_4 = case _x_3 (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil ets_4) (_predefined._Cons type_1_0 types_1_1 -> let !_x_2_0 = select _vexpandSynTypes_0::<{expand_types.expandSynTypes;}> 0 rem_annots_1 common_defs_2 type_1_0 ets_4, !_x_2_1 = expand_types.expandSynTypes_45 _vexpandSynTypes_0 rem_annots_1 common_defs_2 types_1_1 (select _x_2_0::_Tuple3 2) in case (case (select _x_2_0::_Tuple3 0) (True -> True) (False -> select _x_2_1::_Tuple3 0) ) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False _x_3 (select _x_2_1::_Tuple3 2)) ) 
expand_types.fold_st_56 op_0 !_x_1 st_2 = case _x_1 (_predefined._Nil -> st_2) (_predefined._Cons a_1_0 x_1_1 -> expand_types.fold_st_56 op_0 x_1_1 (op_0 a_1_0 st_2)) 
expand_types.readVarInfo !var_info_ptr_0 !var_heap_1 = let _x_1_0 = Heap.readPtr var_info_ptr_0 var_heap_1, var_info_1_1 = select _x_1_0::_Tuple2 0, var_heap_1_2 = select _x_1_0::_Tuple2 1 in <{expand_types._c;37;7_114}> var_info_1_1 var_heap_1_2
<{expand_types._c;37;7_114}> !var_info_0 !var_heap_1 = case var_info_0 (syntax.VI_Extended _x_1_0 original_var_info_1_1 -> <{_Tuple2!2}> original_var_info_1_1 var_heap_1) (_ -> <{_Tuple2!2}> var_info_0 var_heap_1)
expand_types.has_been_collected_36::B !_x_0 = case _x_0 (syntax.VI_Used -> True) (syntax.VI_ExpandedType _x_1_0 -> True) (_ -> False)
expand_types.writeVarInfo !var_info_ptr_0 !new_var_info_1 !var_heap_2 = let _x_1_0 = Heap.readPtr var_info_ptr_0 var_heap_2, var_heap_1_1 = select _x_1_0::_Tuple2 1 in <{expand_types._c;44;7_115}> (select _x_1_0::_Tuple2 0) var_info_ptr_0 new_var_info_1 var_heap_1_1
<{expand_types._c;44;7_115}> !_x_0 !var_info_ptr_1 !new_var_info_2 !var_heap_3 = case _x_0 (syntax.VI_Extended extensions_1_0 _x_1_1 -> Heap.writePtr var_info_ptr_1 (syntax.VI_Extended extensions_1_0 new_var_info_2) var_heap_3) (_ -> Heap.writePtr var_info_ptr_1 new_var_info_2 var_heap_3)
expand_types.collect_imported_constructor_39 !mod_index_0::I !cons_defs_1 !_x_2 !_x_3 = case _x_2 (syntax._DefinedSymbol ds_ident_1_0 ds_arity_1_1 ds_index_1_2 -> case _x_3 (_Tuple2 collected_conses_2_0 var_heap_2_1 -> let _x_3_0 = expand_types.select_84 cons_defs_1 ds_index_1_2, cons_type_ptr_3_1 = select _x_3_0::syntax._ConsDef 6, _x_3_2 = expand_types.readVarInfo cons_type_ptr_3_1 var_heap_2_1 in case (expand_types.has_been_collected_36 (select _x_3_2::_Tuple2 0)) (True -> <{_Tuple2!3}> collected_conses_2_0 (select _x_3_2::_Tuple2 1)) (False -> <{_Tuple2!3}> (_predefined._Cons (syntax._Global ds_index_1_2 mod_index_0) collected_conses_2_0) (expand_types.writeVarInfo cons_type_ptr_3_1 syntax.VI_Used (select _x_3_2::_Tuple2 1))) ) ) 
expand_types.fold_st_91 mod_index_0::I cons_defs_1 !_x_2 !st_3 = case _x_2 (_predefined._Nil -> st_3) (_predefined._Cons a_1_0 x_1_1 -> expand_types.fold_st_91 mod_index_0 cons_defs_1 x_1_1 (expand_types.collect_imported_constructor_39 mod_index_0 cons_defs_1 a_1_0 st_3)) 
expand_types.collect_imported_constructors_38 !common_defs_0 !mod_index_1::I !_x_2 !ets_3 = case _x_2 (syntax.RecordType _x_1_0 -> case _x_1_0 (syntax._RecordType rt_constructor_2_0 rt_fields_2_1 rt_is_boxed_record_2_2 -> case ets_3 (expand_types._ExpandTypeState ets_type_defs_3_0 ets_collected_conses_3_1 ets_type_heaps_3_2 ets_var_heap_3_3 ets_main_dcl_module_n_3_4 ets_contains_unexpanded_abs_syn_type_3_5 -> let _x_4_0 = expand_types.collect_imported_constructor_39 mod_index_1 (select (expand_types.select_76 common_defs_0 mod_index_1)::syntax._CommonDefs 1) rt_constructor_2_0 (_Tuple2 ets_collected_conses_3_1 ets_var_heap_3_3) in update ets_3::expand_types._ExpandTypeState [1:select _x_4_0::_Tuple2 0,3:select _x_4_0::_Tuple2 1]) ) ) (syntax.AlgType constructors_1_0 -> case ets_3 (expand_types._ExpandTypeState ets_type_defs_2_0 ets_collected_conses_2_1 ets_type_heaps_2_2 ets_var_heap_2_3 ets_main_dcl_module_n_2_4 ets_contains_unexpanded_abs_syn_type_2_5 -> let _x_3_0 = expand_types.fold_st_91 mod_index_1 (select (expand_types.select_76 common_defs_0 mod_index_1)::syntax._CommonDefs 1) constructors_1_0 (_Tuple2 ets_collected_conses_2_1 ets_var_heap_2_3) in update ets_3::expand_types._ExpandTypeState [1:select _x_3_0::_Tuple2 0,3:select _x_3_0::_Tuple2 1]) ) (_ -> ets_3)
expand_types.fold_st2_55 op_0 !_x_1 !_x_2 st_3 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> case _x_2 (_predefined._Cons y_2_0 ys_2_1 -> op_0 x_1_0 y_2_0 (expand_types.fold_st2_55 op_0 xs_1_1 ys_2_1 st_3)) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> st_3) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_2 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.fold_st2_54 op_0 !_x_1 !_x_2 st_3 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> case _x_2 (_predefined._Cons y_2_0 ys_2_1 -> op_0 x_1_0 y_2_0 (expand_types.fold_st2_54 op_0 xs_1_1 ys_2_1 st_3)) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> st_3) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_2 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.bind_attr_34 !_x_0 attribute_1 !type_heaps_2 = case _x_0 (syntax.TA_Var _x_1_0 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 av_info_ptr_2_1 -> case type_heaps_2 (syntax._TypeHeaps th_vars_3_0 th_attrs_3_1 -> let ptr_and_val_4_0 = _Tuple2 av_info_ptr_2_1 (syntax.AVI_Attr attribute_1) in update type_heaps_2::syntax._TypeHeaps [1:Heap.writePtr (select ptr_and_val_4_0::_Tuple2 0) (select ptr_and_val_4_0::_Tuple2 1) th_attrs_3_1]) ) ) (_ -> type_heaps_2)
expand_types.bind_var_and_attr_29 !_x_0 !_x_1 !type_heaps_2 = case _x_0 (syntax._ATypeVar _x_1_0 _x_1_1 -> case _x_1_0 (syntax.TA_Var _x_2_0 -> case _x_2_0 (syntax._AttributeVar av_ident_3_0 av_info_ptr_3_1 -> case _x_1_1 (syntax._TypeVar tv_ident_4_0 tv_info_ptr_4_1 -> case _x_1 (syntax._AType at_attribute_5_0 at_type_5_1 -> case type_heaps_2 (syntax._TypeHeaps th_vars_6_0 th_attrs_6_1 -> let ptr_and_val_7_0 = _Tuple2 tv_info_ptr_4_1 (syntax.TVI_Type at_type_5_1), ptr_and_val_7_1 = _Tuple2 av_info_ptr_3_1 (syntax.AVI_Attr at_attribute_5_0) in update type_heaps_2::syntax._TypeHeaps [0:Heap.writePtr (select ptr_and_val_7_0::_Tuple2 0) (select ptr_and_val_7_0::_Tuple2 1) th_vars_6_0,1:Heap.writePtr (select ptr_and_val_7_1::_Tuple2 0) (select ptr_and_val_7_1::_Tuple2 1) th_attrs_6_1]) ) ) ) ) (_ -> case _x_1_1 (syntax._TypeVar tv_ident_2_0 tv_info_ptr_2_1 -> case _x_1 (syntax._AType at_attribute_3_0 at_type_3_1 -> case type_heaps_2 (syntax._TypeHeaps th_vars_4_0 th_attrs_4_1 -> let ptr_and_val_5_0 = _Tuple2 tv_info_ptr_2_1 (syntax.TVI_Type at_type_3_1) in update type_heaps_2::syntax._TypeHeaps [0:Heap.writePtr (select ptr_and_val_5_0::_Tuple2 0) (select ptr_and_val_5_0::_Tuple2 1) th_vars_4_0]) ) ) )) 
expand_types.substitute_rhs_35 !_vremoveAnnotations_0 !_vsubstitute_1 !rem_annots_2::I rhs_type_3 type_heaps_4 = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand rem_annots_2 1) 0)) (True -> let _x_2_0 = select _vsubstitute_1::<{expand_types.substitute;}> 0 (select (select _vremoveAnnotations_0::<{expand_types.removeAnnotations;}> 0 rhs_type_3)::_Tuple2 1) type_heaps_4 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) (False -> let _x_2_0 = select _vsubstitute_1::<{expand_types.substitute;}> 0 rhs_type_3 type_heaps_4 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) 
expand_types.substitute_47 !_x_0 !heaps_1 = case _x_0 (syntax.TA_Var _x_1_0 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 av_info_ptr_2_1 -> case heaps_1 (syntax._TypeHeaps th_vars_3_0 th_attrs_3_1 -> <{expand_types._c;341;11_116}> (Heap.sreadPtr av_info_ptr_2_1 th_attrs_3_1) heaps_1) ) ) (syntax.TA_RootVar _x_1_0 -> case _x_1_0 (syntax._AttributeVar av_ident_2_0 av_info_ptr_2_1 -> case heaps_1 (syntax._TypeHeaps th_vars_3_0 th_attrs_3_1 -> <{expand_types._c;347;11_117}> (Heap.sreadPtr av_info_ptr_2_1 th_attrs_3_1) heaps_1) ) ) (syntax.TA_None -> <{_Tuple3!7}> True syntax.TA_Multi heaps_1) (_ -> <{_Tuple3!7}> False _x_0 heaps_1)
<{expand_types._c;347;11_117}> !_x_0 !heaps_1 = case _x_0 (syntax.AVI_Attr attr_1_0 -> <{_Tuple3!7}> True attr_1_0 heaps_1) (_ -> <{_Tuple3!7}> True syntax.TA_Multi heaps_1)
<{expand_types._c;341;11_116}> !_x_0 !heaps_1 = case _x_0 (syntax.AVI_Attr attr_1_0 -> <{_Tuple3!7}> True attr_1_0 heaps_1) (_ -> <{_Tuple3!7}> True syntax.TA_Multi heaps_1)
expand_types.substitute_12 !_vsubstitute_0 !lt_1 !heaps_2 = case lt_1 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = select _vsubstitute_0::<{expand_types.substitute;}> 0 t_1_0 heaps_2 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_12 _vsubstitute_0 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_12 _vsubstitute_0 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_1 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_2) 
expand_types.substitute_92 !lt_0 !heaps_1 = case lt_0 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = expand_types.substitute_8 t_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_92 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_92 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_0 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_1) 
expand_types.substitute_8 !atype_0 !heaps_1 = case atype_0 (syntax._AType at_attribute_1_0 at_type_1_1 -> let _x_2_0 = expand_types.substitute_47 at_attribute_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_7 at_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._AType (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (update atype_0::syntax._AType [0:select _x_2_0::_Tuple3 1]) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_7 at_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (update atype_0::syntax._AType [1:select _x_4_1::_Tuple3 1]) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False atype_0 (select _x_4_1::_Tuple3 2)) ) ) 
expand_types.substitute_7 !tv_0 !heaps_1 = case tv_0 (syntax.TV _x_1_0 -> case _x_1_0 (syntax._TypeVar tv_ident_2_0 tv_info_ptr_2_1 -> case heaps_1 (syntax._TypeHeaps th_vars_3_0 th_attrs_3_1 -> let _x_4_0 = Heap.readPtr tv_info_ptr_2_1 th_vars_3_0, th_vars_4_1 = select _x_4_0::_Tuple2 1 in <{expand_types._c;362;11_118}> (select _x_4_0::_Tuple2 0) heaps_1 th_vars_4_1 tv_0) ) ) (<{syntax.-->}> arg_type_1_0 res_type_1_1 -> let _x_2_0 = expand_types.substitute_8 arg_type_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_8 res_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (<{syntax.-->}> (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (<{syntax.-->}> (select _x_2_0::_Tuple3 1) res_type_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_8 res_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (<{syntax.-->}> arg_type_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False tv_0 (select _x_4_1::_Tuple3 2)) ) ) (syntax.TA cons_id_1_0 cons_args_1_1 -> let _x_2_0 = expand_types.substitute_92 cons_args_1_1 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax.TA cons_id_1_0 (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False tv_0 (select _x_2_0::_Tuple3 2)) ) (syntax.TAS cons_id_1_0 cons_args_1_1 strictness_1_2 -> let _x_2_0 = expand_types.substitute_92 cons_args_1_1 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax.TAS cons_id_1_0 (select _x_2_0::_Tuple3 1) strictness_1_2) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False tv_0 (select _x_2_0::_Tuple3 2)) ) (<{syntax.:@:}> _x_1_0 types_1_1 -> case _x_1_0 (syntax.CV type_var_2_0 -> case heaps_1 (syntax._TypeHeaps th_vars_3_0 th_attrs_3_1 -> let _x_4_0 = Heap.readPtr (select type_var_2_0::syntax._TypeVar 1) th_vars_3_0, th_vars_4_1 = select _x_4_0::_Tuple2 1, heaps_4_2 = update heaps_1::syntax._TypeHeaps [0:th_vars_4_1], _x_4_3 = expand_types.substitute_92 types_1_1 heaps_4_2 in case (select _x_4_3::_Tuple3 0) (True -> let types_r_6_0 = select _x_4_3::_Tuple3 1, heaps_6_1 = select _x_4_3::_Tuple3 2 in <{expand_types._c;392;15_119}> (select _x_4_0::_Tuple2 0) types_r_6_0 heaps_6_1 type_var_2_0) (False -> let heaps_6_0 = select _x_4_3::_Tuple3 2 in <{expand_types._c;401;15_120}> (select _x_4_0::_Tuple2 0) types_1_1 heaps_6_0 tv_0) ) ) ) (syntax.TArrow1 arg_type_1_0 -> let _x_2_0 = expand_types.substitute_8 arg_type_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax.TArrow1 (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False tv_0 (select _x_2_0::_Tuple3 2)) ) (_ -> <{_Tuple3!7}> False tv_0 heaps_1)
<{expand_types._c;401;15_120}> !_x_0 types_1 !heaps_2 tv_3 = case _x_0 (syntax.TVI_Type s_type_1_0 -> let _x_2_0 = expand_types.simplifyAndCheckTypeApplication s_type_1_0 types_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple3!7}> True (select _x_2_0::_Tuple2 1) heaps_2) (False -> <{_Tuple3!7}> False tv_3 heaps_2) ) (_ -> <{_Tuple3!7}> False tv_3 heaps_2)
<{expand_types._c;392;15_119}> !_x_0 !types_r_1 !heaps_2 type_var_3 = case _x_0 (syntax.TVI_Type s_type_1_0 -> let _x_2_0 = expand_types.simplifyAndCheckTypeApplication s_type_1_0 types_r_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple3!7}> True (select _x_2_0::_Tuple2 1) heaps_2) (False -> <{_Tuple3!7}> True (<{syntax.:@:}> (syntax.CV type_var_3) types_r_1) heaps_2) ) (_ -> <{_Tuple3!7}> True (<{syntax.:@:}> (syntax.CV type_var_3) types_r_1) heaps_2)
<{expand_types._c;362;11_118}> !_x_0 !heaps_1 !th_vars_2 tv_3 = case _x_0 (syntax.TVI_Type type_1_0 -> <{_Tuple3!7}> True type_1_0 (update heaps_1::syntax._TypeHeaps [0:th_vars_2])) (_ -> <{_Tuple3!7}> False tv_3 (update heaps_1::syntax._TypeHeaps [0:th_vars_2]))
expand_types.removeAnnotations_49 !_vremoveAnnotations_0 !_vremoveAnnotations_1 !t_2 = case t_2 (_Tuple2 x_1_0 y_1_1 -> let _x_2_0 = select _vremoveAnnotations_0::<{expand_types.removeAnnotations;}> 0 x_1_0, _x_2_1 = select _vremoveAnnotations_1::<{expand_types.removeAnnotations;}> 0 y_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_Tuple2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_2) ) 
expand_types.removeAnnotations_50 !_vremoveAnnotations_0 !l_1 = case l_1 (_predefined._Cons x_1_0 xs_1_1 -> let _x_2_0 = select _vremoveAnnotations_0::<{expand_types.removeAnnotations;}> 0 x_1_0, _x_2_1 = expand_types.removeAnnotations_50 _vremoveAnnotations_0 xs_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False l_1) ) (_ -> <{_Tuple2!3}> False l_1)
expand_types.removeAnnotations_95 !t_0 = case t_0 (_Tuple2 x_1_0 y_1_1 -> let _x_2_0 = expand_types.removeAnnotations_51 x_1_0, _x_2_1 = expand_types.removeAnnotations_51 y_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_Tuple2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) 
expand_types.removeAnnotations_51 !atype_0 = case atype_0 (syntax._AType at_attribute_1_0 at_type_1_1 -> let _x_2_0 = expand_types.removeAnnotations_13 at_type_1_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> True (update atype_0::syntax._AType [1:select _x_2_0::_Tuple2 1])) (False -> <{_Tuple2!3}> False atype_0) ) 
expand_types.removeAnnotations_94 !l_0 = case l_0 (_predefined._Cons x_1_0 xs_1_1 -> let _x_2_0 = expand_types.removeAnnotations_51 x_1_0, _x_2_1 = expand_types.removeAnnotations_94 xs_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False l_0) ) (_ -> <{_Tuple2!3}> False l_0)
expand_types.removeAnnotations_13 !t_0 = case t_0 (<{syntax.-->}> arg_type_1_0 res_type_1_1 -> let _x_2_0 = expand_types.removeAnnotations_95 (_Tuple2 arg_type_1_0 res_type_1_1) in case (select _x_2_0::_Tuple2 0) (True -> let _x_4_0 = select _x_2_0::_Tuple2 1 in <{_Tuple2!3}> True (<{syntax.-->}> (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) (syntax.TA cons_id_1_0 cons_args_1_1 -> let _x_2_0 = expand_types.removeAnnotations_94 cons_args_1_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> True (syntax.TA cons_id_1_0 (select _x_2_0::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) (syntax.TAS cons_id_1_0 cons_args_1_1 _x_1_2 -> let _x_2_0 = expand_types.removeAnnotations_94 cons_args_1_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> True (syntax.TA cons_id_1_0 (select _x_2_0::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) (syntax.TArrow1 arg_type_1_0 -> let _x_2_0 = expand_types.removeAnnotations_51 arg_type_1_0 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> True (syntax.TArrow1 (select _x_2_0::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) (<{syntax.:@:}> cv_1_0 types_1_1 -> let _x_2_0 = expand_types.removeAnnotations_94 types_1_1 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> True (<{syntax.:@:}> cv_1_0 (select _x_2_0::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) (_ -> <{_Tuple2!3}> False t_0)
expand_types.removeAnnotations_93 !_vremoveAnnotations_0 !t_1 = case t_1 (_Tuple2 x_1_0 y_1_1 -> let _x_2_0 = expand_types.removeAnnotations_51 x_1_0, _x_2_1 = select _vremoveAnnotations_0::<{expand_types.removeAnnotations;}> 0 y_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_Tuple2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_1) ) 
expand_types.fold_st2_96 !_x_0 !_x_1 !st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> expand_types.bind_var_and_attr_29 x_1_0 y_2_0 (expand_types.fold_st2_96 xs_1_1 ys_2_1 st_2)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> st_2) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_1 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.substitute_rhs_97 !_vsubstitute_0 !rem_annots_1::I rhs_type_2 type_heaps_3 = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand rem_annots_1 1) 0)) (True -> let _x_2_0 = select _vsubstitute_0::<{expand_types.substitute;}> 0 (select (expand_types.removeAnnotations_13 rhs_type_2)::_Tuple2 1) type_heaps_3 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) (False -> let _x_2_0 = select _vsubstitute_0::<{expand_types.substitute;}> 0 rhs_type_2 type_heaps_3 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) 
expand_types.substitute_rhs_98 !rem_annots_0::I rhs_type_1 type_heaps_2 = case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand rem_annots_0 1) 0)) (True -> let _x_2_0 = expand_types.substitute_7 (select (expand_types.removeAnnotations_13 rhs_type_1)::_Tuple2 1) type_heaps_2 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) (False -> let _x_2_0 = expand_types.substitute_7 rhs_type_1 type_heaps_2 in _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2)) 
expand_types.bind_and_substitute_before_expand_31 types_0 td_args_1 td_attribute_2 rhs_type_3 !rem_annots_4::I attribute_5 ets_type_heaps_6 = expand_types.substitute_rhs_98 rem_annots_4 (select rhs_type_3::syntax._AType 1) (expand_types.fold_st2_96 td_args_1 types_0 (expand_types.bind_attr_34 td_attribute_2 attribute_5 ets_type_heaps_6))
expand_types.fold_st2_53 op_0 !_x_1 !_x_2 st_3 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> case _x_2 (_predefined._Cons y_2_0 ys_2_1 -> op_0 x_1_0 y_2_0 (expand_types.fold_st2_53 op_0 xs_1_1 ys_2_1 st_3)) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> st_3) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_2 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.bind_and_save_var_and_attr_30 !_x_0 !_x_1 !_x_2 = case _x_0 (syntax._ATypeVar _x_1_0 _x_1_1 -> case _x_1_0 (syntax.TA_Var _x_2_0 -> case _x_2_0 (syntax._AttributeVar av_ident_3_0 av_info_ptr_3_1 -> case _x_1_1 (syntax._TypeVar tv_ident_4_0 tv_info_ptr_4_1 -> case _x_1 (syntax._AType at_attribute_5_0 at_type_5_1 -> case _x_2 (_Tuple3 rev_tv_infos_6_0 th_vars_6_1 th_attrs_6_2 -> let _x_7_0 = Heap.readPtr tv_info_ptr_4_1 th_vars_6_1, ptr_and_val_7_1 = _Tuple2 tv_info_ptr_4_1 (syntax.TVI_Type at_type_5_1), ptr_and_val_7_2 = _Tuple2 av_info_ptr_3_1 (syntax.AVI_Attr at_attribute_5_0) in _Tuple3 (_predefined._Cons (select _x_7_0::_Tuple2 0) rev_tv_infos_6_0) (Heap.writePtr (select ptr_and_val_7_1::_Tuple2 0) (select ptr_and_val_7_1::_Tuple2 1) (select _x_7_0::_Tuple2 1)) (Heap.writePtr (select ptr_and_val_7_2::_Tuple2 0) (select ptr_and_val_7_2::_Tuple2 1) th_attrs_6_2)) ) ) ) ) (_ -> case _x_1_1 (syntax._TypeVar tv_ident_2_0 tv_info_ptr_2_1 -> case _x_1 (syntax._AType at_attribute_3_0 at_type_3_1 -> case _x_2 (_Tuple3 rev_tv_infos_4_0 th_vars_4_1 th_attrs_4_2 -> let _x_5_0 = Heap.readPtr tv_info_ptr_2_1 th_vars_4_1, ptr_and_val_5_1 = _Tuple2 tv_info_ptr_2_1 (syntax.TVI_Type at_type_3_1) in _Tuple3 (_predefined._Cons (select _x_5_0::_Tuple2 0) rev_tv_infos_4_0) (Heap.writePtr (select ptr_and_val_5_1::_Tuple2 0) (select ptr_and_val_5_1::_Tuple2 1) (select _x_5_0::_Tuple2 1)) th_attrs_4_2) ) ) )) 
expand_types.fold_st2_99 !_x_0 !_x_1 !st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> expand_types.bind_and_save_var_and_attr_30 x_1_0 y_2_0 (expand_types.fold_st2_99 xs_1_1 ys_2_1 st_2)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> st_2) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_1 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.bind_save_and_substitute_before_expand_32 types_0 td_args_1 td_attribute_2 rhs_type_3 rem_annots_4::I attribute_5 ets_type_heaps_6 = let ets_type_heaps_1_0 = expand_types.bind_attr_34 td_attribute_2 attribute_5 ets_type_heaps_6, _x_1_1 = expand_types.fold_st2_99 td_args_1 types_0 (_Tuple3 _predefined._Nil (select ets_type_heaps_1_0::syntax._TypeHeaps 0) (select ets_type_heaps_1_0::syntax._TypeHeaps 1)), _x_1_2 = expand_types.substitute_rhs_98 rem_annots_4 (select rhs_type_3::syntax._AType 1) (update ets_type_heaps_1_0::syntax._TypeHeaps [0:select _x_1_1::_Tuple3 1,1:select _x_1_1::_Tuple3 2]) in _Tuple3 (select _x_1_2::_Tuple2 0) (select _x_1_1::_Tuple3 0) (select _x_1_2::_Tuple2 1)
expand_types.restore_tv_info_33 !tv_info_0 !_x_1 !th_vars_2 = case _x_1 (syntax._ATypeVar atv_attribute_1_0 _x_1_1 -> case _x_1_1 (syntax._TypeVar tv_ident_2_0 tv_info_ptr_2_1 -> Heap.writePtr tv_info_ptr_2_1 tv_info_0 th_vars_2) ) 
expand_types.fold_st2_101 !_x_0 !_x_1 !st_2 = case _x_0 (_predefined._Cons x_1_0 xs_1_1 -> case _x_1 (_predefined._Cons y_2_0 ys_2_1 -> expand_types.restore_tv_info_33 x_1_0 y_2_0 (expand_types.fold_st2_101 xs_1_1 ys_2_1 st_2)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> st_2) (_ -> StdMisc.abort "fold_st2: second argument list contains more elements")) (_ -> case _x_1 (_predefined._Nil -> StdMisc.abort "fold_st2: first argument list contains more elements") )
expand_types.expandSynTypes_103 !rem_annots_0::I !common_defs_1 !_x_2 !ets_3 = case _x_2 (_Tuple2 type1_1_0 type2_1_1 -> let !_x_2_0 = expand_types.expandSynTypes_46 rem_annots_0 common_defs_1 type1_1_0 ets_3, !_x_2_1 = expand_types.expandSynTypes_46 rem_annots_0 common_defs_1 type2_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (expand_types._f133_133 (select _x_2_0::_Tuple3 0) _x_2_1) (_Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) 
expand_types.expandSynTypes_100 !rem_annots_0::I !common_defs_1 !_x_2 !ets_3 = case _x_2 (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil ets_3) (_predefined._Cons type_1_0 types_1_1 -> let !_x_2_0 = expand_types.expandSynTypes_46 rem_annots_0 common_defs_1 type_1_0 ets_3, !_x_2_1 = expand_types.expandSynTypes_100 rem_annots_0 common_defs_1 types_1_1 (select _x_2_0::_Tuple3 2) in case (case (select _x_2_0::_Tuple3 0) (True -> True) (False -> select _x_2_1::_Tuple3 0) ) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False _x_2 (select _x_2_1::_Tuple3 2)) ) 
expand_types.expandSynTypes_44 !rem_annots_0::I !common_defs_1 !type_2 !ets_3 = case type_2 (<{syntax.-->}> arg_type_1_0 res_type_1_1 -> let _x_2_0 = expand_types.expandSynTypes_103 rem_annots_0 common_defs_1 (_Tuple2 arg_type_1_0 res_type_1_1) ets_3 in case (select _x_2_0::_Tuple3 0) (True -> let _x_4_0 = select _x_2_0::_Tuple3 1 in <{_Tuple3!7}> True (<{syntax.-->}> (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1)) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False type_2 (select _x_2_0::_Tuple3 2)) ) (syntax.TB _x_1_0 -> <{_Tuple3!7}> False type_2 ets_3) (<{syntax.:@:}> cons_var_1_0 types_1_1 -> let _x_2_0 = expand_types.expandSynTypes_100 rem_annots_0 common_defs_1 types_1_1 ets_3 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (<{syntax.:@:}> cons_var_1_0 (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False type_2 (select _x_2_0::_Tuple3 2)) ) (syntax.TA type_symb_1_0 types_1_1 -> expand_types.expand_syn_types_in_TA rem_annots_0 common_defs_1 type_2 syntax.TA_Multi ets_3) (syntax.TAS type_symb_1_0 types_1_1 _x_1_2 -> expand_types.expand_syn_types_in_TA rem_annots_0 common_defs_1 type_2 syntax.TA_Multi ets_3) (syntax.TFA vars_1_0 type_1_1 -> let _x_2_0 = expand_types.expandSynTypes_44 rem_annots_0 common_defs_1 type_1_1 ets_3 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax.TFA vars_1_0 (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False type_2 (select _x_2_0::_Tuple3 2)) ) (syntax.TFAC vars_1_0 type_1_1 type_context_1_2 -> let _x_2_0 = expand_types.expandSynTypes_44 rem_annots_0 common_defs_1 type_1_1 ets_3 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax.TFAC vars_1_0 (select _x_2_0::_Tuple3 1) type_context_1_2) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False type_2 (select _x_2_0::_Tuple3 2)) ) (_ -> <{_Tuple3!7}> False type_2 ets_3)
expand_types.expand_type_37 common_defs_0 types_1 td_args_2 td_attribute_3 rhs_type_4 !rem_annots_5::I attribute_6 ets_7 = case (<{StdInt.==_16}> (StdInt.bitand rem_annots_5 4) 0) (True -> let _x_2_0 = expand_types.bind_and_substitute_before_expand_31 types_1 td_args_2 td_attribute_3 rhs_type_4 rem_annots_5 attribute_6 (select ets_7::expand_types._ExpandTypeState 2), _x_2_1 = expand_types.expandSynTypes_44 rem_annots_5 common_defs_0 (select _x_2_0::_Tuple2 0) (update ets_7::expand_types._ExpandTypeState [2:select _x_2_0::_Tuple2 1]) in _Tuple3 True (select _x_2_1::_Tuple3 1) (select _x_2_1::_Tuple3 2)) (False -> let _x_2_0 = expand_types.bind_save_and_substitute_before_expand_32 types_1 td_args_2 td_attribute_3 rhs_type_4 rem_annots_5 attribute_6 (select ets_7::expand_types._ExpandTypeState 2), _x_2_1 = expand_types.expandSynTypes_44 rem_annots_5 common_defs_0 (select _x_2_0::_Tuple3 0) (update ets_7::expand_types._ExpandTypeState [2:select _x_2_0::_Tuple3 2]), ets_2_2 = select _x_2_1::_Tuple3 2, ets_type_heaps_2_3 = select ets_2_2::expand_types._ExpandTypeState 2 in _Tuple3 True (select _x_2_1::_Tuple3 1) (update ets_2_2::expand_types._ExpandTypeState [2:update ets_type_heaps_2_3::syntax._TypeHeaps [0:expand_types.fold_st2_101 (StdList.reverse (select _x_2_0::_Tuple3 1)) td_args_2 (select ets_type_heaps_2_3::syntax._TypeHeaps 0)]])) 
expand_types.expand_syn_types_in_TA !rem_annots_0::I !common_defs_1 !ta_type_2 !attribute_3 !ets_4 = case ets_4 (expand_types._ExpandTypeState ets_type_defs_1_0 ets_collected_conses_1_1 ets_type_heaps_1_2 ets_var_heap_1_3 ets_main_dcl_module_n_1_4 ets_contains_unexpanded_abs_syn_type_1_5 -> let _x_2_0 = <{expand_types._c;215;43_121}> ta_type_2, glob_module_2_1 = select _x_2_0::_Tuple3 1, glob_object_2_2 = select _x_2_0::_Tuple3 0, _x_2_3 = expand_types.select_60 (_SystemArray.select_43 ets_type_defs_1_0 glob_module_2_1) glob_object_2_2, _x_2_4 = select _x_2_3::_Tuple2 0, td_rhs_2_5 = select _x_2_4::syntax._TypeDef 5, ets_type_defs_2_6 = select _x_2_3::_Tuple2 1, td_attribute_2_7::I = select _x_2_4::syntax._TypeDef 6, td_args_2_8::I = select _x_2_4::syntax._TypeDef 3, types_2_9 = select _x_2_0::_Tuple3 2 in <{expand_types._c;220;7_132}> td_rhs_2_5 common_defs_1 types_2_9 td_args_2_8 td_attribute_2_7 rem_annots_0 attribute_3 ets_4 ets_type_defs_2_6 glob_module_2_1 ta_type_2) 
expand_types.expand_syn_types_in_a_type_40 !rem_annots_0::I !common_defs_1 !atype_2 !ets_3 = case atype_2 (syntax._AType at_attribute_1_0 at_type_1_1 -> case at_type_1_1 (syntax.TA type_symb_2_0 types_2_1 -> let _x_3_0 = expand_types.expand_syn_types_in_TA rem_annots_0 common_defs_1 at_type_1_1 at_attribute_1_0 ets_3 in case (select _x_3_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (update atype_2::syntax._AType [1:select _x_3_0::_Tuple3 1]) (select _x_3_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False atype_2 (select _x_3_0::_Tuple3 2)) ) (syntax.TAS type_symb_2_0 types_2_1 _x_2_2 -> let _x_3_0 = expand_types.expand_syn_types_in_TA rem_annots_0 common_defs_1 at_type_1_1 at_attribute_1_0 ets_3 in case (select _x_3_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (update atype_2::syntax._AType [1:select _x_3_0::_Tuple3 1]) (select _x_3_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False atype_2 (select _x_3_0::_Tuple3 2)) ) ) (_ -> let _x_1_0 = expand_types.expandSynTypes_44 rem_annots_0 common_defs_1 (select atype_2::syntax._AType 1) ets_3 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (update atype_2::syntax._AType [1:select _x_1_0::_Tuple3 1]) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False atype_2 (select _x_1_0::_Tuple3 2)) )
expand_types.expandSynTypes_46 !rem_annots_0::I !common_defs_1 !atype_2 !ets_3 = expand_types.expand_syn_types_in_a_type_40 rem_annots_0 common_defs_1 atype_2 ets_3
expand_types._f133_133::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple3 0)
<{expand_types._c;220;7_132}> !td_rhs_0 !common_defs_1 types_2 td_args_3 td_attribute_4 !rem_annots_5::I attribute_6 ets_7 ets_type_defs_8 glob_module_9::I ta_type_10 = case td_rhs_0 (syntax.SynType rhs_type_1_0 -> expand_types.expand_type_37 common_defs_1 types_2 td_args_3 td_attribute_4 rhs_type_1_0 rem_annots_5 attribute_6 (update ets_7::expand_types._ExpandTypeState [0:ets_type_defs_8])) (syntax.AbstractSynType _x_1_0 rhs_type_1_1 -> case (StdBool.not (<{StdInt.==_16}> (StdInt.bitand rem_annots_5 2) 0)) (True -> expand_types.expand_type_37 common_defs_1 types_2 td_args_3 td_attribute_4 rhs_type_1_1 rem_annots_5 attribute_6 (update ets_7::expand_types._ExpandTypeState [0:ets_type_defs_8])) (False -> let !_x_3_0 = expand_types.expandSynTypes_100 rem_annots_5 common_defs_1 types_2 (update (update ets_7::expand_types._ExpandTypeState [0:ets_type_defs_8])::expand_types._ExpandTypeState [5:True]), ets_3_1 = select _x_3_0::_Tuple3 2 in case (<{StdInt.==_16}> glob_module_9 (select ets_3_1::expand_types._ExpandTypeState 4)) (True -> let changed_5_0::B = select _x_3_0::_Tuple3 0 in <{_Tuple3!7}> changed_5_0 (<{expand_types._if;228;29_128}> changed_5_0 ta_type_10 _x_3_0) ets_3_1) (False -> let changed_5_0::B = select _x_3_0::_Tuple3 0 in <{_Tuple3!7}> changed_5_0 (<{expand_types._if;228;29_130}> changed_5_0 ta_type_10 _x_3_0) (expand_types.collect_imported_constructors_38 common_defs_1 glob_module_9 td_rhs_0 ets_3_1)) ) ) (syntax.NewType _x_1_0 -> expand_types._f131_131 _x_1_0 common_defs_1 types_2 td_args_3 td_attribute_4 glob_module_9 rem_annots_5 attribute_6 ets_7 ets_type_defs_8 ta_type_10 td_rhs_0) (_ -> <{expand_types._c;220;7_126}> rem_annots_5 common_defs_1 types_2 ets_7 ets_type_defs_8 glob_module_9 ta_type_10 td_rhs_0)
expand_types._f131_131 !_x_0 !common_defs_1 types_2 td_args_3 !td_attribute_4 glob_module_5::I !rem_annots_6::I attribute_7 !ets_8 !ets_type_defs_9 ta_type_10 td_rhs_11 = case _x_0 (syntax._DefinedSymbol ds_ident_1_0 ds_arity_1_1 ds_index_1_2 -> expand_types.expand_type_37 common_defs_1 types_2 td_args_3 td_attribute_4 (select (select (select (expand_types.select_84 (select (expand_types.select_76 common_defs_1 glob_module_5)::syntax._CommonDefs 1) ds_index_1_2)::syntax._ConsDef 1)::syntax._SymbolType 1)::_Tuple2 0) rem_annots_6 attribute_7 (update ets_8::expand_types._ExpandTypeState [0:ets_type_defs_9])) (_ -> <{expand_types._c;220;7_126}> rem_annots_6 common_defs_1 types_2 ets_8 ets_type_defs_9 glob_module_5 ta_type_10 td_rhs_11)
<{expand_types._if;228;29_130}> !changed_0::B !ta_type_1 _x_2 = case changed_0 (True -> <{expand_types._c;229;35_129}> ta_type_1 _x_2) (_ -> ta_type_1)
<{expand_types._c;229;35_129}> !ta_type_0 !_x_1 = case ta_type_0 (syntax.TA type_symb_1_0 _x_1_1 -> syntax.TA type_symb_1_0 (select _x_1::_Tuple3 1)) (syntax.TAS type_symb_1_0 _x_1_1 strictness_1_2 -> syntax.TAS type_symb_1_0 (select _x_1::_Tuple3 1) strictness_1_2) 
<{expand_types._if;228;29_128}> !changed_0::B !ta_type_1 _x_2 = case changed_0 (True -> <{expand_types._c;229;35_127}> ta_type_1 _x_2) (_ -> ta_type_1)
<{expand_types._c;229;35_127}> !ta_type_0 !_x_1 = case ta_type_0 (syntax.TA type_symb_1_0 _x_1_1 -> syntax.TA type_symb_1_0 (select _x_1::_Tuple3 1)) (syntax.TAS type_symb_1_0 _x_1_1 strictness_1_2 -> syntax.TAS type_symb_1_0 (select _x_1::_Tuple3 1) strictness_1_2) 
<{expand_types._c;220;7_126}> !rem_annots_0::I !common_defs_1 !types_2 !ets_3 !ets_type_defs_4 !glob_module_5::I ta_type_6 td_rhs_7 = let !_x_1_0 = expand_types.expandSynTypes_100 rem_annots_0 common_defs_1 types_2 (update ets_3::expand_types._ExpandTypeState [0:ets_type_defs_4]), ets_1_1 = select _x_1_0::_Tuple3 2 in case (case (<{StdInt.==_16}> glob_module_5 (select ets_1_1::expand_types._ExpandTypeState 4)) (True -> True) (False -> StdBool.not (<{StdInt.==_16}> (StdInt.bitand rem_annots_0 4) 0)) ) (True -> let changed_3_0::B = select _x_1_0::_Tuple3 0 in <{_Tuple3!7}> changed_3_0 (<{expand_types._if;241;25_123}> changed_3_0 ta_type_6 _x_1_0) ets_1_1) (False -> let changed_3_0::B = select _x_1_0::_Tuple3 0 in <{_Tuple3!7}> changed_3_0 (<{expand_types._if;241;25_125}> changed_3_0 ta_type_6 _x_1_0) (expand_types.collect_imported_constructors_38 common_defs_1 glob_module_5 td_rhs_7 ets_1_1)) 
<{expand_types._if;241;25_125}> !changed_0::B !ta_type_1 _x_2 = case changed_0 (True -> <{expand_types._c;242;31_124}> ta_type_1 _x_2) (_ -> ta_type_1)
<{expand_types._c;242;31_124}> !ta_type_0 !_x_1 = case ta_type_0 (syntax.TA type_symb_1_0 _x_1_1 -> syntax.TA type_symb_1_0 (select _x_1::_Tuple3 1)) (syntax.TAS type_symb_1_0 _x_1_1 strictness_1_2 -> syntax.TAS type_symb_1_0 (select _x_1::_Tuple3 1) strictness_1_2) 
<{expand_types._if;241;25_123}> !changed_0::B !ta_type_1 _x_2 = case changed_0 (True -> <{expand_types._c;242;31_122}> ta_type_1 _x_2) (_ -> ta_type_1)
<{expand_types._c;242;31_122}> !ta_type_0 !_x_1 = case ta_type_0 (syntax.TA type_symb_1_0 _x_1_1 -> syntax.TA type_symb_1_0 (select _x_1::_Tuple3 1)) (syntax.TAS type_symb_1_0 _x_1_1 strictness_1_2 -> syntax.TAS type_symb_1_0 (select _x_1::_Tuple3 1) strictness_1_2) 
<{expand_types._c;215;43_121}> !ta_type_0 = case ta_type_0 (syntax.TA type_symb_1_0 types_1_1 -> case type_symb_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 type_index_2_2 type_prop_2_3 -> case type_index_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> _Tuple3 glob_object_3_0 glob_module_3_1 types_1_1) ) ) (syntax.TAS type_symb_1_0 types_1_1 strictness_1_2 -> case type_symb_1_0 (syntax._TypeSymbIdent type_ident_2_0 type_arity_2_1 type_index_2_2 type_prop_2_3 -> case type_index_2_2 (syntax._Global glob_object_3_0 glob_module_3_1 -> _Tuple3 glob_object_3_0 glob_module_3_1 types_1_1) ) ) 
expand_types.expandSynTypes_102 !_vexpandSynTypes_0 !rem_annots_1::I !common_defs_2 !_x_3 !ets_4 = case _x_3 (_Tuple2 type1_1_0 type2_1_1 -> let !_x_2_0 = expand_types.expandSynTypes_46 rem_annots_1 common_defs_2 type1_1_0 ets_4, !_x_2_1 = select _vexpandSynTypes_0::<{expand_types.expandSynTypes;}> 0 rem_annots_1 common_defs_2 type2_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (expand_types._f134_134 (select _x_2_0::_Tuple3 0) _x_2_1) (_Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) 
expand_types._f134_134::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple3 0)
expand_types.expandSynTypes_104 !_vexpandSynTypes_0 !rem_annots_1::I !common_defs_2 !_x_3 !ets_4 = case _x_3 (_Tuple2 type1_1_0 type2_1_1 -> let !_x_2_0 = expand_types.expandSynTypes_100 rem_annots_1 common_defs_2 type1_1_0 ets_4, !_x_2_1 = select _vexpandSynTypes_0::<{expand_types.expandSynTypes;}> 0 rem_annots_1 common_defs_2 type2_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (expand_types._f135_135 (select _x_2_0::_Tuple3 0) _x_2_1) (_Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) 
expand_types._f135_135::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple3 0)
expand_types.expandSynTypes_105 !rem_annots_0::I !common_defs_1 !_x_2 !ets_3 = case _x_2 (_Tuple2 type1_1_0 type2_1_1 -> let !_x_2_0 = expand_types.expandSynTypes_100 rem_annots_0 common_defs_1 type1_1_0 ets_3, !_x_2_1 = expand_types.expandSynTypes_46 rem_annots_0 common_defs_1 type2_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (expand_types._f136_136 (select _x_2_0::_Tuple3 0) _x_2_1) (_Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) 
expand_types._f136_136::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple3 0)
expand_types.convertSymbolType_ !rem_annots_0::I !common_defs_1 !st_2 !main_dcl_module_n_3::I !imported_types_4 !collected_imports_5 !type_heaps_6 !var_heap_7 = let !_x_1_0 = expand_types.expandSynTypes_105 rem_annots_0 common_defs_1 (_Tuple2 (select st_2::syntax._SymbolType 1) (select st_2::syntax._SymbolType 4)) (expand_types._ExpandTypeState imported_types_4 collected_imports_5 type_heaps_6 var_heap_7 main_dcl_module_n_3 False), _x_1_1 = select _x_1_0::_Tuple3 1, st_args_1_2::I = select _x_1_1::_Tuple2 0, new_st_args_1_3 = expand_types.addTypesOfDictionaries common_defs_1 (select st_2::syntax._SymbolType 5) st_args_1_2, new_st_arity_1_4 = StdList.length_47 new_st_args_1_3, ets_1_5 = select _x_1_0::_Tuple3 2 in <{_Tuple6!63}> (update st_2::syntax._SymbolType [1:new_st_args_1_3,2:containers.insert_n_strictness_values_at_beginning (<{StdInt.-_7}> new_st_arity_1_4 (StdList.length_47 st_args_1_2)) (select st_2::syntax._SymbolType 2),3:new_st_arity_1_4,4:select _x_1_1::_Tuple2 1,5:_predefined._Nil]) (select ets_1_5::expand_types._ExpandTypeState 5) (select ets_1_5::expand_types._ExpandTypeState 0) (select ets_1_5::expand_types._ExpandTypeState 1) (select ets_1_5::expand_types._ExpandTypeState 2) (select ets_1_5::expand_types._ExpandTypeState 3)
expand_types.convertSymbolType !rem_annots_0::B !common_defs_1 !st_2 !main_dcl_module_n_3::I !imported_types_4 !collected_imports_5 !type_heaps_6 !var_heap_7 = let _x_1_0 = expand_types.convertSymbolType_ (<{expand_types._if;56;32_137}> rem_annots_0) common_defs_1 st_2 main_dcl_module_n_3 imported_types_4 collected_imports_5 type_heaps_6 var_heap_7 in <{_Tuple5!31}> (select _x_1_0::_Tuple6 0) (select _x_1_0::_Tuple6 2) (select _x_1_0::_Tuple6 3) (select _x_1_0::_Tuple6 4) (select _x_1_0::_Tuple6 5)
<{expand_types._if;56;32_137}>::I !rem_annots_0::B = case rem_annots_0 (True -> StdInt.bitor 1 2) (_ -> 2)
expand_types.convertSymbolTypeWithoutExpandingAbstractSynTypes !rem_annots_0::B !common_defs_1 !st_2 !main_dcl_module_n_3::I !imported_types_4 !collected_imports_5 !type_heaps_6 !var_heap_7 = expand_types.convertSymbolType_ (<{expand_types._if;63;27_138}> rem_annots_0) common_defs_1 st_2 main_dcl_module_n_3 imported_types_4 collected_imports_5 type_heaps_6 var_heap_7
<{expand_types._if;63;27_138}>::I !rem_annots_0::B = case rem_annots_0 (True -> 1) (_ -> 0)
expand_types.convertSymbolTypeWithoutCollectingImportedConstructors !rem_annots_0::B !common_defs_1 !st_2 !main_dcl_module_n_3::I !imported_types_4 !type_heaps_5 !var_heap_6 = let _x_1_0 = expand_types.convertSymbolType_ (<{expand_types._if;69;11_139}> rem_annots_0) common_defs_1 st_2 main_dcl_module_n_3 imported_types_4 _predefined._Nil type_heaps_5 var_heap_6 in <{_Tuple4!15}> (select _x_1_0::_Tuple6 0) (select _x_1_0::_Tuple6 2) (select _x_1_0::_Tuple6 4) (select _x_1_0::_Tuple6 5)
<{expand_types._if;69;11_139}>::I !rem_annots_0::B = case rem_annots_0 (True -> StdInt.bitor (StdInt.bitor 1 2) 4) (_ -> StdInt.bitor 2 4)
expand_types.substitute_106 !lt_0 !heaps_1 = case lt_0 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = expand_types.substitute_7 t_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_106 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_106 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_0 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_1) 
expand_types.substitute_9 !tc_0 !heaps_1 = case tc_0 (syntax._TypeContext tc_class_1_0 tc_types_1_1 tc_var_1_2 -> let _x_2_0 = expand_types.substitute_106 tc_types_1_1 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> True (update tc_0::syntax._TypeContext [1:select _x_2_0::_Tuple3 1]) (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple3!7}> False tc_0 (select _x_2_0::_Tuple3 2)) ) 
expand_types.substitute_48 !av_0 !heaps_1 = case av_0 (syntax._AttributeVar av_ident_1_0 av_info_ptr_1_1 -> case heaps_1 (syntax._TypeHeaps th_vars_2_0 th_attrs_2_1 -> <{expand_types._c;444;11_140}> (Heap.sreadPtr av_info_ptr_1_1 th_attrs_2_1) heaps_1 av_0) ) 
<{expand_types._c;444;11_140}> !_x_0 !heaps_1 av_2 = case _x_0 (syntax.AVI_Attr _x_1_0 -> case _x_1_0 (syntax.TA_Var attr_var_2_0 -> <{_Tuple3!7}> True attr_var_2_0 heaps_1) ) (_ -> <{_Tuple3!7}> False av_2 heaps_1)
expand_types.substitute_10 !_x_0 !heaps_1 = case _x_0 (syntax._AttrInequality ai_demanded_1_0 ai_offered_1_1 -> let _x_2_0 = expand_types.substitute_48 ai_demanded_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_48 ai_offered_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._AttrInequality (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (syntax._AttrInequality (select _x_2_0::_Tuple3 1) ai_offered_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_48 ai_offered_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._AttrInequality ai_demanded_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False (syntax._AttrInequality ai_demanded_1_0 ai_offered_1_1) (select _x_4_1::_Tuple3 2)) ) ) 
expand_types.substitute_107 !lt_0 !heaps_1 = case lt_0 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = expand_types.substitute_92 t_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_107 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_107 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_0 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_1) 
expand_types.substitute_11 !_x_0 !heaps_1 = case _x_0 (syntax._CaseType ct_pattern_type_1_0 ct_result_type_1_1 ct_cons_types_1_2 -> let _x_2_0 = expand_types.substitute_8 ct_pattern_type_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_8 ct_result_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> let heaps_6_0 = select _x_4_1::_Tuple3 2, _x_6_1 = expand_types.substitute_107 ct_cons_types_1_2 heaps_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._CaseType (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1) (select _x_6_1::_Tuple3 1)) (select _x_6_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (syntax._CaseType (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1) ct_cons_types_1_2) (select _x_6_1::_Tuple3 2)) ) (False -> let heaps_6_0 = select _x_4_1::_Tuple3 2, _x_6_1 = expand_types.substitute_107 ct_cons_types_1_2 heaps_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._CaseType (select _x_2_0::_Tuple3 1) ct_result_type_1_1 (select _x_6_1::_Tuple3 1)) (select _x_6_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (syntax._CaseType (select _x_2_0::_Tuple3 1) ct_result_type_1_1 ct_cons_types_1_2) (select _x_6_1::_Tuple3 2)) ) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_8 ct_result_type_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> let heaps_6_0 = select _x_4_1::_Tuple3 2, _x_6_1 = expand_types.substitute_107 ct_cons_types_1_2 heaps_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._CaseType ct_pattern_type_1_0 (select _x_4_1::_Tuple3 1) (select _x_6_1::_Tuple3 1)) (select _x_6_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (syntax._CaseType ct_pattern_type_1_0 (select _x_4_1::_Tuple3 1) ct_cons_types_1_2) (select _x_6_1::_Tuple3 2)) ) (False -> let heaps_6_0 = select _x_4_1::_Tuple3 2, _x_6_1 = expand_types.substitute_107 ct_cons_types_1_2 heaps_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (syntax._CaseType ct_pattern_type_1_0 ct_result_type_1_1 (select _x_6_1::_Tuple3 1)) (select _x_6_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False (syntax._CaseType ct_pattern_type_1_0 ct_result_type_1_1 ct_cons_types_1_2) (select _x_6_1::_Tuple3 2)) ) ) ) 
expand_types.removeAnnotations_108 !_vremoveAnnotations_0 !t_1 = case t_1 (_Tuple2 x_1_0 y_1_1 -> let _x_2_0 = expand_types.removeAnnotations_94 x_1_0, _x_2_1 = select _vremoveAnnotations_0::<{expand_types.removeAnnotations;}> 0 y_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_Tuple2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_1) ) 
expand_types.removeAnnotations_109 !t_0 = case t_0 (_Tuple2 x_1_0 y_1_1 -> let _x_2_0 = expand_types.removeAnnotations_94 x_1_0, _x_2_1 = expand_types.removeAnnotations_51 y_1_1 in case (case (select _x_2_0::_Tuple2 0) (True -> True) (False -> select _x_2_1::_Tuple2 0) ) (True -> <{_Tuple2!3}> True (_Tuple2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (False -> <{_Tuple2!3}> False t_0) ) 
expand_types.removeAnnotations_14 !st_0 = case st_0 (syntax._SymbolType st_vars_1_0 st_args_1_1 st_args_strictness_1_2 st_arity_1_3 st_result_1_4 st_context_1_5 st_attr_vars_1_6 st_attr_env_1_7 -> let _x_2_0 = expand_types.removeAnnotations_109 (_Tuple2 st_args_1_1 st_result_1_4) in case (select _x_2_0::_Tuple2 0) (True -> let _x_4_0 = select _x_2_0::_Tuple2 1 in <{_Tuple2!3}> True (update st_0::syntax._SymbolType [1:select _x_4_0::_Tuple2 0,2:syntax.NotStrict,4:select _x_4_0::_Tuple2 1])) (False -> case (containers.is_not_strict st_args_strictness_1_2) (True -> <{_Tuple2!3}> False st_0) (False -> <{_Tuple2!3}> True (update st_0::syntax._SymbolType [2:syntax.NotStrict])) ) ) 
expand_types.substitute_110 !lt_0 !heaps_1 = case lt_0 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = expand_types.substitute_10 t_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_110 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_110 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_0 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_1) 
expand_types.substitute_15 !lt_0 !heaps_1 = expand_types.substitute_110 lt_0 heaps_1
expand_types.substitute_111 !lt_0 !heaps_1 = case lt_0 (_predefined._Cons t_1_0 ts_1_1 -> let _x_2_0 = expand_types.substitute_9 t_1_0 heaps_1 in case (select _x_2_0::_Tuple3 0) (True -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_111 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> True (_predefined._Cons (select _x_2_0::_Tuple3 1) ts_1_1) (select _x_4_1::_Tuple3 2)) ) (False -> let heaps_4_0 = select _x_2_0::_Tuple3 2, _x_4_1 = expand_types.substitute_111 ts_1_1 heaps_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple3!7}> True (_predefined._Cons t_1_0 (select _x_4_1::_Tuple3 1)) (select _x_4_1::_Tuple3 2)) (False -> <{_Tuple3!7}> False lt_0 (select _x_4_1::_Tuple3 2)) ) ) (_predefined._Nil -> <{_Tuple3!7}> False _predefined._Nil heaps_1) 
expand_types.substitute_16 !lt_0 !heaps_1 = expand_types.substitute_111 lt_0 heaps_1
expand_types.substitute_17 !lt_0 !heaps_1 = expand_types.substitute_92 lt_0 heaps_1
expand_types.expandSynTypes_18 !rem_annots_0::I !common_defs_1 !_x_2 !ets_3 = expand_types.expandSynTypes_105 rem_annots_0 common_defs_1 _x_2 ets_3
<{expand_types.TD;ExpandTypeState}> _x_0::B = _predefined._Nil
<{expand_types.TD;expandSynTypes;}> _x_0::B = _predefined._Nil
<{expand_types.TD;substitute;}> _x_0::B = _predefined._Nil
<{expand_types.TD;removeAnnotations;}> _x_0::B = _predefined._Nil


|| Converted Records
:: expand_types._ExpandTypeState = {!expand_types.ets_type_defs, !expand_types.ets_collected_conses, !expand_types.ets_type_heaps, !expand_types.ets_var_heap, !expand_types.ets_main_dcl_module_n::I, !expand_types.ets_contains_unexpanded_abs_syn_type::B}

:: <{expand_types.expandSynTypes;}> = {!expand_types.expandSynTypes}

:: <{expand_types.substitute;}> = {!expand_types.substitute}

:: <{expand_types.removeAnnotations;}> = {!expand_types.removeAnnotations}

