|| ?module? scanner


scanner.DefaultPriority = scanner.Prio scanner.LeftAssoc 9
<{scanner.cu;1732;49_124}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3, c_2_2 = select _x_2_1::_Tuple2 0 in <{scanner.cu;1732;49_124}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (<{scanner._if;1732;16_187}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{scanner._if;1732;16_187}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{scanner.cu;1732;49_176}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = _SystemArray.uselect_22 g_a_4 c_i_2, c_2_2 = select _x_2_1::_Tuple2 0 in <{scanner.cu;1732;49_176}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (<{scanner._if;1732;16_188}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{scanner._if;1732;16_188}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
<{scanner.cu;1732;49_177}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = _SystemArray.uselect_22 g_a_3 c_i_1, c_2_2 = select _x_2_1::_Tuple2 0 in <{scanner.cu;1732;49_177}> (_SystemArray.update_21 c_a_0 c_i_1 (<{scanner._if;1732;16_189}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
<{scanner._if;1732;16_189}>::C !_x_0::B c_1::C = case _x_0 (True -> '/') (_ -> c_1)
scanner.replace_dots_by_directory_separators_127 !file_name_0 = let _x_1_0::I = _SystemArray.usize_23 file_name_0, g_s2_1_1 = <{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1 in <{scanner.cu;1732;49_177}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s2_1_1 StdInt.one_11)) 0 g_s2_1_1 (select _x_1_0::_Tuple2 1)
<{scanner.c;1705;18_123}> !<{_v==_0}> fileName_1 !g_l_2 = <{scanner.g_c1;1705;38_191}> g_l_2 <{_v==_0}> fileName_1
<{scanner.g_c1;1705;38_191}> !g_l_0 <{_v==_1}> fileName_2 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{scanner.g_c2;1705;38_190}> g_h_1_0 <{_v==_1}> fileName_2 g_t_1_1) (_ -> _predefined._Nil)
<{scanner.g_c2;1705;38_190}> !g_h_0 !<{_v==_1}> fileName_2 g_t_3 = case g_h_0 (_Tuple2 moduleName_1_0 path_1_1 -> case (select <{_v==_1}>::<{StdOverloaded.==;}> 0 moduleName_1_0 fileName_2) (True -> _predefined._Cons path_1_1 (<{scanner.c;1705;18_123}> <{_v==_1}> fileName_2 g_t_3)) ) (_ -> <{scanner.c;1705;18_123}> <{_v==_1}> fileName_2 g_t_3)
scanner.getModificationTime_126 !_vFileSystem_0 file_1 path_2 fullFileName_3 !modtimefunction_4 f_5 = let _x_1_0 = modtimefunction_4 fullFileName_3 f_5 in <{_Tuple2!2}> (general.Yes (_Tuple3 file_1 path_2 (select _x_1_0::_Tuple2 0))) (select _x_1_0::_Tuple2 1)
scanner.fopenAnywhereInSearchPaths_125 !_vFileSystem_0 !fileName_1 !_x_2 !mode_3::I modtimefunction_4 f_5 = case _x_2 (_predefined._Cons path_1_0 paths_1_1 -> let fullFileName_2_0 = <{StdString.+++_11}> path_1_0 fileName_1, _x_2_1 = select _vFileSystem_0::<{StdFile.FileSystem;}> 1 fullFileName_2_0 mode_3 f_5 in case (select _x_2_1::_Tuple3 0) (True -> scanner.getModificationTime_126 _vFileSystem_0 (select _x_2_1::_Tuple3 1) path_1_0 fullFileName_2_0 modtimefunction_4 (select _x_2_1::_Tuple3 2)) (False -> scanner.fopenAnywhereInSearchPaths_125 _vFileSystem_0 fileName_1 paths_1_1 mode_3 modtimefunction_4 (select _x_2_1::_Tuple3 2)) ) (_predefined._Nil -> <{_Tuple2!2}> general.No f_5) 
<{scanner.c;1705;18_178}> fileName_0 !g_l_1 = <{scanner.g_c1;1705;38_193}> g_l_1 fileName_0
<{scanner.g_c1;1705;38_193}> !g_l_0 fileName_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{scanner.g_c2;1705;38_192}> g_h_1_0 fileName_1 g_t_1_1) (_ -> _predefined._Nil)
<{scanner.g_c2;1705;38_192}> !g_h_0 !fileName_1 g_t_2 = case g_h_0 (_Tuple2 moduleName_1_0 path_1_1 -> case (<{StdString.==_2}> moduleName_1_0 fileName_1) (True -> _predefined._Cons path_1_1 (<{scanner.c;1705;18_178}> fileName_1 g_t_2)) ) (_ -> <{scanner.c;1705;18_178}> fileName_1 g_t_2)
scanner.fopenAnywhereInSearchPaths_179 !fileName_0 !_x_1 !mode_2::I modtimefunction_3 !f_4 = case _x_1 (_predefined._Cons path_1_0 paths_1_1 -> let fullFileName_2_0 = <{StdString.+++_11}> path_1_0 fileName_0, _x_2_1 = StdFile.fopen_27 fullFileName_2_0 mode_2 f_4 in case (select _x_2_1::_Tuple3 0) (True -> scanner.getModificationTime_126 (<{StdFile.FileSystem;}> StdFile.fclose_26 StdFile.fopen_27 StdFile.sfopen_28 StdFile.stdio_29) (select _x_2_1::_Tuple3 1) path_1_0 fullFileName_2_0 modtimefunction_3 (select _x_2_1::_Tuple3 2)) (False -> scanner.fopenAnywhereInSearchPaths_179 fileName_0 paths_1_1 mode_2 modtimefunction_3 (select _x_2_1::_Tuple3 2)) ) (_predefined._Nil -> <{_Tuple2!2}> general.No f_4) 
scanner.fopenInSearchPaths !moduleName_0 !fileNameExtension_1 !searchPaths_2 !mode_3::I modtimefunction_4 !f_5 = let fileName_1_0 = <{StdString.+++_11}> (scanner.replace_dots_by_directory_separators_127 moduleName_0) fileNameExtension_1 in <{scanner._c;1705;7_194}> (<{scanner.c;1705;18_178}> fileName_1_0 (select searchPaths_2::scanner._SearchPaths 0)) mode_3 f_5 fileName_1_0 modtimefunction_4 searchPaths_2
<{scanner._c;1705;7_194}> !_x_0 !mode_1::I !f_2 !fileName_3 modtimefunction_4 searchPaths_5 = case _x_0 (_predefined._Cons path_1_0 _x_1_1 -> let fullFileName_2_0 = <{StdString.+++_11}> path_1_0 fileName_3, _x_2_1 = StdFile.fopen_27 fullFileName_2_0 mode_1 f_2 in case (select _x_2_1::_Tuple3 0) (True -> scanner.getModificationTime_126 (<{StdFile.FileSystem;}> StdFile.fclose_26 StdFile.fopen_27 StdFile.sfopen_28 StdFile.stdio_29) (select _x_2_1::_Tuple3 1) path_1_0 fullFileName_2_0 modtimefunction_4 (select _x_2_1::_Tuple3 2)) (False -> <{_Tuple2!2}> general.No (select _x_2_1::_Tuple3 2)) ) (_predefined._Nil -> scanner.fopenAnywhereInSearchPaths_179 fileName_3 (select searchPaths_5::scanner._SearchPaths 1) mode_1 modtimefunction_4 f_2) 
scanner.openScanner !file_0 !file_name_1 !file_name_extension_2 = scanner.ScanState (scanner._RScanState (scanner.Input (scanner._Input (scanner.InFile file_0) (<{StdString.+++_11}> file_name_1 file_name_extension_2) (scanner._FilePosition 1 0) 4)) (_predefined._Cons (_Tuple2 1 False) _predefined._Nil) 0 scanner.Buffer0)
scanner.get_file_128 !_x_0 = case _x_0 (scanner.InFile file_1_0 -> general.Yes file_1_0) (scanner.OldLine _x_1_0 _x_1_1 stream_1_2 -> scanner.get_file_128 stream_1_2) 
scanner.closeScanner_ !scanState_0 !files_1 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case ss_input_1_0 (scanner.PushedToken _x_2_0 input_2_1 -> scanner.closeScanner_ (update scanState_0::scanner._RScanState [0:input_2_1]) files_1) (scanner.Input _x_2_0 -> case _x_2_0 (scanner._Input inp_stream_3_0 inp_filename_3_1 inp_pos_3_2 inp_tabsize_3_3 -> <{scanner._c;1741;7_195}> (scanner.get_file_128 inp_stream_3_0) files_1) ) ) 
<{scanner._c;1741;7_195}> !_x_0 !files_1 = case _x_0 (general.Yes file_1_0 -> select (StdFile.fclose_26 file_1_0 files_1)::_Tuple2 1) (general.No -> files_1) 
scanner.closeScanner !_x_0 !files_1 = case _x_0 (scanner.ScanState scan_state_1_0 -> scanner.closeScanner_ scan_state_1_0 files_1) 
scanner.setUseLayout_ !b_0::B !ss_1 = case ss_1 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> update ss_1::scanner._RScanState [2:<{scanner._if;1775;64_196}> b_0 ss_scanOptions_1_2]) 
<{scanner._if;1775;64_196}>::I !b_0::B !ss_scanOptions_1::I = case b_0 (True -> StdInt.bitor ss_scanOptions_1 1) (_ -> StdInt.bitand ss_scanOptions_1 (StdInt.bitnot 1))
scanner.setUseLayout !b_0::B !_x_1 = case _x_1 (scanner.ScanState ss_1_0 -> scanner.ScanState (scanner.setUseLayout_ b_0 ss_1_0)) 
scanner.UseLayout_ !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> <{_Tuple2!3}> (StdBool.not (<{StdInt.==_16}> (StdInt.bitand ss_scanOptions_1_2 1) 0)) scanState_0) 
scanner.UseLayout !_x_0 = case _x_0 (scanner.ScanState scanState_1_0 -> let !_x_2_0 = scanner.UseLayout_ scanState_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.ScanState (select _x_2_0::_Tuple2 1))) 
scanner.dropOffsidePosition_ !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> update scanState_0::scanner._RScanState [1:StdList.drop 1 ss_offsides_1_1]) 
scanner.dropOffsidePosition !_x_0 = case _x_0 (scanner.ScanState s_1_0 -> scanner.ScanState (scanner.dropOffsidePosition_ s_1_0)) 
scanner.setUseUnderscoreIdents_ !b_0::B !ss_1 = case ss_1 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> update ss_1::scanner._RScanState [2:<{scanner._if;1781;74_197}> b_0 ss_scanOptions_1_2]) 
<{scanner._if;1781;74_197}>::I !b_0::B !ss_scanOptions_1::I = case b_0 (True -> StdInt.bitor ss_scanOptions_1 2) (_ -> StdInt.bitand ss_scanOptions_1 (StdInt.bitnot 2))
scanner.setUseUnderscoreIdents !b_0::B !_x_1 = case _x_1 (scanner.ScanState ss_1_0 -> scanner.ScanState (scanner.setUseUnderscoreIdents_ b_0 ss_1_0)) 
scanner.isLhsStartToken::B !_x_0 = case _x_0 (scanner.OpenToken -> True) (scanner.SquareOpenToken -> True) (scanner.CurlyOpenToken -> True) (scanner.IdentToken id_1_0 -> True) (_ -> False)
scanner.isOffsideToken::B !_x_0 = case _x_0 (scanner.NewDefinitionToken -> True) (scanner.EndGroupToken -> True) (scanner.EndOfFileToken -> True) (_ -> False)
scanner.isEndGroupToken::B !_x_0 = case _x_0 (scanner.EndGroupToken -> True) (scanner.CurlyCloseToken -> True) (_ -> False)
scanner.has_priority_over_122 !_x_0 _x_1 = case _x_0 (scanner.LeftAssoc -> case _x_1 (scanner.LeftAssoc -> general.Yes True) ) (scanner.RightAssoc -> case _x_1 (scanner.RightAssoc -> general.Yes False) ) (_ -> general.No)
scanner.determinePriority !_x_0 !_x_1 = case _x_0 (scanner.Prio assoc_left_1_0 prio_left_1_1 -> case _x_1 (scanner.Prio assoc_right_2_0 prio_right_2_1 -> case (<{StdInt.==_16}> prio_left_1_1 prio_right_2_1) (True -> scanner.has_priority_over_122 assoc_left_1_0 assoc_right_2_0) (False -> general.Yes (<{StdInt.<_17}> prio_right_2_1 prio_left_1_1)) ) ) 
scanner.setNoNewOffsideForSeqLetBit !_x_0 = case _x_0 (scanner.ScanState ss_1_0 -> case ss_1_0 (scanner._RScanState ss_input_2_0 ss_offsides_2_1 ss_scanOptions_2_2 ss_tokenBuffer_2_3 -> scanner.ScanState (update ss_1_0::scanner._RScanState [2:StdInt.bitor ss_scanOptions_2_2 4])) ) 
scanner.clearNoNewOffsideForSeqLetBit !_x_0 = case _x_0 (scanner.ScanState ss_1_0 -> case ss_1_0 (scanner._RScanState ss_input_2_0 ss_offsides_2_1 ss_scanOptions_2_2 ss_tokenBuffer_2_3 -> scanner.ScanState (update ss_1_0::scanner._RScanState [2:StdInt.bitand ss_scanOptions_2_2 (StdInt.bitnot 4)])) ) 
scanner.notContextDependent::B !token_0 = <{scanner._c;423;4_198}> token_0
<{scanner._c;423;4_198}>::B !token_0 = case token_0 (scanner.NewDefinitionToken -> True) (scanner.EndGroupToken -> True) (scanner.EndOfFileToken -> True) (scanner.InToken -> True) (scanner.ErrorToken _x_1_0 -> True) (scanner.CodeBlockToken _x_1_0 -> True) (scanner.OpenToken -> True) (scanner.CloseToken -> True) (scanner.CurlyOpenToken -> True) (scanner.CurlyCloseToken -> True) (scanner.SquareOpenToken -> True) (scanner.SquareCloseToken -> True) (scanner.SemicolonToken -> True) (scanner.CommaToken -> True) (scanner.ClassToken -> True) (scanner.InstanceToken -> True) (scanner.OtherwiseToken -> True) (scanner.IfToken -> True) (scanner.WhereToken -> True) (scanner.WithToken -> True) (_ -> False)
scanner.ReadNormalChar !_x_0 = case _x_0 (scanner._Input _x_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case _x_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> let c_4_0::C = _SystemArray.select_19 line_2_1 i_2_0 in case (case (<{StdChar.==_18}> c_4_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_4_0 '\r') (True -> True) (False -> <{StdChar.==_18}> c_4_0 '\t') ) ) (True -> <{_Tuple3!7}> True '\n' (scanner._Input (scanner.OldLine i_2_0 line_2_1 stream_2_2) inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) (False -> <{_Tuple3!7}> False c_4_0 (scanner._Input (scanner.OldLine (<{StdInt.+_6}> i_2_0 1) line_2_1 stream_2_2) inp_filename_1_1 (update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) 1]) inp_tabsize_1_3)) ) (False -> scanner.ReadNormalChar (scanner._Input stream_2_2 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) ) (scanner.InFile file_2_0 -> let !_x_3_0 = StdFile.freadline file_2_0, s_3_1 = select _x_3_0::_Tuple2 0 in case (<{StdInt.==_16}> (_SystemArray.size_20 s_3_1) 0) (True -> <{_Tuple3!7}> True '\n' (scanner._Input (scanner.InFile (select _x_3_0::_Tuple2 1)) inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) (False -> scanner.ReadNormalChar (scanner._Input (scanner.OldLine 0 s_3_1 (scanner.InFile (select _x_3_0::_Tuple2 1))) inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) ) ) 
scanner.NextPos !c_0::C !pos_1 !t_2::I = case pos_1 (scanner._FilePosition fp_line_1_0 fp_col_1_1 -> <{scanner._c;1475;7_199}> c_0 pos_1 t_2 fp_line_1_0 fp_col_1_1) 
<{scanner._c;1475;7_199}> !c_0::C pos_1 t_2::I fp_line_3::I fp_col_4::I = case c_0 ('\n' -> scanner.NextPos '\r' pos_1 t_2) ('\r' -> scanner._FilePosition (<{StdInt.+_6}> fp_line_3 1) 0) ('\t' -> update pos_1::scanner._FilePosition [1:<{StdInt.*_9}> t_2 (<{StdInt.+_6}> (<{StdInt./_10}> fp_col_4 t_2) 1)]) (_ -> update pos_1::scanner._FilePosition [1:<{StdInt.+_6}> fp_col_4 1])
scanner.correctNewline_OldLine !c_0::C !i_1::I !tab_size_2::I !line_3 !input_4 = <{scanner._c;1483;9_200}> c_0 i_1 line_3 input_4
<{scanner._c;1483;9_200}> !c_0::C !i_1::I !line_2 !input_3 = case c_0 ('\n' -> <{_Tuple2!3}> '\n' (scanner.OldLine (<{StdInt.+_6}> i_1 1) line_2 input_3)) ('\r' -> case (case (<{StdInt.<_17}> (<{StdInt.+_6}> i_1 1) (_SystemArray.size_20 line_2)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_2 (<{StdInt.+_6}> i_1 1)) '\n') (False -> False) ) (True -> <{_Tuple2!3}> '\n' (scanner.OldLine (<{StdInt.+_6}> i_1 2) line_2 input_3)) (False -> <{_Tuple2!3}> '\n' (scanner.OldLine (<{StdInt.+_6}> i_1 1) line_2 input_3)) ) (_ -> <{_Tuple2!3}> c_0 (scanner.OldLine (<{StdInt.+_6}> i_1 1) line_2 input_3))
scanner.ReadChar !_x_0 = case _x_0 (scanner._Input _x_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case _x_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> let c_4_0::C = _SystemArray.select_19 line_2_1 i_2_0 in case (case (<{StdChar.==_18}> c_4_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_4_0 '\r') (True -> True) (False -> <{StdChar.==_18}> c_4_0 '\t') ) ) (True -> let _x_6_0 = scanner.correctNewline_OldLine c_4_0 i_2_0 inp_tabsize_1_3 line_2_1 stream_2_2 in <{_Tuple3!7}> False (select _x_6_0::_Tuple2 0) (scanner._Input (select _x_6_0::_Tuple2 1) inp_filename_1_1 (scanner.NextPos c_4_0 inp_pos_1_2 inp_tabsize_1_3) inp_tabsize_1_3)) (False -> <{_Tuple3!7}> False c_4_0 (scanner._Input (scanner.OldLine (<{StdInt.+_6}> i_2_0 1) line_2_1 stream_2_2) inp_filename_1_1 (update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) 1]) inp_tabsize_1_3)) ) (False -> scanner.ReadChar (scanner._Input stream_2_2 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) ) (scanner.InFile file_2_0 -> let !_x_3_0 = StdFile.freadline file_2_0, s_3_1 = select _x_3_0::_Tuple2 0 in case (<{StdInt.==_16}> (_SystemArray.size_20 s_3_1) 0) (True -> let c_5_0::C = '\n' in <{_Tuple3!7}> True c_5_0 (scanner._Input (scanner.InFile (select _x_3_0::_Tuple2 1)) inp_filename_1_1 (scanner.NextPos c_5_0 inp_pos_1_2 inp_tabsize_1_3) inp_tabsize_1_3)) (False -> scanner.ReadChar (scanner._Input (scanner.OldLine 0 s_3_1 (scanner.InFile (select _x_3_0::_Tuple2 1))) inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3)) ) ) 
scanner.charBack !_x_0 = case _x_0 (scanner._Input _x_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case _x_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> scanner._Input (scanner.OldLine (<{StdInt.-_7}> i_2_0 1) line_2_1 stream_2_2) inp_filename_1_1 (update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.-_7}> (select inp_pos_1_2::scanner._FilePosition 1) 1]) inp_tabsize_1_3) ) 
scanner.SkipToEndOfLine !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case inp_pos_1_2 (scanner._FilePosition fp_line_3_0 fp_col_3_1 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> update input_0::scanner._Input [0:stream_2_2,2:scanner._FilePosition (<{StdInt.+_6}> fp_line_3_0 1) 0]) ) ) ) (_ -> let _x_1_0 = scanner.ReadChar input_0 in case (select _x_1_0::_Tuple3 0) (True -> select _x_1_0::_Tuple3 2) (False -> case (<{StdChar.==_18}> (select _x_1_0::_Tuple3 1) '\n') (True -> select _x_1_0::_Tuple3 2) (False -> scanner.SkipToEndOfLine (select _x_1_0::_Tuple3 2)) ) )
scanner.isNewLine::B !_x_0::C = case _x_0 ('\n' -> True) ('\r' -> True) (_ -> False)
scanner.ScanComment2 !c1_0::C !input_1 = case (<{StdChar.==_18}> c1_0 '/') (True -> let _x_2_0 = scanner.ReadChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> (general.Yes "end of file encountered inside comment") (select _x_2_0::_Tuple3 2)) (False -> let input_4_0 = select _x_2_0::_Tuple3 2 in <{scanner._c;535;31_202}> (select _x_2_0::_Tuple3 1) input_4_0) ) (False -> case (<{StdChar.==_18}> c1_0 '*') (True -> let _x_3_0 = scanner.ReadNormalChar input_1 in case (select _x_3_0::_Tuple3 0) (True -> let input_5_0 = select _x_3_0::_Tuple3 2, _x_5_1 = scanner.ReadChar input_5_0 in case (select _x_5_1::_Tuple3 0) (True -> <{_Tuple2!3}> (general.Yes "end of file encountered inside comment") (select _x_5_1::_Tuple3 2)) (False -> scanner.ScanComment (select _x_5_1::_Tuple3 2)) ) (False -> let c2_5_0::C = select _x_3_0::_Tuple3 1 in case (<{StdChar.==_18}> c2_5_0 '/') (True -> <{_Tuple2!3}> general.No (select _x_3_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> c2_5_0 '*') (True -> scanner.ScanComment2 c2_5_0 (select _x_3_0::_Tuple3 2)) (False -> scanner.ScanComment (select _x_3_0::_Tuple3 2)) ) ) ) (False -> scanner.ScanComment input_1) ) 
scanner.scan_comment_in_line !i_0::I !fp_col_1::I !fp_line_2::I !line_3 !tabsize_4::I !stream_5 !inp_filename_6 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_3)) (True -> let c_2_0::C = _SystemArray.select_19 line_3 i_0 in case (<{StdChar.==_18}> c_2_0 '\t') (True -> scanner.scan_comment_in_line (<{StdInt.+_6}> i_0 1) (<{StdInt.*_9}> tabsize_4 (<{StdInt.+_6}> (<{StdInt./_10}> fp_col_1 tabsize_4) 1)) fp_line_2 line_3 tabsize_4 stream_5 inp_filename_6) (False -> case (case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\r') ) (True -> scanner.ScanComment (scanner._Input stream_5 inp_filename_6 (scanner._FilePosition (<{StdInt.+_6}> fp_line_2 1) 0) tabsize_4)) (False -> case (case (<{StdChar.==_18}> c_2_0 '/') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '*') ) (True -> scanner.ScanComment2 c_2_0 (scanner._Input (scanner.OldLine (<{StdInt.+_6}> i_0 1) line_3 stream_5) inp_filename_6 (scanner._FilePosition fp_line_2 (<{StdInt.+_6}> fp_col_1 1)) tabsize_4)) (False -> scanner.scan_comment_in_line (<{StdInt.+_6}> i_0 1) (<{StdInt.+_6}> fp_col_1 1) fp_line_2 line_3 tabsize_4 stream_5 inp_filename_6) ) ) ) (False -> scanner.ScanComment (scanner._Input stream_5 inp_filename_6 (scanner._FilePosition fp_line_2 fp_col_1) tabsize_4)) 
scanner.ScanComment !_x_0 = case _x_0 (scanner._Input _x_1_0 inp_filename_1_1 _x_1_2 inp_tabsize_1_3 -> case _x_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case _x_1_2 (scanner._FilePosition fp_line_3_0 fp_col_3_1 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> scanner.scan_comment_in_line i_2_0 fp_col_3_1 fp_line_3_0 line_2_1 inp_tabsize_1_3 stream_2_2 inp_filename_1_1) ) ) ) (_ -> let _x_1_0 = scanner.ReadChar _x_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (general.Yes "end of file encountered inside comment") (select _x_1_0::_Tuple3 2)) (False -> scanner.ScanComment2 (select _x_1_0::_Tuple3 1) (select _x_1_0::_Tuple3 2)) )
<{scanner._c;535;31_202}> !_x_0::C !input_1 = case _x_0 ('/' -> scanner.ScanComment (scanner.SkipToEndOfLine input_1)) ('*' -> let error_2_0 = scanner.ScanComment input_1 in <{scanner._c;537;41_201}> error_2_0) (_ -> scanner.ScanComment input_1)
<{scanner._c;537;41_201}> !error_0 = case error_0 (_Tuple2 _x_1_0 input_1_1 -> case _x_1_0 (general.No -> scanner.ScanComment input_1_1) ) (_ -> error_0)
scanner.TryScanComment !c1_0::C !input_1 = case c1_0 ('/' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple3!7}> general.No c1_0 (select _x_2_0::_Tuple3 2)) (False -> let c2_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c2_4_0 '/') (True -> let input_6_0 = select _x_2_0::_Tuple3 2, _x_6_1 = scanner.ReadChar input_6_0 in case (select _x_6_1::_Tuple3 0) (True -> scanner.SkipWhites (scanner.SkipToEndOfLine (scanner.charBack (select _x_6_1::_Tuple3 2)))) (False -> let c3_8_0::C = select _x_6_1::_Tuple3 1 in case (scanner.isNewLine c3_8_0) (True -> scanner.SkipWhites (select _x_6_1::_Tuple3 2)) (False -> case (StdBool.not (<{StdChar.==_18}> c3_8_0 '*')) (True -> scanner.SkipWhites (scanner.SkipToEndOfLine (scanner.charBack (select _x_6_1::_Tuple3 2)))) (False -> <{_Tuple3!7}> general.No c1_0 (scanner.charBack (scanner.charBack (select _x_6_1::_Tuple3 2)))) ) ) ) (False -> case (StdBool.not (<{StdChar.==_18}> c2_4_0 '*')) (True -> <{_Tuple3!7}> general.No c1_0 (scanner.charBack (select _x_2_0::_Tuple3 2))) (False -> let input_7_0 = select _x_2_0::_Tuple3 2, _x_7_1 = scanner.ReadChar input_7_0 in case (select _x_7_1::_Tuple3 0) (True -> <{_Tuple3!7}> general.No c1_0 (select _x_7_1::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_7_1::_Tuple3 1) '*') (True -> let input_10_0 = select _x_7_1::_Tuple3 2, _x_10_1 = scanner.ReadNormalChar input_10_0 in case (select _x_10_1::_Tuple3 0) (True -> <{_Tuple3!7}> general.No c1_0 (scanner.charBack (scanner.charBack (select _x_10_1::_Tuple3 2)))) (False -> let c4_12_0::C = select _x_10_1::_Tuple3 1 in case (<{StdChar.==_18}> c4_12_0 '/') (True -> scanner.SkipWhites (select _x_10_1::_Tuple3 2)) (False -> <{scanner._c;512;11_203}> (scanner.ScanComment (select _x_10_1::_Tuple3 2)) c4_12_0) ) ) (False -> <{scanner._c;515;7_204}> (scanner.ScanComment (select _x_7_1::_Tuple3 2)) c1_0) ) ) ) ) ) (_ -> <{_Tuple3!7}> general.No c1_0 input_1)
scanner.skip_whites_in_line !i_0::I !fp_col_1::I !fp_line_2::I !line_3 !tabsize_4::I !stream_5 !inp_filename_6 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_3)) (True -> let c_2_0::C = _SystemArray.select_19 line_3 i_0 in case (case (<{StdChar.==_18}> c_2_0 ' ') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\v') ) ) (True -> scanner.skip_whites_in_line (<{StdInt.+_6}> i_0 1) (<{StdInt.+_6}> fp_col_1 1) fp_line_2 line_3 tabsize_4 stream_5 inp_filename_6) (False -> case (<{StdChar.==_18}> c_2_0 '\t') (True -> scanner.skip_whites_in_line (<{StdInt.+_6}> i_0 1) (<{StdInt.*_9}> tabsize_4 (<{StdInt.+_6}> (<{StdInt./_10}> fp_col_1 tabsize_4) 1)) fp_line_2 line_3 tabsize_4 stream_5 inp_filename_6) (False -> case (case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\r') ) (True -> scanner.SkipWhites (scanner._Input stream_5 inp_filename_6 (scanner._FilePosition (<{StdInt.+_6}> fp_line_2 1) 0) tabsize_4)) (False -> scanner.TryScanComment c_2_0 (scanner._Input (scanner.OldLine (<{StdInt.+_6}> i_0 1) line_3 stream_5) inp_filename_6 (scanner._FilePosition fp_line_2 (<{StdInt.+_6}> fp_col_1 1)) tabsize_4)) ) ) ) (False -> scanner.SkipWhites (scanner._Input stream_5 inp_filename_6 (scanner._FilePosition fp_line_2 fp_col_1) tabsize_4)) 
scanner.SkipWhites !_x_0 = case _x_0 (scanner._Input _x_1_0 inp_filename_1_1 _x_1_2 inp_tabsize_1_3 -> case _x_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case _x_1_2 (scanner._FilePosition fp_line_3_0 fp_col_3_1 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> scanner.skip_whites_in_line i_2_0 fp_col_3_1 fp_line_3_0 line_2_1 inp_tabsize_1_3 stream_2_2 inp_filename_1_1) ) ) ) (_ -> let _x_1_0 = scanner.ReadChar _x_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple3!7}> general.No '\n' (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isSpace c_3_0) (True -> scanner.SkipWhites (select _x_1_0::_Tuple3 2)) (False -> scanner.TryScanComment c_3_0 (select _x_1_0::_Tuple3 2)) ) )
<{scanner._c;515;7_204}> !_x_0 c1_1::C = case _x_0 (_Tuple2 _x_1_0 input_1_1 -> case _x_1_0 (general.No -> scanner.SkipWhites input_1_1) (_ -> <{_Tuple3!7}> _x_1_0 c1_1 input_1_1)) 
<{scanner._c;512;11_203}> !_x_0 c4_1::C = case _x_0 (_Tuple2 _x_1_0 input_1_1 -> case _x_1_0 (general.No -> scanner.SkipWhites input_1_1) (_ -> <{_Tuple3!7}> _x_1_0 c4_1 input_1_1)) 
scanner.ReadLine !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 oldfile_2_2 -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> case (<{StdInt.==_16}> i_2_0 0) (True -> <{_Tuple2!3}> line_2_1 (update input_0::scanner._Input [0:oldfile_2_2,2:scanner.NextPos '\r' inp_pos_1_2 0])) (False -> <{_Tuple2!3}> (<{StdString.%_10}> line_2_1 (_Tuple2 i_2_0 (<{StdInt.-_7}> (_SystemArray.size_20 line_2_1) 1))) (update input_0::scanner._Input [0:oldfile_2_2,2:scanner.NextPos '\r' inp_pos_1_2 0])) ) (False -> scanner.ReadLine (update input_0::scanner._Input [0:oldfile_2_2,2:scanner.NextPos '\r' inp_pos_1_2 0])) ) (scanner.InFile infile_2_0 -> let _x_3_0 = StdFile.fend infile_2_0 in case (select _x_3_0::_Tuple2 0) (True -> <{_Tuple2!3}> "" (update input_0::scanner._Input [0:scanner.InFile (select _x_3_0::_Tuple2 1)])) (False -> let _x_5_0 = StdFile.freadline (select _x_3_0::_Tuple2 1) in <{_Tuple2!3}> (select _x_5_0::_Tuple2 0) (update input_0::scanner._Input [0:scanner.InFile (select _x_5_0::_Tuple2 1),2:scanner.NextPos '\r' inp_pos_1_2 0])) ) ) (_ -> <{_Tuple2!3}> "" input_0)
scanner.stripNewline !string_0 = let size_1_0::I = _SystemArray.size_20 string_0 in <{scanner._c;988;7_205}> size_1_0 string_0
<{scanner._c;988;7_205}> !size_0::I !string_1 = case size_0 (0 -> string_1) (1 -> case (scanner.isNewLine (_SystemArray.select_19 string_1 0)) (True -> "") (False -> string_1) ) (_ -> case (scanner.isNewLine (_SystemArray.select_19 string_1 (<{StdInt.-_7}> size_0 1))) (True -> case (scanner.isNewLine (_SystemArray.select_19 string_1 (<{StdInt.-_7}> size_0 2))) (True -> <{StdString.%_10}> string_1 (_Tuple2 0 (<{StdInt.-_7}> size_0 3))) (False -> <{StdString.%_10}> string_1 (_Tuple2 0 (<{StdInt.-_7}> size_0 2))) ) (False -> string_1) )
scanner.scan_code_block_108 !acc_0 !input_1 = let _x_1_0::C = scanner.ReadChar input_1, c_1_1 = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c_1_1 '}') (True -> <{_Tuple2!3}> (scanner.CodeBlockToken (StdList.reverse acc_0)) (select _x_1_0::_Tuple3 2)) (False -> case (scanner.isNewLine c_1_1) (True -> case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "eof in code block") (select _x_1_0::_Tuple3 2)) (False -> scanner.scan_code_block_108 acc_0 (select _x_1_0::_Tuple3 2)) ) (False -> case (StdChar.isSpace c_1_1) (True -> scanner.scan_code_block_108 acc_0 (select _x_1_0::_Tuple3 2)) (False -> let _x_5_0 = scanner.ReadLine (select _x_1_0::_Tuple3 2) in scanner.scan_code_block_108 (_predefined._Cons (<{general.+_14}> (StdString.toString_6 c_1_1) (scanner.stripNewline (select _x_5_0::_Tuple2 0))) acc_0) (select _x_5_0::_Tuple2 1)) ) ) 
scanner.ScanCodeBlock !input_0 = scanner.scan_code_block_108 _predefined._Nil input_0
scanner.CheckReservedOperator !_x_0 !input_1 = case _x_0 ("!" -> <{_Tuple2!3}> scanner.ExclamationToken input_1) ("*/" -> <{_Tuple2!3}> (scanner.ErrorToken "Unexpected end of comment, */") input_1) (_ -> <{_Tuple2!3}> (scanner.IdentToken _x_0) input_1)
scanner.ScanOperator !n_0::I !input_1 !token_2 !co_3 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> scanner.CheckReservedOperator (utilities.revCharListToString n_0 token_2) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (utilities.isSpecialChar c_3_0) (True -> scanner.ScanOperator (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 token_2) co_3) (False -> scanner.CheckReservedOperator (utilities.revCharListToString n_0 token_2) (scanner.charBack (select _x_1_0::_Tuple3 2))) ) 
scanner.determineStrictness !input_0 = let _x_1_0 = scanner.ReadNormalChar input_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> False (select _x_1_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_1_0::_Tuple3 1) '!') (True -> <{_Tuple2!3}> True (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> False (scanner.charBack (select _x_1_0::_Tuple3 2))) ) 
scanner.possibleKeyToken !token_0 !reversedPrefix_1 !context_2 !input_3 = let _x_1_0 = scanner.ReadNormalChar input_3 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> token_0 (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (utilities.isSpecialChar c_3_0) (True -> scanner.ScanOperator (StdList.length_47 reversedPrefix_1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 reversedPrefix_1) context_2) (False -> <{_Tuple2!3}> token_0 (scanner.charBack (select _x_1_0::_Tuple3 2))) ) 
scanner.scan_underscores_104::I !i_0::I !size_1::I !line_2 = case (case (<{StdInt.<_17}> i_0 size_1) (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_2 i_0) '_') (False -> False) ) (True -> scanner.scan_underscores_104 (<{StdInt.+_6}> i_0 1) size_1 line_2) (False -> i_0) 
scanner.IsIdentChar::B !c_0::C !_x_1 = case (StdChar.isAlphanum c_0) (True -> True) (False -> case c_0 ('_' -> True) ('`' -> True) ('^' -> case _x_1 (scanner.TypeContext -> True) ) (_ -> False)) 
scanner.IsModuleNameChar::B !c_0::C = case (StdChar.isAlphanum c_0) (True -> True) (False -> case c_0 ('_' -> True) ('`' -> True) ('.' -> True) (_ -> False)) 
scanner.ScanModuleNameCharsInString_106::I !i_0::I !line_1 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_1)) (True -> case (scanner.IsModuleNameChar (_SystemArray.select_19 line_1 i_0)) (True -> scanner.ScanModuleNameCharsInString_106 (<{StdInt.+_6}> i_0 1) line_1) (False -> i_0) ) (False -> i_0) 
scanner.ScanIdentCharsInString_107::I !i_0::I !line_1 !co_2 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_1)) (True -> case (scanner.IsIdentChar (_SystemArray.select_19 line_1 i_0) co_2) (True -> scanner.ScanIdentCharsInString_107 (<{StdInt.+_6}> i_0 1) line_1 co_2) (False -> i_0) ) (False -> i_0) 
scanner.GetPrio !input_0 = let _x_1_0::C = scanner.SkipWhites input_0, c_1_1 = select _x_1_0::_Tuple3 1 in case (StdChar.isDigit c_1_1) (True -> <{_Tuple3!7}> (select _x_1_0::_Tuple3 0) (StdChar.digitToInt c_1_1) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple3!7}> (select _x_1_0::_Tuple3 0) 9 (scanner.charBack (select _x_1_0::_Tuple3 2))) 
scanner.CheckEveryContext !s_0 !input_1 = <{scanner._c;880;4_209}> s_0 input_1
<{scanner._c;880;4_209}> !s_0 !input_1 = case s_0 ("where" -> <{_Tuple2!3}> scanner.WhereToken input_1) ("with" -> <{_Tuple2!3}> scanner.WithToken input_1) ("class" -> <{_Tuple2!3}> scanner.ClassToken input_1) ("instance" -> <{_Tuple2!3}> scanner.InstanceToken input_1) ("generic" -> <{_Tuple2!3}> scanner.GenericToken input_1) ("derive" -> <{_Tuple2!3}> scanner.DeriveToken input_1) ("otherwise" -> <{_Tuple2!3}> scanner.OtherwiseToken input_1) ("infixr" -> let _x_2_0::I = scanner.GetPrio input_1, input_2_1 = select _x_2_0::_Tuple3 2, n_2_2 = select _x_2_0::_Tuple3 1 in <{scanner._c;889;21_206}> (select _x_2_0::_Tuple3 0) input_2_1 n_2_2) ("infixl" -> let _x_2_0::I = scanner.GetPrio input_1, input_2_1 = select _x_2_0::_Tuple3 2, n_2_2 = select _x_2_0::_Tuple3 1 in <{scanner._c;893;21_207}> (select _x_2_0::_Tuple3 0) input_2_1 n_2_2) ("infix" -> let _x_2_0::I = scanner.GetPrio input_1, input_2_1 = select _x_2_0::_Tuple3 2, n_2_2 = select _x_2_0::_Tuple3 1 in <{scanner._c;897;21_208}> (select _x_2_0::_Tuple3 0) input_2_1 n_2_2) ("import" -> <{_Tuple2!3}> scanner.ImportToken input_1) ("foreign" -> <{_Tuple2!3}> scanner.ForeignToken input_1) (_ -> <{_Tuple2!3}> (scanner.IdentToken s_0) input_1)
<{scanner._c;897;21_208}> !_x_0 !input_1 n_2::I = case _x_0 (general.Yes err_1_0 -> <{_Tuple2!3}> (scanner.ErrorToken err_1_0) input_1) (general.No -> <{_Tuple2!3}> (scanner.PriorityToken (scanner.Prio scanner.NoAssoc n_2)) input_1) 
<{scanner._c;893;21_207}> !_x_0 !input_1 n_2::I = case _x_0 (general.Yes err_1_0 -> <{_Tuple2!3}> (scanner.ErrorToken err_1_0) input_1) (general.No -> <{_Tuple2!3}> (scanner.PriorityToken (scanner.Prio scanner.LeftAssoc n_2)) input_1) 
<{scanner._c;889;21_206}> !_x_0 !input_1 n_2::I = case _x_0 (general.Yes err_1_0 -> <{_Tuple2!3}> (scanner.ErrorToken err_1_0) input_1) (general.No -> <{_Tuple2!3}> (scanner.PriorityToken (scanner.Prio scanner.RightAssoc n_2)) input_1) 
scanner.CheckGeneralContext !s_0 !input_1 = <{scanner._c;869;4_210}> s_0 input_1
<{scanner._c;869;4_210}> !s_0 !input_1 = case s_0 ("module" -> <{_Tuple2!3}> scanner.ModuleToken input_1) ("definition" -> <{_Tuple2!3}> scanner.DefModuleToken input_1) ("implementation" -> <{_Tuple2!3}> scanner.ImpModuleToken input_1) ("system" -> <{_Tuple2!3}> scanner.SysModuleToken input_1) ("from" -> <{_Tuple2!3}> scanner.FromToken input_1) ("in" -> <{_Tuple2!3}> scanner.InToken input_1) (_ -> scanner.CheckEveryContext s_0 input_1)
scanner.CheckTypeContext !s_0 !input_1 = <{scanner._c;906;4_211}> s_0 input_1
<{scanner._c;906;4_211}> !s_0 !input_1 = case s_0 ("Int" -> <{_Tuple2!3}> scanner.IntTypeToken input_1) ("Char" -> <{_Tuple2!3}> scanner.CharTypeToken input_1) ("Real" -> <{_Tuple2!3}> scanner.RealTypeToken input_1) ("Bool" -> <{_Tuple2!3}> scanner.BoolTypeToken input_1) ("String" -> <{_Tuple2!3}> scanner.StringTypeToken input_1) ("File" -> <{_Tuple2!3}> scanner.FileTypeToken input_1) ("World" -> <{_Tuple2!3}> scanner.WorldTypeToken input_1) ("Dynamic" -> <{_Tuple2!3}> scanner.DynamicTypeToken input_1) ("special" -> <{_Tuple2!3}> scanner.SpecialToken input_1) ("from" -> <{_Tuple2!3}> scanner.FromToken input_1) ("of" -> <{_Tuple2!3}> scanner.OfToken input_1) (_ -> scanner.CheckEveryContext s_0 input_1)
scanner.CheckFunctContext !s_0 !input_1 = <{scanner._c;922;4_212}> s_0 input_1
<{scanner._c;922;4_212}> !s_0 !input_1 = case s_0 ("if" -> <{_Tuple2!3}> scanner.IfToken input_1) ("True" -> <{_Tuple2!3}> (scanner.BoolToken True) input_1) ("False" -> <{_Tuple2!3}> (scanner.BoolToken False) input_1) ("case" -> <{_Tuple2!3}> scanner.CaseToken input_1) ("of" -> <{_Tuple2!3}> scanner.OfToken input_1) ("system" -> <{_Tuple2!3}> scanner.SysModuleToken input_1) ("from" -> <{_Tuple2!3}> scanner.FromToken input_1) ("let" -> let _x_2_0 = scanner.determineStrictness input_1 in <{_Tuple2!3}> (scanner.LetToken (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) ("in" -> <{_Tuple2!3}> scanner.InToken input_1) ("dynamic" -> <{_Tuple2!3}> scanner.DynamicToken input_1) ("code" -> <{_Tuple2!3}> scanner.CodeToken input_1) (_ -> scanner.CheckEveryContext s_0 input_1)
scanner.CheckCodeContext !s_0 !input_1 = <{scanner._c;941;4_213}> s_0 input_1
<{scanner._c;941;4_213}> !s_0 !input_1 = case s_0 ("inline" -> <{_Tuple2!3}> scanner.InlineToken input_1) (_ -> scanner.CheckEveryContext s_0 input_1)
scanner.CheckGenericContext !s_0 !input_1 = <{scanner._c;947;4_214}> s_0 input_1
<{scanner._c;947;4_214}> !s_0 !input_1 = case s_0 ("of" -> <{_Tuple2!3}> scanner.GenericOfToken input_1) ("with" -> <{_Tuple2!3}> scanner.GenericWithToken input_1) (_ -> scanner.CheckEveryContext s_0 input_1)
scanner.CheckReservedIdent !_x_0 !s_1 !i_2 = case _x_0 (scanner.GeneralContext -> scanner.CheckGeneralContext s_1 i_2) (scanner.TypeContext -> scanner.CheckTypeContext s_1 i_2) (scanner.FunctionContext -> scanner.CheckFunctContext s_1 i_2) (scanner.CodeContext -> scanner.CheckCodeContext s_1 i_2) (scanner.GenericContext -> scanner.CheckGenericContext s_1 i_2) 
scanner.ScanIdentFast !n_0::I !input_1 !_x_2 = case input_1 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case _x_2 (scanner.ModuleNameContext -> let end_i_4_0::I = scanner.ScanModuleNameCharsInString_106 i_2_0 line_2_1 in <{_Tuple2!3}> (scanner.IdentToken (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.-_7}> i_2_0 n_0) (<{StdInt.-_7}> end_i_4_0 1)))) (update input_1::scanner._Input [0:scanner.OldLine end_i_4_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> end_i_4_0 i_2_0)]])) (_ -> let end_i_3_0::I = scanner.ScanIdentCharsInString_107 i_2_0 line_2_1 _x_2 in scanner.CheckReservedIdent _x_2 (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.-_7}> i_2_0 n_0) (<{StdInt.-_7}> end_i_3_0 1))) (update input_1::scanner._Input [0:scanner.OldLine end_i_3_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> end_i_3_0 i_2_0)]]))) ) 
scanner.replaceIdentToken_105 !_x_0 = case _x_0 (_Tuple2 _x_1_0 s_1_1 -> case _x_1_0 (scanner.IdentToken name_2_0 -> _Tuple2 (scanner.UnderscoreIdentToken name_2_0) s_1_1) ) (_ -> _x_0)
scanner.GetPreviousChar !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case (StdBool.not (<{StdInt.<_17}> 1 i_2_0)) (True -> <{_Tuple2!3}> '\n' input_0) (False -> <{_Tuple2!3}> (_SystemArray.select_19 line_2_1 (<{StdInt.-_7}> i_2_0 2)) input_0) ) ) (_ -> <{_Tuple2!3}> '\n' input_0)
scanner.new_exp_char::B !_x_0::C = case _x_0 (',' -> True) ('[' -> True) ('(' -> True) ('{' -> True) ('/' -> True) (_ -> StdChar.isSpace _x_0)
scanner.hexDigitToInt::I !_x_0::C = case _x_0 ('a' -> 10) ('A' -> 10) ('b' -> 11) ('B' -> 11) ('c' -> 12) ('C' -> 12) ('d' -> 13) ('D' -> 13) ('e' -> 14) ('E' -> 14) ('f' -> 15) ('F' -> 15) (_ -> StdChar.digitToInt _x_0)
scanner.ScanHexNumeral !n_0::I !input_1 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken (StdString.toString_5 n_0)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isHexDigit c_3_0) (True -> scanner.ScanHexNumeral (<{StdInt.+_6}> (<{StdInt.*_9}> n_0 16) (scanner.hexDigitToInt c_3_0)) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> (scanner.IntToken (StdString.toString_5 n_0)) (scanner.charBack (select _x_1_0::_Tuple3 2))) ) 
scanner.ScanOctNumeral !n_0::I !input_1 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken (StdString.toString_5 n_0)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isOctDigit c_3_0) (True -> scanner.ScanOctNumeral (<{StdInt.+_6}> (<{StdInt.*_9}> n_0 8) (StdChar.digitToInt c_3_0)) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> (scanner.IntToken (StdString.toString_5 n_0)) (scanner.charBack (select _x_1_0::_Tuple3 2))) ) 
scanner.ScanExponent !n_0::I !input_1 !chars_2 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString n_0 chars_2)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isDigit c_3_0) (True -> scanner.ScanExponent (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 chars_2)) (False -> let input_5_0 = select _x_1_0::_Tuple3 2 in <{scanner._c;1064;31_215}> chars_2 n_0 input_5_0) ) 
<{scanner._c;1064;31_215}> !chars_0 n_1::I !input_2 = case chars_0 (_predefined._Cons c_1_0 _x_1_1 -> case (StdChar.isDigit c_1_0) (True -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString n_1 chars_0)) (scanner.charBack input_2)) ) (_ -> <{_Tuple2!3}> (scanner.ErrorToken (<{general.+_14}> "Digit expected after " (utilities.revCharListToString n_1 chars_0))) (scanner.charBack input_2))
scanner.ScanExponentSign !n_0::I !input_1 !chars_2 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString n_0 chars_2)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c_3_0 '+') (True -> scanner.ScanExponent n_0 (select _x_1_0::_Tuple3 2) chars_2) (False -> case (case (<{StdChar.==_18}> c_3_0 '-') (True -> True) (False -> StdChar.isDigit c_3_0) ) (True -> scanner.ScanExponent (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 chars_2)) (False -> <{_Tuple2!3}> (scanner.ErrorToken (<{general.+_14}> "Digit or sign expected after " (utilities.revCharListToString n_0 chars_2))) (scanner.charBack (select _x_1_0::_Tuple3 2))) ) ) 
scanner.ScanFraction !n_0::I !input_1 !chars_2 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString n_0 chars_2)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c_3_0 'E') (True -> let input_5_0 = select _x_1_0::_Tuple3 2 in <{scanner._c;1043;31_216}> chars_2 n_0 input_5_0) (False -> case (StdChar.isDigit c_3_0) (True -> scanner.ScanFraction (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 chars_2)) (False -> let input_6_0 = select _x_1_0::_Tuple3 2 in <{scanner._c;1047;31_217}> chars_2 n_0 input_6_0) ) ) 
<{scanner._c;1047;31_217}> !chars_0 !n_1::I !input_2 = case chars_0 (_predefined._Cons c_1_0 _x_1_1 -> case (StdChar.isDigit c_1_0) (True -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString n_1 chars_0)) (scanner.charBack input_2)) ) (_ -> <{_Tuple2!3}> (scanner.RealToken (utilities.revCharListToString (<{StdInt.+_6}> n_1 1) (_predefined._Cons '0' chars_0))) (scanner.charBack input_2))
<{scanner._c;1043;31_216}> !chars_0 !n_1::I !input_2 = case chars_0 (_predefined._Cons c_1_0 _x_1_1 -> case (StdChar.isDigit c_1_0) (True -> scanner.ScanExponentSign (<{StdInt.+_6}> n_1 1) input_2 (_predefined._Cons 'E' chars_0)) ) (_ -> scanner.ScanExponentSign (<{StdInt.+_6}> n_1 2) input_2 (_predefined._Cons 'E' (_predefined._Cons '0' chars_0)))
scanner.TestFraction !n_0::I !input_1 !chars_2 = let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken (<{general.+_14}> "Incorrect Real at end of file: " (utilities.revCharListToString (<{StdInt.+_6}> n_0 1) (_predefined._Cons '.' chars_2)))) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isDigit c_3_0) (True -> scanner.ScanFraction (<{StdInt.+_6}> n_0 2) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 (_predefined._Cons '.' chars_2))) (False -> <{_Tuple2!3}> (scanner.IntToken (utilities.revCharListToString n_0 chars_2)) (scanner.charBack (scanner.charBack (select _x_1_0::_Tuple3 2)))) ) 
scanner.ScanNumeral !n_0::I !input_1 !chars_2 = case chars_2 (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 ('0' -> case (case (StdList.isEmpty r_1_1) (True -> True) (False -> <{StdList.==_84}> r_1_1 (_predefined._Cons '+' _predefined._Nil)) ) (True -> let _x_4_0 = scanner.ReadNormalChar input_1 in case (select _x_4_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken (utilities.revCharListToString n_0 chars_2)) (select _x_4_0::_Tuple3 2)) (False -> let c_6_0::C = select _x_4_0::_Tuple3 1 in case (<{StdChar.==_18}> c_6_0 'x') (True -> let input_8_0 = select _x_4_0::_Tuple3 2, _x_8_1 = scanner.ReadNormalChar input_8_0 in case (select _x_8_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (select _x_8_1::_Tuple3 2))) (False -> let c1_10_0::C = select _x_8_1::_Tuple3 1 in case (StdChar.isHexDigit c1_10_0) (True -> scanner.ScanHexNumeral (scanner.hexDigitToInt c1_10_0) (select _x_8_1::_Tuple3 2)) (False -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (scanner.charBack (select _x_8_1::_Tuple3 2)))) ) ) (False -> case (StdChar.isOctDigit c_6_0) (True -> scanner.ScanOctNumeral (StdChar.digitToInt c_6_0) (select _x_4_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> c_6_0 '.') (True -> scanner.TestFraction n_0 (select _x_4_0::_Tuple3 2) chars_2) (False -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (select _x_4_0::_Tuple3 2))) ) ) ) ) (False -> case (<{StdList.==_84}> r_1_1 (_predefined._Cons '-' _predefined._Nil)) (True -> let _x_5_0 = scanner.ReadNormalChar input_1 in case (select _x_5_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken (utilities.revCharListToString n_0 chars_2)) (select _x_5_0::_Tuple3 2)) (False -> let c_7_0::C = select _x_5_0::_Tuple3 1 in case (<{StdChar.==_18}> c_7_0 'x') (True -> let input_9_0 = select _x_5_0::_Tuple3 2, _x_9_1 = scanner.ReadNormalChar input_9_0 in case (select _x_9_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (select _x_9_1::_Tuple3 2))) (False -> let c1_11_0::C = select _x_9_1::_Tuple3 1 in case (StdChar.isHexDigit c1_11_0) (True -> scanner.ScanHexNumeral (<{StdInt.~_15}> (scanner.hexDigitToInt c1_11_0)) (select _x_9_1::_Tuple3 2)) (False -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (scanner.charBack (select _x_9_1::_Tuple3 2)))) ) ) (False -> case (StdChar.isOctDigit c_7_0) (True -> scanner.ScanOctNumeral (<{StdInt.~_15}> (StdChar.digitToInt c_7_0)) (select _x_5_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> c_7_0 '.') (True -> scanner.TestFraction n_0 (select _x_5_0::_Tuple3 2) chars_2) (False -> <{_Tuple2!3}> (scanner.IntToken "0") (scanner.charBack (select _x_5_0::_Tuple3 2))) ) ) ) ) ) ) ) (_ -> let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IntToken (utilities.revCharListToString n_0 chars_2)) (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (StdChar.isDigit c_3_0) (True -> scanner.ScanNumeral (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 chars_2)) (False -> case (<{StdChar.==_18}> c_3_0 'E') (True -> scanner.ScanExponentSign (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_3_0 chars_2)) (False -> case (<{StdChar.==_18}> c_3_0 '.') (True -> scanner.TestFraction n_0 (select _x_1_0::_Tuple3 2) chars_2) (False -> let !s_7_0 = utilities.revCharListToString n_0 chars_2 in <{_Tuple2!3}> (scanner.IntToken s_7_0) (scanner.charBack (select _x_1_0::_Tuple3 2))) ) ) ) )
scanner.IsOct_175::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '7' c_0)) (False -> False) 
scanner.IsOct_174::B !c_0::C = case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '7' c_0)) (False -> False) 
scanner.to_chars_110 !_vto_0 !_vtoChar_1 cont_2 n_3::I chars_4 cc_5 input_6 = case (<{StdInt.<_17}> 255 (select _vto_0::<{StdOverloaded.toInt;}> 0 cc_5)) (True -> _Tuple2 (scanner.ErrorToken "invalid char, value > 255") input_6) (False -> let c_2_0::C = select _vtoChar_1::<{StdOverloaded.toChar;}> 0 cc_5 in <{scanner._c;1127;8_219}> c_2_0 cont_2 n_3 chars_4 input_6) 
<{scanner._c;1127;8_219}> !c_0::C !cont_1 n_2::I chars_3 input_4 = case c_0 ('\n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('\r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('\f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('\t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) (_ -> case (StdBool.not (scanner._f218_218 (StdBool.not (<{StdChar.<_19}> c_0 ' ')) c_0)) (True -> cont_1 (<{StdInt.+_6}> n_2 4) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (StdInt.toInt_20 c_0) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 3) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 6) 7))) (_predefined._Cons '\\' chars_3)))) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner._f218_218::B !_x_0::B c_1::C = case _x_0 (True -> StdBool.not (<{StdChar.<_19}> '~' c_1)) (_ -> False)
scanner.to_chars_180 !_vtoChar_0 cont_1 n_2::I chars_3 !cc_4::I input_5 = case (<{StdInt.<_17}> 255 (StdInt.toInt_21 cc_4)) (True -> _Tuple2 (scanner.ErrorToken "invalid char, value > 255") input_5) (False -> let c_2_0::C = select _vtoChar_0::<{StdOverloaded.toChar;}> 0 cc_4 in <{scanner._c;1127;8_221}> c_2_0 cont_1 n_2 chars_3 input_5) 
<{scanner._c;1127;8_221}> !c_0::C !cont_1 n_2::I chars_3 input_4 = case c_0 ('\n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('\r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('\f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('\t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) (_ -> case (StdBool.not (scanner._f220_220 (StdBool.not (<{StdChar.<_19}> c_0 ' ')) c_0)) (True -> cont_1 (<{StdInt.+_6}> n_2 4) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (StdInt.toInt_20 c_0) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 3) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 6) 7))) (_predefined._Cons '\\' chars_3)))) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner._f220_220::B !_x_0::B c_1::C = case _x_0 (True -> StdBool.not (<{StdChar.<_19}> '~' c_1)) (_ -> False)
scanner.to_chars_181 cont_0 n_1::I chars_2 !cc_3::I input_4 = case (<{StdInt.<_17}> 255 (StdInt.toInt_21 cc_3)) (True -> _Tuple2 (scanner.ErrorToken "invalid char, value > 255") input_4) (False -> let c_2_0::C = StdChar.toChar_21 cc_3 in <{scanner._c;1127;8_223}> c_2_0 cont_0 n_1 chars_2 input_4) 
<{scanner._c;1127;8_223}> !c_0::C !cont_1 n_2::I chars_3 input_4 = case c_0 ('\n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('\r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('\f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('\t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) (_ -> case (StdBool.not (scanner._f222_222 (StdBool.not (<{StdChar.<_19}> c_0 ' ')) c_0)) (True -> cont_1 (<{StdInt.+_6}> n_2 4) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (StdInt.toInt_20 c_0) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 3) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 6) 7))) (_predefined._Cons '\\' chars_3)))) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner._f222_222::B !_x_0::B c_1::C = case _x_0 (True -> StdBool.not (<{StdChar.<_19}> '~' c_1)) (_ -> False)
scanner.ScanNumChar_109 cont_0 n_1::I chars_2 base_3::I valid_4 !_x_5::I !acc_6::I input_7 = case _x_5 (0 -> scanner.to_chars_181 cont_0 n_1 chars_2 acc_6 input_7) (_ -> let _x_1_0 = scanner.ReadNormalChar input_7 in case (select _x_1_0::_Tuple3 0) (True -> scanner.to_chars_181 cont_0 n_1 chars_2 acc_6 (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (valid_4 c_3_0) (True -> scanner.ScanNumChar_109 cont_0 n_1 chars_2 base_3 valid_4 (<{StdInt.-_7}> _x_5 1) (<{StdInt.+_6}> (<{StdInt.*_9}> base_3 acc_6) (scanner.hexDigitToInt c_3_0)) (select _x_1_0::_Tuple3 2)) (False -> scanner.to_chars_181 cont_0 n_1 chars_2 acc_6 (scanner.charBack (select _x_1_0::_Tuple3 2))) ) )
scanner.to_chars_182 !_vtoChar_0 cont_1 n_2::I chars_3 !cc_4::C input_5 = case (<{StdInt.<_17}> 255 (StdInt.toInt_20 cc_4)) (True -> _Tuple2 (scanner.ErrorToken "invalid char, value > 255") input_5) (False -> let c_2_0::C = select _vtoChar_0::<{StdOverloaded.toChar;}> 0 cc_4 in <{scanner._c;1127;8_225}> c_2_0 cont_1 n_2 chars_3 input_5) 
<{scanner._c;1127;8_225}> !c_0::C !cont_1 n_2::I chars_3 input_4 = case c_0 ('\n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('\r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('\f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('\t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) (_ -> case (StdBool.not (scanner._f224_224 (StdBool.not (<{StdChar.<_19}> c_0 ' ')) c_0)) (True -> cont_1 (<{StdInt.+_6}> n_2 4) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (StdInt.toInt_20 c_0) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 3) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 6) 7))) (_predefined._Cons '\\' chars_3)))) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner._f224_224::B !_x_0::B c_1::C = case _x_0 (True -> StdBool.not (<{StdChar.<_19}> '~' c_1)) (_ -> False)
scanner.to_chars_183 cont_0 n_1::I chars_2 !cc_3::C input_4 = case (<{StdInt.<_17}> 255 (StdInt.toInt_20 cc_3)) (True -> _Tuple2 (scanner.ErrorToken "invalid char, value > 255") input_4) (False -> let c_2_0::C = StdChar.toChar_20 cc_3 in <{scanner._c;1127;8_227}> c_2_0 cont_0 n_1 chars_2 input_4) 
<{scanner._c;1127;8_227}> !c_0::C !cont_1 n_2::I chars_3 input_4 = case c_0 ('\n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('\r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('\f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('\t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) (_ -> case (StdBool.not (scanner._f226_226 (StdBool.not (<{StdChar.<_19}> c_0 ' ')) c_0)) (True -> cont_1 (<{StdInt.+_6}> n_2 4) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (StdInt.toInt_20 c_0) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 3) 7))) (_predefined._Cons (StdChar.toChar_21 (<{StdInt.+_6}> 48 (StdInt.bitand (<{StdInt.>>}> (StdInt.toInt_20 c_0) 6) 7))) (_predefined._Cons '\\' chars_3)))) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner._f226_226::B !_x_0::B c_1::C = case _x_0 (True -> StdBool.not (<{StdChar.<_19}> '~' c_1)) (_ -> False)
scanner.ScanBSChar !n_0::I !chars_1 !input_2 cont_3 = let _x_1_0 = scanner.ReadNormalChar input_2 in case (select _x_1_0::_Tuple3 0) (True -> cont_3 n_0 chars_1 (select _x_1_0::_Tuple3 2)) (False -> let c_3_0 = select _x_1_0::_Tuple3 1, input_3_1::C = select _x_1_0::_Tuple3 2 in <{scanner._c;1094;7_228}> c_3_0 cont_3 n_0 chars_1 input_3_1) 
<{scanner._c;1094;7_228}> !c_0::C cont_1 n_2::I chars_3 input_4 = case c_0 ('n' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'n' (_predefined._Cons '\\' chars_3)) input_4) ('r' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'r' (_predefined._Cons '\\' chars_3)) input_4) ('f' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 'f' (_predefined._Cons '\\' chars_3)) input_4) ('b' -> scanner.to_chars_183 cont_1 n_2 chars_3 '\b' input_4) ('t' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons 't' (_predefined._Cons '\\' chars_3)) input_4) ('v' -> scanner.to_chars_183 cont_1 n_2 chars_3 '\v' input_4) ('\\' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\\' (_predefined._Cons '\\' chars_3)) input_4) ('"' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '"' (_predefined._Cons '\\' chars_3)) input_4) ('\'' -> cont_1 (<{StdInt.+_6}> n_2 2) (_predefined._Cons '\'' (_predefined._Cons '\\' chars_3)) input_4) ('x' -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 16 StdChar.isHexDigit 2 0 input_4) ('X' -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 16 StdChar.isHexDigit 2 0 input_4) ('d' -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 10 StdChar.isDigit 3 0 input_4) ('D' -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 10 StdChar.isDigit 3 0 input_4) ('0' -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 8 scanner.IsOct_174 3 0 input_4) (_ -> case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '7' c_0)) (False -> False) ) (True -> scanner.ScanNumChar_109 cont_1 n_2 chars_3 8 scanner.IsOct_175 2 (StdChar.digitToInt c_0) input_4) (False -> cont_1 (<{StdInt.+_6}> n_2 1) (_predefined._Cons c_0 chars_3) input_4) )
scanner.ScanCharList !n_0::I !chars_1 !input_2 = let _x_1_0 = scanner.ReadChar input_2 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "End of file inside char list denotation") (select _x_1_0::_Tuple3 2)) (False -> let c_3_0 = select _x_1_0::_Tuple3 1, input_3_1::C = select _x_1_0::_Tuple3 2 in <{scanner._c;1273;7_229}> c_3_0 n_0 chars_1 input_3_1) 
<{scanner._c;1273;7_229}> !c_0::C n_1::I chars_2 !input_3 = case c_0 ('\'' -> <{_Tuple2!3}> (scanner.CharListToken (<{StdString.%_10}> (utilities.revCharListToString n_1 chars_2) (_Tuple2 1 n_1))) input_3) ('\\' -> scanner.ScanBSChar n_1 chars_2 input_3 scanner.ScanCharList) ('\n' -> <{_Tuple2!3}> (scanner.ErrorToken "newline in char list") input_3) (_ -> scanner.ScanCharList (<{StdInt.+_6}> n_1 1) (_predefined._Cons c_0 chars_2) input_3)
scanner.ScanEndOfChar !n_0::I !chars_1 !input_2 = let _x_1_0 = scanner.ReadChar input_2 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "End of file inside char denotation") (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> '\'' c_3_0) (True -> <{_Tuple2!3}> (scanner.CharToken (utilities.revCharListToString (<{StdInt.+_6}> n_0 1) (_predefined._Cons c_3_0 chars_1))) (select _x_1_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> '\\' c_3_0) (True -> scanner.ScanBSChar n_0 chars_1 (select _x_1_0::_Tuple3 2) scanner.ScanCharList) (False -> scanner.ScanCharList (<{StdInt.+_6}> n_0 1) (_predefined._Cons c_3_0 chars_1) (select _x_1_0::_Tuple3 2)) ) ) 
scanner.is_ident_char_120::B !c_0::C = case (StdChar.isAlphanum c_0) (True -> True) (False -> case (<{StdChar.==_18}> c_0 '_') (True -> True) (False -> <{StdChar.==_18}> c_0 '`') ) 
scanner.scan_ident_chars_in_string_117::I !i_0::I !line_1 = case (case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_1)) (True -> scanner.is_ident_char_120 (_SystemArray.select_19 line_1 i_0)) (False -> False) ) (True -> scanner.scan_ident_chars_in_string_117 (<{StdInt.+_6}> i_0 1) line_1) (False -> i_0) 
scanner.scan_special_chars_in_string_118::I !i_0::I !line_1 = case (case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 line_1)) (True -> utilities.isSpecialChar (_SystemArray.select_19 line_1 i_0)) (False -> False) ) (True -> scanner.scan_special_chars_in_string_118 (<{StdInt.+_6}> i_0 1) line_1) (False -> i_0) 
scanner.scan_char_119 !c_0::C !input_1 = <{_Tuple2!3}> (scanner.CharToken (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray._createArray_16 3) 2 '\'') 1 c_0) 0 '\'')) input_1
scanner.qualified_ident_or_CharToken_115 !c1_0::C !input_1 = case input_1 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> case (case (<{StdInt.<_17}> (<{StdInt.+_6}> i_2_0 1) (_SystemArray.size_20 line_2_1)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_2_1 i_2_0) '.') (False -> False) ) (True -> let c_4_0::C = _SystemArray.select_19 line_2_1 (<{StdInt.+_6}> i_2_0 1) in case (scanner.is_ident_char_120 c_4_0) (True -> let end_i_6_0::I = scanner.scan_ident_chars_in_string_117 (<{StdInt.+_6}> i_2_0 2) line_2_1 in <{_Tuple2!3}> (scanner.QualifiedIdentToken (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 c1_0) (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.+_6}> i_2_0 1) (<{StdInt.-_7}> end_i_6_0 1)))) (update input_1::scanner._Input [0:scanner.OldLine end_i_6_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> end_i_6_0 i_2_0)]])) (False -> case (case (<{StdChar.==_18}> c_4_0 ' ') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> i_2_0 2) (_SystemArray.size_20 line_2_1)) (True -> utilities.isSpecialChar (_SystemArray.select_19 line_2_1 (<{StdInt.+_6}> i_2_0 2))) (False -> False) ) (False -> False) ) (True -> let end_i_7_0::I = scanner.scan_special_chars_in_string_118 (<{StdInt.+_6}> i_2_0 3) line_2_1 in <{_Tuple2!3}> (scanner.QualifiedIdentToken (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 c1_0) (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.+_6}> i_2_0 1) (<{StdInt.-_7}> end_i_7_0 1)))) (update input_1::scanner._Input [0:scanner.OldLine end_i_7_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> end_i_7_0 i_2_0)]])) (False -> scanner.scan_char_119 c1_0 input_1) ) ) (False -> scanner.scan_char_119 c1_0 input_1) ) ) (_ -> scanner.scan_char_119 c1_0 input_1)
scanner.scan_rest_of_module_name_in_string_111::I !i_0::I !s_1 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 s_1)) (True -> let c_2_0::C = _SystemArray.select_19 s_1 i_0 in case (scanner.is_ident_char_120 c_2_0) (True -> scanner.scan_rest_of_module_name_in_string_111 (<{StdInt.+_6}> i_0 1) s_1) (False -> case (case (<{StdChar.==_18}> c_2_0 '.') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> i_0 1) (_SystemArray.size_20 s_1)) (True -> scanner.is_ident_char_120 (_SystemArray.select_19 s_1 (<{StdInt.+_6}> i_0 1))) (False -> False) ) (False -> False) ) (True -> scanner.scan_rest_of_module_name_in_string_111 (<{StdInt.+_6}> i_0 2) s_1) (False -> i_0) ) ) (False -> i_0) 
scanner.qualified_ident_112 !after_module_name_i_0::I !input_1 = case input_1 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> let after_ident_i_3_0::I = scanner.scan_ident_chars_in_string_117 (<{StdInt.+_6}> after_module_name_i_0 3) line_2_1 in <{_Tuple2!3}> (scanner.QualifiedIdentToken (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.-_7}> i_2_0 2) (<{StdInt.-_7}> after_module_name_i_0 1))) (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.+_6}> after_module_name_i_0 2) (<{StdInt.-_7}> after_ident_i_3_0 1)))) (update input_1::scanner._Input [0:scanner.OldLine after_ident_i_3_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> after_ident_i_3_0 i_2_0)]])) ) 
scanner.qualified_special_ident_113 !after_module_name_i_0::I !input_1 = case input_1 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 stream_2_2 -> let after_ident_i_3_0::I = scanner.scan_special_chars_in_string_118 (<{StdInt.+_6}> after_module_name_i_0 4) line_2_1 in <{_Tuple2!3}> (scanner.QualifiedIdentToken (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.-_7}> i_2_0 2) (<{StdInt.-_7}> after_module_name_i_0 1))) (<{StdString.%_10}> line_2_1 (_Tuple2 (<{StdInt.+_6}> after_module_name_i_0 3) (<{StdInt.-_7}> after_ident_i_3_0 1)))) (update input_1::scanner._Input [0:scanner.OldLine after_ident_i_3_0 line_2_1 stream_2_2,2:update inp_pos_1_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_1_2::scanner._FilePosition 1) (<{StdInt.-_7}> after_ident_i_3_0 i_2_0)]])) ) 
scanner.scan_char_list_114 !c2_0::C !c1_1::C !input_2 = scanner.ScanCharList 2 (_predefined._Cons c2_0 (_predefined._Cons c1_1 (_predefined._Cons '\'' _predefined._Nil))) input_2
scanner.scan_CharList_or_qualified_ident_116 !c1_0::C !c2_1::C !input_2 = case input_2 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.OldLine i_2_0 line_2_1 _x_2_2 -> case (case (StdBool.not (<{StdInt.<_17}> i_2_0 3)) (True -> scanner.is_ident_char_120 c1_0) (False -> False) ) (True -> case (scanner.is_ident_char_120 c2_1) (True -> let after_module_name_i_5_0::I = scanner.scan_rest_of_module_name_in_string_111 i_2_0 line_2_1 in case (case (<{StdInt.<_17}> (<{StdInt.+_6}> after_module_name_i_5_0 2) (_SystemArray.size_20 line_2_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_2_1 after_module_name_i_5_0) '\'') (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_5_0 1)) '.') (False -> False) ) (False -> False) ) (True -> let c_7_0::C = _SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_5_0 2) in case (scanner.is_ident_char_120 c_7_0) (True -> scanner.qualified_ident_112 after_module_name_i_5_0 input_2) (False -> case (case (<{StdChar.==_18}> c_7_0 ' ') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> after_module_name_i_5_0 3) (_SystemArray.size_20 line_2_1)) (True -> utilities.isSpecialChar (_SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_5_0 3))) (False -> False) ) (False -> False) ) (True -> scanner.qualified_special_ident_113 after_module_name_i_5_0 input_2) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) ) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) (False -> case (case (<{StdChar.==_18}> c2_1 '.') (True -> case (<{StdInt.<_17}> i_2_0 (_SystemArray.size_20 line_2_1)) (True -> scanner.is_ident_char_120 (_SystemArray.select_19 line_2_1 i_2_0)) (False -> False) ) (False -> False) ) (True -> let after_module_name_i_6_0::I = scanner.scan_rest_of_module_name_in_string_111 (<{StdInt.+_6}> i_2_0 1) line_2_1 in case (case (<{StdInt.<_17}> (<{StdInt.+_6}> after_module_name_i_6_0 2) (_SystemArray.size_20 line_2_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_2_1 after_module_name_i_6_0) '\'') (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_6_0 1)) '.') (False -> False) ) (False -> False) ) (True -> let c_8_0::C = _SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_6_0 2) in case (scanner.is_ident_char_120 c_8_0) (True -> scanner.qualified_ident_112 after_module_name_i_6_0 input_2) (False -> case (case (<{StdChar.==_18}> c_8_0 ' ') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> after_module_name_i_6_0 3) (_SystemArray.size_20 line_2_1)) (True -> utilities.isSpecialChar (_SystemArray.select_19 line_2_1 (<{StdInt.+_6}> after_module_name_i_6_0 3))) (False -> False) ) (False -> False) ) (True -> scanner.qualified_special_ident_113 after_module_name_i_6_0 input_2) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) ) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) ) (False -> scanner.scan_char_list_114 c2_1 c1_0 input_2) ) ) (_ -> scanner.ScanCharList 2 (_predefined._Cons c2_1 (_predefined._Cons c1_0 (_predefined._Cons '\'' _predefined._Nil))) input_2)
scanner.ScanEndOfNoBSChar !c1_0::C !input_1 = let _x_1_0 = scanner.ReadChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "End of file inside char denotation") (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c_3_0 '\'') (True -> case (scanner.is_ident_char_120 c1_0) (True -> scanner.qualified_ident_or_CharToken_115 c1_0 (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> (scanner.CharToken (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray._createArray_16 3) 2 '\'') 1 c1_0) 0 '\'')) (select _x_1_0::_Tuple3 2)) ) (False -> case (<{StdChar.==_18}> c_3_0 '\\') (True -> scanner.ScanBSChar 1 (_predefined._Cons c1_0 (_predefined._Cons '\'' _predefined._Nil)) (select _x_1_0::_Tuple3 2) scanner.ScanCharList) (False -> scanner.scan_CharList_or_qualified_ident_116 c1_0 c_3_0 (select _x_1_0::_Tuple3 2)) ) ) 
scanner.ScanChar !input_0 = let _x_1_0 = scanner.ReadChar input_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "End of file inside Char denotation") (select _x_1_0::_Tuple3 2)) (False -> let c_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c_3_0 '\'') (True -> <{_Tuple2!3}> (scanner.CharListToken "") (select _x_1_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> c_3_0 '\\') (True -> scanner.ScanBSChar 0 (_predefined._Cons '\'' _predefined._Nil) (select _x_1_0::_Tuple3 2) scanner.ScanEndOfChar) (False -> scanner.ScanEndOfNoBSChar c_3_0 (select _x_1_0::_Tuple3 2)) ) ) 
scanner.ScanString !n_0::I !chars_1 !input_2 = let _x_1_0 = scanner.ReadChar input_2 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "End of file inside String denotation") (select _x_1_0::_Tuple3 2)) (False -> let c_3_0 = select _x_1_0::_Tuple3 1, input_3_1::C = select _x_1_0::_Tuple3 2 in <{scanner._c;1284;4_230}> c_3_0 n_0 chars_1 input_3_1) 
<{scanner._c;1284;4_230}> !c_0::C n_1::I chars_2 !input_3 = case c_0 ('\\' -> scanner.ScanBSChar n_1 chars_2 input_3 scanner.ScanString) ('\"' -> <{_Tuple2!3}> (scanner.StringToken (utilities.revCharListToString (<{StdInt.+_6}> n_1 1) (_predefined._Cons c_0 chars_2))) input_3) ('\n' -> <{_Tuple2!3}> (scanner.ErrorToken "new line in string denotation") input_3) (_ -> scanner.ScanString (<{StdInt.+_6}> n_1 1) (_predefined._Cons c_0 chars_2) input_3)
scanner.ScanDocLine !n_0::I !input_1 !doc_2 !co_3 = let _x_1_0::C = scanner.ReadChar input_1, c_1_1 = select _x_1_0::_Tuple3 1 in case (case (select _x_1_0::_Tuple3 0) (True -> True) (False -> scanner.isNewLine c_1_1) ) (True -> <{_Tuple2!3}> (scanner.DocLineToken (utilities.revCharListToString n_0 doc_2)) (select _x_1_0::_Tuple3 2)) (False -> scanner.ScanDocLine (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c_1_1 doc_2) co_3) 
scanner.ScanDocBlock !n_0::I !input_1 !doc_2 !co_3 = let _x_1_0 = scanner.ReadChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "EOF in docblock") (select _x_1_0::_Tuple3 2)) (False -> let c1_3_0::C = select _x_1_0::_Tuple3 1 in case (StdBool.not (<{StdChar.==_18}> c1_3_0 '*')) (True -> scanner.ScanDocBlock (<{StdInt.+_6}> n_0 1) (select _x_1_0::_Tuple3 2) (_predefined._Cons c1_3_0 doc_2) co_3) (False -> let input_5_0 = select _x_1_0::_Tuple3 2, _x_5_1 = scanner.ReadChar input_5_0 in case (select _x_5_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "EOF in docblock") (select _x_5_1::_Tuple3 2)) (False -> let c2_7_0 = select _x_5_1::_Tuple3 1, input_7_1::C = select _x_5_1::_Tuple3 2 in <{scanner._c;843;7_231}> c2_7_0 n_0 doc_2 input_7_1 c1_3_0 co_3) ) ) 
<{scanner._c;843;7_231}> !c2_0::C n_1::I doc_2 !input_3 c1_4::C co_5 = case c2_0 ('/' -> <{_Tuple2!3}> (scanner.DocBlockToken (utilities.revCharListToString n_1 doc_2)) input_3) ('*' -> scanner.ScanDocBlock (<{StdInt.+_6}> n_1 1) (scanner.charBack input_3) (_predefined._Cons c1_4 doc_2) co_5) (_ -> scanner.ScanDocBlock (<{StdInt.+_6}> n_1 2) input_3 (_predefined._Cons c2_0 (_predefined._Cons c1_4 doc_2)) co_5)
<{scanner.==_150}>::B !co1_0 !co2_1 = compare_constructor.equal_constructor co1_0 co2_1
scanner.Scan !_x_0::C !input_1 !co_2 = case _x_0 ('(' -> <{_Tuple2!3}> scanner.OpenToken input_1) (')' -> <{_Tuple2!3}> scanner.CloseToken input_1) ('{' -> case co_2 (scanner.CodeContext -> scanner.ScanCodeBlock input_1) (_ -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.CurlyOpenToken (select _x_2_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_2_0::_Tuple3 1) '|') (True -> <{_Tuple2!3}> scanner.GenericOpenToken (select _x_2_0::_Tuple3 2)) (False -> <{_Tuple2!3}> scanner.CurlyOpenToken (scanner.charBack (select _x_2_0::_Tuple3 2))) ) )) ('}' -> <{_Tuple2!3}> scanner.CurlyCloseToken input_1) ('[' -> <{_Tuple2!3}> scanner.SquareOpenToken input_1) (']' -> <{_Tuple2!3}> scanner.SquareCloseToken input_1) ('|' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.BarToken (select _x_2_0::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c1_4_0 '}') (True -> <{_Tuple2!3}> scanner.GenericCloseToken (select _x_2_0::_Tuple3 2)) (False -> case (utilities.isSpecialChar c1_4_0) (True -> scanner.ScanOperator 1 (select _x_2_0::_Tuple3 2) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> <{_Tuple2!3}> scanner.BarToken (scanner.charBack (select _x_2_0::_Tuple3 2))) ) ) ) (',' -> <{_Tuple2!3}> scanner.CommaToken input_1) (';' -> <{_Tuple2!3}> scanner.SemicolonToken input_1) ('#' -> case co_2 (scanner.TypeContext -> <{_Tuple2!3}> scanner.HashToken input_1) (_ -> let _x_2_0::B = scanner.determineStrictness input_1, strict_2_1 = select _x_2_0::_Tuple2 0 in case strict_2_1 (True -> <{_Tuple2!3}> (scanner.SeqLetToken strict_2_1) (select _x_2_0::_Tuple2 1)) (False -> let input_4_0 = select _x_2_0::_Tuple2 1, _x_4_1 = scanner.ReadNormalChar input_4_0 in case (select _x_4_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.SeqLetToken False) (select _x_4_1::_Tuple3 2)) (False -> let c1_6_0::C = select _x_4_1::_Tuple3 1 in case (utilities.isSpecialChar c1_6_0) (True -> scanner.ScanOperator 1 (select _x_4_1::_Tuple3 2) (_predefined._Cons c1_6_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> <{_Tuple2!3}> (scanner.SeqLetToken strict_2_1) (scanner.charBack (select _x_4_1::_Tuple3 2))) ) ) )) ('*' -> case co_2 (scanner.TypeContext -> <{_Tuple2!3}> scanner.AsteriskToken input_1) ) ('&' -> scanner.possibleKeyToken scanner.AndToken (_predefined._Cons _x_0 _predefined._Nil) co_2 input_1) ('.' -> <{scanner._c;632;7_232}> co_2 input_1 _x_0) ('!' -> case co_2 (scanner.TypeContext -> <{_Tuple2!3}> scanner.ExclamationToken input_1) ) ('\\' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.BackSlashToken (select _x_2_0::_Tuple3 2)) (False -> let c_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c_4_0 '\\') (True -> scanner.possibleKeyToken scanner.DoubleBackSlashToken (_predefined._Cons c_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2 (select _x_2_0::_Tuple3 2)) (False -> case (utilities.isSpecialChar c_4_0) (True -> scanner.ScanOperator 1 (select _x_2_0::_Tuple3 2) (_predefined._Cons c_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> <{_Tuple2!3}> scanner.BackSlashToken (scanner.charBack (select _x_2_0::_Tuple3 2))) ) ) ) ('_' -> case input_1 (scanner._Input inp_stream_2_0 inp_filename_2_1 inp_pos_2_2 inp_tabsize_2_3 -> case inp_stream_2_0 (scanner.OldLine i_3_0 line_3_1 stream_3_2 -> let size_4_0::I = _SystemArray.size_20 line_3_1, end_i_4_1::I = scanner.scan_underscores_104 i_3_0 size_4_0 line_3_1 in case (case (<{StdInt.<_17}> end_i_4_1 size_4_0) (True -> scanner.IsIdentChar (_SystemArray.select_19 line_3_1 end_i_4_1) co_2) (False -> False) ) (True -> scanner.replaceIdentToken_105 (scanner.ScanIdentFast (<{StdInt.+_6}> (<{StdInt.-_7}> end_i_4_1 i_3_0) 1) (update input_1::scanner._Input [0:scanner.OldLine end_i_4_1 line_3_1 stream_3_2]) co_2)) (False -> case (<{StdInt.==_16}> end_i_4_1 i_3_0) (True -> <{_Tuple2!3}> scanner.WildCardToken input_1) (False -> <{_Tuple2!3}> (scanner.ErrorToken (<{StdString.+++_11}> (<{StdString.%_10}> line_3_1 (_Tuple2 (<{StdInt.-_7}> i_3_0 1) (<{StdInt.-_7}> end_i_4_1 1))) " is an illegal token")) (update input_1::scanner._Input [0:scanner.OldLine end_i_4_1 line_3_1 stream_3_2,2:update inp_pos_2_2::scanner._FilePosition [1:<{StdInt.+_6}> (select inp_pos_2_2::scanner._FilePosition 1) (<{StdInt.-_7}> end_i_4_1 i_3_0)]])) ) ) ) ) ('<' -> case co_2 (scanner.TypeContext -> let _x_3_0 = scanner.ReadNormalChar input_1 in case (select _x_3_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "< just before end of file in TypeContext") (select _x_3_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_3_0::_Tuple3 1) '=') (True -> <{_Tuple2!3}> scanner.LessThanOrEqualToken (select _x_3_0::_Tuple3 2)) (False -> scanner.ScanOperator 0 (scanner.charBack (select _x_3_0::_Tuple3 2)) (_predefined._Cons _x_0 _predefined._Nil) scanner.TypeContext) ) ) (_ -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "<") (select _x_2_0::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_0::_Tuple3 1 in case (StdBool.not (<{StdChar.==_18}> c1_4_0 '-')) (True -> case (StdBool.not (<{StdChar.==_18}> c1_4_0 '|')) (True -> scanner.ScanOperator 0 (scanner.charBack (select _x_2_0::_Tuple3 2)) (_predefined._Cons _x_0 _predefined._Nil) co_2) (False -> let input_7_0 = select _x_2_0::_Tuple3 2, _x_7_1 = scanner.ReadNormalChar input_7_0 in case (select _x_7_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "<|") (select _x_7_1::_Tuple3 2)) (False -> let c2_9_0::C = select _x_7_1::_Tuple3 1 in case (<{StdChar.==_18}> c2_9_0 '-') (True -> let input_11_0 = select _x_7_1::_Tuple3 2, _x_11_1 = scanner.ReadNormalChar input_11_0 in case (select _x_11_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.LeftArrowWithBarToken (select _x_11_1::_Tuple3 2)) (False -> let c3_13_0::C = select _x_11_1::_Tuple3 1 in case (utilities.isSpecialChar c3_13_0) (True -> scanner.ScanOperator 3 (select _x_11_1::_Tuple3 2) (_predefined._Cons c3_13_0 (_predefined._Cons c2_9_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)))) co_2) (False -> <{_Tuple2!3}> scanner.LeftArrowWithBarToken (scanner.charBack (select _x_11_1::_Tuple3 2))) ) ) (False -> case (utilities.isSpecialChar c2_9_0) (True -> scanner.ScanOperator 2 (select _x_7_1::_Tuple3 2) (_predefined._Cons c2_9_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) co_2) (False -> <{_Tuple2!3}> (scanner.IdentToken "<|") (scanner.charBack (select _x_7_1::_Tuple3 2))) ) ) ) ) (False -> let input_6_0 = select _x_2_0::_Tuple3 2, _x_6_1 = scanner.ReadNormalChar input_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.LeftArrowToken (select _x_6_1::_Tuple3 2)) (False -> let c2_8_0::C = select _x_6_1::_Tuple3 1 in case (<{StdChar.==_18}> c2_8_0 ':') (True -> let input_10_0 = select _x_6_1::_Tuple3 2, _x_10_1 = scanner.ReadNormalChar input_10_0 in case (select _x_10_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.LeftArrowColonToken (select _x_10_1::_Tuple3 2)) (False -> let c3_12_0::C = select _x_10_1::_Tuple3 1 in case (utilities.isSpecialChar c3_12_0) (True -> scanner.ScanOperator 3 (select _x_10_1::_Tuple3 2) (_predefined._Cons c3_12_0 (_predefined._Cons c2_8_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)))) co_2) (False -> <{_Tuple2!3}> scanner.LeftArrowColonToken (scanner.charBack (select _x_10_1::_Tuple3 2))) ) ) (False -> case (utilities.isSpecialChar c2_8_0) (True -> scanner.ScanOperator 2 (select _x_6_1::_Tuple3 2) (_predefined._Cons c2_8_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) co_2) (False -> <{_Tuple2!3}> scanner.LeftArrowToken (scanner.charBack (select _x_6_1::_Tuple3 2))) ) ) ) ) )) ('-' -> let _x_2_0 = scanner.GetPreviousChar input_1, input_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = scanner.ReadNormalChar input_2_1 in case (select _x_2_2::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "-") (select _x_2_2::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_2::_Tuple3 1 in case (case (StdChar.isDigit c1_4_0) (True -> scanner.new_exp_char (select _x_2_0::_Tuple2 0)) (False -> False) ) (True -> scanner.ScanNumeral 1 (select _x_2_2::_Tuple3 2) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) (False -> case (StdBool.not (<{StdChar.==_18}> c1_4_0 '>')) (True -> scanner.ScanOperator 0 (scanner.charBack (select _x_2_2::_Tuple3 2)) (_predefined._Cons _x_0 _predefined._Nil) co_2) (False -> case (<{scanner.==_150}> co_2 scanner.TypeContext) (True -> <{_Tuple2!3}> scanner.ArrowToken (select _x_2_2::_Tuple3 2)) (False -> let input_8_0 = select _x_2_2::_Tuple3 2, _x_8_1 = scanner.ReadNormalChar input_8_0 in case (select _x_8_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.ArrowToken (select _x_8_1::_Tuple3 2)) (False -> let c2_10_0::C = select _x_8_1::_Tuple3 1 in case (utilities.isSpecialChar c2_10_0) (True -> scanner.ScanOperator 2 (select _x_8_1::_Tuple3 2) (_predefined._Cons c2_10_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) co_2) (False -> <{_Tuple2!3}> scanner.ArrowToken (scanner.charBack (select _x_8_1::_Tuple3 2))) ) ) ) ) ) ) ('+' -> let _x_2_0 = scanner.GetPreviousChar input_1, input_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = scanner.ReadNormalChar input_2_1 in case (select _x_2_2::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "+") (select _x_2_2::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_2::_Tuple3 1 in case (case (StdChar.isDigit c1_4_0) (True -> scanner.new_exp_char (select _x_2_0::_Tuple2 0)) (False -> False) ) (True -> scanner.ScanNumeral 1 (select _x_2_2::_Tuple3 2) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) (False -> scanner.ScanOperator 0 (scanner.charBack (select _x_2_2::_Tuple3 2)) (_predefined._Cons _x_0 _predefined._Nil) co_2) ) ) ('=' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.EqualToken (select _x_2_0::_Tuple3 2)) (False -> let c_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c_4_0 ':') (True -> scanner.possibleKeyToken scanner.DefinesColonToken (_predefined._Cons c_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2 (select _x_2_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> c_4_0 '>') (True -> scanner.possibleKeyToken scanner.DoubleArrowToken (_predefined._Cons c_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2 (select _x_2_0::_Tuple3 2)) (False -> case (utilities.isSpecialChar c_4_0) (True -> scanner.ScanOperator 1 (select _x_2_0::_Tuple3 2) (_predefined._Cons c_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> <{_Tuple2!3}> scanner.EqualToken (scanner.charBack (select _x_2_0::_Tuple3 2))) ) ) ) ) (':' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.ColonToken (select _x_2_0::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c1_4_0 ':') (True -> let input_6_0 = select _x_2_0::_Tuple3 2, _x_6_1 = scanner.ReadNormalChar input_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.DoubleColonToken (select _x_6_1::_Tuple3 2)) (False -> let c2_8_0::C = select _x_6_1::_Tuple3 1 in case (case (utilities.isSpecialChar c2_8_0) (True -> <{general.~_5}> (scanner._f233_233 (<{StdChar.==_18}> c2_8_0 '!') c2_8_0)) (False -> False) ) (True -> scanner.ScanOperator 2 (select _x_6_1::_Tuple3 2) (_predefined._Cons c2_8_0 (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil))) co_2) (False -> <{_Tuple2!3}> scanner.DoubleColonToken (scanner.charBack (select _x_6_1::_Tuple3 2))) ) ) (False -> case (<{StdChar.==_18}> c1_4_0 '=') (True -> let input_7_0 = select _x_2_0::_Tuple3 2, _x_7_1 = scanner.ReadNormalChar input_7_0 in case (select _x_7_1::_Tuple3 0) (True -> scanner.ScanOperator 1 (select _x_7_1::_Tuple3 2) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> case (<{StdChar.==_18}> (select _x_7_1::_Tuple3 1) '=') (True -> <{_Tuple2!3}> scanner.ColonDefinesToken (select _x_7_1::_Tuple3 2)) (False -> scanner.ScanOperator 1 (scanner.charBack (select _x_7_1::_Tuple3 2)) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) ) ) (False -> case (utilities.isSpecialChar c1_4_0) (True -> scanner.ScanOperator 1 (select _x_2_0::_Tuple3 2) (_predefined._Cons c1_4_0 (_predefined._Cons _x_0 _predefined._Nil)) co_2) (False -> <{_Tuple2!3}> scanner.ColonToken (scanner.charBack (select _x_2_0::_Tuple3 2))) ) ) ) ) ('\'' -> scanner.ScanChar input_1) ('\"' -> scanner.ScanString 0 (_predefined._Cons _x_0 _predefined._Nil) input_1) ('E' -> case co_2 (scanner.TypeContext -> let _x_3_0 = scanner.ReadNormalChar input_1 in case (select _x_3_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "E") (select _x_3_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_3_0::_Tuple3 1) '.') (True -> <{_Tuple2!3}> scanner.ExistsToken (select _x_3_0::_Tuple3 2)) (False -> scanner.ScanIdentFast 1 (scanner.charBack (select _x_3_0::_Tuple3 2)) scanner.TypeContext) ) ) ) ('A' -> case co_2 (scanner.TypeContext -> let _x_3_0 = scanner.ReadNormalChar input_1 in case (select _x_3_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "A") (select _x_3_0::_Tuple3 2)) (False -> case (<{StdChar.==_18}> (select _x_3_0::_Tuple3 1) '.') (True -> <{_Tuple2!3}> scanner.ForAllToken (select _x_3_0::_Tuple3 2)) (False -> scanner.ScanIdentFast 1 (scanner.charBack (select _x_3_0::_Tuple3 2)) scanner.TypeContext) ) ) ) ('/' -> let _x_2_0 = scanner.ReadNormalChar input_1 in case (select _x_2_0::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.IdentToken "/") (select _x_2_0::_Tuple3 2)) (False -> let c1_4_0::C = select _x_2_0::_Tuple3 1 in case (<{StdChar.==_18}> c1_4_0 '/') (True -> let input_6_0 = select _x_2_0::_Tuple3 2, _x_6_1 = scanner.ReadNormalChar input_6_0 in case (select _x_6_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "// before EOF in Scan") (select _x_6_1::_Tuple3 2)) (False -> let c2_8_0::C = select _x_6_1::_Tuple3 1 in case (StdBool.not (<{StdChar.==_18}> c2_8_0 '*')) (True -> <{_Tuple2!3}> (scanner.ErrorToken "// in Scan") (select _x_6_1::_Tuple3 2)) (False -> scanner.ScanDocLine 0 (select _x_6_1::_Tuple3 2) (_predefined._Cons c2_8_0 _predefined._Nil) co_2) ) ) (False -> case (<{StdChar.==_18}> c1_4_0 '*') (True -> let input_7_0 = select _x_2_0::_Tuple3 2, _x_7_1 = scanner.ReadNormalChar input_7_0 in case (select _x_7_1::_Tuple3 0) (True -> <{_Tuple2!3}> (scanner.ErrorToken "/* before EOF in Scan") (select _x_7_1::_Tuple3 2)) (False -> case (StdBool.not (<{StdChar.==_18}> (select _x_7_1::_Tuple3 1) '*')) (True -> <{_Tuple2!3}> (scanner.ErrorToken "/* in Scan") (select _x_7_1::_Tuple3 2)) (False -> scanner.ScanDocBlock -1 (select _x_7_1::_Tuple3 2) _predefined._Nil co_2) ) ) ) ) ) (_ -> case (StdChar.isDigit _x_0) (True -> scanner.ScanNumeral 0 input_1 (_predefined._Cons _x_0 _predefined._Nil)) (False -> case (scanner.IsIdentChar _x_0 co_2) (True -> scanner.ScanIdentFast 1 input_1 co_2) (False -> case (utilities.isSpecialChar _x_0) (True -> scanner.ScanOperator 0 input_1 (_predefined._Cons _x_0 _predefined._Nil) co_2) (False -> <{_Tuple2!3}> (scanner.ErrorToken "illegal char in input") input_1) ) ) )
scanner._f233_233::B !_x_0::B c2_1::C = case _x_0 (True -> True) (_ -> case (<{StdChar.==_18}> c2_1 '*') (True -> True) (False -> <{StdChar.==_18}> c2_1 '.') )
<{scanner._c;632;7_232}> !co_0 !input_1 _x_2::C = case co_0 (scanner.TypeContext -> <{_Tuple2!3}> scanner.DotToken input_1) (_ -> let _x_1_0 = scanner.ReadNormalChar input_1 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.DotToken (select _x_1_0::_Tuple3 2)) (False -> let c1_3_0::C = select _x_1_0::_Tuple3 1 in case (<{StdChar.==_18}> c1_3_0 '.') (True -> let input_5_0 = select _x_1_0::_Tuple3 2, _x_5_1 = scanner.ReadNormalChar input_5_0 in case (select _x_5_1::_Tuple3 0) (True -> <{_Tuple2!3}> scanner.DotDotToken (select _x_5_1::_Tuple3 2)) (False -> let c2_7_0::C = select _x_5_1::_Tuple3 1 in case (utilities.isSpecialChar c2_7_0) (True -> scanner.ScanOperator 2 (select _x_5_1::_Tuple3 2) (_predefined._Cons c2_7_0 (_predefined._Cons c1_3_0 (_predefined._Cons _x_2 _predefined._Nil))) co_0) (False -> <{_Tuple2!3}> scanner.DotDotToken (scanner.charBack (select _x_5_1::_Tuple3 2))) ) ) (False -> case (utilities.isSpecialChar c1_3_0) (True -> scanner.ScanOperator 1 (select _x_1_0::_Tuple3 2) (_predefined._Cons c1_3_0 (_predefined._Cons _x_2 _predefined._Nil)) co_0) (False -> <{_Tuple2!3}> scanner.DotToken (scanner.charBack (select _x_1_0::_Tuple3 2))) ) ) )
scanner.stolacc_121 !s_0 !i_1::I acc_2 = case (StdBool.not (<{StdInt.<_17}> i_1 0)) (True -> let !si_2_0::C = _SystemArray.select_19 s_0 i_1 in scanner.stolacc_121 s_0 (<{StdInt.-_7}> i_1 StdInt.one_11) (_predefined._Cons si_2_0 acc_2)) (False -> acc_2) 
scanner.string_to_list !s_0 = scanner.stolacc_121 s_0 (<{StdInt.-_7}> (_SystemArray.size_20 s_0) 1) _predefined._Nil
scanner.EndOfInput !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> case inp_stream_1_0 (scanner.InFile file_2_0 -> let _x_3_0 = StdFile.fend file_2_0 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (update input_0::scanner._Input [0:scanner.InFile (select _x_3_0::_Tuple2 1)])) ) (_ -> <{_Tuple2!3}> False input_0)
scanner.definesOffside::B !_x_0 = case _x_0 (scanner.LetToken _x_1_0 -> True) (scanner.SeqLetToken _x_1_0 -> True) (scanner.WhereToken -> True) (scanner.WithToken -> True) (scanner.SpecialToken -> True) (scanner.OfToken -> True) (_ -> False)
scanner.store !x_0 !_x_1 = case _x_1 (scanner.Buffer0 -> scanner.Buffer1 x_0) (scanner.Buffer1 y_1_0 -> scanner.Buffer2 x_0 y_1_0) (scanner.Buffer2 y_1_0 z_1_1 -> scanner.Buffer3 x_0 y_1_0 z_1_1) (scanner.Buffer3 y_1_0 z_1_1 _x_1_2 -> scanner.Buffer3 x_0 y_1_0 z_1_1) 
scanner.needsNewDefinitionToken::B !_x_0 = case _x_0 (scanner.OfToken -> True) (scanner.SpecialToken -> True) (_ -> False)
scanner.isEmptyBuffer::B !_x_0 = case _x_0 (scanner.Buffer0 -> True) (_ -> False)
scanner.head !_x_0 = case _x_0 (scanner.Buffer0 -> StdMisc.abort "head of empty buffer") (scanner.Buffer1 x_1_0 -> <{_Tuple2!2}> x_1_0 _x_0) (scanner.Buffer2 x_1_0 _x_1_1 -> <{_Tuple2!2}> x_1_0 _x_0) (scanner.Buffer3 x_1_0 _x_1_1 _x_1_2 -> <{_Tuple2!2}> x_1_0 _x_0) 
scanner.getPosition_154 !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> <{_Tuple2!3}> inp_pos_1_2 input_0) 
scanner.getCharPosition_155 !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case ss_input_1_0 (scanner.Input input_2_0 -> let _x_3_0 = scanner.getPosition_154 input_2_0 in <{_Tuple2!2}> (select _x_3_0::_Tuple2 0) (update scanState_0::scanner._RScanState [0:scanner.Input (select _x_3_0::_Tuple2 1)])) (scanner.PushedToken longToken_2_0 _x_2_1 -> <{_Tuple2!2}> (select longToken_2_0::scanner._LongToken 0) scanState_0) ) 
scanner.getPosition_153 !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case (scanner.isEmptyBuffer ss_tokenBuffer_1_3) (True -> scanner.getCharPosition_155 scanState_0) (False -> let _x_3_0 = scanner.head ss_tokenBuffer_1_3 in <{_Tuple2!3}> (select (select _x_3_0::_Tuple2 0)::scanner._LongToken 0) (update scanState_0::scanner._RScanState [3:select _x_3_0::_Tuple2 1])) ) 
scanner.pop !_x_0 = case _x_0 (scanner.Buffer0 -> scanner.Buffer0) (scanner.Buffer1 x_1_0 -> scanner.Buffer0) (scanner.Buffer2 x_1_0 y_1_1 -> scanner.Buffer1 y_1_1) (scanner.Buffer3 x_1_0 y_1_1 z_1_2 -> scanner.Buffer2 y_1_1 z_1_2) 
scanner.token_back_133 token_0 ss_tokenBuffer_1 ss_scanOptions_2::I ss_offsides_3 newContext_4 lt_index_5::I lt_token_6 lt_position_7 !input_8 = case input_8 (scanner.Input _x_1_0 -> case _x_1_0 (scanner._Input _x_2_0 inp_filename_2_1 inp_pos_2_2 inp_tabsize_2_3 -> case _x_2_0 (scanner.OldLine current_3_0 string_3_1 stream_3_2 -> case (<{StdInt.==_16}> (select inp_pos_2_2::scanner._FilePosition 0) (select lt_position_7::scanner._FilePosition 0)) (True -> let _x_5_0 = scanner.Scan (_SystemArray.select_19 string_3_1 lt_index_5) (scanner._Input (scanner.OldLine (<{StdInt.+_6}> lt_index_5 1) string_3_1 stream_3_2) inp_filename_2_1 lt_position_7 inp_tabsize_2_3) newContext_4, token_5_1 = select _x_5_0::_Tuple2 0 in _Tuple2 token_5_1 (scanner._RScanState (scanner.Input (select _x_5_0::_Tuple2 1)) ss_offsides_3 ss_scanOptions_2 (scanner.store (scanner._LongToken lt_position_7 lt_index_5 token_5_1 newContext_4) (scanner.pop ss_tokenBuffer_1)))) (False -> _Tuple2 lt_token_6 (scanner._RScanState input_8 ss_offsides_3 ss_scanOptions_2 (scanner.store token_0 ss_tokenBuffer_1))) ) ) ) (_ -> _Tuple2 lt_token_6 (scanner._RScanState input_8 ss_offsides_3 ss_scanOptions_2 (scanner.store token_0 ss_tokenBuffer_1)))
scanner.getIndex_157 !input_0 = case input_0 (scanner.OldLine index_1_0 _x_1_1 _x_1_2 -> <{_Tuple2!3}> (<{StdInt.-_7}> index_1_0 1) input_0) (_ -> <{_Tuple2!3}> 0 input_0)
scanner.getIndex_158 !input_0 = case input_0 (scanner._Input stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> let _x_2_0 = scanner.getIndex_157 stream_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (update input_0::scanner._Input [0:select _x_2_0::_Tuple2 1])) 
scanner.get !_x_0 = case _x_0 (scanner.Buffer0 -> StdMisc.abort "get from empty buffer") (scanner.Buffer1 x_1_0 -> <{_Tuple2!2}> x_1_0 scanner.Buffer0) (scanner.Buffer2 x_1_0 y_1_1 -> <{_Tuple2!2}> x_1_0 (scanner.Buffer1 y_1_1)) (scanner.Buffer3 x_1_0 y_1_1 z_1_2 -> <{_Tuple2!2}> x_1_0 (scanner.Buffer2 y_1_1 z_1_2)) 
scanner.tokenBack_160 !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case (scanner.isEmptyBuffer ss_tokenBuffer_1_3) (True -> StdMisc.abort "tokenBack with empty token buffer") (False -> let _x_3_0 = scanner.get ss_tokenBuffer_1_3 in update scanState_0::scanner._RScanState [0:scanner.PushedToken (select _x_3_0::_Tuple2 0) ss_input_1_0,3:select _x_3_0::_Tuple2 1]) ) 
scanner.canBeOffside::B !_x_0 = case _x_0 (scanner.EqualToken -> False) (scanner.ColonDefinesToken -> False) (scanner.DefinesColonToken -> False) (scanner.SeqLetToken _x_1_0 -> False) (scanner.WhereToken -> False) (scanner.SpecialToken -> False) (scanner.WithToken -> False) (scanner.BarToken -> False) (scanner.CodeBlockToken _x_1_0 -> False) (_ -> True)
scanner.scan_offsides_129 !<{_v<_0}> !_vone_1 !<{_v+_2}> n_3 col_4 os_col_5 new_def_6 !_x_7 = case _x_7 (_predefined._Nil -> _Tuple4 n_3 os_col_5 new_def_6 _predefined._Nil) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 os_col_2_0 b_2_1 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 col_4 os_col_2_0) (True -> scanner.scan_offsides_129 <{_v<_0}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 n_3 (select _vone_1::<{StdOverloaded.one;}> 0)) col_4 os_col_2_0 b_2_1 r_1_1) (False -> _Tuple4 n_3 os_col_2_0 new_def_6 _x_7) ) ) 
scanner.gen_end_groups_130 index_0::I pos_1 newToken_2 !n_3::I scanState_4 = case (<{StdInt.==_16}> n_3 1) (True -> let scanState_2_0 = scanner.tokenBack_160 scanState_4 in _Tuple2 newToken_2 (update scanState_2_0::scanner._RScanState [3:scanner.store (scanner._LongToken pos_1 index_0 newToken_2 scanner.FunctionContext) (select scanState_2_0::scanner._RScanState 3)])) (False -> let scanState_2_0 = scanner.tokenBack_160 scanState_4 in scanner.gen_end_groups_130 index_0 pos_1 newToken_2 (<{StdInt.-_7}> n_3 StdInt.one_11) (update scanState_2_0::scanner._RScanState [3:scanner.store (scanner._LongToken pos_1 index_0 newToken_2 scanner.FunctionContext) (select scanState_2_0::scanner._RScanState 3)])) 
scanner.equal_args_of_tokens_134::B !_x_0 !_x_1 = case _x_0 (scanner.IdentToken id1_1_0 -> case _x_1 (scanner.IdentToken id2_2_0 -> <{StdString.==_2}> id1_1_0 id2_2_0) ) (scanner.RealToken real1_1_0 -> case _x_1 (scanner.RealToken real2_2_0 -> <{StdString.==_2}> real1_1_0 real2_2_0) ) (scanner.StringToken string1_1_0 -> case _x_1 (scanner.StringToken string2_2_0 -> <{StdString.==_2}> string1_1_0 string2_2_0) ) (scanner.CharToken char1_1_0 -> case _x_1 (scanner.CharToken char2_2_0 -> <{StdString.==_2}> char1_1_0 char2_2_0) ) (scanner.CharListToken chars1_1_0 -> case _x_1 (scanner.CharListToken chars2_2_0 -> <{StdString.==_2}> chars1_1_0 chars2_2_0) ) (scanner.BoolToken bool1_1_0 -> case _x_1 (scanner.BoolToken bool2_2_0 -> <{StdBool.==_3}> bool1_1_0 bool2_2_0) ) (scanner.IntToken int1_1_0 -> case _x_1 (scanner.IntToken int2_2_0 -> <{StdString.==_2}> int1_1_0 int2_2_0) ) (scanner.LetToken l1_1_0 -> case _x_1 (scanner.LetToken l2_2_0 -> <{StdBool.==_3}> l1_1_0 l2_2_0) ) (scanner.SeqLetToken l1_1_0 -> case _x_1 (scanner.SeqLetToken l2_2_0 -> <{StdBool.==_3}> l1_1_0 l2_2_0) ) (scanner.ErrorToken id1_1_0 -> case _x_1 (scanner.ErrorToken id2_2_0 -> <{StdString.==_2}> id1_1_0 id2_2_0) ) (scanner.QualifiedIdentToken module_name1_1_0 ident_name1_1_1 -> case _x_1 (scanner.QualifiedIdentToken module_name2_2_0 ident_name2_2_1 -> case (<{StdString.==_2}> ident_name1_1_1 ident_name2_2_1) (True -> <{StdString.==_2}> module_name1_1_0 module_name2_2_0) (False -> False) ) ) (scanner.DocBlockToken d1_1_0 -> case _x_1 (scanner.DocBlockToken d2_2_0 -> <{StdString.==_2}> d1_1_0 d2_2_0) ) (scanner.DocLineToken d1_1_0 -> case _x_1 (scanner.DocLineToken d2_2_0 -> <{StdString.==_2}> d1_1_0 d2_2_0) ) (_ -> True)
<{scanner.==_20}>::B !token1_0 !token2_1 = case (compare_constructor.equal_constructor token1_0 token2_1) (True -> scanner.equal_args_of_tokens_134 token1_0 token2_1) (False -> False) 
scanner.scan_offsides_184 !_vone_0 !<{_v+_1}> n_2 col_3::I os_col_4::I new_def_5 !_x_6 = case _x_6 (_predefined._Nil -> _Tuple4 n_2 os_col_4 new_def_5 _predefined._Nil) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 os_col_2_0 b_2_1 -> case (<{StdInt.<_17}> col_3 os_col_2_0) (True -> scanner.scan_offsides_184 _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 n_2 (select _vone_0::<{StdOverloaded.one;}> 0)) col_3 os_col_2_0 b_2_1 r_1_1) (False -> _Tuple4 n_2 os_col_2_0 new_def_5 _x_6) ) ) 
scanner.scan_offsides_185 !<{_v+_0}> n_1::I col_2::I os_col_3::I new_def_4 !_x_5 = case _x_5 (_predefined._Nil -> _Tuple4 n_1 os_col_3 new_def_4 _predefined._Nil) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 os_col_2_0 b_2_1 -> case (<{StdInt.<_17}> col_2 os_col_2_0) (True -> scanner.scan_offsides_185 <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 n_1 StdInt.one_11) col_2 os_col_2_0 b_2_1 r_1_1) (False -> _Tuple4 n_1 os_col_2_0 new_def_4 _x_5) ) ) 
scanner.scan_offsides_186 n_0::I col_1::I os_col_2::I new_def_3 !_x_4 = case _x_4 (_predefined._Nil -> _Tuple4 n_0 os_col_2 new_def_3 _predefined._Nil) (_predefined._Cons _x_1_0 r_1_1 -> case _x_1_0 (_Tuple2 os_col_2_0 b_2_1 -> case (<{StdInt.<_17}> col_1 os_col_2_0) (True -> scanner.scan_offsides_186 (<{StdInt.+_6}> n_0 StdInt.one_11) col_1 os_col_2_0 b_2_1 r_1_1) (False -> _Tuple4 n_0 os_col_2_0 new_def_3 _x_4) ) ) 
scanner.nextToken_159 !newContext_0 !scanState_1 = case scanState_1 (scanner._RScanState inp_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case inp_1_0 (scanner.PushedToken token_2_0 rest_inp_2_1 -> case token_2_0 (scanner._LongToken lt_position_3_0 lt_index_3_1 lt_token_3_2 lt_context_3_3 -> case (case (<{scanner.==_150}> lt_context_3_3 newContext_0) (True -> True) (False -> scanner.notContextDependent lt_token_3_2) ) (True -> <{_Tuple2!3}> lt_token_3_2 (update scanState_1::scanner._RScanState [0:rest_inp_2_1,3:scanner.store token_2_0 ss_tokenBuffer_1_3])) (False -> scanner.token_back_133 token_2_0 ss_tokenBuffer_1_3 ss_scanOptions_1_2 ss_offsides_1_1 newContext_0 lt_index_3_1 lt_token_3_2 lt_position_3_0 rest_inp_2_1) ) ) (scanner.Input inp_2_0 -> let _x_3_0::C = scanner.SkipWhites inp_2_0, inp_3_1 = select _x_3_0::_Tuple3 2, c_3_2 = select _x_3_0::_Tuple3 1 in <{scanner._c;340;11_238}> (select _x_3_0::_Tuple3 0) inp_3_1 ss_offsides_1_1 ss_scanOptions_1_2 newContext_0 ss_tokenBuffer_1_3 c_3_2) ) (_ -> StdMisc.abort "Scanner: Error in nextToken")
scanner.newOffside_131 index_0::I pos_1 !token_2 !scanState_3 = case scanState_3 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case (scanner._f237_237 (scanner.definesOffside token_2) ss_scanOptions_1_2 token_2) (True -> let _x_3_0::I = scanner.nextToken_159 scanner.FunctionContext scanState_3, scanState_3_1 = select _x_3_0::_Tuple2 1, _x_3_2 = scanner.getPosition_153 scanState_3_1, os_pos_3_3 = select _x_3_2::_Tuple2 0, os_3_4 = select os_pos_3_3::scanner._FilePosition 1 in case (<{StdInt.==_16}> os_3_4 1) (True -> let newToken_5_0 = scanner.ErrorToken "groups should not start in column 1", scanState_5_1 = scanner.tokenBack_160 (scanner.tokenBack_160 (select _x_3_2::_Tuple2 1)) in _Tuple2 newToken_5_0 (update scanState_5_1::scanner._RScanState [3:scanner.store (scanner._LongToken pos_1 index_0 newToken_5_0 scanner.FunctionContext) (select scanState_5_1::scanner._RScanState 3)])) (False -> _Tuple2 token_2 (update (scanner.tokenBack_160 (select _x_3_2::_Tuple2 1))::scanner._RScanState [1:_predefined._Cons (_Tuple2 os_3_4 (scanner.needsNewDefinitionToken token_2)) ss_offsides_1_1])) ) (False -> _Tuple2 token_2 scanState_3) ) 
scanner.checkOffside !pos_0 !index_1::I !token_2 !scanState_3 = case scanState_3 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case (<{StdInt.==_16}> (StdInt.bitand ss_scanOptions_1_2 1) 0) (True -> _Tuple2 token_2 scanState_3) (False -> case (StdList.isEmpty ss_offsides_1_1) (True -> scanner.newOffside_131 index_1 pos_0 token_2 scanState_3) (False -> let col_4_0::I = select pos_0::scanner._FilePosition 1, _x_4_1 = StdList.hd ss_offsides_1_1, os_col_4_2::I = select _x_4_1::_Tuple2 0 in case (case (<{StdInt.==_16}> col_4_0 os_col_4_2) (True -> scanner.canBeOffside token_2) (False -> False) ) (True -> let newToken_6_0 = scanner.NewDefinitionToken, scanState_6_1 = scanner.tokenBack_160 scanState_3 in _Tuple2 newToken_6_0 (update scanState_6_1::scanner._RScanState [3:scanner.store (scanner._LongToken pos_0 index_1 newToken_6_0 scanner.FunctionContext) (select scanState_6_1::scanner._RScanState 3)])) (False -> case (case (<{StdInt.<_17}> col_4_0 os_col_4_2) (True -> StdBool.not (<{scanner.==_20}> token_2 scanner.InToken)) (False -> False) ) (True -> let new_def_7_0 = select _x_4_1::_Tuple2 1, _x_7_1 = scanner.scan_offsides_186 0 col_4_0 os_col_4_2 new_def_7_0 ss_offsides_1_1, offsides_7_2::B = select _x_7_1::_Tuple4 3 in scanner.gen_end_groups_130 index_1 pos_0 scanner.EndGroupToken (select _x_7_1::_Tuple4 0) (<{scanner._c;1816;23_235}> (scanner._f234_234 (select _x_7_1::_Tuple4 2) col_4_0 _x_7_1 token_2) index_1 pos_0 token_2 scanState_3 offsides_7_2)) (False -> case (<{scanner.==_20}> token_2 scanner.InToken) (True -> _Tuple2 token_2 scanState_3) (False -> scanner.newOffside_131 index_1 pos_0 token_2 scanState_3) ) ) ) ) ) 
<{scanner._c;340;11_238}> !_x_0 !inp_1 !ss_offsides_2 !ss_scanOptions_3::I !newContext_4 ss_tokenBuffer_5 c_6::C = case _x_0 (general.Yes string_1_0 -> let _x_2_0 = select inp_1::scanner._Input 2, _x_2_1 = scanner.getIndex_158 (select _x_2_0::_Tuple2 1) in <{_Tuple2!3}> (scanner.ErrorToken string_1_0) (scanner._RScanState (scanner.Input (select _x_2_1::_Tuple2 1)) ss_offsides_2 ss_scanOptions_3 (scanner.store (scanner._LongToken (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0) (scanner.ErrorToken string_1_0) newContext_4) ss_tokenBuffer_5))) (_ -> let _x_1_0 = select inp_1::scanner._Input 2, inp_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = scanner.getIndex_158 inp_1_1, inp_1_3 = select _x_1_2::_Tuple2 1, _x_1_4 = scanner.EndOfInput inp_1_3 in case (case (select _x_1_4::_Tuple2 0) (True -> <{StdChar.==_18}> c_6 '\n') (False -> False) ) (True -> let pos_3_0 = select _x_1_0::_Tuple2 0, index_3_1::I = select _x_1_2::_Tuple2 0, newToken_3_2 = scanner.EndOfFileToken in scanner.checkOffside pos_3_0 index_3_1 newToken_3_2 (scanner._RScanState (scanner.Input (select _x_1_4::_Tuple2 1)) ss_offsides_2 ss_scanOptions_3 (scanner.store (scanner._LongToken pos_3_0 index_3_1 newToken_3_2 newContext_4) ss_tokenBuffer_5))) (False -> let pos_3_0 = select _x_1_0::_Tuple2 0, index_3_1 = select _x_1_2::_Tuple2 0, _x_3_2::I = scanner.Scan c_6 (select _x_1_4::_Tuple2 1) newContext_4, token_3_3 = select _x_3_2::_Tuple2 0 in scanner.checkOffside pos_3_0 index_3_1 token_3_3 (scanner._RScanState (scanner.Input (select _x_3_2::_Tuple2 1)) ss_offsides_2 ss_scanOptions_3 (scanner.store (scanner._LongToken pos_3_0 index_3_1 token_3_3 newContext_4) ss_tokenBuffer_5))) )
scanner._f237_237::B !_x_0::B ss_scanOptions_1::I token_2 = case _x_0 (True -> case (<{StdInt.==_16}> (StdInt.bitand ss_scanOptions_1 4) 0) (True -> True) (False -> <{scanner._c;1865;17_236}> token_2) ) (_ -> False)
<{scanner._c;1865;17_236}>::B !token_0 = case token_0 (scanner.SeqLetToken _x_1_0 -> False) (_ -> True)
<{scanner._c;1816;23_235}> !_x_0::B index_1::I pos_2 !token_3 !scanState_4 !offsides_5 = case _x_0 (True -> let scanState_2_0 = scanner.tokenBack_160 (select (scanner.newOffside_131 index_1 pos_2 token_3 (update scanState_4::scanner._RScanState [1:offsides_5]))::_Tuple2 1) in update scanState_2_0::scanner._RScanState [3:scanner.store (scanner._LongToken pos_2 index_1 scanner.NewDefinitionToken scanner.FunctionContext) (select scanState_2_0::scanner._RScanState 3)]) (False -> select (scanner.newOffside_131 index_1 pos_2 token_3 (update scanState_4::scanner._RScanState [1:offsides_5]))::_Tuple2 1) 
scanner._f234_234::B !_x_0::B col_1::I _x_2 token_3 = case _x_0 (True -> case (<{StdInt.==_16}> col_1 (select _x_2::_Tuple4 1)) (True -> scanner.canBeOffside token_3) (False -> False) ) (_ -> False)
<{scanner.<<<_14}> !f_0 !_x_1 = case _x_1 (scanner._FilePosition fp_line_1_0 fp_col_1_1 -> <{StdFile.<<<_36}> (<{StdFile.<<<_38}> (<{StdFile.<<<_36}> f_0 fp_line_1_0) ";") fp_col_1_1) 
scanner.getFilename_151 !_x_0 = case _x_0 (scanner.Input input_1_0 -> let _x_2_0 = select input_1_0::scanner._Input 1 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.Input (select _x_2_0::_Tuple2 1))) (scanner.PushedToken tok_1_0 input_1_1 -> let _x_2_0 = scanner.getFilename_151 input_1_1 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.PushedToken tok_1_0 (select _x_2_0::_Tuple2 1))) 
scanner.getFilename_152 !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> let _x_2_0 = scanner.getFilename_151 ss_input_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (update scanState_0::scanner._RScanState [0:select _x_2_0::_Tuple2 1])) 
scanner.getFilename_15 !_x_0 = case _x_0 (scanner.ScanState scan_state_1_0 -> let _x_2_0 = scanner.getFilename_152 scan_state_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.ScanState (select _x_2_0::_Tuple2 1))) 
scanner.tokenBack_16 !_x_0 = case _x_0 (scanner.ScanState scan_state_1_0 -> scanner.ScanState (scanner.tokenBack_160 scan_state_1_0)) 
scanner.replaceUnderscoreToken_132 !_x_0 !underscoreModule_1::B = case _x_0 (scanner.UnderscoreIdentToken name_1_0 -> case underscoreModule_1 (True -> scanner.IdentToken name_1_0) ) (_ -> _x_0)
scanner.nextToken_17 !context_0 !_x_1 = case _x_1 (scanner.ScanState scan_state_1_0 -> case scan_state_1_0 (scanner._RScanState ss_input_2_0 ss_offsides_2_1 ss_scanOptions_2_2 ss_tokenBuffer_2_3 -> let _x_3_0 = scanner.nextToken_159 context_0 scan_state_1_0 in <{_Tuple2!3}> (scanner.replaceUnderscoreToken_132 (select _x_3_0::_Tuple2 0) (StdBool.not (<{StdInt.==_16}> (StdInt.bitand ss_scanOptions_2_2 2) 0))) (scanner.ScanState (select _x_3_0::_Tuple2 1))) ) 
scanner.currentToken_161 !scanState_0 = case scanState_0 (scanner._RScanState ss_input_1_0 ss_offsides_1_1 ss_scanOptions_1_2 ss_tokenBuffer_1_3 -> case (scanner.isEmptyBuffer ss_tokenBuffer_1_3) (True -> <{_Tuple2!3}> (scanner.ErrorToken "dummy") scanState_0) (False -> let _x_3_0 = scanner.head ss_tokenBuffer_1_3 in <{_Tuple2!3}> (select (select _x_3_0::_Tuple2 0)::scanner._LongToken 2) (update scanState_0::scanner._RScanState [3:select _x_3_0::_Tuple2 1])) ) 
scanner.currentToken_18 !_x_0 = case _x_0 (scanner.ScanState scan_state_1_0 -> let _x_2_0 = scanner.currentToken_161 scan_state_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.ScanState (select _x_2_0::_Tuple2 1))) 
scanner.getPosition_19 !_x_0 = case _x_0 (scanner.ScanState scan_state_1_0 -> let _x_2_0 = scanner.getPosition_153 scan_state_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (scanner.ScanState (select _x_2_0::_Tuple2 1))) 
scanner.toString_163 !_x_0 = case _x_0 (scanner.LeftAssoc -> "infixl ") (scanner.RightAssoc -> "infixr ") (scanner.NoAssoc -> "infix ") 
scanner.toString_23 !_x_0 = case _x_0 (scanner.Prio assoc_1_0 prio_1_1 -> <{general.+_14}> (scanner.toString_163 assoc_1_0) (StdString.toString_5 prio_1_1)) (scanner.NoPrio -> "infix") 
scanner.toString_22 !_x_0 = case _x_0 (scanner.IdentToken id_1_0 -> id_1_0) (scanner.UnderscoreIdentToken id_1_0 -> id_1_0) (scanner.IntToken id_1_0 -> id_1_0) (scanner.RealToken id_1_0 -> id_1_0) (scanner.StringToken id_1_0 -> id_1_0) (scanner.CharToken id_1_0 -> id_1_0) (scanner.CharListToken id_1_0 -> <{general.+_14}> (<{general.+_14}> "['" id_1_0) "']") (scanner.BoolToken id_1_0 -> StdString.toString_8 id_1_0) (scanner.OpenToken -> "(") (scanner.CloseToken -> ")") (scanner.CurlyOpenToken -> "{") (scanner.CurlyCloseToken -> "}") (scanner.SquareOpenToken -> "[") (scanner.SquareCloseToken -> "]") (scanner.DotToken -> ".") (scanner.SemicolonToken -> ";") (scanner.ColonToken -> ": (ColonToken)") (scanner.DoubleColonToken -> "::") (scanner.CommaToken -> ",") (scanner.ExclamationToken -> "!") (scanner.BarToken -> "|") (scanner.ArrowToken -> "->") (scanner.DoubleArrowToken -> "=>") (scanner.EqualToken -> "=") (scanner.DefinesColonToken -> "=:") (scanner.ColonDefinesToken -> ":==") (scanner.WildCardToken -> "_") (scanner.BackSlashToken -> "\\") (scanner.DoubleBackSlashToken -> "\\\\") (scanner.LeftArrowToken -> "<-") (scanner.LeftArrowColonToken -> "<-:") (scanner.LeftArrowWithBarToken -> "<|-") (scanner.DotDotToken -> "..") (scanner.AndToken -> "&") (scanner.HashToken -> "#") (scanner.AsteriskToken -> "*") (scanner.LessThanOrEqualToken -> "<=") (scanner.ModuleToken -> "module") (scanner.ImpModuleToken -> "implementation") (scanner.DefModuleToken -> "definition") (scanner.SysModuleToken -> "system") (scanner.ImportToken -> "import") (scanner.FromToken -> "from") (scanner.SpecialToken -> "special") (scanner.ForeignToken -> "foreign") (scanner.IntTypeToken -> "Int") (scanner.CharTypeToken -> "Char") (scanner.RealTypeToken -> "Real") (scanner.BoolTypeToken -> "Bool") (scanner.StringTypeToken -> "String") (scanner.FileTypeToken -> "File") (scanner.WorldTypeToken -> "World") (scanner.ClassToken -> "class") (scanner.InstanceToken -> "instance") (scanner.OtherwiseToken -> "otherwise") (scanner.IfToken -> "if") (scanner.WhereToken -> "where") (scanner.WithToken -> "with") (scanner.CaseToken -> "case") (scanner.OfToken -> "of") (scanner.LetToken strict_1_0 -> case strict_1_0 (True -> "let!") (False -> "let") ) (scanner.SeqLetToken strict_1_0 -> case strict_1_0 (True -> "#!") (False -> "#") ) (scanner.InToken -> "in") (scanner.DynamicToken -> "dynamic") (scanner.DynamicTypeToken -> "Dynamic") (scanner.PriorityToken priority_1_0 -> scanner.toString_23 priority_1_0) (scanner.CodeToken -> "code") (scanner.InlineToken -> "inline") (scanner.CodeBlockToken the_code_1_0 -> "<code block>") (scanner.NewDefinitionToken -> "offside token (new def)") (scanner.EndGroupToken -> "offside token (end group)") (scanner.EndOfFileToken -> "end of file") (scanner.ErrorToken id_1_0 -> <{general.+_14}> "Scanner error: " id_1_0) (scanner.QualifiedIdentToken module_name_1_0 ident_name_1_1 -> <{StdString.+++_11}> module_name_1_0 (<{StdString.+++_11}> "@" ident_name_1_1)) (scanner.GenericToken -> "generic") (scanner.DeriveToken -> "derive") (scanner.GenericOpenToken -> "{|") (scanner.GenericCloseToken -> "|}") (scanner.GenericOfToken -> "of") (scanner.ExistsToken -> "E.") (scanner.ForAllToken -> "A.") (scanner.DocBlockToken doc_1_0 -> "<doc block>") (scanner.DocLineToken doc_1_0 -> "<doc line>") (_ -> "toString (Token) does not know this token")
<{scanner.<<<_21}> !f_0 !t_1 = <{StdFile.<<<_38}> f_0 (scanner.toString_22 t_1)
scanner.getCharPosition_156 !input_0 = case input_0 (scanner._Input inp_stream_1_0 inp_filename_1_1 inp_pos_1_2 inp_tabsize_1_3 -> <{_Tuple2!2}> inp_pos_1_2 input_0) 
<{scanner.<<<_162}> !f_0 !lt_1 = <{scanner.<<<_14}> (<{StdFile.<<<_38}> (<{scanner.<<<_21}> f_0 (select lt_1::scanner._LongToken 2)) " from ") (select lt_1::scanner._LongToken 0)
<{scanner.<<<_164}> !<{_v<<<_0}> !file_1 !_x_2 = case _x_2 (scanner.Buffer0 -> <{StdFile.<<<_38}> file_1 "Empty buffer") (scanner.Buffer1 x_1_0 -> <{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> file_1 "Buffer1 (") x_1_0) ")") (scanner.Buffer2 x_1_0 y_1_1 -> <{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> file_1 "Buffer2 (") x_1_0) ") (") y_1_1) ")") (scanner.Buffer3 x_1_0 y_1_1 z_1_2 -> <{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> (select <{_v<<<_0}>::<{StdFile.<<<;}> 0 (<{StdFile.<<<_38}> file_1 "Buffer3 (") x_1_0) ") (") y_1_1) ") (") z_1_2) ")") 
<{scanner.TD;SearchPaths}> _x_0::B = _predefined._Nil
<{scanner.TD;ModTimeFunction}> _x_0::B = _predefined._Nil
<{scanner.TD;ScanState}> _x_0::B = _predefined._Nil
<{scanner.TD;FilePosition}> _x_0::B = _predefined._Nil
<{scanner.TD;Token}> _x_0::B = _predefined._Nil
<{scanner.TD;ScanContext}> _x_0::B = _predefined._Nil
<{scanner.TD;Assoc}> _x_0::B = _predefined._Nil
<{scanner.TD;Priority}> _x_0::B = _predefined._Nil
<{scanner.TD;getFilename;}> _x_0::B = _predefined._Nil
<{scanner.TD;tokenBack;}> _x_0::B = _predefined._Nil
<{scanner.TD;nextToken;}> _x_0::B = _predefined._Nil
<{scanner.TD;currentToken;}> _x_0::B = _predefined._Nil
<{scanner.TD;getPosition;}> _x_0::B = _predefined._Nil
<{scanner.TD;RScanState}> _x_0::B = _predefined._Nil
<{scanner.TD;ScanInput}> _x_0::B = _predefined._Nil
<{scanner.TD;Input}> _x_0::B = _predefined._Nil
<{scanner.TD;InputStream}> _x_0::B = _predefined._Nil
<{scanner.TD;LongToken}> _x_0::B = _predefined._Nil
<{scanner.TD;Buffer}> _x_0::B = _predefined._Nil
<{scanner.TD;SBuffer}> _x_0::B = _predefined._Nil
<{scanner.TD;getCharPosition;}> _x_0::B = _predefined._Nil
<{scanner.TD;getIndex;}> _x_0::B = _predefined._Nil

:: scanner.Token = scanner.IdentToken !a1 | scanner.UnderscoreIdentToken !a1 | scanner.QualifiedIdentToken !a1 !a2 | scanner.IntToken !a1 | scanner.RealToken !a1 | scanner.StringToken !a1 | scanner.CharToken !a1 | scanner.CharListToken !a1 | scanner.BoolToken !a1::B | scanner.OpenToken | scanner.CloseToken | scanner.CurlyOpenToken | scanner.CurlyCloseToken | scanner.SquareOpenToken | scanner.SquareCloseToken | scanner.DotToken | scanner.SemicolonToken | scanner.ColonToken | scanner.DoubleColonToken | scanner.CommaToken | scanner.ExclamationToken | scanner.BarToken | scanner.ArrowToken | scanner.DoubleArrowToken | scanner.EqualToken | scanner.DefinesColonToken | scanner.ColonDefinesToken | scanner.WildCardToken | scanner.BackSlashToken | scanner.DoubleBackSlashToken | scanner.LeftArrowToken | scanner.LeftArrowColonToken | scanner.LeftArrowWithBarToken | scanner.DotDotToken | scanner.AndToken | scanner.HashToken | scanner.AsteriskToken | scanner.LessThanOrEqualToken | scanner.ModuleToken | scanner.ImpModuleToken | scanner.DefModuleToken | scanner.SysModuleToken | scanner.ImportToken | scanner.FromToken | scanner.SpecialToken | scanner.ForeignToken | scanner.IntTypeToken | scanner.CharTypeToken | scanner.RealTypeToken | scanner.BoolTypeToken | scanner.StringTypeToken | scanner.FileTypeToken | scanner.WorldTypeToken | scanner.ClassToken | scanner.InstanceToken | scanner.OtherwiseToken | scanner.IfToken | scanner.WhereToken | scanner.WithToken | scanner.CaseToken | scanner.OfToken | scanner.LetToken a1::B | scanner.SeqLetToken a1::B | scanner.InToken | scanner.DynamicToken | scanner.DynamicTypeToken | scanner.PriorityToken a1 | scanner.CodeToken | scanner.InlineToken | scanner.CodeBlockToken a1 | scanner.NewDefinitionToken | scanner.EndGroupToken | scanner.EndOfFileToken | scanner.ErrorToken a1 | scanner.GenericToken | scanner.DeriveToken | scanner.GenericOpenToken | scanner.GenericCloseToken | scanner.GenericOfToken | scanner.GenericWithToken | scanner.ExistsToken | scanner.ForAllToken | scanner.DocBlockToken a1 | scanner.DocLineToken a1
:: scanner.ScanContext = scanner.GeneralContext | scanner.TypeContext | scanner.FunctionContext | scanner.CodeContext | scanner.GenericContext | scanner.ModuleNameContext
:: scanner.Assoc = scanner.LeftAssoc | scanner.RightAssoc | scanner.NoAssoc
:: scanner.Priority = scanner.Prio a1 a2::I | scanner.NoPrio
:: scanner.ScanState = scanner.ScanState !a1
:: scanner.ScanInput = scanner.Input a1 | scanner.PushedToken a1 a2
:: scanner.InputStream = scanner.InFile a1 | scanner.OldLine !a1::I !a2 !a3
:: scanner.SBuffer = scanner.Buffer0 | scanner.Buffer1 a1 | scanner.Buffer2 a1 a2 | scanner.Buffer3 a1 a2 a3

|| Converted Records
:: scanner._SearchPaths = {scanner.sp_locations, scanner.sp_paths}

:: scanner._FilePosition = {!scanner.fp_line::I, !scanner.fp_col::I}

:: <{scanner.getFilename;}> = {!scanner.getFilename}

:: <{scanner.tokenBack;}> = {!scanner.tokenBack}

:: <{scanner.nextToken;}> = {!scanner.nextToken}

:: <{scanner.currentToken;}> = {!scanner.currentToken}

:: <{scanner.getPosition;}> = {!scanner.getPosition}

:: scanner._RScanState = {scanner.ss_input, !scanner.ss_offsides, !scanner.ss_scanOptions::I, !scanner.ss_tokenBuffer}

:: scanner._Input = {!scanner.inp_stream, !scanner.inp_filename, !scanner.inp_pos, !scanner.inp_tabsize::I}

:: scanner._LongToken = {!scanner.lt_position, !scanner.lt_index::I, !scanner.lt_token, !scanner.lt_context}

:: <{scanner.getCharPosition;}> = {!scanner.getCharPosition}

:: <{scanner.getIndex;}> = {!scanner.getIndex}

