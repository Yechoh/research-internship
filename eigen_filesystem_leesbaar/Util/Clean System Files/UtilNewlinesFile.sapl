|| ?module? UtilNewlinesFile


<{UtilNewlinesFile.%.}> !string_0 !indices_1 = error "no AnyCodeExpr"
UtilNewlinesFile.downSize !newSize_0::I !string_1 = <{UtilNewlinesFile.%.}> string_1 (_Tuple2 0 (<{StdInt.-_7}> newSize_0 1))
UtilNewlinesFile.convertLine !line_0 = let !max_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 line_0) 1 in case (StdBool.not (<{StdInt.<_17}> max_1_0 0)) (True -> let !lastChar_3_0::C = _SystemArray.select_19 line_0 max_1_0 in case (<{StdChar.==_18}> lastChar_3_0 '\n') (True -> case (StdBool.not (<{StdInt.<_17}> max_1_0 1)) (True -> let !lastButOneChar_6_0::C = _SystemArray.select_19 line_0 (<{StdInt.-_7}> max_1_0 1) in case (<{StdChar.==_18}> lastButOneChar_6_0 '\r') (True -> _Tuple2 UtilNewlinesFile.NewlineConventionDos (_SystemArray.update_21 (UtilNewlinesFile.downSize max_1_0 line_0) (<{StdInt.-_7}> max_1_0 1) '\n')) (False -> _Tuple2 UtilNewlinesFile.NewlineConventionUnix (_SystemArray.update_21 line_0 max_1_0 '\n')) ) (False -> _Tuple2 UtilNewlinesFile.NewlineConventionUnix (_SystemArray.update_21 line_0 max_1_0 '\n')) ) (False -> case (<{StdChar.==_18}> lastChar_3_0 '\r') (True -> _Tuple2 UtilNewlinesFile.NewlineConventionMac (_SystemArray.update_21 line_0 max_1_0 '\n')) (False -> _Tuple2 UtilNewlinesFile.NewlineConventionNone line_0) ) ) (False -> _Tuple2 UtilNewlinesFile.NewlineConventionNone line_0) 
UtilNewlinesFile.readAnyLine !file_0 = let _x_1_0 = StdFile.freadline file_0, _x_1_1 = UtilNewlinesFile.convertLine (select _x_1_0::_Tuple2 0) in <{_Tuple3!6}> (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1) (select _x_1_0::_Tuple2 1)
UtilNewlinesFile.writeAnyLine !line_0 !newlineString_1 !file_2 = let max_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 line_0) 1 in case (case (StdBool.not (<{StdInt.<_17}> max_1_0 0)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_0 max_1_0) '\n') (False -> False) ) (True -> StdFile.fwrites newlineString_1 (StdFile.fwrites (<{UtilNewlinesFile.%.}> line_0 (_Tuple2 0 (<{StdInt.-_7}> max_1_0 1))) file_2)) (False -> StdFile.fwrites line_0 file_2) 
<{UtilNewlinesFile.readAnyLine`}> !file_0 = let !max_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 line_1_2) 1, _x_1_1 = StdFile.freadline file_0, line_1_2 = select _x_1_1::_Tuple2 0 in case (StdBool.not (<{StdInt.<_17}> max_1_0 0)) (True -> let lastChar_3_0::C = _SystemArray.select_19 line_1_2 max_1_0 in case (<{StdChar.==_18}> lastChar_3_0 '\n') (True -> case (StdBool.not (<{StdInt.<_17}> max_1_0 1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1_2 (<{StdInt.-_7}> max_1_0 1)) '\r') (True -> _Tuple4 UtilNewlinesFile.NewlineConventionDos (UtilNewlinesFile.downSize (<{StdInt.-_7}> max_1_0 StdInt.one_11) line_1_2) True (select _x_1_1::_Tuple2 1)) (False -> _Tuple4 UtilNewlinesFile.NewlineConventionUnix (UtilNewlinesFile.downSize max_1_0 line_1_2) True (select _x_1_1::_Tuple2 1)) ) (False -> _Tuple4 UtilNewlinesFile.NewlineConventionUnix (UtilNewlinesFile.downSize max_1_0 line_1_2) True (select _x_1_1::_Tuple2 1)) ) (False -> case (<{StdChar.==_18}> lastChar_3_0 '\r') (True -> _Tuple4 UtilNewlinesFile.NewlineConventionMac (UtilNewlinesFile.downSize max_1_0 line_1_2) True (select _x_1_1::_Tuple2 1)) (False -> _Tuple4 UtilNewlinesFile.NewlineConventionNone line_1_2 False (select _x_1_1::_Tuple2 1)) ) ) (False -> _Tuple4 UtilNewlinesFile.NewlineConventionNone line_1_2 False (select _x_1_1::_Tuple2 1)) 
UtilNewlinesFile.readConvLines !file_0 = let _x_1_0 = <{UtilNewlinesFile.readAnyLine`}> file_0, file_1_1 = select _x_1_0::_Tuple4 3, _x_1_2 = StdFile.fend file_1_1 in case (select _x_1_2::_Tuple2 0) (True -> case (select _x_1_0::_Tuple4 2) (True -> _Tuple3 (select _x_1_0::_Tuple4 0) (_predefined._Cons (select _x_1_0::_Tuple4 1) (_predefined._Cons "" _predefined._Nil)) (select _x_1_2::_Tuple2 1)) (False -> _Tuple3 (select _x_1_0::_Tuple4 0) (_predefined._Cons (select _x_1_0::_Tuple4 1) _predefined._Nil) (select _x_1_2::_Tuple2 1)) ) (False -> let _x_3_0 = UtilNewlinesFile.readConvLines (select _x_1_2::_Tuple2 1) in _Tuple3 (select _x_1_0::_Tuple4 0) (_predefined._Cons (select _x_1_0::_Tuple4 1) (select _x_3_0::_Tuple3 1)) (select _x_3_0::_Tuple3 2)) 
<{UtilNewlinesFile.==_4}>::B !_x_0 !_x_1 = case _x_0 (UtilNewlinesFile.NewlineConventionNone -> case _x_1 (UtilNewlinesFile.NewlineConventionNone -> True) ) (UtilNewlinesFile.NewlineConventionMac -> case _x_1 (UtilNewlinesFile.NewlineConventionMac -> True) ) (UtilNewlinesFile.NewlineConventionUnix -> case _x_1 (UtilNewlinesFile.NewlineConventionUnix -> True) ) (UtilNewlinesFile.NewlineConventionDos -> case _x_1 (UtilNewlinesFile.NewlineConventionDos -> True) ) (_ -> False)
UtilNewlinesFile.toString_5 !_x_0 = case _x_0 (UtilNewlinesFile.NewlineConventionNone -> "") (UtilNewlinesFile.NewlineConventionMac -> "\r") (UtilNewlinesFile.NewlineConventionUnix -> "\n") (UtilNewlinesFile.NewlineConventionDos -> "\r\n") 
<{UtilNewlinesFile.TD;NewlineConvention}> _x_0::B = _predefined._Nil

:: UtilNewlinesFile.NewlineConvention = UtilNewlinesFile.NewlineConventionNone | UtilNewlinesFile.NewlineConventionMac | UtilNewlinesFile.NewlineConventionUnix | UtilNewlinesFile.NewlineConventionDos

|| Converted Records
