20170907-150132["Bin",3,"\/home\/martin\/Documents\/clean-bundle-itasks-windows-x86-latest\/research-internship\/eigen_filesystem_leesbaar\/rommel_test_project\/rommel2.icl",[[["Unsharedf"],"a :: b",""]],["Bin",1,"\/home\/martin\/Documents\/clean-bundle-itasks-windows-x86-latest\/research-internship\/eigen_filesystem_leesbaar\/rommel_test_project\/rommel.icl",[[["Unsharedi"],"import rommel2",""],[["Unsharedf"],"dfd :: dfdfdfd dfdfda -> fdfdf",""]],["Tip"],["Tip"]],["Bin",1,"\/home\/martin\/Documents\/clean-bundle-itasks\/lib\/Platform\/Data\/Heap.icl",[[["Unsharedi"],"import qualified Data.List as L",""],[["Unsharedf"],"from Control.Applicative import class Applicative (..), :: WrappedMonad (..), unwrapMonad, instance Applicative WrappedMonad, instance Applicative [a], instance Functor WrappedMonad",""],[["Unsharedi"],"import Data.Monoid",""],[["Unsharedi"],"import qualified Data.Traversable as Traversable",""],[["Unsharedi"],"import qualified Data.Foldable as DF",""],[["Unsharedi"],"import StdClass",""],[["Unsharedi"],"import Data.Maybe",""],[["Unsharedi"],"import qualified StdList as SL",""],[["Unsharedf"],":: Heap a",""],[["Unsharedf"],"null :: (Heap a) -> Bool",""],[["Unsharedf"],"size :: (Heap a) -> Int",""],[["Unsharedf"],"\/\/empty :: Heap a",""],[["Unsharedf"],"\/\/singleton :: a -> Heap a | Ord a",""],[["Unsharedf"],"\/\/singletonWith :: (a a -> Bool) a -> Heap a",""],[["Unsharedf"],"\/\/insert :: a (Heap a) -> (Heap a) | Ord a",""],[["Unsharedf"],"insertWith :: (a a -> Bool) a (Heap a) -> Heap a",""],[["Unsharedf"],"union :: (Heap a) (Heap a) -> Heap a",""],[["Unsharedf"],"replicate :: a Int -> Heap a | Ord a",""],[["Unsharedf"],"uncons :: (Heap a) -> Maybe (a, Heap a) | Ord a",""],[["Unsharedf"],"\/\/viewMin :: (Heap a) -> Maybe (a, Heap a) | Ord a",""],[["Unsharedf"],"minimum :: (Heap a) -> a",""],[["Unsharedf"],"trees :: (Forest a) -> [Tree a]",""],[["Unsharedf"],"deleteMin :: (Heap a) -> Heap a",""],[["Unsharedf"],"adjustMin :: (a -> a) (Heap a) -> Heap a",""],[["Unsharedf"],":: ForestZipper a :== (Forest a, Forest a)",""],[["Unsharedf"],"\/\/zipper :: (Forest a) -> ForestZipper a",""],[["Unsharedf"],"\/\/emptyZ :: ForestZipper a",""],[["Unsharedf"],"\/\/ leftZ :: (ForestZipper a) -> ForestZipper a",""],[["Unsharedf"],"\/\/rightZ :: (ForestZipper a) -> ForestZipper a",""],[["Unsharedf"],"adjustZ :: ((Tree a) -> Tree a) (ForestZipper a) -> ForestZipper a",""],[["Unsharedf"],"rezip :: (ForestZipper a) -> Forest a",""],[["Unsharedf"],"rootZ :: (ForestZipper a) -> a",""],[["Unsharedf"],"minZ :: (a a -> Bool) (Forest a) -> ForestZipper a",""],[["Unsharedf"],"minZ` :: (a a -> Bool) (ForestZipper a) (ForestZipper a) -> ForestZipper a",""],[["Unsharedf"],"heapify :: (a a -> Bool) (Tree a) -> Tree a",""],[["Unsharedf"],"\/\/fromList :: [a] -> Heap a | Ord a",""],[["Unsharedf"],"\/\/fromListWith :: (a a -> Bool) [a] -> Heap a",""],[["Unsharedf"],"\/\/sort :: [a] -> [a] | Ord a",""],[["Unsharedf"],"toUnsortedList :: (Heap a) -> [a]",""],[["Unsharedf"],"map :: (a -> b) (Heap a) -> Heap b | Ord b",""],[["Unsharedf"],"mapMonotonic :: (a -> b) (Heap a) -> Heap b | Ord b",""],[["Unsharedf"],"filter :: (a -> Bool) (Heap a) -> Heap a",""],[["Unsharedf"],"partition :: (a -> Bool) (Heap a) -> (Heap a, Heap a)",""],[["Unsharedf"],"split :: a (Heap a) -> (Heap a, Heap a, Heap a)",""],[["Unsharedf"],"\/\/take :: Int (Heap a) -> Heap a",""],[["Unsharedf"],"\/\/drop :: Int (Heap a) -> Heap a",""],[["Unsharedf"],"\/\/splitAt :: Int (Heap a) -> (Heap a, Heap a)",""],[["Unsharedf"],"\/\/break :: (a -> Bool) (Heap a) -> (Heap a, Heap a)",""],[["Unsharedf"],"\/\/span :: (a -> Bool) (Heap a) -> (Heap a, Heap a)",""],[["Unsharedf"],"\/\/takeWhile :: (a -> Bool) (Heap a) -> Heap a",""],[["Unsharedf"],"\/\/dropWhile :: (a -> Bool) (Heap a) -> Heap a",""],[["Unsharedf"],"nub :: (Heap a) -> Heap a",""],[["Unsharedf"],"concatMap :: (a -> Heap b) (Heap a) -> Heap b | Ord b",""],[["Unsharedf"],"group :: (Heap a) -> Heap (Heap a)",""],[["Unsharedf"],"groupBy :: (a a -> Bool) (Heap a) -> Heap (Heap a)",""],[["Unsharedf"],"intersect :: (Heap a) (Heap a) -> Heap a",""],[["Unsharedf"],"intersectWith :: (a a -> b) (Heap a) (Heap a) -> Heap b | Ord b",""],[["Unsharedf"],"  go :: (a a -> Bool) (a a -> b) [a] [a] -> Heap b | Ord b",""],[["Unsharedf"],"\/\/traverse :: (a -> t b) (Heap a) -> t (Heap b) | Applicative t & Ord b",""],[["Unsharedf"],"\/\/mapM :: (a -> m b) (Heap a) -> m (Heap b) | Monad m & Ord b",""],[["Unsharedf"],"\/\/both :: (a -> b) (a, a) -> (b, b)",""],[["Unsharedf"],":: Tree a = Node Int a !(Forest a)",""],[["Unsharedf"],":: Forest a",""],[["Unsharedf"],"link :: (a a -> Bool) (Tree a) (Tree a) -> Tree a",""],[["Unsharedf"],"skewLink :: (a a -> Bool) (Tree a) (Tree a) (Tree a) -> Tree a",""],[["Unsharedf"],"ins :: (a a -> Bool) (Tree a) (Forest a) -> Forest a",""],[["Unsharedf"],"uniqify :: (a a -> Bool) (Forest a) -> Forest a",""],[["Unsharedf"],"unionUniq :: (a a -> Bool) (Forest a) (Forest a) -> Forest a",""],[["Unsharedf"],"skewInsert :: (a a -> Bool) (Tree a) (Forest a) -> Forest a",""],[["Unsharedf"],"\/\/skewMeld :: (a a -> Bool) (Forest a) (Forest a) -> Forest a",""],[["Unsharedf"],"getMin :: (a a -> Bool) (Forest a) -> (Tree a, Forest a)",""],[["Unsharedf"],"splitForest :: Int (Forest a) (Forest a) (Forest a) -> (Forest a, Forest a, Forest a)",""],[["Unsharedf"],"withList :: ([a] -> [a]) (Heap a) -> Heap a",""],[["Unsharedf"],"splitWithList :: ([a] -> ([a], [a])) (Heap a) -> (Heap a, Heap a)",""],[["Unsharedf"],"priority :: (Entry p a) -> p",""],[["Unsharedf"],"payload :: (Entry p a) -> a",""]],["Tip"],["Tip"]]]