|| ?module? osfont


osfont.osSerifFontDef = <{_Tuple3!7}> "Times New Roman" _predefined._Nil 10
osfont.osSansSerifFontDef = <{_Tuple3!7}> "Arial" _predefined._Nil 10
osfont.osSmallFontDef = <{_Tuple3!7}> "Small Fonts" _predefined._Nil 7
osfont.osNonProportionalFontDef = <{_Tuple3!7}> "Courier New" _predefined._Nil 10
osfont.osSymbolFontDef = <{_Tuple3!7}> "Symbol" _predefined._Nil 10
osfont.s2i_25::I !_x_0 !i_1::I = case _x_0 (_predefined._Nil -> i_1) (_predefined._Cons _x_1_0 rest_1_1 -> case _x_1_0 ("Bold" -> osfont.s2i_25 rest_1_1 (StdInt.bitor i_1 1)) ("Italic" -> osfont.s2i_25 rest_1_1 (StdInt.bitor i_1 2)) ("Underline" -> osfont.s2i_25 rest_1_1 (StdInt.bitor i_1 4)) (_ -> osfont.s2i_25 rest_1_1 i_1)) 
osfont.sStyle2IStyle::I !styles_0 = osfont.s2i_25 styles_0 0
osfont.osSelectfont !fdef_0 !tb_1::I = case fdef_0 (_Tuple3 fName_1_0 fStyles_1_1 fSize_1_2 -> <{_Tuple3!7}> True (osfont._Font fdef_0 (osfont._OSFont fName_1_0 (osfont.sStyle2IStyle fStyles_1_1) fSize_1_2)) tb_1) 
osfont.osDefaultfont !tb_0::I = let name_1_0::I = "Times New Roman", styles_1_1 = _predefined._Nil, size_1_2 = 10 in <{_Tuple2!3}> (osfont._Font (_Tuple3 name_1_0 styles_1_1 size_1_2) (osfont._OSFont name_1_0 (osfont.sStyle2IStyle styles_1_1) size_1_2)) tb_0
osfont.osDialogfont !tb_0::I = let name_1_0::I = "MS Sans Serif", styles_1_1 = _predefined._Nil, size_1_2 = 8 in <{_Tuple2!3}> (osfont._Font (_Tuple3 name_1_0 styles_1_1 size_1_2) (osfont._OSFont name_1_0 (osfont.sStyle2IStyle styles_1_1) size_1_2)) tb_0
osfont.osFontgetdef !_x_0 = case _x_0 (osfont._Font fontdef_1_0 fontimp_1_1 -> fontdef_1_0) 
osfont.osFontgetimp !_x_0 = case _x_0 (osfont._Font fontdef_1_0 fontimp_1_1 -> fontimp_1_1) 
osfont.fontnamesCallback_27 !cci_0 !names_1 !os_2::I = let _x_1_0 = clCCall_12.winGetCString (select cci_0::clCrossCall_12._CrossCallInfo 1) os_2 in <{_Tuple3!7}> clCrossCall_12.return0Cci (_predefined._Cons (select _x_1_0::_Tuple2 0) names_1) (select _x_1_0::_Tuple2 1)
osfont.insert_28 !_vOrd_0 a_1 !list_2 = case list_2 (_predefined._Cons b_1_0 x_1_1 -> case (select (select _vOrd_0::<{StdClass.Ord;}> 0)::<{StdOverloaded.<;}> 0 a_1 b_1_0) (True -> _predefined._Cons a_1 list_2) (False -> case (select (select _vOrd_0::<{StdClass.Ord;}> 0)::<{StdOverloaded.<;}> 0 b_1_0 a_1) (True -> _predefined._Cons b_1_0 (osfont.insert_28 _vOrd_0 a_1 x_1_1)) (False -> list_2) ) ) (_ -> _predefined._Cons a_1 _predefined._Nil)
osfont.sortAndRemoveDuplicates !_vOrd_0 !_x_1 = case _x_1 (_predefined._Cons e_1_0 es_1_1 -> osfont.insert_28 _vOrd_0 e_1_0 (osfont.sortAndRemoveDuplicates _vOrd_0 es_1_1)) (_ -> _predefined._Nil)
osfont.insert_33 a_0 !list_1 = case list_1 (_predefined._Cons b_1_0 x_1_1 -> case (<{StdString.<_3}> a_0 b_1_0) (True -> _predefined._Cons a_0 list_1) (False -> case (<{StdString.<_3}> b_1_0 a_0) (True -> _predefined._Cons b_1_0 (osfont.insert_33 a_0 x_1_1)) (False -> list_1) ) ) (_ -> _predefined._Cons a_0 _predefined._Nil)
osfont.sortAndRemoveDuplicates_32 !_x_0 = case _x_0 (_predefined._Cons e_1_0 es_1_1 -> osfont.insert_33 e_1_0 (osfont.sortAndRemoveDuplicates_32 es_1_1)) (_ -> _predefined._Nil)
osfont.osFontnames !tb_0::I = let _x_1_0 = clCrossCall_12.issueCleanRequest osfont.fontnamesCallback_27 (clCrossCall_12._CrossCallInfo 1500 0 0 0 0 0 0) _predefined._Nil tb_0 in <{_Tuple2!3}> (osfont.sortAndRemoveDuplicates_32 (select _x_1_0::_Tuple3 1)) (select _x_1_0::_Tuple3 2)
osfont.osFontstyles !fname_0 !tb_1::I = <{_Tuple2!3}> (_predefined._Cons "Bold" (_predefined._Cons "Italic" (_predefined._Cons "Underline" _predefined._Nil))) tb_1
osfont.height2Points::I !h_0::I = StdInt.toInt_22 (<{StdReal./_5}> (StdReal.toReal_13 h_0) (<{StdReal./_5}> (StdReal.toReal_13 clCCall_12.winGetVertResolution) 72.0))
osfont.fontSizesCallback_29 !low_0::I !high_1::I !cci_2 !sizes_3 !tb_4::I = case cci_2 (clCrossCall_12._CrossCallInfo ccMsg_1_0 size_1_1 p2_1_2 p3_1_3 p4_1_4 p5_1_5 p6_1_6 -> case p2_1_2 (0 -> let pts_3_0::I = osfont.height2Points size_1_1 in <{_Tuple3!7}> clCrossCall_12.return0Cci (<{osfont._if;150;19_38}> (commondef.isBetween pts_3_0 low_0 high_1) pts_3_0 sizes_3) tb_4) ) (_ -> <{_Tuple3!7}> clCrossCall_12.return0Cci (_SystemEnum._from_to_6 low_0 high_1) tb_4)
<{osfont._if;150;19_38}> !_x_0::B pts_1::I sizes_2 = case _x_0 (True -> _predefined._Cons pts_1 sizes_2) (_ -> sizes_2)
osfont.insert_35 a_0::I !list_1 = case list_1 (_predefined._Cons b_1_0 x_1_1 -> case (<{StdInt.<_17}> a_0 b_1_0) (True -> _predefined._Cons a_0 list_1) (False -> case (<{StdInt.<_17}> b_1_0 a_0) (True -> _predefined._Cons b_1_0 (osfont.insert_35 a_0 x_1_1)) (False -> list_1) ) ) (_ -> _predefined._Cons a_0 _predefined._Nil)
osfont.sortAndRemoveDuplicates_34 !_x_0 = case _x_0 (_predefined._Cons e_1_0 es_1_1 -> osfont.insert_35 e_1_0 (osfont.sortAndRemoveDuplicates_34 es_1_1)) (_ -> _predefined._Nil)
osfont.osFontsizes !between1_0::I !between2_1::I !fname_2 !tb_3::I = let _x_1_0 = commondef.minmax between1_0 between2_1, _x_1_1 = clCCall_12.winMakeCString fname_2 tb_3, _x_1_2 = clCrossCall_12.issueCleanRequest (osfont.fontSizesCallback_29 (select _x_1_0::_Tuple2 0) (select _x_1_0::_Tuple2 1)) (clCrossCall_12._CrossCallInfo 1510 (select _x_1_1::_Tuple2 0) 0 0 0 0 0) _predefined._Nil (select _x_1_1::_Tuple2 1) in <{_Tuple2!3}> (osfont.sortAndRemoveDuplicates_34 (select _x_1_2::_Tuple3 1)) (select _x_1_2::_Tuple3 2)
osfont.anon_30 !_vto_0 !osfontsize_1::I !osfontstyles_2::I !osfontname_3 hdcPassed_4 !maybeHdc_5::I !c_6::C !tb_7::I = pictCCall_12.winGetCharWidth c_6 (_Tuple3 osfontname_3 osfontstyles_2 osfontsize_1) (select _vto_0::<{StdOverloaded.toInt;}> 0 hdcPassed_4) maybeHdc_5 tb_7
osfont.anon_36 !osfontsize_0::I !osfontstyles_1::I !osfontname_2 !hdcPassed_3::B !maybeHdc_4::I !c_5::C !tb_6::I = pictCCall_12.winGetCharWidth c_5 (_Tuple3 osfontname_2 osfontstyles_1 osfontsize_0) (clCrossCall_12.toInt_19 hdcPassed_3) maybeHdc_4 tb_6
osfont.osGetfontcharwidths !hdcPassed_0::B !maybeHdc_1::I !chars_2 !_x_3 !tb_4::I = case _x_3 (osfont._Font fontdef_1_0 _x_1_1 -> case _x_1_1 (osfont._OSFont osfontname_2_0 osfontstyles_2_1 osfontsize_2_2 -> commondef.stateMap (osfont.anon_36 osfontsize_2_2 osfontstyles_2_1 osfontname_2_0 hdcPassed_0 maybeHdc_1) chars_2 tb_4) ) 
osfont.osGetfontstringwidth !hdcPassed_0::B !maybeHdc_1::I !string_2 !_x_3 !tb_4::I = case _x_3 (osfont._Font fontdef_1_0 _x_1_1 -> case _x_1_1 (osfont._OSFont osfontname_2_0 osfontstyles_2_1 osfontsize_2_2 -> pictCCall_12.winGetStringWidth string_2 (_Tuple3 osfontname_2_0 osfontstyles_2_1 osfontsize_2_2) (clCrossCall_12.toInt_19 hdcPassed_0) maybeHdc_1 tb_4) ) 
osfont.anon_31 !_vto_0 !osfontsize_1::I !osfontstyles_2::I !osfontname_3 hdcPassed_4 !maybeHdc_5::I !s_6 !tb_7::I = pictCCall_12.winGetStringWidth s_6 (_Tuple3 osfontname_3 osfontstyles_2 osfontsize_1) (select _vto_0::<{StdOverloaded.toInt;}> 0 hdcPassed_4) maybeHdc_5 tb_7
osfont.anon_37 !osfontsize_0::I !osfontstyles_1::I !osfontname_2 !hdcPassed_3::B !maybeHdc_4::I !s_5 !tb_6::I = pictCCall_12.winGetStringWidth s_5 (_Tuple3 osfontname_2 osfontstyles_1 osfontsize_0) (clCrossCall_12.toInt_19 hdcPassed_3) maybeHdc_4 tb_6
osfont.osGetfontstringwidths !hdcPassed_0::B !maybeHdc_1::I !strings_2 !_x_3 !tb_4::I = case _x_3 (osfont._Font fontdef_1_0 _x_1_1 -> case _x_1_1 (osfont._OSFont osfontname_2_0 osfontstyles_2_1 osfontsize_2_2 -> commondef.stateMap (osfont.anon_37 osfontsize_2_2 osfontstyles_2_1 osfontname_2_0 hdcPassed_0 maybeHdc_1) strings_2 tb_4) ) 
osfont.osGetfontmetrics !hdcPassed_0::B !maybeHdc_1::I !_x_2 !tb_3::I = case _x_2 (osfont._Font fontdef_1_0 _x_1_1 -> case _x_1_1 (osfont._OSFont osfontname_2_0 osfontstyles_2_1 osfontsize_2_2 -> let _x_3_0 = pictCCall_12.winGetFontInfo (_Tuple3 osfontname_2_0 osfontstyles_2_1 osfontsize_2_2) (clCrossCall_12.toInt_19 hdcPassed_0) maybeHdc_1 tb_3 in <{_Tuple2!3}> (_Tuple4 (select _x_3_0::_Tuple5 0) (select _x_3_0::_Tuple5 1) (select _x_3_0::_Tuple5 3) (select _x_3_0::_Tuple5 2)) (select _x_3_0::_Tuple5 4)) ) 
<{osfont.idtofontstyles`_26}> !_x_0::I !_x_1 = case _x_0 (0 -> _predefined._Nil) (_ -> case _x_1 (_predefined._Cons styleflag_1_0 styleflags_1_1 -> case (<{StdInt.==_16}> (StdInt.bitand _x_0 styleflag_1_0) 0) (True -> <{osfont.idtofontstyles`_26}> (<{StdInt.-_7}> _x_0 styleflag_1_0) styleflags_1_1) (False -> _predefined._Cons (<{osfont._if;96;27_39}> (<{StdInt.==_16}> styleflag_1_0 1) styleflag_1_0) (<{osfont.idtofontstyles`_26}> (<{StdInt.-_7}> _x_0 styleflag_1_0) styleflags_1_1)) ) (_ -> _predefined._Nil))
<{osfont._if;96;27_39}> !_x_0::B styleflag_1::I = case _x_0 (True -> "Bold") (_ -> case (<{StdInt.==_16}> styleflag_1 2) (True -> "Italic") (False -> case (<{StdInt.==_16}> styleflag_1 4) (True -> "Underline") (False -> <{StdString.+++_11}> (commondef.fatalError "iStyle2SStyle" "osfont" "unmatched styleflag value (") (<{StdString.+++_11}> (StdString.toString_5 styleflag_1) ")")) ) )
osfont.iStyle2SStyle !istyle_0::I = <{osfont.idtofontstyles`_26}> istyle_0 (_predefined._Cons 1 (_predefined._Cons 2 (_predefined._Cons 4 (_predefined._Cons 8 _predefined._Nil))))
<{osfont.==_17}>::B !f1_0 !f2_1 = case (<{StdInt.==_16}> (select f1_0::osfont._OSFont 2) (select f2_1::osfont._OSFont 2)) (True -> case (<{StdInt.==_16}> (select f1_0::osfont._OSFont 1) (select f2_1::osfont._OSFont 1)) (True -> <{StdString.==_2}> (select f1_0::osfont._OSFont 0) (select f2_1::osfont._OSFont 0)) (False -> False) ) (False -> False) 
<{osfont.TD;Font}> _x_0::B = _predefined._Nil
<{osfont.TD;OSFont}> _x_0::B = _predefined._Nil
<{osfont.TD;OSFontDef}> _x_0::B = _predefined._Nil


|| Converted Records
:: osfont._Font = {!osfont.fontdef, !osfont.fontimp}

:: osfont._OSFont = {!osfont.osfontname, !osfont.osfontstyles::I, !osfont.osfontsize::I}

