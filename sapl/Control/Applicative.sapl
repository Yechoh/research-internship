|| ?module? Control.Applicative


Control.Applicative.unwrapMonad !_x_0 = case _x_0 (Control.Applicative.WrapMonad x_1_0 -> x_1_0) 
Control.Applicative.getConst !_x_0 = case _x_0 (Control.Applicative.Const x_1_0 -> x_1_0) 
Control.Applicative.lift !_vApplicative_0 x_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 x_1
Control.Applicative.anon_37 x_0 xs_1 = _predefined._Cons x_0 xs_1
Control.Applicative.some !_vAlternative_0 v_1 = let some_v_1_0 = select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 0 (<{Data.Functor.<$>}> (select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 2) Control.Applicative.anon_37 v_1) (select _vAlternative_0::<{Control.Applicative.Alternative;}> 0 some_v_1_0 (Control.Applicative.lift (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2) _predefined._Nil)) in some_v_1_0
Control.Applicative.anon_38 x_0 xs_1 = _predefined._Cons x_0 xs_1
Control.Applicative.many !_vAlternative_0 v_1 = let many_v_1_0 = select _vAlternative_0::<{Control.Applicative.Alternative;}> 0 (select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 0 (<{Data.Functor.<$>}> (select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 2) Control.Applicative.anon_38 v_1) many_v_1_0) (Control.Applicative.lift (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2) _predefined._Nil) in many_v_1_0
Control.Applicative.liftA2 !_vApplicative_0 f_1 a_2 b_3 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (<{Data.Functor.<$>}> (select _vApplicative_0::<{Control.Applicative.Applicative;}> 2) f_1 a_2) b_3
<{Control.Applicative.*>}> !_vApplicative_0 fa_1 fb_2 = Control.Applicative.liftA2 _vApplicative_0 (StdFunc.const StdFunc.id) fa_1 fb_2
<{Control.Applicative.<*}> !_vApplicative_0 fa_1 fb_2 = Control.Applicative.liftA2 _vApplicative_0 StdFunc.const fa_1 fb_2
Control.Applicative.flip_40 !f_0 a_1 b_2 = f_0 b_2 a_1
Control.Applicative.flip_85 !a_0 !b_1 = <{Data.Func.$}> b_1 a_0
<{Control.Applicative.<**>}> !_vApplicative_0 fa_1 fab_2 = Control.Applicative.liftA2 _vApplicative_0 Control.Applicative.flip_85 fa_1 fab_2
Control.Applicative.liftA !_vApplicative_0 f_1 a_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (Control.Applicative.lift _vApplicative_0 f_1) a_2
Control.Applicative.liftA3 !_vApplicative_0 f_1 a_2 b_3 c_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (select _vApplicative_0::<{Control.Applicative.Applicative;}> 0 (<{Data.Functor.<$>}> (select _vApplicative_0::<{Control.Applicative.Applicative;}> 2) f_1 a_2) b_3) c_4
Control.Applicative.optional !_vAlternative_0 v_1 = select _vAlternative_0::<{Control.Applicative.Alternative;}> 0 (<{Data.Functor.<$>}> (select (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2)::<{Control.Applicative.Applicative;}> 2) Data.Maybe.Just v_1) (Control.Applicative.lift (select _vAlternative_0::<{Control.Applicative.Alternative;}> 2) Data.Maybe.Nothing)
Control.Applicative.anon_39 !f_0 g_1 x_2 = f_0 x_2 (g_1 x_2)
<{Control.Applicative.<*>_12}> f_0 g_1 = Control.Applicative.anon_39 f_0 g_1
Control.Applicative.pure_13 !x_0 = StdFunc.const x_0
<{Control.Applicative.<*>_14}> !_x_0 _x_1 = case _x_0 (Data.Maybe.Nothing -> Data.Maybe.Nothing) (Data.Maybe.Just f_1_0 -> Data.Maybe.fmap_12 f_1_0 _x_1) 
Control.Applicative.pure_15 x_0 = Data.Maybe.Just x_0
Control.Applicative.pure_17 x_0 = _predefined._Cons x_0 _predefined._Nil
Control.Applicative.liftA2_86 !f_0 !a_1 !b_2 = <{Control.Applicative.<*>_16}> (<{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.List.fmap_90) f_0 a_1) b_2
<{Control.Applicative.<*>_16}> !xs_0 !x_1 = Control.Applicative.liftA2_86 StdFunc.id xs_0 x_1
<{Control.Applicative.<|>_18}> !_x_0 r_1 = case _x_0 (Data.Maybe.Nothing -> r_1) (_ -> _x_0)
Control.Applicative.empty_19 = Data.Maybe.Nothing
<{Control.Applicative.<|>_20}> !fa_0 <{fa`_1}> = <{StdList.++}> fa_0 <{fa`_1}>
Control.Applicative.empty_21 = _predefined._Nil
Control.Applicative.fmap_22 _x_0 !_x_1 = case _x_1 (Control.Applicative.Const v_1_0 -> Control.Applicative.Const v_1_0) 
Control.Applicative.fmap_23 !_vMonad_0 f_1 !_x_2 = case _x_2 (Control.Applicative.WrapMonad v_1_0 -> Control.Applicative.WrapMonad (Control.Monad.liftM _vMonad_0 f_1 v_1_0)) 
<{Control.Applicative.<*>_24}> !_vMonoid_0 !_x_1 !_x_2 = case _x_1 (Control.Applicative.Const f_1_0 -> case _x_2 (Control.Applicative.Const v_2_0 -> Control.Applicative.Const (select (select _vMonoid_0::<{Data.Monoid.Monoid;}> 1)::<{Data.Monoid.Semigroup;}> 0 f_1_0 v_2_0)) ) 
Control.Applicative.pure_25 !_vMonoid_0 _x_1 = Control.Applicative.Const (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0)
<{Control.Applicative.<*>_26}> !_vMonad_0 !_x_1 !_x_2 = case _x_1 (Control.Applicative.WrapMonad f_1_0 -> case _x_2 (Control.Applicative.WrapMonad v_2_0 -> Control.Applicative.WrapMonad (Control.Monad.ap _vMonad_0 f_1_0 v_2_0)) ) 
Control.Applicative.pure_27 !_vMonad_0 x_1 = Control.Applicative.WrapMonad (select (select _vMonad_0::<{Control.Monad.Monad;}> 1)::<{Control.Applicative.Applicative;}> 1 x_1)
Control.Applicative.anon_41 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Control.Applicative.anon_87 !g_0 x_1 = Control.Applicative.unwrapMonad (g_0 x_1)
Control.Applicative.bind_28 !_vMonad_0 a_1 f_2 = Control.Applicative.WrapMonad (<{Control.Monad.>>=}> _vMonad_0 (Control.Applicative.unwrapMonad a_1) (Control.Applicative.anon_87 f_2))
<{Control.Applicative.<|>_29}> !_vMonadPlus_0 !_x_1 !_x_2 = case _x_1 (Control.Applicative.WrapMonad u_1_0 -> case _x_2 (Control.Applicative.WrapMonad v_2_0 -> Control.Applicative.WrapMonad (select _vMonadPlus_0::<{Control.Monad.MonadPlus;}> 0 u_1_0 v_2_0)) ) 
Control.Applicative.empty_30 !_vMonadPlus_0 = Control.Applicative.WrapMonad (select _vMonadPlus_0::<{Control.Monad.MonadPlus;}> 1)
Control.Applicative.mappend_31 !_vSemigroup_0 !_x_1 !_x_2 = case _x_1 (Control.Applicative.Const a_1_0 -> case _x_2 (Control.Applicative.Const b_2_0 -> Control.Applicative.Const (select _vSemigroup_0::<{Data.Monoid.Semigroup;}> 0 a_1_0 b_2_0)) ) 
Control.Applicative.mempty_32 !_vMonoid_0 = Control.Applicative.Const (select _vMonoid_0::<{Data.Monoid.Monoid;}> 0)
<{Control.Applicative.TD;Const}> _x_0::B = _predefined._Nil
<{Control.Applicative.TD;WrappedMonad}> _x_0::B = _predefined._Nil
<{Control.Applicative.TD;Applicative;}> _x_0::B = _predefined._Nil
<{Control.Applicative.TD;Alternative;}> _x_0::B = _predefined._Nil

:: Control.Applicative.Const = Control.Applicative.Const a1
:: Control.Applicative.WrappedMonad = Control.Applicative.WrapMonad a1

|| Converted Records
:: <{Control.Applicative.Applicative;}> = {!<{Control.Applicative.<*>}>, !Control.Applicative.pure, !Control.Applicative.Functor}

:: <{Control.Applicative.Alternative;}> = {!<{Control.Applicative.<|>}>, !Control.Applicative.empty, !Control.Applicative.Applicative}

:: <{Control.Applicative.gEq_s;}> = {!Control.Applicative.gEq_s}

:: <{Control.Applicative.gEq_ss;}> = {!Control.Applicative.gEq_ss}

:: <{Control.Applicative.gEq_sss;}> = {!Control.Applicative.gEq_sss}

:: <{Control.Applicative.gEq_ssss;}> = {!Control.Applicative.gEq_ssss}

:: <{Control.Applicative.gEq_sssss;}> = {!Control.Applicative.gEq_sssss}

:: <{Control.Applicative.gEq_ssssss;}> = {!Control.Applicative.gEq_ssssss}

:: <{Control.Applicative.gEq_sssssss;}> = {!Control.Applicative.gEq_sssssss}

:: <{Control.Applicative.gEq_ssssssss;}> = {!Control.Applicative.gEq_ssssssss}

:: <{Control.Applicative.gEq_sssssssss;}> = {!Control.Applicative.gEq_sssssssss}

:: <{Control.Applicative.bimap_s;}> = {Control.Applicative.bimap_s}

:: <{Control.Applicative.bimap_ss;}> = {Control.Applicative.bimap_ss}

:: <{Control.Applicative.bimap_sss;}> = {Control.Applicative.bimap_sss}

