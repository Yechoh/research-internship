|| ?module? Text.PPrint


Text.PPrint.line = Text.PPrint.Line False
Text.PPrint.char !_x_0::C = case _x_0 ('\n' -> Text.PPrint.line) (_ -> Text.PPrint.Char _x_0)
Text.PPrint.comma = Text.PPrint.char ','
Text.PPrint.rbracket = Text.PPrint.char ']'
Text.PPrint.lbracket = Text.PPrint.char '['
Text.PPrint.beside x_0 y_1 = Text.PPrint.Cat x_0 y_1
<{Text.PPrint.<->}> x_0 y_1 = Text.PPrint.beside x_0 y_1
Text.PPrint.anon_86 !f_0 !_x_1 = case _x_1 (_Tuple2 a_1_0 b_1_1 -> f_0 a_1_0 b_1_1) 
Text.PPrint.zipWith f_0 !xs_1 ys_2 = StdList.map (Text.PPrint.anon_86 f_0) (StdList.zip2 xs_1 ys_2)
Text.PPrint.anon_103 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.PPrint.linebreak = Text.PPrint.Line True
<{Text.PPrint.<$$>}> x_0 y_1 = <{Text.PPrint.<->}> x_0 (<{Text.PPrint.<->}> Text.PPrint.linebreak y_1)
Text.PPrint.empty = Text.PPrint.Empty
Text.PPrint.foldr1 f_0 !_x_1 = case _x_1 (_predefined._Cons x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> x_1_0) (_ -> f_0 x_1_0 (Text.PPrint.foldr1 f_0 _x_1_1))) 
Text.PPrint.fold f_0 !_x_1 = case _x_1 (_predefined._Nil -> Text.PPrint.empty) (_ -> Text.PPrint.foldr1 f_0 _x_1)
Text.PPrint.vcat = Text.PPrint.fold <{Text.PPrint.<$$>}>
Text.PPrint.anon_102 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.PPrint.anon_101 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.PPrint.anon_148 !g_0 x_1 = Text.PPrint.flattenDoc (g_0 x_1)
Text.PPrint.anon_149 !g_0 x_1 = Text.PPrint.flattenDoc (g_0 x_1)
Text.PPrint.flattenDoc !_x_0 = case _x_0 (Text.PPrint.Cat x_1_0 y_1_1 -> Text.PPrint.Cat (Text.PPrint.flattenDoc x_1_0) (Text.PPrint.flattenDoc y_1_1)) (Text.PPrint.Nest i_1_0 x_1_1 -> Text.PPrint.Nest i_1_0 (Text.PPrint.flattenDoc x_1_1)) (Text.PPrint.Line break_1_0 -> case break_1_0 (True -> Text.PPrint.Empty) (False -> Text.PPrint.Text 1 " ") ) (Text.PPrint.Union x_1_0 y_1_1 -> Text.PPrint.flattenDoc x_1_0) (Text.PPrint.Column f_1_0 -> Text.PPrint.Column (Text.PPrint.anon_148 f_1_0)) (Text.PPrint.Nesting f_1_0 -> Text.PPrint.Nesting (Text.PPrint.anon_149 f_1_0)) (_ -> _x_0)
Text.PPrint.group x_0 = Text.PPrint.Union (Text.PPrint.flattenDoc x_0) x_0
Text.PPrint.anon_150 g_0 x_1 = Text.PPrint.group (g_0 x_1)
Text.PPrint.cat = Text.PPrint.anon_150 Text.PPrint.vcat
Text.PPrint.nest !i_0::I x_1 = Text.PPrint.Nest i_0 x_1
Text.PPrint.anon_92 d_0 !k_1::I !i_2::I = Text.PPrint.nest (<{StdInt.-_7}> k_1 i_2) d_0
Text.PPrint.nesting f_0 = Text.PPrint.Nesting f_0
Text.PPrint.anon_93 d_0 k_1::I = Text.PPrint.nesting (Text.PPrint.anon_92 d_0 k_1)
Text.PPrint.column f_0 = Text.PPrint.Column f_0
Text.PPrint.align d_0 = Text.PPrint.column (Text.PPrint.anon_93 d_0)
Text.PPrint.encloseSep left_0 right_1 sep_2 !ds_3 = <{Text.PPrint._c;54;7_156}> ds_3 left_0 right_1 sep_2
<{Text.PPrint._c;54;7_156}> !ds_0 left_1 right_2 sep_3 = case ds_0 (_predefined._Nil -> <{Text.PPrint.<->}> left_1 right_2) (_predefined._Cons d_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{Text.PPrint.<->}> left_1 (<{Text.PPrint.<->}> d_1_0 right_2)) ) (_ -> Text.PPrint.align (<{Text.PPrint.<->}> (Text.PPrint.cat (Text.PPrint.zipWith <{Text.PPrint.<->}> (_predefined._Cons left_1 (StdList.repeat sep_3)) ds_0)) right_2))
Text.PPrint.list = Text.PPrint.encloseSep Text.PPrint.lbracket Text.PPrint.rbracket Text.PPrint.comma
Text.PPrint.rparen = Text.PPrint.char ')'
Text.PPrint.lparen = Text.PPrint.char '('
Text.PPrint.tupled = Text.PPrint.encloseSep Text.PPrint.lparen Text.PPrint.rparen Text.PPrint.comma
Text.PPrint.semi = Text.PPrint.char ';'
Text.PPrint.rbrace = Text.PPrint.char '}'
Text.PPrint.lbrace = Text.PPrint.char '{'
Text.PPrint.semiBraces = Text.PPrint.encloseSep Text.PPrint.lbrace Text.PPrint.rbrace Text.PPrint.semi
Text.PPrint.punctuate p_0 !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons d_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> _predefined._Cons d_1_0 _predefined._Nil) (_ -> _predefined._Cons (<{Text.PPrint.<->}> d_1_0 p_0) (Text.PPrint.punctuate p_0 _x_1_1))) 
Text.PPrint.anon_104 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Text.PPrint.<$>}> x_0 y_1 = <{Text.PPrint.<->}> x_0 (<{Text.PPrint.<->}> Text.PPrint.line y_1)
Text.PPrint.vsep = Text.PPrint.fold <{Text.PPrint.<$>}>
Text.PPrint.anon_151 g_0 x_1 = Text.PPrint.group (g_0 x_1)
Text.PPrint.sep = Text.PPrint.anon_151 Text.PPrint.vsep
Text.PPrint.softline = Text.PPrint.group Text.PPrint.line
<{Text.PPrint.</>}> x_0 y_1 = <{Text.PPrint.<->}> x_0 (<{Text.PPrint.<->}> Text.PPrint.softline y_1)
Text.PPrint.fillSep = Text.PPrint.fold <{Text.PPrint.</>}>
Text.PPrint.space = Text.PPrint.char ' '
<{Text.PPrint.<+>}> x_0 y_1 = <{Text.PPrint.<->}> x_0 (<{Text.PPrint.<->}> Text.PPrint.space y_1)
Text.PPrint.hsep = Text.PPrint.fold <{Text.PPrint.<+>}>
Text.PPrint.softbreak = Text.PPrint.group Text.PPrint.linebreak
<{Text.PPrint.<//>}> x_0 y_1 = <{Text.PPrint.<->}> x_0 (<{Text.PPrint.<->}> Text.PPrint.softbreak y_1)
Text.PPrint.fillCat = Text.PPrint.fold <{Text.PPrint.<//>}>
Text.PPrint.hcat = Text.PPrint.fold <{Text.PPrint.<->}>
Text.PPrint.squote = Text.PPrint.char '\''
Text.PPrint.enclose l_0 r_1 x_2 = <{Text.PPrint.<->}> l_0 (<{Text.PPrint.<->}> x_2 r_1)
Text.PPrint.squotes = Text.PPrint.enclose Text.PPrint.squote Text.PPrint.squote
Text.PPrint.dquote = Text.PPrint.char '"'
Text.PPrint.dquotes = Text.PPrint.enclose Text.PPrint.dquote Text.PPrint.dquote
Text.PPrint.braces = Text.PPrint.enclose Text.PPrint.lbrace Text.PPrint.rbrace
Text.PPrint.parens = Text.PPrint.enclose Text.PPrint.lparen Text.PPrint.rparen
Text.PPrint.rangle = Text.PPrint.char '>'
Text.PPrint.langle = Text.PPrint.char '<'
Text.PPrint.angles = Text.PPrint.enclose Text.PPrint.langle Text.PPrint.rangle
Text.PPrint.brackets = Text.PPrint.enclose Text.PPrint.lbracket Text.PPrint.rbracket
Text.PPrint.colon = Text.PPrint.char ':'
Text.PPrint.dot = Text.PPrint.char '.'
Text.PPrint.backslash = Text.PPrint.char '\\'
Text.PPrint.equals = Text.PPrint.char '='
Text.PPrint.text !_x_0 = case _x_0 ("" -> Text.PPrint.Empty) (_ -> Text.PPrint.Text (_SystemArray.size_20 _x_0) _x_0)
Text.PPrint.str_87 s_0 fr_1::I !to_2::I !len_3::I acc_4 = case (<{StdInt.==_16}> to_2 len_3) (True -> <{Text.PPrint.<->}> acc_4 (Text.PPrint.text (<{StdString.%_10}> s_0 (_Tuple2 fr_1 (<{StdInt.-_7}> to_2 1))))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_0 to_2) '\n') (True -> Text.PPrint.str_87 s_0 (<{StdInt.+_6}> to_2 1) (<{StdInt.+_6}> to_2 1) len_3 (<{Text.PPrint.<->}> acc_4 (<{Text.PPrint.<->}> (Text.PPrint.text (<{StdString.%_10}> s_0 (_Tuple2 fr_1 (<{StdInt.-_7}> to_2 1)))) Text.PPrint.line))) (False -> Text.PPrint.str_87 s_0 fr_1 (<{StdInt.+_6}> to_2 1) len_3 acc_4) ) 
Text.PPrint.string !s_0 = Text.PPrint.str_87 s_0 0 0 (_SystemArray.size_20 s_0) Text.PPrint.empty
Text.PPrint.bool !b_0::B = Text.PPrint.text (StdString.toString_8 b_0)
Text.PPrint.int !i_0::I = Text.PPrint.text (StdString.toString_5 i_0)
Text.PPrint.real !r_0::D = Text.PPrint.text (StdString.toString_7 r_0)
Text.PPrint.spaceString !i_0::I = _SystemArray.createArray_17 i_0 ' '
Text.PPrint.anon_88 !f_0::I !w_1::I = case (<{StdInt.<_17}> f_0 w_1) (True -> Text.PPrint.nest f_0 Text.PPrint.linebreak) (False -> Text.PPrint.text (Text.PPrint.spaceString (<{StdInt.-_7}> f_0 w_1))) 
Text.PPrint.anon_90 !<{_v-_0}> !f_1 k1_2 k2_3 = f_1 (select <{_v-_0}>::<{StdOverloaded.-;}> 0 k2_3 k1_2)
Text.PPrint.anon_152 !f_0 k1_1::I k2_2::I = f_0 (<{StdInt.-_7}> k2_2 k1_1)
Text.PPrint.anon_91 f_0 d_1 k1_2::I = <{Text.PPrint.<->}> d_1 (Text.PPrint.column (Text.PPrint.anon_152 f_0 k1_2))
Text.PPrint.width d_0 f_1 = Text.PPrint.column (Text.PPrint.anon_91 f_1 d_0)
Text.PPrint.fillBreak f_0::I x_1 = Text.PPrint.width x_1 (Text.PPrint.anon_88 f_0)
Text.PPrint.anon_89 !f_0::I !w_1::I = case (StdBool.not (<{StdInt.<_17}> w_1 f_0)) (True -> Text.PPrint.empty) (False -> Text.PPrint.text (Text.PPrint.spaceString (<{StdInt.-_7}> f_0 w_1))) 
Text.PPrint.fill f_0::I d_1 = Text.PPrint.width d_1 (Text.PPrint.anon_89 f_0)
Text.PPrint.hang i_0::I d_1 = Text.PPrint.align (Text.PPrint.nest i_0 d_1)
Text.PPrint.indent i_0::I d_1 = Text.PPrint.hang i_0 (<{Text.PPrint.<->}> (Text.PPrint.text (Text.PPrint.spaceString i_0)) d_1)
Text.PPrint.fits::B !w_0::I x_1 = case (<{StdInt.<_17}> w_0 0) (True -> False) (False -> case x_1 (Text.PPrint.SEmpty -> True) (Text.PPrint.SChar c_2_0 x_2_1 -> Text.PPrint.fits (<{StdInt.-_7}> w_0 1) x_2_1) (Text.PPrint.SText l_2_0 s_2_1 x_2_2 -> Text.PPrint.fits (<{StdInt.-_7}> w_0 l_2_0) x_2_2) (Text.PPrint.SLine i_2_0 x_2_1 -> True) ) 
Text.PPrint.nicest_95 !w_0::I !r_1::I !n_2::I !k_3::I x_4 y_5 = let x_1_0::I = <{StdInt.-_7}> w_0 k_3, y_1_1::I = <{StdInt.+_6}> (<{StdInt.-_7}> r_1 k_3) n_2 in case (Text.PPrint.fits (<{Text.PPrint._c;48;16_157}> (<{StdInt.<_17}> x_1_0 y_1_1) x_1_0 y_1_1) x_4) (True -> x_4) (False -> y_5) 
<{Text.PPrint._c;48;16_157}>::I !_x_0::B x_1::I y_2::I = case _x_0 (True -> x_1) (_ -> y_2)
Text.PPrint.best_94 w_0::I r_1::I n_2::I k_3::I !_x_4 = case _x_4 (Text.PPrint.Nil -> Text.PPrint.SEmpty) (Text.PPrint.Cons i_1_0 d_1_1 ds_1_2 -> <{Text.PPrint._c;379;11_158}> d_1_1 w_0 r_1 n_2 k_3 ds_1_2 i_1_0) 
<{Text.PPrint._c;379;11_158}> !d_0 w_1::I r_2::I n_3::I k_4::I ds_5 i_6::I = case d_0 (Text.PPrint.Empty -> Text.PPrint.best_94 w_1 r_2 n_3 k_4 ds_5) (Text.PPrint.Char c_1_0 -> Text.PPrint.SChar c_1_0 (Text.PPrint.best_94 w_1 r_2 n_3 (<{StdInt.+_6}> k_4 1) ds_5)) (Text.PPrint.Text l_1_0 s_1_1 -> Text.PPrint.SText l_1_0 s_1_1 (Text.PPrint.best_94 w_1 r_2 n_3 (<{StdInt.+_6}> k_4 l_1_0) ds_5)) (Text.PPrint.Line _x_1_0 -> Text.PPrint.SLine i_6 (Text.PPrint.best_94 w_1 r_2 i_6 i_6 ds_5)) (Text.PPrint.Cat x_1_0 y_1_1 -> Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons i_6 x_1_0 (Text.PPrint.Cons i_6 y_1_1 ds_5))) (Text.PPrint.Nest j_1_0 x_1_1 -> Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons (<{StdInt.+_6}> i_6 j_1_0) x_1_1 ds_5)) (Text.PPrint.Union x_1_0 y_1_1 -> Text.PPrint.nicest_95 w_1 r_2 n_3 k_4 (Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons i_6 x_1_0 ds_5)) (Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons i_6 y_1_1 ds_5))) (Text.PPrint.Column f_1_0 -> Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons i_6 (f_1_0 k_4) ds_5)) (Text.PPrint.Nesting f_1_0 -> Text.PPrint.best_94 w_1 r_2 n_3 k_4 (Text.PPrint.Cons i_6 (f_1_0 i_6) ds_5)) 
Text.PPrint.renderPretty rfrac_0::D w_1::I !x_2 = let x_1_0::I = 0, y_1_1::I = StdInt.toInt_22 (<{StdReal.*_4}> (StdReal.toReal_13 w_1) rfrac_0), y_1_2::I = <{Text.PPrint._c;48;16_159}> (<{StdInt.<_17}> w_1 y_1_1) w_1 y_1_1 in Text.PPrint.best_94 w_1 (<{Text.PPrint._c;51;16_160}> (<{StdInt.<_17}> x_1_0 y_1_2) y_1_2 x_1_0) 0 0 (Text.PPrint.Cons 0 x_2 Text.PPrint.Nil)
<{Text.PPrint._c;51;16_160}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{Text.PPrint._c;48;16_159}>::I !_x_0::B w_1::I y_2::I = case _x_0 (True -> w_1) (_ -> y_2)
Text.PPrint.scan_96 k_0::I !_x_1 = case _x_1 (_predefined._Nil -> Text.PPrint.SEmpty) (_predefined._Cons d_1_0 ds_1_1 -> <{Text.PPrint._c;421;23_161}> d_1_0 k_0 ds_1_1) 
<{Text.PPrint._c;421;23_161}> !d_0 k_1::I ds_2 = case d_0 (Text.PPrint.Empty -> Text.PPrint.scan_96 k_1 ds_2) (Text.PPrint.Char c_1_0 -> Text.PPrint.SChar c_1_0 (Text.PPrint.scan_96 (<{StdInt.+_6}> k_1 1) ds_2)) (Text.PPrint.Text l_1_0 s_1_1 -> Text.PPrint.SText l_1_0 s_1_1 (Text.PPrint.scan_96 (<{StdInt.+_6}> k_1 l_1_0) ds_2)) (Text.PPrint.Line _x_1_0 -> Text.PPrint.SLine 0 (Text.PPrint.scan_96 0 ds_2)) (Text.PPrint.Cat x_1_0 y_1_1 -> Text.PPrint.scan_96 k_1 (_predefined._Cons x_1_0 (_predefined._Cons y_1_1 ds_2))) (Text.PPrint.Nest j_1_0 x_1_1 -> Text.PPrint.scan_96 k_1 (_predefined._Cons x_1_1 ds_2)) (Text.PPrint.Union x_1_0 y_1_1 -> Text.PPrint.scan_96 k_1 (_predefined._Cons y_1_1 ds_2)) (Text.PPrint.Column f_1_0 -> Text.PPrint.scan_96 k_1 (_predefined._Cons (f_1_0 k_1) ds_2)) (Text.PPrint.Nesting f_1_0 -> Text.PPrint.scan_96 k_1 (_predefined._Cons (f_1_0 0) ds_2)) 
Text.PPrint.renderCompact !x_0 = Text.PPrint.scan_96 0 (_predefined._Cons x_0 _predefined._Nil)
Text.PPrint.displaySize_99::I !_x_0 = case _x_0 (Text.PPrint.SEmpty -> 0) (Text.PPrint.SChar c_1_0 x_1_1 -> <{StdInt.+_6}> 1 (Text.PPrint.displaySize_99 x_1_1)) (Text.PPrint.SText l_1_0 s_1_1 x_1_2 -> <{StdInt.+_6}> (_SystemArray.size_20 s_1_1) (Text.PPrint.displaySize_99 x_1_2)) (Text.PPrint.SLine i_1_0 x_1_1 -> <{StdInt.+_6}> (<{StdInt.+_6}> 1 i_1_0) (Text.PPrint.displaySize_99 x_1_1)) 
Text.PPrint.copyChars_98 !_vArray_0 !_vArray_1 offset_2::I !i_3::I !num_4::I src_5 dst_6 = case (<{StdInt.==_16}> i_3 num_4) (True -> dst_6) (False -> Text.PPrint.copyChars_98 _vArray_0 _vArray_1 offset_2 (<{StdInt.+_6}> i_3 StdInt.one_11) num_4 src_5 (select _vArray_1::<{_SystemArray.Array;}> 5 dst_6 (<{StdInt.+_6}> offset_2 i_3) (select _vArray_0::<{_SystemArray.Array;}> 3 src_5 i_3))) 
Text.PPrint.copyChars_153 !_vArray_0 offset_1::I !i_2::I !num_3::I src_4 dst_5 = case (<{StdInt.==_16}> i_2 num_3) (True -> dst_5) (False -> Text.PPrint.copyChars_153 _vArray_0 offset_1 (<{StdInt.+_6}> i_2 StdInt.one_11) num_3 src_4 (select _vArray_0::<{_SystemArray.Array;}> 5 dst_5 (<{StdInt.+_6}> offset_1 i_2) (_SystemArray.select_19 src_4 i_2))) 
<{Text.PPrint.display`_97}> !_vArray_0 !_x_1 dst_2 offset_3::I = case _x_1 (Text.PPrint.SEmpty -> dst_2) (Text.PPrint.SChar c_1_0 x_1_1 -> <{Text.PPrint.display`_97}> _vArray_0 x_1_1 (select _vArray_0::<{_SystemArray.Array;}> 5 dst_2 offset_3 c_1_0) (<{StdInt.+_6}> offset_3 1)) (Text.PPrint.SText l_1_0 s_1_1 x_1_2 -> <{Text.PPrint.display`_97}> _vArray_0 x_1_2 (Text.PPrint.copyChars_153 _vArray_0 offset_3 0 (_SystemArray.size_20 s_1_1) s_1_1 dst_2) (<{StdInt.+_6}> offset_3 (_SystemArray.size_20 s_1_1))) (Text.PPrint.SLine i_1_0 x_1_1 -> <{Text.PPrint.display`_97}> _vArray_0 x_1_1 (Text.PPrint.copyChars_153 _vArray_0 offset_3 0 (<{StdInt.+_6}> i_1_0 1) (_SystemArray.update_21 (Text.PPrint.spaceString (<{StdInt.+_6}> i_1_0 1)) 0 '\n') dst_2) (<{StdInt.+_6}> (<{StdInt.+_6}> offset_3 i_1_0) 1)) 
Text.PPrint.copyChars_155 offset_0::I !i_1::I !num_2::I src_3 !dst_4 = case (<{StdInt.==_16}> i_1 num_2) (True -> dst_4) (False -> Text.PPrint.copyChars_155 offset_0 (<{StdInt.+_6}> i_1 StdInt.one_11) num_2 src_3 (_SystemArray.update_21 dst_4 (<{StdInt.+_6}> offset_0 i_1) (_SystemArray.select_19 src_3 i_1))) 
<{Text.PPrint.display`_154}> !_x_0 !dst_1 offset_2::I = case _x_0 (Text.PPrint.SEmpty -> dst_1) (Text.PPrint.SChar c_1_0 x_1_1 -> <{Text.PPrint.display`_154}> x_1_1 (_SystemArray.update_21 dst_1 offset_2 c_1_0) (<{StdInt.+_6}> offset_2 1)) (Text.PPrint.SText l_1_0 s_1_1 x_1_2 -> <{Text.PPrint.display`_154}> x_1_2 (Text.PPrint.copyChars_155 offset_2 0 (_SystemArray.size_20 s_1_1) s_1_1 dst_1) (<{StdInt.+_6}> offset_2 (_SystemArray.size_20 s_1_1))) (Text.PPrint.SLine i_1_0 x_1_1 -> <{Text.PPrint.display`_154}> x_1_1 (Text.PPrint.copyChars_155 offset_2 0 (<{StdInt.+_6}> i_1_0 1) (_SystemArray.update_21 (Text.PPrint.spaceString (<{StdInt.+_6}> i_1_0 1)) 0 '\n') dst_1) (<{StdInt.+_6}> (<{StdInt.+_6}> offset_2 i_1_0) 1)) 
Text.PPrint.display !sdoc_0 = <{Text.PPrint.display`_154}> sdoc_0 (_SystemArray.createArray_17 (Text.PPrint.displaySize_99 sdoc_0) '\0') 0
Text.PPrint.pretty_68 !_vPretty_0 !xs_1 = Text.PPrint.list (StdList.map (select _vPretty_0::<{Text.PPrint.Pretty;}> 0) xs_1)
Text.PPrint.pretty_69 !doc_0 = doc_0
Text.PPrint.pretty_70 !b_0::B = Text.PPrint.bool b_0
Text.PPrint.pretty_71 !c_0::C = Text.PPrint.char c_0
Text.PPrint.pretty_72 !i_0::I = Text.PPrint.int i_0
Text.PPrint.pretty_73 !r_0::D = Text.PPrint.real r_0
Text.PPrint.pretty_74 !_vPretty_0 !_vPretty_1 !_x_2 = case _x_2 (_Tuple2 x_1_0 y_1_1 -> Text.PPrint.tupled (_predefined._Cons (select _vPretty_0::<{Text.PPrint.Pretty;}> 0 x_1_0) (_predefined._Cons (select _vPretty_1::<{Text.PPrint.Pretty;}> 0 y_1_1) _predefined._Nil))) 
Text.PPrint.pretty_75 !_vPretty_0 !_vPretty_1 !_vPretty_2 !_x_3 = case _x_3 (_Tuple3 x_1_0 y_1_1 z_1_2 -> Text.PPrint.tupled (_predefined._Cons (select _vPretty_0::<{Text.PPrint.Pretty;}> 0 x_1_0) (_predefined._Cons (select _vPretty_1::<{Text.PPrint.Pretty;}> 0 y_1_1) (_predefined._Cons (select _vPretty_2::<{Text.PPrint.Pretty;}> 0 z_1_2) _predefined._Nil)))) 
Text.PPrint.pretty_76 !_vPretty_0 !_x_1 = case _x_1 (Data.Maybe.Nothing -> Text.PPrint.empty) (Data.Maybe.Just x_1_0 -> select _vPretty_0::<{Text.PPrint.Pretty;}> 0 x_1_0) 
<{Text.PPrint.TD;Doc}> _x_0::B = _predefined._Nil
<{Text.PPrint.TD;SimpleDoc}> _x_0::B = _predefined._Nil
<{Text.PPrint.TD;Pretty;}> _x_0::B = _predefined._Nil
<{Text.PPrint.TD;Docs}> _x_0::B = _predefined._Nil

:: Text.PPrint.Doc = Text.PPrint.Empty | Text.PPrint.Char a1::C | Text.PPrint.Text !a1::I a2 | Text.PPrint.Line !a1::B | Text.PPrint.Cat a1 a2 | Text.PPrint.Nest !a1::I a2 | Text.PPrint.Union a1 a2 | Text.PPrint.Column a1 | Text.PPrint.Nesting a1
:: Text.PPrint.SimpleDoc = Text.PPrint.SEmpty | Text.PPrint.SChar a1::C a2 | Text.PPrint.SText !a1::I a2 a3 | Text.PPrint.SLine !a1::I a2
:: Text.PPrint.Docs = Text.PPrint.Nil | Text.PPrint.Cons !a1::I a2 a3

|| Converted Records
:: <{Text.PPrint.Pretty;}> = {!Text.PPrint.pretty}

:: <{Text.PPrint.gEq_s;}> = {!Text.PPrint.gEq_s}

:: <{Text.PPrint.gEq_ss;}> = {!Text.PPrint.gEq_ss}

:: <{Text.PPrint.gEq_sss;}> = {!Text.PPrint.gEq_sss}

:: <{Text.PPrint.gEq_ssss;}> = {!Text.PPrint.gEq_ssss}

:: <{Text.PPrint.gEq_sssss;}> = {!Text.PPrint.gEq_sssss}

:: <{Text.PPrint.gEq_ssssss;}> = {!Text.PPrint.gEq_ssssss}

:: <{Text.PPrint.gEq_sssssss;}> = {!Text.PPrint.gEq_sssssss}

:: <{Text.PPrint.gEq_ssssssss;}> = {!Text.PPrint.gEq_ssssssss}

:: <{Text.PPrint.gEq_sssssssss;}> = {!Text.PPrint.gEq_sssssssss}

:: <{Text.PPrint.bimap_s;}> = {Text.PPrint.bimap_s}

:: <{Text.PPrint.bimap_ss;}> = {Text.PPrint.bimap_ss}

:: <{Text.PPrint.bimap_sss;}> = {Text.PPrint.bimap_sss}

