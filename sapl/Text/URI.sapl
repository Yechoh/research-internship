|| ?module? Text.URI


Text.URI.nullURI = Text.URI._URI Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing "" Data.Maybe.Nothing Data.Maybe.Nothing
Text.URI.isSubDelim::B c_0::C = Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '!' (_predefined._Cons '$' (_predefined._Cons '&' (_predefined._Cons '\'' (_predefined._Cons '(' (_predefined._Cons ')' (_predefined._Cons '*' (_predefined._Cons '+' (_predefined._Cons ',' (_predefined._Cons ';' (_predefined._Cons '=' _predefined._Nil)))))))))))
Text.URI.isUnreserved::B !c_0::C = case (StdChar.isAlphanum c_0) (True -> True) (False -> Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '-' (_predefined._Cons '.' (_predefined._Cons '_' (_predefined._Cons '~' _predefined._Nil))))) 
Text.URI.anon_70 a_0 !f_1 = f_1 a_0
Text.URI.satisfiesAny::B !fs_0 a_1 = StdList.or (StdList.map (Text.URI.anon_70 a_1) fs_0)
Text.URI.okInUserinfo::B c_0::C = Text.URI.satisfiesAny (_predefined._Cons Text.URI.isUnreserved (_predefined._Cons Text.URI.isSubDelim (_predefined._Cons (<{StdChar.==_18}> ':') _predefined._Nil))) c_0
Text.URI.anon_64::B c_0::C = Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '/' (_predefined._Cons '?' _predefined._Nil))
Text.URI.anon_69::B c_0::C = Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '%' (_predefined._Cons ':' (_predefined._Cons '@' _predefined._Nil)))
Text.URI.isPChar::B c_0::C = Text.URI.satisfiesAny (_predefined._Cons Text.URI.isUnreserved (_predefined._Cons Text.URI.isSubDelim (_predefined._Cons Text.URI.anon_69 _predefined._Nil))) c_0
Text.URI.okInQuery::B c_0::C = Text.URI.satisfiesAny (_predefined._Cons Text.URI.isPChar (_predefined._Cons Text.URI.anon_64 _predefined._Nil)) c_0
Text.URI.okInQueryItem::B c_0::C = case (Text.URI.okInQuery c_0) (True -> StdBool.not (Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '&' (_predefined._Cons '=' _predefined._Nil)))) (False -> False) 
Text.URI.okInFragment::B c_0::C = Text.URI.okInQuery c_0
Text.URI.anon_65::B c_0::C = Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons '/' (_predefined._Cons '@' _predefined._Nil))
Text.URI.okInPath::B c_0::C = Text.URI.satisfiesAny (_predefined._Cons Text.URI.isPChar (_predefined._Cons Text.URI.anon_65 _predefined._Nil)) c_0
Text.URI.okInPathSegment::B c_0::C = Text.URI.satisfiesAny (_predefined._Cons Text.URI.isPChar (_predefined._Cons (<{StdChar.==_18}> '@') _predefined._Nil)) c_0
Text.URI.ss_66 !s_0 = StdList.fromString_78 s_0
Text.URI.anon_78 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 !_vtoString_4 !_vtoString_5 !_vApplicative_6 schemeV_7 pathV_8 portV_9 hostV_10 userinfoV_11 queryV_12 fragmentV_13 = select _vApplicative_6::<{Control.Applicative.Applicative;}> 1 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_7) (Data.Maybe.fmap_12 (select _vtoString_1::<{StdOverloaded.toString;}> 0) userinfoV_11) (Data.Maybe.fmap_12 (select _vtoString_2::<{StdOverloaded.toString;}> 0) hostV_10) portV_9 (select _vtoString_3::<{StdOverloaded.toString;}> 0 pathV_8) (Data.Maybe.fmap_12 (select _vtoString_4::<{StdOverloaded.toString;}> 0) queryV_12) (Data.Maybe.fmap_12 (select _vtoString_5::<{StdOverloaded.toString;}> 0) fragmentV_13))
Text.URI.queryP = <{Text.Parsers.ZParsers.ParsersDerived.<!*>}> (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> (Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isPChar) (Text.Parsers.ZParsers.ParsersAccessories.oneOf (_predefined._Cons '/' (_predefined._Cons '?' _predefined._Nil))))
Text.URI.fragmentP = Text.URI.queryP
Text.URI.optionMaybe p_0 = <{Text.Parsers.ZParsers.ParsersDerived.<!?>}> p_0 Data.Maybe.Just Data.Maybe.Nothing
Text.URI.anon_196 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 !_vtoString_4 !_vApplicative_5 schemeV_6 pathV_7 portV_8 hostV_9 userinfoV_10 queryV_11 fragmentV_12 = select _vApplicative_5::<{Control.Applicative.Applicative;}> 1 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_6) (Data.Maybe.fmap_12 (select _vtoString_1::<{StdOverloaded.toString;}> 0) userinfoV_10) (Data.Maybe.fmap_12 (select _vtoString_2::<{StdOverloaded.toString;}> 0) hostV_9) portV_8 (select _vtoString_3::<{StdOverloaded.toString;}> 0 pathV_7) (Data.Maybe.fmap_12 (select _vtoString_4::<{StdOverloaded.toString;}> 0) queryV_11) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_12))
Text.URI.anon_197 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 !_vtoString_4 schemeV_5 pathV_6 portV_7 hostV_8 userinfoV_9 queryV_10 fragmentV_11 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_5) (Data.Maybe.fmap_12 (select _vtoString_1::<{StdOverloaded.toString;}> 0) userinfoV_9) (Data.Maybe.fmap_12 (select _vtoString_2::<{StdOverloaded.toString;}> 0) hostV_8) portV_7 (select _vtoString_3::<{StdOverloaded.toString;}> 0 pathV_6) (Data.Maybe.fmap_12 (select _vtoString_4::<{StdOverloaded.toString;}> 0) queryV_10) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_11))
Text.URI.anon_79 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 !_vtoString_4 schemeV_5 pathV_6 portV_7 hostV_8 userinfoV_9 queryV_10 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_197 _vtoString_0 _vtoString_1 _vtoString_2 _vtoString_3 _vtoString_4 schemeV_5 pathV_6 portV_7 hostV_8 userinfoV_9 queryV_10)
Text.URI.anon_199 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 schemeV_4 pathV_5 portV_6 hostV_7 userinfoV_8 queryV_9 fragmentV_10 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_4) (Data.Maybe.fmap_12 (select _vtoString_1::<{StdOverloaded.toString;}> 0) userinfoV_8) (Data.Maybe.fmap_12 (select _vtoString_2::<{StdOverloaded.toString;}> 0) hostV_7) portV_6 (select _vtoString_3::<{StdOverloaded.toString;}> 0 pathV_5) (Data.Maybe.fmap_12 StdList.toString_79 queryV_9) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_10))
Text.URI.anon_198 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 schemeV_4 pathV_5 portV_6 hostV_7 userinfoV_8 queryV_9 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_199 _vtoString_0 _vtoString_1 _vtoString_2 _vtoString_3 schemeV_4 pathV_5 portV_6 hostV_7 userinfoV_8 queryV_9)
Text.URI.anon_80 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 schemeV_4 pathV_5 !_x_6 = case _x_6 (_Tuple3 userinfoV_1_0 hostV_1_1 portV_1_2 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '?') Text.URI.queryP)) (Text.URI.anon_198 _vtoString_0 _vtoString_1 _vtoString_2 _vtoString_3 schemeV_4 pathV_5 portV_1_2 hostV_1_1 userinfoV_1_0)) 
Text.URI.anon_81 !_vtoString_0 !_vtoString_1 !_vtoString_2 !_vtoString_3 schemeV_4 !_x_5 = case _x_5 (_Tuple2 authorityV_1_0 pathV_1_1 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.pure_36 (Data.Maybe.fromMaybe (_Tuple3 Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing) authorityV_1_0)) (Text.URI.anon_80 _vtoString_0 _vtoString_1 _vtoString_2 _vtoString_3 schemeV_4 pathV_1_1)) 
Text.URI.anon_85 !_vApplicative_0 authorityV_1 pathV_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_Tuple2 authorityV_1 pathV_2)
Text.URI.pathEmptyP = Text.Parsers.ZParsers.ParsersKernel.epsilon
Text.URI.anon_87 !_vApplicative_0 segs_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten segs_1)
Text.URI.anon_88 !_vApplicative_0 segmentV_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons '/' segmentV_1)
Text.URI.pCharP = Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isPChar
Text.URI.segmentP = <{Text.Parsers.ZParsers.ParsersDerived.<!*>}> Text.URI.pCharP
Text.URI.anon_200 segmentV_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons '/' segmentV_0)
Text.URI.anon_201 segs_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten segs_0)
Text.URI.pathABEmptyP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!*>}> (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '/') Text.URI.segmentP) Text.URI.anon_200)) Text.URI.anon_201
Text.URI.anon_93 !_vApplicative_0 first_1 rest_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> first_1 rest_2)
Text.URI.anon_71 !_vApplicative_0 first_1 rest_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten (_predefined._Cons first_1 rest_2))
Text.URI.anon_202 first_0 rest_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten (_predefined._Cons first_0 rest_1))
Text.URI.anon_72 pP_0 first_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!*>}> pP_0) (Text.URI.anon_202 first_1)
Text.URI.anon_73 !_vApplicative_0 sepV_1 pV_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons sepV_1 pV_2)
Text.URI.anon_74 !_vMonad_0 p_1 sepV_2 = <{Control.Monad.>>=}> _vMonad_0 p_1 (Text.URI.anon_73 (select _vMonad_0::<{Control.Monad.Monad;}> 1) sepV_2)
Text.URI.anon_204 sepV_0 pV_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons sepV_0 pV_1)
Text.URI.anon_203 p_0 sepV_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) p_0 (Text.URI.anon_204 sepV_1)
Text.URI.sepByWSep1 p_0 sep_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) p_0 (Text.URI.anon_72 (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) sep_1 (Text.URI.anon_203 p_0)))
Text.URI.sepByWSep p_0 sep_1 = <{Text.Parsers.ZParsers.ParsersKernel.<!>}> (Text.URI.sepByWSep1 p_0 sep_1) (Text.Parsers.ZParsers.ParsersKernel.pure_36 _predefined._Nil)
Text.URI.anon_205 first_0 rest_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> first_0 rest_1)
Text.URI.anon_94 first_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.sepByWSep Text.URI.segmentP (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '/')) (Text.URI.anon_205 first_0)
Text.URI.unreservedP = Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isUnreserved
Text.URI.subDelimP = Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isSubDelim
Text.URI.segmentNZNCP = <{Text.Parsers.ZParsers.ParsersDerived.<!+>}> (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> Text.URI.subDelimP (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> Text.URI.unreservedP (Text.Parsers.ZParsers.ParsersAccessories.oneOf (_predefined._Cons '@' (_predefined._Cons '%' _predefined._Nil)))))
Text.URI.pathNoSchemeP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.segmentNZNCP Text.URI.anon_94
Text.URI.anon_89 !_vApplicative_0 rest_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons '/' rest_1)
Text.URI.option d_0 p_1 = <{Text.Parsers.ZParsers.ParsersDerived.<!?>}> p_1 StdFunc.id d_0
Text.URI.anon_90 !_vApplicative_0 s1_1 segs_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten (_predefined._Cons s1_1 segs_2))
Text.URI.anon_206 s1_0 segs_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten (_predefined._Cons s1_0 segs_1))
Text.URI.anon_91 partP_0 s1_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!*>}> partP_0) (Text.URI.anon_206 s1_1)
Text.URI.segmentNZP = <{Text.Parsers.ZParsers.ParsersDerived.<!+>}> Text.URI.pCharP
Text.URI.anon_92 !_vApplicative_0 v_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons '/' v_1)
Text.URI.anon_207 v_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons '/' v_0)
Text.URI.anon_208 rest_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons '/' rest_0)
Text.URI.pathAbsoluteP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '/') (Text.URI.option _predefined._Nil (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.segmentNZP (Text.URI.anon_91 (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '/') Text.URI.segmentP) Text.URI.anon_207))))) Text.URI.anon_208
Text.URI.anon_95 !_vApplicative_0 first_1 rest_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> first_1 rest_2)
Text.URI.anon_209 first_0 rest_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> first_0 rest_1)
Text.URI.anon_96 first_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.sepByWSep Text.URI.segmentP (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '/')) (Text.URI.anon_209 first_0)
Text.URI.pathRootlessP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.segmentNZP Text.URI.anon_96
Text.URI.pathP = Text.Parsers.ZParsers.ParsersAccessories.choice (_predefined._Cons Text.URI.pathRootlessP (_predefined._Cons Text.URI.pathAbsoluteP (_predefined._Cons Text.URI.pathNoSchemeP (_predefined._Cons Text.URI.pathABEmptyP (_predefined._Cons Text.URI.pathEmptyP _predefined._Nil)))))
Text.URI.anon_210 authorityV_0 pathV_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_Tuple2 authorityV_0 pathV_1)
Text.URI.anon_86 authorityV_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.pathP (Text.URI.anon_210 authorityV_0)
Text.URI.anon_98 !_vApplicative_0 userinfoV_1 hostV_2 portV_3 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_Tuple3 userinfoV_1 (Data.Maybe.Just hostV_2) portV_3)
Text.URI.anon_149 !_vtoString_0 !_vApplicative_1 digitV_2 = select _vApplicative_1::<{Control.Applicative.Applicative;}> 1 (StdInt.toInt_23 (select _vtoString_0::<{StdOverloaded.toString;}> 0 digitV_2))
Text.URI.anon_211 !_vApplicative_0 digitV_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdInt.toInt_23 (StdList.toString_79 digitV_1))
Text.URI.anon_212 digitV_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdInt.toInt_23 (StdList.toString_79 digitV_0))
Text.URI.portP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!*>}> Text.Parsers.ZParsers.ParsersAccessories.digit) Text.URI.anon_212
Text.URI.anon_213 userinfoV_0 hostV_1 portV_2 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_Tuple3 userinfoV_0 (Data.Maybe.Just hostV_1) portV_2)
Text.URI.anon_99 userinfoV_0 hostV_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) ':') Text.URI.portP)) (Text.URI.anon_213 userinfoV_0 hostV_1)
Text.URI.regNameP = <{Text.Parsers.ZParsers.ParsersDerived.<!*>}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> Text.URI.unreservedP Text.URI.subDelimP) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '%'))
Text.URI.anon_140 !_vApplicative_0 d1_1 d2_2 d3_3 d4_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten (_predefined._Cons d1_1 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d2_2 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d3_3 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d4_4 _predefined._Nil))))))))
Text.URI.anon_144 !_vApplicative_0 a1_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 a1_1
Text.URI.anon_145 !_vApplicative_0 a1_1 ar_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons a1_1 ar_2)
Text.URI.anon_147 !_vApplicative_0 a1_1 ar_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (_predefined._Cons a1_1 ar_2)
Text.URI.anon_214 a1_0 ar_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons a1_0 ar_1)
Text.URI.anon_215 a1_0 ar_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons a1_0 ar_1)
Text.URI.anon_148 n_0::I p_1 a1_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.countMinMax 0 (<{StdInt.-_7}> n_0 1) p_1) (Text.URI.anon_215 a1_2)
Text.URI.anon_146 m_0::I n_1::I p_2 a1_3 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.countMinMax (<{StdInt.-_7}> m_0 1) (<{StdInt.-_7}> n_1 1) p_2) (Text.URI.anon_214 a1_3)
Text.URI.countMinMax !m_0::I n_1::I p_2 = case (<{StdInt.<_17}> 0 m_0) (True -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) p_2 (Text.URI.anon_146 m_0 n_1 p_2)) (False -> case (StdBool.not (<{StdInt.<_17}> 0 n_1)) (True -> Text.Parsers.ZParsers.ParsersKernel.pure_36 _predefined._Nil) (False -> Text.URI.option _predefined._Nil (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) p_2 (Text.URI.anon_148 n_1 p_2))) ) 
Text.URI.anon_216 a1_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 a1_0
Text.URI.decOctetP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.countMinMax 1 3 Text.Parsers.ZParsers.ParsersAccessories.digit) Text.URI.anon_216
Text.URI.anon_217 d1_0 d2_1 d3_2 d4_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten (_predefined._Cons d1_0 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d2_1 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d3_2 (_predefined._Cons (_predefined._Cons '.' _predefined._Nil) (_predefined._Cons d4_3 _predefined._Nil))))))))
Text.URI.anon_141 d1_0 d2_1 d3_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '.') Text.URI.decOctetP) (Text.URI.anon_217 d1_0 d2_1 d3_2)
Text.URI.anon_142 d1_0 d2_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '.') Text.URI.decOctetP) (Text.URI.anon_141 d1_0 d2_1)
Text.URI.anon_143 d1_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '.') Text.URI.decOctetP) (Text.URI.anon_142 d1_0)
Text.URI.ipv4AddressP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.decOctetP Text.URI.anon_143
Text.URI.anon_101 result_0 = <{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) ']') (Text.Parsers.ZParsers.ParsersKernel.pure_36 result_0)
Text.URI.anon_102 !_vApplicative_0 v_1 versionV_2 dot_3 datV_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten (_predefined._Cons v_1 (_predefined._Cons versionV_2 (_predefined._Cons dot_3 (_predefined._Cons datV_4 _predefined._Nil)))))
Text.URI.anon_218 v_0 versionV_1 dot_2 datV_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten (_predefined._Cons v_0 (_predefined._Cons versionV_1 (_predefined._Cons dot_2 (_predefined._Cons datV_3 _predefined._Nil)))))
Text.URI.anon_103 v_0 versionV_1 dot_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!+>}> (Text.Parsers.ZParsers.ParsersKernel.satisfy (Text.URI.satisfiesAny (_predefined._Cons Text.URI.isUnreserved (_predefined._Cons Text.URI.isSubDelim (_predefined._Cons (<{StdChar.==_18}> ':') _predefined._Nil)))))) (Text.URI.anon_218 v_0 versionV_1 dot_2)
Text.URI.anon_104 v_0 versionV_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons '.' _predefined._Nil)) (Text.URI.anon_103 v_0 versionV_1)
Text.URI.anon_105 v_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!+>}> Text.Parsers.ZParsers.ParsersAccessories.hexDigit) (Text.URI.anon_104 v_0)
Text.URI.ipvFutureP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons 'v' _predefined._Nil)) Text.URI.anon_105
Text.URI.anon_136 !_vApplicative_0 ps_1 co_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) co_2)
Text.URI.anon_219 ps_0 co_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) co_1)
Text.URI.anon_137 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_219 ps_0)
<{Text.URI.c;288;32_138}> !g_l_0 = <{Text.URI.g_c1;288;37_251}> g_l_0
<{Text.URI.g_c1;288;37_251}> !g_l_0 = case g_l_0 (_predefined._Cons x_1_0 g_t_1_1 -> _predefined._Cons (Text.Parsers.ZParsers.ParsersDerived.count x_1_0 Text.Parsers.ZParsers.ParsersAccessories.hexDigit) (<{Text.URI.c;288;32_138}> g_t_1_1)) (_ -> _predefined._Nil)
Text.URI.h16 = Text.Parsers.ZParsers.ParsersAccessories.choice (<{Text.URI.c;288;32_138}> (_predefined._Cons 4 (_predefined._Cons 3 (_predefined._Cons 2 (_predefined._Cons 1 _predefined._Nil)))))
<{Text.URI.c;237;51_107}> !<{_v<_0}> !_vone_1 !<{_v+_2}> i_3 g_s_4 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_4 i_3)) (True -> _predefined._Cons Text.URI.h16 (<{Text.URI.c;237;51_107}> <{_v<_0}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_4)) (False -> _predefined._Nil) 
<{Text.URI.c;237;51_220}> !_vone_0 !<{_v+_1}> !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> _predefined._Cons Text.URI.h16 (<{Text.URI.c;237;51_220}> _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_2 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_3)) (False -> _predefined._Nil) 
<{Text.URI.c;237;51_221}> !<{_v+_0}> !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons Text.URI.h16 (<{Text.URI.c;237;51_221}> <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{Text.URI.c;237;51_222}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons Text.URI.h16 (<{Text.URI.c;237;51_222}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
Text.URI.h16n !_x_0::I = case _x_0 (0 -> Text.Parsers.ZParsers.ParsersKernel.pure_36 _predefined._Nil) (_ -> Control.Monad.sequence (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Data.List.intersperse (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' _predefined._Nil)) (<{Text.URI.c;237;51_222}> 1 _x_0)))
<{Text.URI.c;238;37_108}> !x_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 x_0)) (True -> _predefined._Cons (Text.URI.h16n x_0) (<{Text.URI.c;238;37_108}> (<{StdInt.+_6}> x_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
Text.URI.upToh16 n_0::I = Text.Parsers.ZParsers.ParsersAccessories.choice (StdList.reverse (<{Text.URI.c;238;37_108}> 0 n_0))
Text.URI.anon_133 !_vApplicative_0 ps_1 co_2 h_3 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) (<{StdList.++}> co_2 h_3))
Text.URI.anon_223 ps_0 co_1 h_2 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) (<{StdList.++}> co_1 h_2))
Text.URI.anon_134 ps_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.h16 (Text.URI.anon_223 ps_0 co_1)
Text.URI.anon_135 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_134 ps_0)
Text.URI.anon_130 !_vApplicative_0 ps_1 co_2 s_3 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) (<{StdList.++}> co_2 s_3))
Text.URI.anon_139 !_vApplicative_0 r_1 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdList.flatten r_1)
Text.URI.anon_224 r_0 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdList.flatten r_0)
Text.URI.ls32 = <{Text.Parsers.ZParsers.ParsersKernel.<!>}> (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.h16n 2) Text.URI.anon_224) Text.URI.ipv4AddressP
Text.URI.anon_225 ps_0 co_1 s_2 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) (<{StdList.++}> co_1 s_2))
Text.URI.anon_131 ps_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_225 ps_0 co_1)
Text.URI.anon_132 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_131 ps_0)
Text.URI.anon_126 !_vApplicative_0 ps_1 co_2 h_3 s_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) (<{StdList.++}> co_2 (<{StdList.++}> h_3 s_4)))
Text.URI.anon_226 ps_0 co_1 h_2 s_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) (<{StdList.++}> co_1 (<{StdList.++}> h_2 s_3)))
Text.URI.anon_127 ps_0 co_1 h_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_226 ps_0 co_1 h_2)
Text.URI.anon_106 h_0 = <{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) ':') (Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> h_0 (_predefined._Cons ':' _predefined._Nil)))
Text.URI.h16Colon = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.h16 Text.URI.anon_106
Text.URI.anon_128 ps_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.h16Colon (Text.URI.anon_127 ps_0 co_1)
Text.URI.anon_129 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_128 ps_0)
Text.URI.anon_122 !_vApplicative_0 ps_1 co_2 hs_3 s_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) (<{StdList.++}> co_2 (<{StdList.++}> (StdList.flatten hs_3) s_4)))
Text.URI.anon_227 ps_0 co_1 hs_2 s_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) (<{StdList.++}> co_1 (<{StdList.++}> (StdList.flatten hs_2) s_3)))
Text.URI.anon_123 ps_0 co_1 hs_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_227 ps_0 co_1 hs_2)
Text.URI.anon_124 ps_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersDerived.count 2 Text.URI.h16Colon) (Text.URI.anon_123 ps_0 co_1)
Text.URI.anon_125 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_124 ps_0)
Text.URI.anon_118 !_vApplicative_0 ps_1 co_2 hs_3 s_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten ps_1) (<{StdList.++}> co_2 (<{StdList.++}> (StdList.flatten hs_3) s_4)))
Text.URI.anon_228 ps_0 co_1 hs_2 s_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten ps_0) (<{StdList.++}> co_1 (<{StdList.++}> (StdList.flatten hs_2) s_3)))
Text.URI.anon_119 ps_0 co_1 hs_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_228 ps_0 co_1 hs_2)
Text.URI.anon_120 ps_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersDerived.count 3 Text.URI.h16Colon) (Text.URI.anon_119 ps_0 co_1)
Text.URI.anon_121 ps_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_120 ps_0)
Text.URI.anon_114 !_vApplicative_0 p_1 co_2 hs_3 s_4 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> p_1 (<{StdList.++}> co_2 (<{StdList.++}> (StdList.flatten hs_3) s_4)))
Text.URI.anon_229 p_0 co_1 hs_2 s_3 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> p_0 (<{StdList.++}> co_1 (<{StdList.++}> (StdList.flatten hs_2) s_3)))
Text.URI.anon_115 p_0 co_1 hs_2 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_229 p_0 co_1 hs_2)
Text.URI.anon_116 p_0 co_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersDerived.count 4 Text.URI.h16Colon) (Text.URI.anon_115 p_0 co_1)
Text.URI.anon_117 p_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) (Text.URI.anon_116 p_0)
Text.URI.anon_111 !_vApplicative_0 co_1 hs_2 s_3 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> co_1 (<{StdList.++}> (StdList.flatten hs_2) s_3))
Text.URI.anon_230 co_0 hs_1 s_2 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> co_0 (<{StdList.++}> (StdList.flatten hs_1) s_2))
Text.URI.anon_112 co_0 hs_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_230 co_0 hs_1)
Text.URI.anon_113 co_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersDerived.count 5 Text.URI.h16Colon) (Text.URI.anon_112 co_0)
Text.URI.anon_109 !_vApplicative_0 hs_1 s_2 = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (<{StdList.++}> (StdList.flatten hs_1) s_2)
Text.URI.anon_231 hs_0 s_1 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{StdList.++}> (StdList.flatten hs_0) s_1)
Text.URI.anon_110 hs_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.ls32 (Text.URI.anon_231 hs_0)
Text.URI.ipv6AddressP = Text.Parsers.ZParsers.ParsersAccessories.choice (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersDerived.count 6 Text.URI.h16Colon) Text.URI.anon_110) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons ':' (_predefined._Cons ':' _predefined._Nil))) Text.URI.anon_113) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.option _predefined._Nil Text.URI.h16) Text.URI.anon_117) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 2) Text.URI.anon_121) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 3) Text.URI.anon_125) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 4) Text.URI.anon_129) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 5) Text.URI.anon_132) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 6) Text.URI.anon_135) (_predefined._Cons (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.upToh16 7) Text.URI.anon_137) _predefined._Nil)))))))))
Text.URI.ipLiteralP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '[') (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> Text.URI.ipv6AddressP Text.URI.ipvFutureP)) Text.URI.anon_101
Text.URI.hostP = <{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> (<{Text.Parsers.ZParsers.ParsersKernel.<|>_37}> Text.URI.ipLiteralP Text.URI.ipv4AddressP) Text.URI.regNameP
Text.URI.anon_100 userinfoV_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.hostP (Text.URI.anon_99 userinfoV_0)
Text.URI.anon_97 result_0 = <{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '@') (Text.Parsers.ZParsers.ParsersKernel.pure_36 result_0)
Text.URI.userinfoP = <{Text.Parsers.ZParsers.ParsersDerived.<!*>}> (Text.Parsers.ZParsers.ParsersKernel.satisfy (Text.URI.satisfiesAny (_predefined._Cons Text.URI.isUnreserved (_predefined._Cons Text.URI.isSubDelim (_predefined._Cons (<{StdChar.==_18}> ':') _predefined._Nil)))))
Text.URI.authorityP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.userinfoP Text.URI.anon_97)) Text.URI.anon_100
Text.URI.hierPartP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.token (<{StdOverloaded.==;}> <{StdChar.==_18}>) (_predefined._Cons '/' (_predefined._Cons '/' _predefined._Nil))) Text.URI.authorityP)) Text.URI.anon_86
Text.URI.anon_235 !_vtoString_0 !_vtoString_1 !_vtoString_2 schemeV_3 pathV_4 portV_5 hostV_6 userinfoV_7 queryV_8 fragmentV_9 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_3) (Data.Maybe.fmap_12 StdList.toString_79 userinfoV_7) (Data.Maybe.fmap_12 (select _vtoString_1::<{StdOverloaded.toString;}> 0) hostV_6) portV_5 (select _vtoString_2::<{StdOverloaded.toString;}> 0 pathV_4) (Data.Maybe.fmap_12 StdList.toString_79 queryV_8) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_9))
Text.URI.anon_234 !_vtoString_0 !_vtoString_1 !_vtoString_2 schemeV_3 pathV_4 portV_5 hostV_6 userinfoV_7 queryV_8 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_235 _vtoString_0 _vtoString_1 _vtoString_2 schemeV_3 pathV_4 portV_5 hostV_6 userinfoV_7 queryV_8)
Text.URI.anon_233 !_vtoString_0 !_vtoString_1 !_vtoString_2 schemeV_3 pathV_4 !_x_5 = case _x_5 (_Tuple3 userinfoV_1_0 hostV_1_1 portV_1_2 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '?') Text.URI.queryP)) (Text.URI.anon_234 _vtoString_0 _vtoString_1 _vtoString_2 schemeV_3 pathV_4 portV_1_2 hostV_1_1 userinfoV_1_0)) 
Text.URI.anon_232 !_vtoString_0 !_vtoString_1 !_vtoString_2 schemeV_3 !_x_4 = case _x_4 (_Tuple2 authorityV_1_0 pathV_1_1 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.pure_36 (Data.Maybe.fromMaybe (_Tuple3 Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing) authorityV_1_0)) (Text.URI.anon_233 _vtoString_0 _vtoString_1 _vtoString_2 schemeV_3 pathV_1_1)) 
Text.URI.anon_239 !_vtoString_0 !_vtoString_1 schemeV_2 pathV_3 portV_4 hostV_5 userinfoV_6 queryV_7 fragmentV_8 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_2) (Data.Maybe.fmap_12 StdList.toString_79 userinfoV_6) (Data.Maybe.fmap_12 StdList.toString_79 hostV_5) portV_4 (select _vtoString_1::<{StdOverloaded.toString;}> 0 pathV_3) (Data.Maybe.fmap_12 StdList.toString_79 queryV_7) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_8))
Text.URI.anon_238 !_vtoString_0 !_vtoString_1 schemeV_2 pathV_3 portV_4 hostV_5 userinfoV_6 queryV_7 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_239 _vtoString_0 _vtoString_1 schemeV_2 pathV_3 portV_4 hostV_5 userinfoV_6 queryV_7)
Text.URI.anon_237 !_vtoString_0 !_vtoString_1 schemeV_2 pathV_3 !_x_4 = case _x_4 (_Tuple3 userinfoV_1_0 hostV_1_1 portV_1_2 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '?') Text.URI.queryP)) (Text.URI.anon_238 _vtoString_0 _vtoString_1 schemeV_2 pathV_3 portV_1_2 hostV_1_1 userinfoV_1_0)) 
Text.URI.anon_236 !_vtoString_0 !_vtoString_1 schemeV_2 !_x_3 = case _x_3 (_Tuple2 authorityV_1_0 pathV_1_1 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.pure_36 (Data.Maybe.fromMaybe (_Tuple3 Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing) authorityV_1_0)) (Text.URI.anon_237 _vtoString_0 _vtoString_1 schemeV_2 pathV_1_1)) 
Text.URI.anon_243 !_vtoString_0 schemeV_1 pathV_2 portV_3 hostV_4 userinfoV_5 queryV_6 fragmentV_7 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 (select _vtoString_0::<{StdOverloaded.toString;}> 0) schemeV_1) (Data.Maybe.fmap_12 StdList.toString_79 userinfoV_5) (Data.Maybe.fmap_12 StdList.toString_79 hostV_4) portV_3 (StdList.toString_79 pathV_2) (Data.Maybe.fmap_12 StdList.toString_79 queryV_6) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_7))
Text.URI.anon_242 !_vtoString_0 schemeV_1 pathV_2 portV_3 hostV_4 userinfoV_5 queryV_6 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_243 _vtoString_0 schemeV_1 pathV_2 portV_3 hostV_4 userinfoV_5 queryV_6)
Text.URI.anon_241 !_vtoString_0 schemeV_1 pathV_2 !_x_3 = case _x_3 (_Tuple3 userinfoV_1_0 hostV_1_1 portV_1_2 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '?') Text.URI.queryP)) (Text.URI.anon_242 _vtoString_0 schemeV_1 pathV_2 portV_1_2 hostV_1_1 userinfoV_1_0)) 
Text.URI.anon_240 !_vtoString_0 schemeV_1 !_x_2 = case _x_2 (_Tuple2 authorityV_1_0 pathV_1_1 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.pure_36 (Data.Maybe.fromMaybe (_Tuple3 Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing) authorityV_1_0)) (Text.URI.anon_241 _vtoString_0 schemeV_1 pathV_1_1)) 
Text.URI.anon_82 !_vtoString_0 schemeV_1 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.hierPartP (Text.URI.anon_240 _vtoString_0 schemeV_1)
Text.URI.anon_83 l_0 ls_1 = <{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) ':') (Text.Parsers.ZParsers.ParsersKernel.pure_36 (_predefined._Cons l_0 ls_1))
Text.URI.anon_84 l_0::C = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Text.Parsers.ZParsers.ParsersDerived.<!*>}> (<{Text.Parsers.ZParsers.ParsersKernel.<!>}> Text.Parsers.ZParsers.ParsersAccessories.alphaNum (Text.Parsers.ZParsers.ParsersAccessories.oneOf (_predefined._Cons '+' (_predefined._Cons '-' (_predefined._Cons '.' _predefined._Nil)))))) (Text.URI.anon_83 l_0)
Text.URI.schemeP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.Parsers.ZParsers.ParsersAccessories.letter Text.URI.anon_84
Text.URI.anon_248 schemeV_0 pathV_1 portV_2 hostV_3 userinfoV_4 queryV_5 fragmentV_6 = Text.Parsers.ZParsers.ParsersKernel.pure_36 (Text.URI._URI (Data.Maybe.fmap_12 StdList.toString_79 schemeV_0) (Data.Maybe.fmap_12 StdList.toString_79 userinfoV_4) (Data.Maybe.fmap_12 StdList.toString_79 hostV_3) portV_2 (StdList.toString_79 pathV_1) (Data.Maybe.fmap_12 StdList.toString_79 queryV_5) (Data.Maybe.fmap_12 StdList.toString_79 fragmentV_6))
Text.URI.anon_247 schemeV_0 pathV_1 portV_2 hostV_3 userinfoV_4 queryV_5 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '#') Text.URI.fragmentP)) (Text.URI.anon_248 schemeV_0 pathV_1 portV_2 hostV_3 userinfoV_4 queryV_5)
Text.URI.anon_246 schemeV_0 pathV_1 !_x_2 = case _x_2 (_Tuple3 userinfoV_1_0 hostV_1_1 portV_1_2 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '?') Text.URI.queryP)) (Text.URI.anon_247 schemeV_0 pathV_1 portV_1_2 hostV_1_1 userinfoV_1_0)) 
Text.URI.anon_245 schemeV_0 !_x_1 = case _x_1 (_Tuple2 authorityV_1_0 pathV_1_1 -> <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.pure_36 (Data.Maybe.fromMaybe (_Tuple3 Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing) authorityV_1_0)) (Text.URI.anon_246 schemeV_0 pathV_1_1)) 
Text.URI.anon_244 schemeV_0 = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.URI.hierPartP (Text.URI.anon_245 schemeV_0)
Text.URI.uriP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.URI.optionMaybe Text.URI.schemeP) Text.URI.anon_244
Text.URI.parseURI s_0 = <{Text.URI._c;57;14_252}> (Text.Parsers.ZParsers.ParsersKernel.parse Text.URI.uriP (Text.URI.ss_66 s_0) "user input" "")
<{Text.URI._c;57;14_252}> !_x_0 = case _x_0 (Text.Parsers.ZParsers.ParsersKernel.Succ _x_1_0 -> case _x_1_0 (_predefined._Cons r_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> Data.Maybe.Just r_2_0) ) ) (_ -> Data.Maybe.Nothing)
Text.URI.digitToHex_67::I !d_0::I = case (StdBool.not (<{StdInt.<_17}> 9 d_0)) (True -> <{StdInt.+_6}> d_0 (StdInt.toInt_20 '0')) (False -> <{StdInt.-_7}> (<{StdInt.+_6}> d_0 (StdInt.toInt_20 'A')) 10) 
Text.URI.charToHex_68 !c_0::C = let i_1_0::I = StdInt.toInt_20 c_0 in <{_Tuple2!3}> (StdChar.toChar_21 (Text.URI.digitToHex_67 (<{StdInt.>>}> i_1_0 4))) (StdChar.toChar_21 (Text.URI.digitToHex_67 (StdInt.bitand i_1_0 15)))
Text.URI.escapeChar !f_0 c_1::C = case (case (f_0 c_1) (True -> StdBool.not (<{StdChar.==_18}> c_1 '%')) (False -> False) ) (True -> _predefined._Cons c_1 _predefined._Nil) (False -> let _x_2_0 = Text.URI.charToHex_68 c_1 in _predefined._Cons '%' (_predefined._Cons (select _x_2_0::_Tuple2 0) (_predefined._Cons (select _x_2_0::_Tuple2 1) _predefined._Nil))) 
Text.URI.escapeString f_0 s_1 = StdList.toString_79 (Data.List.concatMap (Text.URI.escapeChar f_0) (StdList.fromString_78 s_1))
Text.URI.uriQueryItems !u_0 = Data.Maybe.maybe _predefined._Nil Text.Encodings.UrlEncoding.urlDecodePairs (select u_0::Text.URI._URI 5)
Text.URI.pathToSegments !p_0 = Text.split_12 "/" p_0
Text.URI.uriPathSegments !u_0 = Text.URI.pathToSegments (select u_0::Text.URI._URI 4)
Text.URI.segmentsToPath !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 ("" -> case _x_1_1 (_predefined._Nil -> "/") ) ) (_ -> Text.join_5 "/" (StdList.map (Text.URI.escapeString Text.URI.okInPathSegment) _x_0))
Text.URI.isReference::B u_0 = StdList.all Data.Maybe.isNothing (_predefined._Cons (select u_0::Text.URI._URI 2) (_predefined._Cons (select u_0::Text.URI._URI 0) _predefined._Nil))
Text.URI.isRelative::B u_0 = case (Text.URI.isReference u_0) (True -> StdBool.not (Text.startsWith_13 "/" (select u_0::Text.URI._URI 4))) (False -> False) 
Text.URI.isGenDelim::B c_0::C = Data.List.elem (<{StdOverloaded.==;}> <{StdChar.==_18}>) c_0 (_predefined._Cons ':' (_predefined._Cons '/' (_predefined._Cons '?' (_predefined._Cons '#' (_predefined._Cons '[' (_predefined._Cons ']' (_predefined._Cons '@' _predefined._Nil)))))))
Text.URI.isReserved::B c_0::C = case (Text.URI.isGenDelim c_0) (True -> True) (False -> Text.URI.isSubDelim c_0) 
Text.URI.hdi_77::I !d_0::C = case (StdChar.isDigit d_0) (True -> StdChar.digitToInt d_0) (False -> <{StdInt.+_6}> (<{StdInt.-_7}> (StdInt.toInt_20 (StdChar.toLower d_0)) (StdInt.toInt_20 'a')) 10) 
Text.URI.anon_75 !_vApplicative_0 d1_1::C d2_2::C = select _vApplicative_0::<{Control.Applicative.Applicative;}> 1 (StdChar.toChar_21 (<{StdInt.+_6}> (<{StdInt.*_9}> (Text.URI.hdi_77 d1_1) 16) (Text.URI.hdi_77 d2_2)))
Text.URI.anon_249 d1_0::C d2_1::C = Text.Parsers.ZParsers.ParsersKernel.pure_36 (StdChar.toChar_21 (<{StdInt.+_6}> (<{StdInt.*_9}> (Text.URI.hdi_77 d1_0) 16) (Text.URI.hdi_77 d2_1)))
Text.URI.anon_76 d1_0::C = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) Text.Parsers.ZParsers.ParsersAccessories.hexDigit (Text.URI.anon_249 d1_0)
Text.URI.percentEncodedP = <{Control.Monad.>>=}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (<{Control.Monad.>>|}> (<{Control.Monad.Monad;}> Text.Parsers.ZParsers.ParsersKernel.bind_41 (<{Control.Applicative.Applicative;}> <{Text.Parsers.ZParsers.ParsersKernel.<*>_35}> Text.Parsers.ZParsers.ParsersKernel.pure_36 (<{Data.Functor.Functor;}> Text.Parsers.ZParsers.ParsersKernel.fmap_34))) (Text.Parsers.ZParsers.ParsersKernel.symbol (<{StdOverloaded.==;}> <{StdChar.==_18}>) '%') Text.Parsers.ZParsers.ParsersAccessories.hexDigit) Text.URI.anon_76
Text.URI.reservedP = Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isReserved
Text.URI.genDelimP = Text.Parsers.ZParsers.ParsersKernel.satisfy Text.URI.isGenDelim
Text.URI.anon_152 !_vtoString_0 s_1 = <{StdString.+++_11}> ":" (select _vtoString_0::<{StdOverloaded.toString;}> 0 s_1)
Text.URI.anon_151 !s_0 = <{StdString.+++_11}> s_0 "@"
Text.URI.anon_150 !s_0 = <{StdString.+++_11}> s_0 ":"
Text.URI.anon_250 !s_0::I = <{StdString.+++_11}> ":" (StdString.toString_5 s_0)
Text.URI.toString_15 !u_0 = Text.join_5 "" (_predefined._Cons (Data.Maybe.maybe "" Text.URI.anon_150 (select u_0::Text.URI._URI 0)) (_predefined._Cons (<{Text.URI._if;29;11_253}> (Data.Maybe.isJust (select u_0::Text.URI._URI 2))) (_predefined._Cons (Data.Maybe.maybe "" Text.URI.anon_151 (select u_0::Text.URI._URI 1)) (_predefined._Cons (Data.Maybe.fromMaybe "" (select u_0::Text.URI._URI 2)) (_predefined._Cons (Data.Maybe.maybe "" Text.URI.anon_250 (select u_0::Text.URI._URI 3)) (_predefined._Cons (<{Text.URI._if;33;11_256}> (Text.URI._f255_255 (Data.Maybe.isJust (select u_0::Text.URI._URI 2)) u_0) u_0) (_predefined._Cons (Data.Maybe.maybe "" (<{StdString.+++_11}> "?") (select u_0::Text.URI._URI 5)) (_predefined._Cons (Data.Maybe.maybe "" (<{StdString.+++_11}> "#") (select u_0::Text.URI._URI 6)) _predefined._Nil))))))))
<{Text.URI._if;33;11_256}> !_x_0::B !u_1 = case _x_0 (True -> <{StdString.+++_11}> "/" (select u_1::Text.URI._URI 4)) (_ -> select u_1::Text.URI._URI 4)
Text.URI._f255_255::B !_x_0::B u_1 = case _x_0 (True -> StdBool.not (Text.URI._f254_254 (Text.startsWith_13 "/" (select u_1::Text.URI._URI 4)) u_1)) (_ -> False)
Text.URI._f254_254::B !_x_0::B u_1 = case _x_0 (True -> True) (_ -> <{StdString.==_2}> (select u_1::Text.URI._URI 4) "")
<{Text.URI._if;29;11_253}> !_x_0::B = case _x_0 (True -> "//") (_ -> "")
<{Text.URI.TD;URI}> _x_0::B = _predefined._Nil


|| Converted Records
:: Text.URI._URI = {Text.URI.uriScheme, Text.URI.uriUserInfo, Text.URI.uriRegName, Text.URI.uriPort, Text.URI.uriPath, Text.URI.uriQuery, Text.URI.uriFragment}

:: <{Text.URI.gEq_s;}> = {!Text.URI.gEq_s}

:: <{Text.URI.gEq_ss;}> = {!Text.URI.gEq_ss}

:: <{Text.URI.gEq_sss;}> = {!Text.URI.gEq_sss}

:: <{Text.URI.gEq_ssss;}> = {!Text.URI.gEq_ssss}

:: <{Text.URI.gEq_sssss;}> = {!Text.URI.gEq_sssss}

:: <{Text.URI.gEq_ssssss;}> = {!Text.URI.gEq_ssssss}

:: <{Text.URI.gEq_sssssss;}> = {!Text.URI.gEq_sssssss}

:: <{Text.URI.gEq_ssssssss;}> = {!Text.URI.gEq_ssssssss}

:: <{Text.URI.gEq_sssssssss;}> = {!Text.URI.gEq_sssssssss}

:: <{Text.URI.bimap_s;}> = {Text.URI.bimap_s}

:: <{Text.URI.bimap_ss;}> = {Text.URI.bimap_ss}

:: <{Text.URI.bimap_sss;}> = {Text.URI.bimap_sss}

