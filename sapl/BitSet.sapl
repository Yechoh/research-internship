|| ?module? BitSet


BitSet.NewBitSet !n_elements_0::I = let !n_map_1_0::I = <{StdInt./_10}> (<{StdInt.*_9}> (<{StdInt./_10}> (<{StdInt.-_7}> (<{StdInt.+_6}> n_elements_0 m_1_2) StdInt.one_11) m_1_2) m_1_2) 32, !set_1_1 = BitSet._BitSet n_elements_0 (_SystemArray.createArray_9 n_map_1_0 0), m_1_2::I = 32 in set_1_1
BitSet.EmptyBitSet = BitSet.NewBitSet 0
<{BitSet.cu;78;29_10}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select (select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3)::_Tuple2 1) in <{BitSet.cu;78;29_10}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{BitSet.cu;78;29_39}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select (_SystemArray.uselect_14 g_a_4 c_i_2)::_Tuple2 1) in <{BitSet.cu;78;29_39}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{BitSet.cu;78;29_40}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select (_SystemArray.uselect_14 g_a_3 c_i_1)::_Tuple2 1) in <{BitSet.cu;78;29_40}> (_SystemArray.update_13 c_a_0 c_i_1 0) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
BitSet.ClearBitSet !bitset_0 = case bitset_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let _x_2_0::I = _SystemArray.usize_15 map_1_1, g_s2_2_1 = <{StdInt.-_7}> (select _x_2_0::_Tuple2 0) 1 in update bitset_0::BitSet._BitSet [1:<{BitSet.cu;78;29_40}> (_SystemArray._createArray_8 (<{StdInt.+_6}> g_s2_2_1 StdInt.one_11)) 0 g_s2_2_1 (select _x_2_0::_Tuple2 1)]) 
BitSet.equal_fset_11 !_vArray_0 !_vArray_1 !<{_v==_2}> !i_3::I !limit_4::I map1_5 map2_6 = case (<{StdInt.==_16}> i_3 limit_4) (True -> _Tuple3 True map1_5 map2_6) (False -> let !_x_2_0 = select _vArray_0::<{_SystemArray.Array;}> 6 map1_5 i_3, !_x_2_1 = select _vArray_1::<{_SystemArray.Array;}> 6 map2_6 i_3 in case (StdBool.not (select <{_v==_2}>::<{StdOverloaded.==;}> 0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) (True -> _Tuple3 False (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> BitSet.equal_fset_11 _vArray_0 _vArray_1 <{_v==_2}> (<{StdInt.+_6}> i_3 StdInt.one_11) limit_4 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) ) 
BitSet.equal_fset_41 !_vArray_0 !<{_v==_1}> !i_2::I !limit_3::I map1_4 map2_5 = case (<{StdInt.==_16}> i_2 limit_3) (True -> _Tuple3 True map1_4 map2_5) (False -> let !_x_2_0 = _SystemArray.uselect_14 map1_4 i_2, !_x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 map2_5 i_2 in case (StdBool.not (select <{_v==_1}>::<{StdOverloaded.==;}> 0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) (True -> _Tuple3 False (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> BitSet.equal_fset_41 _vArray_0 <{_v==_1}> (<{StdInt.+_6}> i_2 StdInt.one_11) limit_3 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) ) 
BitSet.equal_fset_42 !<{_v==_0}> !i_1::I !limit_2::I map1_3 map2_4 = case (<{StdInt.==_16}> i_1 limit_2) (True -> _Tuple3 True map1_3 map2_4) (False -> let !_x_2_0 = _SystemArray.uselect_14 map1_3 i_1, !_x_2_1 = _SystemArray.uselect_14 map2_4 i_1 in case (StdBool.not (select <{_v==_0}>::<{StdOverloaded.==;}> 0 (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) (True -> _Tuple3 False (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> BitSet.equal_fset_42 <{_v==_0}> (<{StdInt.+_6}> i_1 StdInt.one_11) limit_2 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) ) 
BitSet.equal_fset_43 !i_0::I !limit_1::I map1_2 map2_3 = case (<{StdInt.==_16}> i_0 limit_1) (True -> _Tuple3 True map1_2 map2_3) (False -> let !_x_2_0 = _SystemArray.uselect_14 map1_2 i_0, !_x_2_1 = _SystemArray.uselect_14 map2_3 i_0 in case (StdBool.not (<{StdInt.==_16}> (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0))) (True -> _Tuple3 False (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) (False -> BitSet.equal_fset_43 (<{StdInt.+_6}> i_0 StdInt.one_11) limit_1 (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1)) ) 
BitSet.EqualBitSet !fset1_0 !fset2_1 = case fset1_0 (BitSet._BitSet n_elements1_1_0 map1_1_1 -> case fset2_1 (BitSet._BitSet n_elements2_2_0 map2_2_1 -> case (StdBool.not (<{StdInt.==_16}> n_elements1_1_0 n_elements2_2_0)) (True -> <{_Tuple3!7}> False fset1_0 fset2_1) (False -> let !n_ints_4_0::I = <{StdInt./_10}> (<{StdInt.*_9}> (<{StdInt./_10}> (<{StdInt.-_7}> (<{StdInt.+_6}> n_elements1_1_0 m_4_2) StdInt.one_11) m_4_2) m_4_2) 32, !_x_4_1 = BitSet.equal_fset_43 0 n_ints_4_0 map1_1_1 map2_2_1, m_4_2::I = 32 in <{_Tuple3!7}> (select _x_4_1::_Tuple3 0) (update fset1_0::BitSet._BitSet [1:select _x_4_1::_Tuple3 1]) (update fset2_1::BitSet._BitSet [1:select _x_4_1::_Tuple3 2])) ) ) 
BitSet.gbit_34 !fs_0 !x_1::I !op_2 = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in update fs_0::BitSet._BitSet [1:_SystemArray.update_13 (select _x_2_1::_Tuple2 1) div_wsize_2_0 (op_2 (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11))))]) 
BitSet.range_check_33 !_vto_0 !s_1 x_2 id_3 = case s_1 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !i_elem_2_0::I = select _vto_0::<{StdOverloaded.toInt;}> 0 x_2 in case (case (<{StdInt.<_17}> i_elem_2_0 0) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> i_elem_2_0 n_elements_1_0)) ) (True -> StdMisc.abort (<{StdString.+++_11}> "RANGE_CHECK!: " (<{StdString.+++_11}> id_3 (<{StdString.+++_11}> " set t!oo! small, set size: " (<{StdString.+++_11}> (StdString.toString_5 n_elements_1_0) (<{StdString.+++_11}> " asked for element: " (StdString.toString_5 i_elem_2_0))))))) (False -> _Tuple2 i_elem_2_0 s_1) ) 
BitSet.anon_12::I !a1_0::I !a2_1::I = StdInt.bitand a1_0 (StdInt.bitnot a2_1)
BitSet.gbit_44 !fs_0 !x_1::I = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in update fs_0::BitSet._BitSet [1:_SystemArray.update_13 (select _x_2_1::_Tuple2 1) div_wsize_2_0 (BitSet.anon_12 (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11))))]) 
BitSet.DelBitSet !_vfrom_0 !_vto_1 !fset_2 !elem_3 = let !_x_1_0 = BitSet.range_check_33 _vto_1 fset_2 elem_3 "DelBitSet" in BitSet.gbit_44 (select _x_1_0::_Tuple2 1) (select _x_1_0::_Tuple2 0)
BitSet.gbit_36 !fs_0 !x_1::I !op_2 = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in update fs_0::BitSet._BitSet [1:_SystemArray.update_13 (select _x_2_1::_Tuple2 1) div_wsize_2_0 (op_2 (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11))))]) 
BitSet.range_check_35 !_vto_0 !s_1 x_2 id_3 = case s_1 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !i_elem_2_0::I = select _vto_0::<{StdOverloaded.toInt;}> 0 x_2 in case (case (<{StdInt.<_17}> i_elem_2_0 0) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> i_elem_2_0 n_elements_1_0)) ) (True -> StdMisc.abort (<{StdString.+++_11}> "RANGE_CHECK!: " (<{StdString.+++_11}> id_3 (<{StdString.+++_11}> " set t!oo! small, set size: " (<{StdString.+++_11}> (StdString.toString_5 n_elements_1_0) (<{StdString.+++_11}> " asked for element: " (StdString.toString_5 i_elem_2_0))))))) (False -> _Tuple2 i_elem_2_0 s_1) ) 
BitSet.gbit_45 !fs_0 !x_1::I = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in update fs_0::BitSet._BitSet [1:_SystemArray.update_13 (select _x_2_1::_Tuple2 1) div_wsize_2_0 (StdInt.bitor (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11))))]) 
BitSet.AddBitSet !_vto_0 !fset_1 !elem_2 = let !_x_1_0 = BitSet.range_check_35 _vto_0 fset_1 elem_2 "AddBitSet" in BitSet.gbit_45 (select _x_1_0::_Tuple2 1) (select _x_1_0::_Tuple2 0)
BitSet.complement_fset_loop_13 !i_0::I !limit_1::I !map_2 = case (<{StdInt.==_16}> i_0 limit_1) (True -> map_2) (False -> let !_x_2_0 = _SystemArray.uselect_14 map_2 i_0, !map_2_1 = _SystemArray.update_13 (select _x_2_0::_Tuple2 1) i_0 (StdInt.bitnot (select _x_2_0::_Tuple2 0)) in BitSet.complement_fset_loop_13 (<{StdInt.+_6}> i_0 StdInt.one_11) limit_1 map_2_1) 
BitSet.ComplementBitSet !fset_0 = case fset_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !_x_2_0 = _SystemArray.usize_15 map_1_1, !fset_2_1 = update fset_0::BitSet._BitSet [1:BitSet.complement_fset_loop_13 0 (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1)] in fset_2_1) 
BitSet.gbit_38 !fs_0 !x_1::I op_2 = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in _Tuple2 (op_2 (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11)))) (update fs_0::BitSet._BitSet [1:select _x_2_1::_Tuple2 1])) 
BitSet.range_check_37 !_vto_0 !s_1 x_2 id_3 = case s_1 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !i_elem_2_0::I = select _vto_0::<{StdOverloaded.toInt;}> 0 x_2 in case (case (<{StdInt.<_17}> i_elem_2_0 0) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> i_elem_2_0 n_elements_1_0)) ) (True -> StdMisc.abort (<{StdString.+++_11}> "RANGE_CHECK!: " (<{StdString.+++_11}> id_3 (<{StdString.+++_11}> " set t!oo! small, set size: " (<{StdString.+++_11}> (StdString.toString_5 n_elements_1_0) (<{StdString.+++_11}> " asked for element: " (StdString.toString_5 i_elem_2_0))))))) (False -> _Tuple2 i_elem_2_0 s_1) ) 
BitSet.range_check_46 !s_0 !x_1::I id_2 = case s_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !i_elem_2_0::I = StdInt.toInt_21 x_1 in case (case (<{StdInt.<_17}> i_elem_2_0 0) (True -> True) (False -> StdBool.not (<{StdInt.<_17}> i_elem_2_0 n_elements_1_0)) ) (True -> StdMisc.abort (<{StdString.+++_11}> "RANGE_CHECK!: " (<{StdString.+++_11}> id_2 (<{StdString.+++_11}> " set t!oo! small, set size: " (<{StdString.+++_11}> (StdString.toString_5 n_elements_1_0) (<{StdString.+++_11}> " asked for element: " (StdString.toString_5 i_elem_2_0))))))) (False -> _Tuple2 i_elem_2_0 s_0) ) 
BitSet.gbit_47 !fs_0 !x_1::I = case fs_0 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !div_wsize_2_0::I = <{StdInt.>>}> x_1 5, !_x_2_1 = _SystemArray.uselect_14 map_1_1 div_wsize_2_0 in _Tuple2 (StdInt.bitand (select _x_2_1::_Tuple2 0) (<{StdInt.<<}> 1 (StdInt.bitand x_1 (<{StdInt.-_7}> 32 StdInt.one_11)))) (update fs_0::BitSet._BitSet [1:select _x_2_1::_Tuple2 1])) 
BitSet.isBitSetMember !fset_0 !elem_1::I = let !_x_1_0 = BitSet.range_check_46 fset_0 elem_1 "isBitSetMember", !_x_1_1 = BitSet.gbit_47 (select _x_1_0::_Tuple2 1) (select _x_1_0::_Tuple2 0) in _Tuple2 (StdBool.not (<{StdInt.==_16}> (select _x_1_1::_Tuple2 0) 0)) (select _x_1_1::_Tuple2 1)
BitSet.enum_setSt_14 f_0 !n_elements_1::I !i_2::I fset_3 state_4 = case (<{StdInt.==_16}> i_2 n_elements_1) (True -> _Tuple2 fset_3 state_4) (False -> let !_x_2_0 = BitSet.isBitSetMember fset_3 i_2 in case (select _x_2_0::_Tuple2 0) (True -> BitSet.enum_setSt_14 f_0 n_elements_1 (<{StdInt.+_6}> i_2 StdInt.one_11) (select _x_2_0::_Tuple2 1) (f_0 i_2 state_4)) (False -> BitSet.enum_setSt_14 f_0 n_elements_1 (<{StdInt.+_6}> i_2 StdInt.one_11) (select _x_2_0::_Tuple2 1) state_4) ) 
BitSet.enum_setSt f_0 !fset_1 state_2 = case fset_1 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !_x_2_0 = BitSet.enum_setSt_14 f_0 n_elements_1_0 0 fset_1 state_2 in _Tuple2 (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1)) 
BitSet.get_bit_set_word_at_index_31 !index_0::I !bitset_1 = case bitset_1 (BitSet._BitSet n_elements_1_0 map_1_1 -> let !_x_2_0 = _SystemArray.uselect_14 map_1_1 index_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (update bitset_1::BitSet._BitSet [1:select _x_2_0::_Tuple2 1])) 
<{BitSet.TD;BitSet}> _x_0::B = _predefined._Nil
<{BitSet.TD;BitSetAccessors;}> _x_0::B = _predefined._Nil


|| Converted Records
:: BitSet._BitSet = {!BitSet.n_elements::I, !BitSet.map}

:: <{BitSet.BitSetAccessors;}> = {!BitSet.get_bit_set_word_at_index}

