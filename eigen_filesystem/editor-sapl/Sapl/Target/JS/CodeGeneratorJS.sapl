|| ?module? Sapl.Target.JS.CodeGeneratorJS


Sapl.Target.JS.CodeGeneratorJS.urlEncodeChar_29 c1_0::C c2_1::C !_x_2::C = case _x_2 ('_' -> _predefined._Cons '_' _predefined._Nil) ('.' -> _predefined._Cons '_' _predefined._Nil) (' ' -> _predefined._Cons '+' _predefined._Nil) ('$' -> _predefined._Cons '$' _predefined._Nil) (_ -> _predefined._Cons '$' (_predefined._Cons c1_0 (_predefined._Cons c2_1 _predefined._Nil)))
Sapl.Target.JS.CodeGeneratorJS.digitToHex_28::I !d_0::I = case (StdBool.not (<{StdInt.<_17}> 9 d_0)) (True -> <{StdInt.+_6}> d_0 (StdInt.toInt_20 '0')) (False -> <{StdInt.-_7}> (<{StdInt.+_6}> d_0 (StdInt.toInt_20 'A')) 10) 
Sapl.Target.JS.CodeGeneratorJS.charToHex_30 !c_0::C = let i_1_0::I = StdInt.toInt_20 c_0 in <{_Tuple2!3}> (StdChar.toChar_21 (Sapl.Target.JS.CodeGeneratorJS.digitToHex_28 (<{StdInt.>>}> i_1_0 4))) (StdChar.toChar_21 (Sapl.Target.JS.CodeGeneratorJS.digitToHex_28 (StdInt.bitand i_1_0 15)))
<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_31}> !_x_0 = case _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 ('$' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('e' -> case _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> case _x_5_0 ('v' -> case _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> case _x_7_0 ('a' -> case _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> case _x_9_0 ('l' -> case _x_9_1 (_predefined._Nil -> _x_0) ) ) ) ) ) ) ) ) ) (_ -> case (StdChar.isAlphanum _x_1_0) (True -> _predefined._Cons _x_1_0 (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_31}> _x_1_1)) (False -> let _x_3_0 = Sapl.Target.JS.CodeGeneratorJS.charToHex_30 _x_1_0 in <{StdList.++}> (Sapl.Target.JS.CodeGeneratorJS.urlEncodeChar_29 (select _x_3_0::_Tuple2 0) (select _x_3_0::_Tuple2 1) _x_1_0) (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_31}> _x_1_1)) )) 
Sapl.Target.JS.CodeGeneratorJS.escapeName !prefix_0 !name_1 !a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 prefix_0) (StdList.toString_79 (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_31}> (StdList.fromString_78 name_1)))
Sapl.Target.JS.CodeGeneratorJS.foldl_117 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_117 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_116 x_0 xs_1 = _predefined._Cons x_0 xs_1
Sapl.Target.JS.CodeGeneratorJS.anon_115 !f_0 _x_1 v_2 acc_3 = f_0 v_2 acc_3
Sapl.Target.JS.CodeGeneratorJS.foldl_114 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_114 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.newState !f_0 !tramp_1::B !p_2 = Sapl.Target.JS.CodeGeneratorJS._CoderState Data.Maybe.Nothing Data.Maybe.Nothing Data.Maybe.Nothing _predefined._Nil False _predefined._Nil (select p_2::Sapl.SaplParser._ParserState 1) (select p_2::Sapl.SaplParser._ParserState 2) (select p_2::Sapl.SaplParser._ParserState 3) (select f_0::Sapl.Target.Flavour._Flavour 2) (select f_0::Sapl.Target.Flavour._Flavour 3) tramp_1 (select f_0::Sapl.Target.Flavour._Flavour 0)
Sapl.Target.JS.CodeGeneratorJS.upd_43 sf_0 !_x_1 fun_2 = case _x_1 (_Tuple2 nfs_1_0 genfuns_1_1 -> let _x_2_0 = Sapl.Target.JS.Lifting.prepareFun sf_0 fun_2 genfuns_1_1 in _Tuple2 (_predefined._Cons (select _x_2_0::_Tuple2 0) nfs_1_0) (Data.Map.union (<{StdOverloaded.<;}> <{StdString.<_3}>) genfuns_1_1 (select _x_2_0::_Tuple2 1))) 
Sapl.Target.JS.CodeGeneratorJS.foldl_112 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_112 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.foldl_109 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_109 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_36 i_0::I a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "a") (StdString.toString_5 (<{StdInt.-_7}> i_0 1))
Sapl.Target.JS.CodeGeneratorJS.condForce !_vAppendable_0 !_x_1::B !e_2 !a_3 = case _x_1 (True -> <{Text.StringAppender.<++_5}> (select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_5}> a_3 "Sapl.feval(") e_2) ")") (False -> select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 a_3 e_2) 
Sapl.Target.JS.CodeGeneratorJS.condForce_282 !_x_0::B !e_1 !a_2 = case _x_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "Sapl.feval(") e_1) ")") (False -> <{Text.StringAppender.<++_8}> a_2 e_1) 
Sapl.Target.JS.CodeGeneratorJS.strictsep_37 !_visStrictVar_0 !_vlength_1 args_2 !_x_3 arg_4 = case _x_3 (_Tuple2 a_1_0 i_1_1 -> case (<{StdInt.<_17}> i_1_1 (select _vlength_1::<{StdOverloaded.length;}> 0 args_2)) (True -> _Tuple2 (<{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select _visStrictVar_0::<{Sapl.SaplStruct.isStrictVar;}> 0 arg_4) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) ",") (<{StdInt.+_6}> i_1_1 1)) (False -> _Tuple2 (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select _visStrictVar_0::<{Sapl.SaplStruct.isStrictVar;}> 0 arg_4) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) i_1_1) ) 
Sapl.Target.JS.CodeGeneratorJS.strictsep_283 !_visStrictVar_0 !args_1 !_x_2 arg_3 = case _x_2 (_Tuple2 a_1_0 i_1_1 -> case (<{StdInt.<_17}> i_1_1 (StdList.length_47 args_1)) (True -> _Tuple2 (<{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select _visStrictVar_0::<{Sapl.SaplStruct.isStrictVar;}> 0 arg_3) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) ",") (<{StdInt.+_6}> i_1_1 1)) (False -> _Tuple2 (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select _visStrictVar_0::<{Sapl.SaplStruct.isStrictVar;}> 0 arg_3) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) i_1_1) ) 
Sapl.Target.JS.CodeGeneratorJS.foldl_284 !_visStrictVar_0 args_1 !r_2 !_x_3 = case _x_3 (_predefined._Nil -> r_2) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_284 _visStrictVar_0 args_1 (Sapl.Target.JS.CodeGeneratorJS.strictsep_283 _visStrictVar_0 args_1 r_2 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_35 !_visStrictVar_0 !args_1 a_2 = select (Sapl.Target.JS.CodeGeneratorJS.foldl_284 _visStrictVar_0 args_1 (_Tuple2 a_2 1) args_1)::_Tuple2 0
<{Sapl.Target.JS.CodeGeneratorJS.c;186;48_34}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons (<{StdString.+++_11}> "a" (StdString.toString_5 (<{StdInt.-_7}> i_0 1))) (<{Sapl.Target.JS.CodeGeneratorJS.c;186;48_34}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure !_visStrictVar_0 name_1 args_2 s_3 a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "function ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1)) "$eval(") (Text.StringAppender.joinList (<{StdOverloaded.toString;}> StdString.toString_9) "," (<{Sapl.Target.JS.CodeGeneratorJS.c;186;48_34}> 1 (StdList.length_47 args_2)))) "){return ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1)) "(") (Sapl.Target.JS.CodeGeneratorJS.anon_35 _visStrictVar_0 args_2)) ");};"
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder !_vTermCoder_0 !_x_1 !sep_2 !s_3 !a_4 = case _x_1 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_1_0 s_3 a_4) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_1_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_0 _x_1_1 sep_2 s_3))) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.anon_111 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.snd_110 !tuple_0 = select tuple_0::_Tuple2 1
Sapl.Target.JS.CodeGeneratorJS.anon_286::B !var_0 !x_1 = Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 (Sapl.Target.JS.CodeGeneratorJS.snd_110 x_1)
Sapl.Target.JS.CodeGeneratorJS.isTailRecursive::B !var_0 !_x_1 = case _x_1 (Sapl.SaplStruct.SCase _x_1_0 patterns_1_1 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.anon_286 var_0) patterns_1_1) (Sapl.SaplStruct.SApplication _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.SVar avar_2_0 -> <{StdString.==_2}> (Sapl.SaplStruct.unpackVar_21 var_0) (Sapl.SaplStruct.unpackVar_20 avar_2_0)) ) (Sapl.SaplStruct.SLet body_1_0 _x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 body_1_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.anon_285::B !var_0 !g_1 x_2 = Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 (g_1 x_2)
<{Sapl.Target.JS.CodeGeneratorJS.get`_141}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_141}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_141}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_140 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_139 !tuple_0 = select tuple_0::_Tuple2 0
<{Sapl.Target.JS.CodeGeneratorJS.get`_138}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_138}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_138}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_137}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_137}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_137}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_136}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_136}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_136}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_135}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_135}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_135}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_134}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_134}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_134}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_133}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_133}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_133}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.argsCoder_40 !_vTermCoder_0 !_vAppendable_1 !_x_2 !_x_3 sep_4 s_5 a_6 = case _x_2 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.NormalVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_3 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_5_0 s_5 a_6) ) ) (_ -> case _x_3 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (select _vAppendable_1::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_8}> a_6 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_4_0 s_5)) sep_4) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_40 _vTermCoder_0 _vAppendable_1 _x_1_1 ts_4_1 sep_4 s_5)) )) (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_3 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_5_0 s_5 a_6) ) ) (_ -> case _x_3 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (select _vAppendable_1::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_8}> a_6 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_4_0 s_5)) sep_4) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_40 _vTermCoder_0 _vAppendable_1 _x_1_1 ts_4_1 sep_4 s_5)) )) ) ) (_predefined._Nil -> case _x_3 (_predefined._Nil -> a_6) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_148}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_148}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_148}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_147}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_147}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_147}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_146}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_146}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_146}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_145}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_145}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_145}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_144}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_144}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_144}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_120}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_120}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_120}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.maa__38 !_vTermCoder_0 !_x_1 !_x_2 i_3::I s_4 a_5 = case _x_1 (_predefined._Cons _x_1_0 fargs_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_2 (_predefined._Cons aa_4_0 aargs_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;205;15_365}> (<{StdInt.<_17}> 0 i_3) a_5) (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 aa_4_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__38 _vTermCoder_0 fargs_1_1 aargs_4_1 (<{StdInt.+_6}> i_3 1) s_4)) ) ) (_ -> case _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;208;15_366}> (<{StdInt.<_17}> 0 i_3) a_5) (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__38 _vTermCoder_0 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) )) (_predefined._Nil -> case _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;211;15_367}> (<{StdInt.<_17}> 0 i_3) a_5) (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__38 _vTermCoder_0 _predefined._Nil aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) ) (_ -> case _x_2 (_predefined._Nil -> a_5) )
<{Sapl.Target.JS.CodeGeneratorJS._if;211;15_367}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;208;15_366}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;205;15_365}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS.get`_152}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_152}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_152}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_151}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_151}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_151}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_150 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_149 !tuple_0 = select tuple_0::_Tuple2 0
Sapl.Target.JS.CodeGeneratorJS.isStrict_73::B !strictness_0::I !idx_1::I = <{StdInt.<_17}> 0 (StdInt.bitand strictness_0 (<{StdInt.<<}> 2 idx_1))
<{Sapl.Target.JS.CodeGeneratorJS.get`_119}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_119}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_119}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.toInt_32::I !_x_0 _x_1::I = case _x_0 (_predefined._Nil -> 0) (_predefined._Cons _x_1_0 as_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> StdInt.bitor (Sapl.Target.JS.CodeGeneratorJS.toInt_32 as_1_1 (<{StdInt.+_6}> _x_1 1)) (<{StdInt.<<}> 2 _x_1)) (Sapl.SaplStruct.NormalVar _x_3_0 _x_3_1 -> Sapl.Target.JS.CodeGeneratorJS.toInt_32 as_1_1 (<{StdInt.+_6}> _x_1 1)) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_287}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_287}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_287}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.strictnessMap::I !_x_0 !_x_1 = case _x_0 (Sapl.SaplStruct.NoType -> 0) (Sapl.SaplStruct.Type cons_1_0 -> case _x_1 (Sapl.Target.JS.CodeGeneratorJS._CoderState cs_inbody_2_0 cs_intrfunc_2_1 cs_inletbind_2_2 cs_futuredefs_2_3 cs_incaseexpr_2_4 cs_current_vars_2_5 cs_constructors_2_6 cs_functions_2_7 cs_CAFs_2_8 cs_builtins_2_9 cs_inlinefuncs_2_10 cs_trampoline_2_11 cs_prefix_2_12 -> <{Sapl.Target.JS.CodeGeneratorJS._c;117;7_368}> (<{Sapl.Target.JS.CodeGeneratorJS.get`_287}> cons_1_0 cs_constructors_2_6)) ) 
<{Sapl.Target.JS.CodeGeneratorJS._c;117;7_368}>::I !_x_0 = case _x_0 (Data.Maybe.Nothing -> 0) (Data.Maybe.Just _x_1_0 -> case _x_1_0 (Sapl.SaplParser._ConstructorDef index_2_0 nr_cons_2_1 nr_args_2_2 args_2_3 -> Sapl.Target.JS.CodeGeneratorJS.toInt_32 args_2_3 0) ) 
Sapl.Target.JS.CodeGeneratorJS.snd_124 !tuple_0 = select tuple_0::_Tuple2 1
<{Sapl.Target.JS.CodeGeneratorJS.get`_121}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_121}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_121}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_288}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_288}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_288}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die !s_0 cons_1 = Data.Maybe.maybe (StdMisc.abort (<{StdString.+++_11}> "Data constructor " (<{StdString.+++_11}> cons_1 " cannot be found!"))) StdFunc.id (<{Sapl.Target.JS.CodeGeneratorJS.get`_288}> cons_1 (select s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState 6))
Sapl.Target.JS.CodeGeneratorJS.anon_123 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_122 !tuple_0 = select tuple_0::_Tuple2 0
Sapl.Target.JS.CodeGeneratorJS.anon_289::B !g_0 x_1 = Sapl.SaplStruct.isDefaultPattern (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_290::B !x_0 = Sapl.SaplStruct.isDefaultPattern (Sapl.Target.JS.CodeGeneratorJS.fst_122 x_0)
Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern !patterns_0 = <{Sapl.Target.JS.CodeGeneratorJS._c;311;7_369}> (Data.List.partition Sapl.Target.JS.CodeGeneratorJS.anon_290 patterns_0)
<{Sapl.Target.JS.CodeGeneratorJS._c;311;7_369}> !_x_0 = case _x_0 (_Tuple2 _x_1_0 ps_1_1 -> case _x_1_0 (_predefined._Nil -> <{_Tuple2!3}> ps_1_1 Data.Maybe.Nothing) (_predefined._Cons _x_2_0 _x_2_1 -> case _x_2_0 (_Tuple2 _x_3_0 d_3_1 -> case _x_2_1 (_predefined._Nil -> <{_Tuple2!3}> ps_1_1 (Data.Maybe.Just d_3_1)) ) ) ) (_ -> StdMisc.abort "Error: more than one default branches in a select expression")
Sapl.Target.JS.CodeGeneratorJS.isUnsafeSelect::B !s_0 !patterns_1 = let _x_1_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1, ps_1_1 = select _x_1_0::_Tuple2 0, d_1_2 = select _x_1_0::_Tuple2 1 in <{Sapl.Target.JS.CodeGeneratorJS._c;335;7_370}> ps_1_1 d_1_2 s_0
<{Sapl.Target.JS.CodeGeneratorJS._c;335;7_370}>::B !ps_0 d_1 s_2 = case ps_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.PCons name_3_0 _x_3_1 -> case (Data.Maybe.isNothing d_1) (True -> StdBool.not (<{StdInt.==_16}> (select (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_2 name_3_0)::Sapl.SaplParser._ConstructorDef 1) (StdList.length_47 ps_0))) (False -> False) ) (Sapl.SaplStruct.PLit _x_3_0 -> case _x_3_0 (Sapl.SaplTokenizer.LBool _x_4_0 -> case _x_4_0 (True -> case _x_1_1 (_predefined._Cons _x_6_0 _x_6_1 -> case _x_6_0 (_Tuple2 _x_7_0 _x_7_1 -> case _x_7_0 (Sapl.SaplStruct.PLit _x_8_0 -> case _x_8_0 (Sapl.SaplTokenizer.LBool _x_9_0 -> case _x_9_0 (False -> False) ) ) ) ) ) (False -> case _x_1_1 (_predefined._Cons _x_6_0 _x_6_1 -> case _x_6_0 (_Tuple2 _x_7_0 _x_7_1 -> case _x_7_0 (Sapl.SaplStruct.PLit _x_8_0 -> case _x_8_0 (Sapl.SaplTokenizer.LBool _x_9_0 -> case _x_9_0 (True -> False) ) ) ) ) ) ) ) ) ) (_ -> Data.Maybe.isNothing d_1)
Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect::B !s_0 !_x_1 = case _x_1 (Sapl.SaplStruct.SApplication _x_1_0 ts_1_1 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0) ts_1_1) (Sapl.SaplStruct.SCase _x_1_0 ps_1_1 -> case (Sapl.Target.JS.CodeGeneratorJS.isUnsafeSelect s_0 ps_1_1) (True -> True) (False -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0) (StdList.map Sapl.Target.JS.CodeGeneratorJS.snd_124 ps_1_1)) ) (Sapl.SaplStruct.SLet b_1_0 _x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0 b_1_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.anon_74 !_x_0 = case _x_0 (_Tuple2 p_1_0 b_1_1 -> _Tuple3 p_1_0 b_1_1 False) 
Sapl.Target.JS.CodeGeneratorJS.ups_77 !ps_0 = StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_74 ps_0
Sapl.Target.JS.CodeGeneratorJS.addSwitch_76 !_vAppendable_0 e_1 a_2 = <{Text.StringAppender.<++_5}> (select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_5}> a_2 "switch(ys[0]){") e_1) "};"
Sapl.Target.JS.CodeGeneratorJS.isSingleton_75::B !s_0 cons_1 = <{StdInt.==_16}> (select (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_0 cons_1)::Sapl.SaplParser._ConstructorDef 1) 1
Sapl.Target.JS.CodeGeneratorJS.cp_79 p_0 d_1 b_2::B = _Tuple3 p_0 d_1 b_2
Sapl.Target.JS.CodeGeneratorJS.defp_78 d_0 b_1::B = _Tuple3 Sapl.SaplStruct.PDefault d_0 b_1
Sapl.Target.JS.CodeGeneratorJS.foldl_129 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_129 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.annotate_47 !_x_0 = case _x_0 (_Tuple2 _x_1_0 arg_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 type_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.toStrictVar_18 arg_1_1) type_2_1) (_ -> Sapl.SaplStruct.TypedVar arg_1_1 type_2_1)) ) 
Sapl.Target.JS.CodeGeneratorJS.pushArgs !s_0 !_x_1 = case _x_1 (_predefined._Cons t_1_0 ts_1_1 -> Sapl.Target.JS.CodeGeneratorJS.pushArgs (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [5:_predefined._Cons t_1_0 (select s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)]) ts_1_1) (_predefined._Nil -> s_0) 
Sapl.Target.JS.CodeGeneratorJS.snd_126 !tuple_0 = select tuple_0::_Tuple2 1
Sapl.Target.JS.CodeGeneratorJS.snd_125 !tuple_0 = select tuple_0::_Tuple2 1
Sapl.Target.JS.CodeGeneratorJS.w_41::B vn_0 !_x_1 = case _x_1 (Sapl.SaplStruct.SVar bvar_1_0 -> <{StdString.==_2}> (Sapl.SaplStruct.unpackVar_20 bvar_1_0) vn_0) (Sapl.SaplStruct.SApplication bvar_1_0 bargs_1_1 -> case (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0 bvar_1_0) (True -> True) (False -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0) bargs_1_1) ) (Sapl.SaplStruct.SCase bexpr_1_0 branches_1_1 -> case (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0 bexpr_1_0) (True -> True) (False -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0) (StdList.map Sapl.Target.JS.CodeGeneratorJS.snd_125 branches_1_1)) ) (Sapl.SaplStruct.SLet bexpr_1_0 bdefs_1_1 -> case (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0 bexpr_1_0) (True -> True) (False -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0) (StdList.map Sapl.SaplStruct.unpackBindExpr bdefs_1_1)) ) (Sapl.SaplStruct.SSelect bexpr_1_0 _x_1_1 _x_1_2 -> Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0 bexpr_1_0) (Sapl.SaplStruct.SUpdate bexpr_1_0 _x_1_1 updates_1_2 -> case (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0 bexpr_1_0) (True -> True) (False -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.w_41 vn_0) (StdList.map Sapl.Target.JS.CodeGeneratorJS.snd_126 updates_1_2)) ) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.isUsed::B !body_0 var_1 = Sapl.Target.JS.CodeGeneratorJS.w_41 (Sapl.SaplStruct.unpackVar_20 var_1) body_0
Sapl.Target.JS.CodeGeneratorJS.anon_45 !body_0 !_x_1 a_2 = case _x_1 (_Tuple2 fs_1_0 i_1_1 -> case (Sapl.Target.JS.CodeGeneratorJS.isUsed body_0 a_2) (True -> _Tuple2 (_predefined._Cons (_Tuple2 a_2 i_1_1) fs_1_0) (<{StdInt.+_6}> i_1_1 1)) (False -> _Tuple2 fs_1_0 (<{StdInt.+_6}> i_1_1 1)) ) 
Sapl.Target.JS.CodeGeneratorJS.instargs_46 !_vTermCoder_0 !_x_1 s_2 a_3 = case _x_1 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 t_2_0 i_2_1 -> case _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2_0 s_2)) "=ys[") (<{StdInt.+_6}> i_2_1 2)) "];") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2_0 s_2)) "=ys[") (<{StdInt.+_6}> i_2_1 2)) "],") (Sapl.Target.JS.CodeGeneratorJS.instargs_46 _vTermCoder_0 _x_1_1 s_2))) ) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_90 !_x_0 !s_1 !a_2 = case _x_0 (Sapl.SaplTokenizer.LString ustr_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "\"") (Text.Unicode.Encodings.JS.toJSLiteral ustr_1_0)) "\"") (Sapl.SaplTokenizer.LChar uchr_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "'") (Text.Unicode.Encodings.JS.toJSLiteral uchr_1_0)) "'") (Sapl.SaplTokenizer.LInt int_1_0 -> <{Text.StringAppender.<++_6}> a_2 int_1_0) (Sapl.SaplTokenizer.LReal real_1_0 -> <{Text.StringAppender.<++_7}> a_2 real_1_0) (Sapl.SaplTokenizer.LBool _x_1_0 -> case _x_1_0 (True -> <{Text.StringAppender.<++_5}> a_2 "true") (False -> <{Text.StringAppender.<++_5}> a_2 "false") ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_132}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_132}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_132}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_131}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_131}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_131}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_130}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_130}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_130}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.force !_vAppendable_0 !e_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.condForce _vAppendable_0 True e_1 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_48 s_0 name_1 a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1)) "()"
<{Sapl.Target.JS.CodeGeneratorJS.get`_142}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_142}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_142}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_82 !_x_0 = case _x_0 (_Tuple2 p_1_0 b_1_1 -> _Tuple3 p_1_0 b_1_1 False) 
Sapl.Target.JS.CodeGeneratorJS.anon_84 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_83 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_128 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.anon_127 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Sapl.Target.JS.CodeGeneratorJS.get`_154}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_154}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_154}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_153}> !<{_v<_0}> _x_1 !_x_2 = case _x_2 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 _x_1 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_153}> <{_v<_0}> _x_1 l_1_3) (False -> case (select <{_v<_0}>::<{StdOverloaded.<;}> 0 kx_1_1 _x_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_153}> <{_v<_0}> _x_1 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_72 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_71 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.func_name_66 !_vunpackVar_0 s_1 name_2 a_3 = <{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 name_2))
Sapl.Target.JS.CodeGeneratorJS.anon_143 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.isSame_64::B !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar var1_2_0 _x_2_1 -> case _x_1_1 (Sapl.SaplStruct.SVar var2_3_0 -> <{StdString.==_2}> (Sapl.SaplStruct.unpackVar_20 var1_2_0) (Sapl.SaplStruct.unpackVar_20 var2_3_0)) ) ) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.gen_setters_65 !_vTermCoder_0 !_x_1 s_2 a_3 = case _x_1 (_predefined._Cons _x_1_0 ss_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 expr_2_1 -> case _x_2_0 (Sapl.SaplStruct.TypedVar _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplStruct.StrictVar vn_4_0 _x_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) vn_4_0)) "=") (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 expr_2_1 s_2)) ";") (Sapl.Target.JS.CodeGeneratorJS.gen_setters_65 _vTermCoder_0 ss_1_1 s_2)) (Sapl.SaplStruct.NormalVar vn_4_0 _x_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) vn_4_0)) "=") (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 expr_2_1 s_2)) ";") (Sapl.Target.JS.CodeGeneratorJS.gen_setters_65 _vTermCoder_0 ss_1_1 s_2)) ) ) ) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.mta_2_63 !_vunpackVar_0 !_x_1 i_2::I s_3 a_4 = case _x_1 (_predefined._Cons fa_1_0 fargs_1_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (select _vunpackVar_0::<{Sapl.SaplStruct.unpackVar;}> 0 fa_1_0))) "=t") i_2) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_63 _vunpackVar_0 fargs_1_1 (<{StdInt.+_6}> i_2 1) s_3)) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.mta_1_62 !_vTermCoder_0 !_x_1 _x_2 i_3::I s_4 a_5 = case _x_1 (_predefined._Cons _x_1_0 fargs_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_2 (_predefined._Cons aa_4_0 aargs_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;597;23_371}> (<{StdInt.<_17}> 0 i_3) a_5) "t") i_3) "=") (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 aa_4_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_62 _vTermCoder_0 fargs_1_1 aargs_4_1 (<{StdInt.+_6}> i_3 1) s_4)) ) ) (_ -> case _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;600;23_372}> (<{StdInt.<_17}> 0 i_3) a_5) "t") i_3) "=") (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_62 _vTermCoder_0 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) )) (_predefined._Nil -> a_5) 
<{Sapl.Target.JS.CodeGeneratorJS._if;600;23_372}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;597;23_371}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
Sapl.Target.JS.CodeGeneratorJS.forceApp !_vAppendable_0 e_1 a_2 = <{Text.StringAppender.<++_5}> (select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_5}> a_2 "Sapl.fapp(") e_1) ")"
Sapl.Target.JS.CodeGeneratorJS.anon_57 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_56 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_59 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_58 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_61 !_vTermCoder_0 !_vTermCoder_1 name_2 args_3 s_4 a_5 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_5 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 name_2 s_4)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_1 args_3 "," s_4)) "]"
Sapl.Target.JS.CodeGeneratorJS.isStrict_68::B !strictness_0::I !idx_1::I = <{StdInt.<_17}> 0 (StdInt.bitand strictness_0 (<{StdInt.<<}> 2 idx_1))
Sapl.Target.JS.CodeGeneratorJS.isStrict_69::B !strictness_0::I !idx_1::I = <{StdInt.<_17}> 0 (StdInt.bitand strictness_0 (<{StdInt.<<}> 2 idx_1))
Sapl.Target.JS.CodeGeneratorJS.genUpd_70 !_vTermCoder_0 !_vTermCoder_1 s_2 strictness_3::I var_4 !_x_5 a_6 = case _x_5 (_predefined._Nil -> a_6) (_predefined._Cons _x_1_0 us_1_1 -> case _x_1_0 (_Tuple2 idx_2_0 expr_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_6 (select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 var_4 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing,3:_predefined._Nil]))) "[") (<{StdInt.+_6}> idx_2_0 2)) "]=") (<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_373}> (Sapl.Target.JS.CodeGeneratorJS.isStrict_69 strictness_3 idx_2_0) _vTermCoder_1 expr_2_1 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing]))) ";") (Sapl.Target.JS.CodeGeneratorJS.genUpd_70 _vTermCoder_0 _vTermCoder_1 s_2 strictness_3 var_4 us_1_1)) ) 
<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_373}> !_x_0::B !_vTermCoder_1 = case _x_0 (True -> select _vTermCoder_1::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0) (_ -> select _vTermCoder_1::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1)
Sapl.Target.JS.CodeGeneratorJS.anon_50 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0 t_2 s_1 a_3
Sapl.Target.JS.CodeGeneratorJS.anon_49 !_vTermCoder_0 s_1 t_2 a_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_2 s_1 a_3
Sapl.Target.JS.CodeGeneratorJS.findLocalVar_52::I name_0 !_x_1 = case _x_1 (_predefined._Cons _x_1_0 cs_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.NormalVar cn_3_0 level_3_1 -> case (<{StdString.==_2}> cn_3_0 name_0) (True -> level_3_1) (False -> Sapl.Target.JS.CodeGeneratorJS.findLocalVar_52 name_0 cs_1_1) ) (Sapl.SaplStruct.StrictVar cn_3_0 level_3_1 -> case (<{StdString.==_2}> cn_3_0 name_0) (True -> level_3_1) (False -> Sapl.Target.JS.CodeGeneratorJS.findLocalVar_52 name_0 cs_1_1) ) ) ) (_predefined._Nil -> 0) 
Sapl.Target.JS.CodeGeneratorJS.var_name_53 name_0 !s_1 a_2 = let decl_level_1_0::I = Sapl.Target.JS.CodeGeneratorJS.findLocalVar_52 name_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 5) in <{Sapl.Target.JS.CodeGeneratorJS._c;470;22_374}> decl_level_1_0 a_2 s_1 name_0
<{Sapl.Target.JS.CodeGeneratorJS._c;470;22_374}> !decl_level_0::I a_1 s_2 name_3 = case decl_level_0 (0 -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_3)) (_ -> <{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_3)) "_") decl_level_0)
Sapl.Target.JS.CodeGeneratorJS.anon_51::B !_x_0 = case _x_0 (Sapl.SaplParser._ConstructorDef index_1_0 nr_cons_1_1 nr_args_1_2 args_1_3 -> StdList.any Sapl.SaplStruct.isStrictVar_15 args_1_3) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_332}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_332}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_332}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_331}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_331}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_331}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_328}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_328}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_328}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_295}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_295}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_295}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_294}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_294}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_294}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_293}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_293}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_293}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_292}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_292}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_292}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_291}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_291}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_291}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.force_298 !e_0 !a_1 = Sapl.Target.JS.CodeGeneratorJS.condForce_282 True e_0 a_1
<{Sapl.Target.JS.CodeGeneratorJS.get`_300}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_300}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_300}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_299 prefix_0 g_1 x_2 = Sapl.Target.JS.CodeGeneratorJS.escapeName prefix_0 (g_1 x_2)
<{Sapl.Target.JS.CodeGeneratorJS.get`_306}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_306}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_306}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_305}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_305}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_305}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_304}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_304}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_304}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_303}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_303}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_303}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_302}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_302}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_302}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_335::B !g_0 x_1 = StdBool.not (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.mta_2_337 !_x_0 i_1::I s_2 a_3 = case _x_0 (_predefined._Cons fa_1_0 fargs_1_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_21 fa_1_0))) "=t") i_1) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_337 fargs_1_1 (<{StdInt.+_6}> i_1 1) s_2)) (_predefined._Nil -> a_3) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_314}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_314}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_314}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.func_name_313 s_0 name_1 a_2 = <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_20 name_1))
Sapl.Target.JS.CodeGeneratorJS.forceApp_307 e_0 a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "Sapl.fapp(") e_0) ")"
<{Sapl.Target.JS.CodeGeneratorJS.get`_327}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_327}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_327}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_326}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_326}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_326}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_325}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_325}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_325}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_329 !g_0 x_1 = Sapl.SaplStruct.toNormalVar_17 (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_330 !g_0 x_1 = Sapl.SaplStruct.toNormalVar_17 (g_0 x_1)
<{Sapl.Target.JS.CodeGeneratorJS.get`_319}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_319}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_319}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
<{Sapl.Target.JS.CodeGeneratorJS.get`_318}> _x_0 !_x_1 = case _x_1 (Data.Map.Tip -> Data.Maybe.Nothing) (Data.Map.Bin _x_1_0 kx_1_1 x_1_2 l_1_3 r_1_4 -> case (<{StdString.<_3}> _x_0 kx_1_1) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_318}> _x_0 l_1_3) (False -> case (<{StdString.<_3}> kx_1_1 _x_0) (True -> <{Sapl.Target.JS.CodeGeneratorJS.get`_318}> _x_0 r_1_4) (False -> Data.Maybe.Just x_1_2) ) ) 
Sapl.Target.JS.CodeGeneratorJS.foldl_323 body_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_323 body_0 (Sapl.Target.JS.CodeGeneratorJS.anon_45 body_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 e_0 a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(ys[0]){") e_0) "};"
Sapl.Target.JS.CodeGeneratorJS.anon_316::B !g_0 x_1 = Sapl.SaplStruct.isConsPattern (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_347 prefix_0 x_1 = Sapl.Target.JS.CodeGeneratorJS.escapeName prefix_0 (Sapl.Target.JS.CodeGeneratorJS.fst_139 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_348::B !x_0 = StdBool.not (Sapl.Target.JS.CodeGeneratorJS.isSame_64 x_0)
Sapl.Target.JS.CodeGeneratorJS.anon_342 !x_0 = Sapl.SaplStruct.toNormalVar_17 (Sapl.SaplStruct.unpackBindVar x_0)
Sapl.Target.JS.CodeGeneratorJS.anon_343 !x_0 = Sapl.SaplStruct.toNormalVar_17 (Sapl.SaplStruct.unpackBindVar x_0)
Sapl.Target.JS.CodeGeneratorJS.anon_341::B !x_0 = Sapl.SaplStruct.isConsPattern (Sapl.Target.JS.CodeGeneratorJS.fst_149 x_0)
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_100 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.NormalVar name_1_0 _x_1_1 -> let mbConstructor_2_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_328}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in case (case (Data.Maybe.isJust mbConstructor_2_0) (True -> <{StdInt.==_16}> (select constructor_2_1::Sapl.SaplParser._ConstructorDef 2) 0) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_2_1 _predefined._Nil s_1 a_2) (False -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_0 s_1)) ) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_100 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.anon_333 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_334 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_106 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_100 var_1_0 s_1 a_2) (Sapl.SaplStruct.SApplication _x_1_0 args_1_1 -> case _x_1_0 (Sapl.SaplStruct.SVar name_2_0 -> let mbConstructor_3_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_331}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_3_1 = Data.Maybe.fromJust mbConstructor_3_0 in case (case (Data.Maybe.isJust mbConstructor_3_0) (True -> <{StdInt.==_16}> (select constructor_3_1::Sapl.SaplParser._ConstructorDef 2) (StdList.length_47 args_1_1)) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_2_0 constructor_3_1 args_1_1 s_1 a_2) (False -> let mb_5_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_332}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 10), inlineFun_5_1 = Data.Maybe.fromJust mb_5_0 in case (case (Data.Maybe.isJust mb_5_0) (True -> <{StdInt.==_16}> (select inlineFun_5_1::Sapl.Target.Flavour._InlineFunDef 1) (StdList.length_47 args_1_1)) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (select inlineFun_5_1::Sapl.Target.Flavour._InlineFunDef 0 (Sapl.Target.JS.CodeGeneratorJS.anon_333 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_334 s_1) args_1_1)) ")") (False -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_0 s_1)) ) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_0 s_1 a_2)
Sapl.Target.JS.CodeGeneratorJS.termCodeIf !cond_expr_0 true_expr_1 false_expr_2 s_3 a_4 = case (case (Sapl.Target.JS.Lifting.inline cond_expr_0) (True -> case (Sapl.Target.JS.Lifting.inline true_expr_1) (True -> case (Sapl.Target.JS.Lifting.inline false_expr_2) (True -> StdBool.not (Sapl.Target.JS.CodeGeneratorJS._f401_401 (Data.Maybe.isJust (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) s_3 true_expr_1 false_expr_2)) (False -> False) ) (False -> False) ) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 cond_expr_0 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "?") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 true_expr_1 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) ":") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 false_expr_2 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) ")") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "if(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 cond_expr_0 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "){") (Sapl.Target.JS.CodeGeneratorJS.callWrapper true_expr_1 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) "}else{") (Sapl.Target.JS.CodeGeneratorJS.callWrapper false_expr_2 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) "}") 
Sapl.Target.JS.CodeGeneratorJS.safe_81 s_0 patterns_1 ps_2 !d_3 a_4 = <{Sapl.Target.JS.CodeGeneratorJS._c;714;15_400}> d_3 patterns_1 s_0 a_4 ps_2
Sapl.Target.JS.CodeGeneratorJS.instargs_324 !_x_0 s_1 a_2 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 t_2_0 i_2_1 -> case _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_2_0 s_1)) "=ys[") (<{StdInt.+_6}> i_2_1 2)) "];") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_2_0 s_1)) "=ys[") (<{StdInt.+_6}> i_2_1 2)) "],") (Sapl.Target.JS.CodeGeneratorJS.instargs_324 _x_1_1 s_1))) ) (_predefined._Nil -> a_2) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_93 !_x_0 !s_1 !a_2 = case _x_0 (_Tuple3 _x_1_0 body_1_1 _x_1_2 -> case _x_1_0 (Sapl.SaplStruct.PDefault -> Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1 a_2) (Sapl.SaplStruct.PLit lit_2_0 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "case ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_90 lit_2_0 s_1)) ": ") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1)) (Sapl.SaplStruct.PCons cons_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> case _x_1_2 (True -> Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1 a_2) (False -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "case ") (StdString.toString_5 (select (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_1 cons_2_0)::Sapl.SaplParser._ConstructorDef 0))) ": ") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1)) ) (_ -> let _x_3_0 = Sapl.Target.JS.CodeGeneratorJS.foldl_323 body_1_1 (_Tuple2 _predefined._Nil 0) _x_2_1, fargs_3_1 = select _x_3_0::_Tuple2 0 in <{Sapl.Target.JS.CodeGeneratorJS._c;369;11_397}> fargs_3_1 s_1 cons_2_0 _x_1_2 a_2 body_1_1 _x_2_1)) ) 
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 !_x_0 !sep_1 !s_2 !a_3 = case _x_0 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_93 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.unsafe_80 s_0 ps_1 !d_2 a_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;704;15_394}> d_2 ps_1 s_0 a_3
Sapl.Target.JS.CodeGeneratorJS.anon_320 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_321 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_98 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1 -> case (StdList.any (Sapl.SaplStruct.eqStrictVar_13 name_1_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)) (True -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_0 s_1)) (False -> let mbConstructor_3_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_325}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_3_1 = Data.Maybe.fromJust mbConstructor_3_0 in case (case (Data.Maybe.isJust mbConstructor_3_0) (True -> <{StdInt.==_16}> (select constructor_3_1::Sapl.SaplParser._ConstructorDef 2) 0) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_3_1 _predefined._Nil s_1 a_2) (False -> case (Data.Maybe.isJust (<{Sapl.Target.JS.CodeGeneratorJS.get`_327}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 8))) (True -> Sapl.Target.JS.CodeGeneratorJS.force_298 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1_0) a_2) (False -> let function_args_6_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_326}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 7) in case (case (Data.Maybe.isJust function_args_6_0) (True -> <{StdInt.==_16}> (StdList.length_47 (Data.Maybe.fromJust function_args_6_0)) 0) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 11) (Sapl.Target.JS.CodeGeneratorJS.anon_48 s_1 name_1_0) a_2) (False -> Sapl.Target.JS.CodeGeneratorJS.force_298 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_0 s_1) a_2) ) ) ) ) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_98 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.anon_344 name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_0 s_2)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 args_1 "," s_2)) "]"
Sapl.Target.JS.CodeGeneratorJS.anon_339 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_340 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_60 args_0 s_1 inlineFun_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (select inlineFun_2::Sapl.Target.Flavour._InlineFunDef 0 (Sapl.Target.JS.CodeGeneratorJS.anon_339 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_340 s_1) (StdList.take (select inlineFun_2::Sapl.Target.Flavour._InlineFunDef 1) args_0))) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 (StdList.drop (select inlineFun_2::Sapl.Target.Flavour._InlineFunDef 1) args_0) "," (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "]"
Sapl.Target.JS.CodeGeneratorJS.anon_308 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_309 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_55 name_0 args_1 s_2 functionArity_3::I a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 (Sapl.SaplStruct.SApplication (Sapl.SaplStruct.SVar name_0) (StdList.take functionArity_3 args_1)) s_2)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 (StdList.drop functionArity_3 args_1) "," (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "]"
Sapl.Target.JS.CodeGeneratorJS.maa__315 !_x_0 !_x_1 i_2::I s_3 a_4 = case _x_0 (_predefined._Cons _x_1_0 fargs_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_1 (_predefined._Cons aa_4_0 aargs_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;205;15_390}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 aa_4_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__315 fargs_1_1 aargs_4_1 (<{StdInt.+_6}> i_2 1) s_3)) ) ) (_ -> case _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;208;15_391}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__315 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) )) (_predefined._Nil -> case _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;211;15_392}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__315 _predefined._Nil aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) ) (_ -> case _x_1 (_predefined._Nil -> a_4) )
Sapl.Target.JS.CodeGeneratorJS.make_app_args !func_0 !args_1 !s_2 !a_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;199;7_389}> (<{Sapl.Target.JS.CodeGeneratorJS.get`_314}> (Sapl.SaplStruct.unpackVar_20 func_0) (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 7)) a_3 args_1 s_2
Sapl.Target.JS.CodeGeneratorJS.anon_54 name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.func_name_313 s_2 name_0)) "(") (Sapl.Target.JS.CodeGeneratorJS.make_app_args name_0 args_1 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ")"
Sapl.Target.JS.CodeGeneratorJS.mta_1_336 !_x_0 _x_1 i_2::I s_3 a_4 = case _x_0 (_predefined._Cons _x_1_0 fargs_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_1 (_predefined._Cons aa_4_0 aargs_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;597;23_387}> (<{StdInt.<_17}> 0 i_2) a_4) "t") i_2) "=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 aa_4_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_336 fargs_1_1 aargs_4_1 (<{StdInt.+_6}> i_2 1) s_3)) ) ) (_ -> case _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;600;23_388}> (<{StdInt.<_17}> 0 i_2) a_4) "t") i_2) "=") (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_336 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) )) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.gen_setters_338 !_x_0 s_1 a_2 = case _x_0 (_predefined._Cons _x_1_0 ss_1_1 -> case _x_1_0 (_Tuple2 _x_2_0 expr_2_1 -> case _x_2_0 (Sapl.SaplStruct.TypedVar _x_3_0 _x_3_1 -> case _x_3_0 (Sapl.SaplStruct.StrictVar vn_4_0 _x_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) vn_4_0)) "=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_2_1 s_1)) ";") (Sapl.Target.JS.CodeGeneratorJS.gen_setters_338 ss_1_1 s_1)) (Sapl.SaplStruct.NormalVar vn_4_0 _x_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) vn_4_0)) "=") (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 expr_2_1 s_1)) ";") (Sapl.Target.JS.CodeGeneratorJS.gen_setters_338 ss_1_1 s_1)) ) ) ) (_predefined._Nil -> a_2) 
Sapl.Target.JS.CodeGeneratorJS.make_tr_app_67 !tr_function_args_0 args_1 s_2 a_3 = let setters_1_0 = StdList.filter Sapl.Target.JS.CodeGeneratorJS.anon_348 (StdList.zip2 tr_function_args_0 args_1) in <{Sapl.Target.JS.CodeGeneratorJS._c;587;15_386}> (Sapl.Transform.TailRecursion.sortSetters setters_1_0) setters_1_0 a_3 s_2
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 !_x_0 !sep_1 !s_2 !a_3 = case _x_0 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.anon_296 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_1 s_0 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_297 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_1 s_0 a_2
Sapl.Target.JS.CodeGeneratorJS.argsCoder_346 !_x_0 !_x_1 sep_2 s_3 a_4 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.NormalVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_1 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_5_0 s_3 a_4) ) ) (_ -> case _x_1 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_4_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_346 _x_1_1 ts_4_1 sep_2 s_3)) )) (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_1 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_5_0 s_3 a_4) ) ) (_ -> case _x_1 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_4_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_346 _x_1_1 ts_4_1 sep_2 s_3)) )) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> a_4) ) 
Sapl.Target.JS.CodeGeneratorJS.constructorInliner !name_0 !def_1 !_x_2 !s_3 !a_4 = case _x_2 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_20 name_0) a_4) (_ -> <{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;268;11_385}> (select def_1::Sapl.SaplParser._ConstructorDef 2) a_4 def_1 s_3 name_0 _x_2) "]")
Sapl.Target.JS.CodeGeneratorJS.termCoder_99 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1 -> let mbConstructor_2_0::B = <{Sapl.Target.JS.CodeGeneratorJS.get`_292}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0, isLocalVar_2_2 = Data.List.elem_by Sapl.SaplStruct.eqVarByName t_0 (StdList.map Sapl.SaplStruct.removeTypeInfo (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)) in case (case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 0)) (True -> case (StdBool.not isLocalVar_2_2) (True -> case (Data.Maybe.isJust mbConstructor_2_0) (True -> <{StdInt.==_16}> (select constructor_2_1::Sapl.SaplParser._ConstructorDef 2) 0) (False -> False) ) (False -> False) ) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_2_1 _predefined._Nil s_1 a_2) (False -> let mb_4_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_291}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 10), inlineFun_4_1 = Data.Maybe.fromJust mb_4_0 in case (case (Data.Maybe.isJust mb_4_0) (True -> case (select inlineFun_4_1::Sapl.Target.Flavour._InlineFunDef 3) (True -> <{StdInt.==_16}> (select inlineFun_4_1::Sapl.Target.Flavour._InlineFunDef 1) 0) (False -> False) ) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (select inlineFun_4_1::Sapl.Target.Flavour._InlineFunDef 0 (Sapl.Target.JS.CodeGeneratorJS.anon_296 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_297 s_1) _predefined._Nil)) ")") (False -> case (case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 0)) (True -> case (StdBool.not isLocalVar_2_2) (True -> Data.Maybe.isJust (<{Sapl.Target.JS.CodeGeneratorJS.get`_293}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 8))) (False -> False) ) (False -> False) ) (True -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1_0)) (False -> case (case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 0)) (True -> case (StdBool.not isLocalVar_2_2) (True -> case (Data.Maybe.maybe False (StdList.any Sapl.SaplStruct.isStrictVar_15) (<{Sapl.Target.JS.CodeGeneratorJS.get`_294}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 7))) (True -> True) (False -> Data.Maybe.maybe False Sapl.Target.JS.CodeGeneratorJS.anon_51 (<{Sapl.Target.JS.CodeGeneratorJS.get`_295}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6))) ) (False -> False) ) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_1_0)) "$eval") (False -> case (StdList.any (Sapl.SaplStruct.eqVarByNameLevel t_0) (StdList.map Sapl.SaplStruct.removeTypeInfo (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 3))) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[function(){return ") (Sapl.Target.JS.CodeGeneratorJS.force_298 (Sapl.Target.JS.CodeGeneratorJS.var_name_53 name_1_0 s_1))) ";},[]]") (False -> <{Text.StringAppender.<++_8}> a_2 (Data.Maybe.maybe (Sapl.Target.JS.CodeGeneratorJS.var_name_53 name_1_0 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_347 "") (<{Sapl.Target.JS.CodeGeneratorJS.get`_300}> name_1_0 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 9)))) ) ) ) ) ) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_99 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_96 !var_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_99 (Sapl.SaplStruct.removeTypeInfo var_0) s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.genUpd_345 s_0 strictness_1::I var_2 !_x_3 a_4 = case _x_3 (_predefined._Nil -> a_4) (_predefined._Cons _x_1_0 us_1_1 -> case _x_1_0 (_Tuple2 idx_2_0 expr_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 var_2 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing,3:_predefined._Nil]))) "[") (<{StdInt.+_6}> idx_2_0 2)) "]=") (<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_384}> (Sapl.Target.JS.CodeGeneratorJS.isStrict_69 strictness_1 idx_2_0) expr_2_1 (update s_0::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing]))) ";") (Sapl.Target.JS.CodeGeneratorJS.genUpd_345 s_0 strictness_1 var_2 us_1_1)) ) 
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_98 var_1_0 s_1 a_2) (Sapl.SaplStruct.SApplication _x_1_0 args_1_1 -> case _x_1_0 (Sapl.SaplStruct.SVar name_2_0 -> let mbConstructor_3_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_302}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_3_1 = Data.Maybe.fromJust mbConstructor_3_0 in case (case (Data.Maybe.isJust mbConstructor_3_0) (True -> <{StdInt.==_16}> (select constructor_3_1::Sapl.SaplParser._ConstructorDef 2) (StdList.length_47 args_1_1)) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_2_0 constructor_3_1 args_1_1 s_1 a_2) (False -> let mbFunction_5_0::I = <{Sapl.Target.JS.CodeGeneratorJS.get`_304}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 7), functionArgs_5_1 = Data.Maybe.fromJust mbFunction_5_0, functionArity_5_2 = StdList.length_47 functionArgs_5_1 in case (case (Data.Maybe.isJust mbFunction_5_0) (True -> <{StdInt.==_16}> functionArity_5_2 (StdList.length_47 args_1_1)) (False -> False) ) (True -> case (case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) (True -> Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) t_0) (False -> False) ) (True -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.make_tr_app_67 (Data.Maybe.fromJust (<{Sapl.Target.JS.CodeGeneratorJS.get`_305}> (Sapl.SaplStruct.unpackVar_21 (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1))) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 7))) args_1_1 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) (False -> Sapl.Target.JS.CodeGeneratorJS.condForce_282 (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 11) (Sapl.Target.JS.CodeGeneratorJS.anon_54 name_2_0 args_1_1 s_1) a_2) ) (False -> case (case (Data.Maybe.isJust mbFunction_5_0) (True -> <{StdInt.<_17}> functionArity_5_2 (StdList.length_47 args_1_1)) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.forceApp_307 (Sapl.Target.JS.CodeGeneratorJS.anon_55 name_2_0 args_1_1 s_1 functionArity_5_2) a_2) (False -> let mb_8_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_303}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 10), inlineFun_8_1 = Data.Maybe.fromJust mb_8_0 in case (case (Data.Maybe.isJust mb_8_0) (True -> <{StdInt.==_16}> (select inlineFun_8_1::Sapl.Target.Flavour._InlineFunDef 1) (StdList.length_47 args_1_1)) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (select inlineFun_8_1::Sapl.Target.Flavour._InlineFunDef 0 (Sapl.Target.JS.CodeGeneratorJS.anon_308 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_309 s_1) args_1_1)) ")") (False -> case (case (Data.Maybe.isJust mb_8_0) (True -> <{StdInt.<_17}> (select inlineFun_8_1::Sapl.Target.Flavour._InlineFunDef 1) (StdList.length_47 args_1_1)) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.forceApp_307 (Sapl.Target.JS.CodeGeneratorJS.anon_60 args_1_1 s_1 inlineFun_8_1) a_2) (False -> let builtin_11_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_306}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 9) in case (case (Data.Maybe.isJust builtin_11_0) (True -> <{StdInt.==_16}> (select (Data.Maybe.fromJust builtin_11_0)::_Tuple2 1) (StdList.length_47 args_1_1)) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName "" (select (Data.Maybe.fromJust builtin_11_0)::_Tuple2 0))) "(") (Sapl.Target.JS.CodeGeneratorJS.make_app_args name_2_0 args_1_1 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ")") (False -> case (case (Data.Maybe.isNothing mbFunction_5_0) (True -> Data.Maybe.isNothing builtin_11_0) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.forceApp_307 (Sapl.Target.JS.CodeGeneratorJS.anon_344 name_2_0 args_1_1 s_1) a_2) (False -> <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_0 s_1)) ) ) ) ) ) ) ) (Sapl.SaplStruct.SSelect _x_2_0 _x_2_1 _x_2_2 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "Sapl.fapp(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 _x_1_0 s_1)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 args_1_1 "," s_1)) "])") ) (Sapl.SaplStruct.SSelect expr_1_0 type_1_1 idx_1_2 -> case (Sapl.Target.JS.CodeGeneratorJS.isStrict_68 (Sapl.Target.JS.CodeGeneratorJS.strictnessMap type_1_1 s_1) idx_1_2) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "[") (<{StdInt.+_6}> idx_1_2 2)) "]") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "Sapl.feval(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "[") (<{StdInt.+_6}> idx_1_2 2)) "])") ) (Sapl.SaplStruct.SUpdate expr_1_0 type_1_1 updates_1_2 -> let var_2_0 = Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 2) in <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 var_2_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing,3:_predefined._Nil]))) "=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing]))) ".slice(0);") (Sapl.Target.JS.CodeGeneratorJS.genUpd_345 s_1 (Sapl.Target.JS.CodeGeneratorJS.strictnessMap type_1_1 s_1) var_2_0 updates_1_2)) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_0 s_1 a_2)
Sapl.Target.JS.CodeGeneratorJS.termCoder_102 !_x_0 !s_1 !a_2 = case _x_0 (Sapl.SaplStruct.SaplLetDef name_1_0 body_1_1 -> case (Sapl.Target.JS.Lifting.inline body_1_1) (True -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [3:_predefined._Nil]))) "=") (<{Sapl.Target.JS.CodeGeneratorJS._if;511;18_382}> (Sapl.SaplStruct.isStrictVar_15 name_1_0) body_1_1 s_1)) (False -> <{Text.StringAppender.<++_8}> a_2 (<{Sapl.Target.JS.CodeGeneratorJS._if;514;18_383}> (Sapl.SaplStruct.isStrictVar_15 name_1_0) body_1_1 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Just name_1_0]))) ) 
Sapl.Target.JS.CodeGeneratorJS.letDefCoder !_x_0 !needsvar_1::B !s_2 !a_3 = case _x_0 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> case (Sapl.Target.JS.Lifting.inline (Sapl.SaplStruct.unpackBindExpr t_1_0)) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 (<{Sapl.Target.JS.CodeGeneratorJS._if;485;17_378}> needsvar_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_1_0 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing,3:_predefined._Cons (Sapl.SaplStruct.toNormalVar_17 (Sapl.SaplStruct.unpackBindVar t_1_0)) _predefined._Nil]))) ";\n ") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 (<{Sapl.Target.JS.CodeGeneratorJS._if;486;17_379}> needsvar_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_1_0 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing,3:_predefined._Cons (Sapl.SaplStruct.toNormalVar_17 (Sapl.SaplStruct.unpackBindVar t_1_0)) _predefined._Nil]))) ";\n ") ) (_ -> case (Sapl.Target.JS.Lifting.inline (Sapl.SaplStruct.unpackBindExpr t_1_0)) (True -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 (<{Sapl.Target.JS.CodeGeneratorJS._if;489;13_380}> needsvar_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_1_0 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing,3:StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_342 _x_0]))) (Sapl.Target.JS.CodeGeneratorJS.letDefCoder _x_1_1 False (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [5:_predefined._Cons (Sapl.SaplStruct.unpackBindVar t_1_0) (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)]))) (False -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 (<{Sapl.Target.JS.CodeGeneratorJS._if;495;13_381}> needsvar_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_1_0 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing,3:StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_343 _x_0]))) ";\n") (Sapl.Target.JS.CodeGeneratorJS.letDefCoder _x_1_1 True (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [5:_predefined._Cons (Sapl.SaplStruct.unpackBindVar t_1_0) (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)]))) )) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_105 !t_0 !s_1 !a_2 = case t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_99 var_1_0 s_1 a_2) (Sapl.SaplStruct.SSelect expr_1_0 type_1_1 idx_1_2 -> case (Sapl.Target.JS.CodeGeneratorJS.isStrict_73 (Sapl.Target.JS.CodeGeneratorJS.strictnessMap type_1_1 s_1) idx_1_2) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[Sapl.sselect,[") (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ", ") (<{StdInt.+_6}> idx_1_2 2)) "]]") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[Sapl.select,[") (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ", ") (<{StdInt.+_6}> idx_1_2 2)) "]]") ) (Sapl.SaplStruct.SUpdate _x_1_0 _x_1_1 _x_1_2 -> <{Text.StringAppender.<++_5}> a_2 "/* UPD */") (Sapl.SaplStruct.SCase expr_1_0 patterns_1_1 -> case (StdList.any Sapl.Target.JS.CodeGeneratorJS.anon_341 patterns_1_1) (True -> case (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_1 t_0) (True -> let _x_4_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1 in Sapl.Target.JS.CodeGeneratorJS.unsafe_80 s_1 (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ys=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ";")) (False -> let _x_4_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1 in Sapl.Target.JS.CodeGeneratorJS.safe_81 s_1 patterns_1_1 (select _x_4_0::_Tuple2 0) (select _x_4_0::_Tuple2 1) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ys=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_1_0 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) ";")) ) (False -> case patterns_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 (_Tuple2 _x_4_0 true_expr_4_1 -> case _x_4_0 (Sapl.SaplStruct.PLit _x_5_0 -> case _x_5_0 (Sapl.SaplTokenizer.LBool _x_6_0 -> case _x_6_0 (True -> case _x_3_1 (_predefined._Cons _x_8_0 _x_8_1 -> case _x_8_0 (_Tuple2 _x_9_0 false_expr_9_1 -> case _x_9_0 (Sapl.SaplStruct.PLit _x_10_0 -> case _x_10_0 (Sapl.SaplTokenizer.LBool _x_11_0 -> case _x_11_0 (False -> case _x_8_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCodeIf expr_1_0 true_expr_4_1 false_expr_9_1 s_1 a_2) ) ) ) ) ) ) (False -> case _x_3_1 (_predefined._Cons _x_8_0 _x_8_1 -> case _x_8_0 (_Tuple2 _x_9_0 true_expr_9_1 -> case _x_9_0 (Sapl.SaplStruct.PLit _x_10_0 -> case _x_10_0 (Sapl.SaplTokenizer.LBool _x_11_0 -> case _x_11_0 (True -> case _x_8_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCodeIf expr_1_0 true_expr_9_1 true_expr_4_1 s_1 a_2) ) ) ) ) ) ) ) ) ) ) (_ -> let _x_3_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1, ps_3_1 = select _x_3_0::_Tuple2 0 in <{Sapl.Target.JS.CodeGeneratorJS._c;727;11_376}> (select _x_3_0::_Tuple2 1) a_2 expr_1_0 s_1 ps_3_1)) ) (Sapl.SaplStruct.SApplication _x_1_0 args_1_1 -> case _x_1_0 (Sapl.SaplStruct.SVar name_2_0 -> let mbConstructor_3_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_318}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 6), constructor_3_1 = Data.Maybe.fromJust mbConstructor_3_0 in case (case (Data.Maybe.isJust mbConstructor_3_0) (True -> case (<{StdInt.==_16}> (select constructor_3_1::Sapl.SaplParser._ConstructorDef 2) (StdList.length_47 args_1_1)) (True -> StdBool.not (StdList.any Sapl.SaplStruct.isStrictVar_15 (select constructor_3_1::Sapl.SaplParser._ConstructorDef 3))) (False -> False) ) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_2_0 constructor_3_1 args_1_1 s_1 a_2) (False -> let mb_5_0 = <{Sapl.Target.JS.CodeGeneratorJS.get`_319}> (Sapl.SaplStruct.unpackVar_20 name_2_0) (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 10), inlineFun_5_1 = Data.Maybe.fromJust mb_5_0 in case (case (Data.Maybe.isJust mb_5_0) (True -> case (select inlineFun_5_1::Sapl.Target.Flavour._InlineFunDef 3) (True -> <{StdInt.==_16}> (select inlineFun_5_1::Sapl.Target.Flavour._InlineFunDef 1) (StdList.length_47 args_1_1)) (False -> False) ) (False -> False) ) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (select inlineFun_5_1::Sapl.Target.Flavour._InlineFunDef 0 (Sapl.Target.JS.CodeGeneratorJS.anon_320 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_321 s_1) args_1_1)) ")") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_2_0 s_1)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 args_1_1 "," s_1)) "]]") ) ) (Sapl.SaplStruct.SSelect _x_2_0 _x_2_1 _x_2_2 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 _x_1_0 s_1)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_311 args_1_1 "," s_1)) "]]") ) (Sapl.SaplStruct.SLit lit_1_0 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_90 lit_1_0 s_1 a_2) (Sapl.SaplStruct.SLet body_1_0 defs_1_1 -> let newdefs_2_0 = <{Sapl.Target.JS.CodeGeneratorJS._c;774;19_377}> (Sapl.Transform.Let.sortBindings defs_1_1) defs_1_1, defnames_2_1 = StdList.map Sapl.SaplStruct.unpackBindVar newdefs_2_0, s_2_2 = Sapl.Target.JS.CodeGeneratorJS.pushArgs s_1 defnames_2_1 in <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.letDefCoder newdefs_2_0 True s_2_2)) (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_0 (update s_2_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [5:<{StdList.++}> defnames_2_1 (select s_2_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 5)]))) ";") 
Sapl.Target.JS.CodeGeneratorJS.callWrapper !t_0 !s_1 !a_2 = case (StdBool.not (Sapl.Target.JS.Lifting.inline t_0)) (True -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_0 s_1 a_2) (False -> case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 2)) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 2)) (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [3:_predefined._Nil]))) "=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_0 s_1)) ";") (False -> case (case (Data.Maybe.isJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) (True -> Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) t_0) (False -> False) ) (True -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_0 s_1 a_2) (False -> case (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 11) (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "return ") (Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_106 t_0 s_1)) ";") (False -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "return ") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_0 s_1)) ";") ) ) ) 
Sapl.Target.JS.CodeGeneratorJS._f401_401::B !_x_0::B s_1 true_expr_2 false_expr_3 = case _x_0 (True -> case (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) true_expr_2) (True -> True) (False -> Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (select s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) false_expr_3) ) (_ -> False)
<{Sapl.Target.JS.CodeGeneratorJS._c;714;15_400}> !d_0 patterns_1 s_2 a_3 ps_4 = case d_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._c;709;19_398}> patterns_1 s_2 a_3 ps_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.defp_78 d_1_0 False) s_2)) ";") (_ -> <{Sapl.Target.JS.CodeGeneratorJS._c;709;19_399}> patterns_1 s_2 a_3 ps_4)
<{Sapl.Target.JS.CodeGeneratorJS._c;709;19_399}> !patterns_0 s_1 a_2 ps_3 = case patterns_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 p_2_0 body_2_1 -> case _x_1_1 (_predefined._Nil -> case (Sapl.Target.JS.CodeGeneratorJS.isSingleton_75 s_1 (Data.Maybe.fromJust (Sapl.SaplStruct.unpackConsName p_2_0))) (True -> Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.cp_79 p_2_0 body_2_1 True) s_1 a_2) (False -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.cp_79 p_2_0 body_2_1 False) s_1) a_2) ) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (Sapl.Target.JS.CodeGeneratorJS.ups_77 ps_3) "" s_1) a_2)
<{Sapl.Target.JS.CodeGeneratorJS._c;709;19_398}> !patterns_0 s_1 a_2 ps_3 = case patterns_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 p_2_0 body_2_1 -> case _x_1_1 (_predefined._Nil -> case (Sapl.Target.JS.CodeGeneratorJS.isSingleton_75 s_1 (Data.Maybe.fromJust (Sapl.SaplStruct.unpackConsName p_2_0))) (True -> Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.cp_79 p_2_0 body_2_1 True) s_1 a_2) (False -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.cp_79 p_2_0 body_2_1 False) s_1) a_2) ) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (Sapl.Target.JS.CodeGeneratorJS.ups_77 ps_3) "" s_1) a_2)
<{Sapl.Target.JS.CodeGeneratorJS._c;369;11_397}> !fargs_0 s_1 cons_2 _x_3::B a_4 body_5 _x_6 = case fargs_0 (_predefined._Nil -> let get_cons_2_0 = Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_1 cons_2 in <{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._c;363;15_395}> _x_3 a_4 get_cons_2_0) (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_5 (Sapl.Target.JS.CodeGeneratorJS.pushArgs s_1 (StdList.map Sapl.Target.JS.CodeGeneratorJS.annotate_47 (StdList.zip2 (select get_cons_2_0::Sapl.SaplParser._ConstructorDef 3) _x_6))))) (_ -> let get_cons_1_0 = Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_1 cons_2, s_1_1 = Sapl.Target.JS.CodeGeneratorJS.pushArgs s_1 (StdList.map Sapl.Target.JS.CodeGeneratorJS.annotate_47 (StdList.zip2 (select get_cons_1_0::Sapl.SaplParser._ConstructorDef 3) _x_6)) in <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;363;15_396}> _x_3 a_4 get_cons_1_0) "var ") (Sapl.Target.JS.CodeGeneratorJS.instargs_324 (StdList.reverse fargs_0) s_1_1)) (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_5 s_1_1))
<{Sapl.Target.JS.CodeGeneratorJS._c;363;15_396}> !_x_0::B a_1 get_cons_2 = case _x_0 (True -> a_1) (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "case ") (StdString.toString_5 (select get_cons_2::Sapl.SaplParser._ConstructorDef 0))) ": ")
<{Sapl.Target.JS.CodeGeneratorJS._c;363;15_395}> !_x_0::B a_1 get_cons_2 = case _x_0 (True -> a_1) (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "case ") (StdString.toString_5 (select get_cons_2::Sapl.SaplParser._ConstructorDef 0))) ": ")
<{Sapl.Target.JS.CodeGeneratorJS._c;704;15_394}> !d_0 ps_1 s_2 a_3 = case d_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (Sapl.Target.JS.CodeGeneratorJS.ups_77 ps_1) "" (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True])) a_3) (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (Sapl.Target.JS.CodeGeneratorJS.defp_78 d_1_0 False) s_2)) ";") (_ -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.addSwitch_322 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (Sapl.Target.JS.CodeGeneratorJS.ups_77 ps_1) "" (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True])) a_3) (<{Sapl.Target.JS.CodeGeneratorJS._if;706;35_393}> (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 4)))
<{Sapl.Target.JS.CodeGeneratorJS._if;706;35_393}> !_x_0::B = case _x_0 (True -> "break;") (_ -> "throw \"nomatch\";")
<{Sapl.Target.JS.CodeGeneratorJS._if;211;15_392}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;208;15_391}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;205;15_390}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._c;199;7_389}> !_x_0 a_1 args_2 s_3 = case _x_0 (Data.Maybe.Just func_args_1_0 -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.maa__315 func_args_1_0 args_2 0 s_3)) (_ -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.maa__315 _predefined._Nil args_2 0 s_3))
<{Sapl.Target.JS.CodeGeneratorJS._if;600;23_388}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;597;23_387}> !_x_0::B a_1 = case _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._c;587;15_386}> !_x_0 setters_1 a_2 s_3 = case _x_0 (Data.Maybe.Nothing -> let _x_2_0 = StdList.unzip setters_1, tr_function_args_2_1 = select _x_2_0::_Tuple2 0 in <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ") (Sapl.Target.JS.CodeGeneratorJS.mta_1_336 tr_function_args_2_1 (select _x_2_0::_Tuple2 1) 0 s_3)) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_337 tr_function_args_2_1 0 s_3)) "continue;") (Data.Maybe.Just ordered_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.gen_setters_338 (StdList.reverse ordered_1_0) s_3)) "continue;") 
<{Sapl.Target.JS.CodeGeneratorJS._c;268;11_385}> !_x_0::I a_1 def_2 s_3 name_4 _x_5 = case _x_0 (0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> a_1 "[") (select def_2::Sapl.SaplParser._ConstructorDef 0)) ",") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_20 name_4))) "$n") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> a_1 "[") (select def_2::Sapl.SaplParser._ConstructorDef 0)) ",") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_20 name_4))) "$n") ",") (Sapl.Target.JS.CodeGeneratorJS.argsCoder_346 (select def_2::Sapl.SaplParser._ConstructorDef 3) _x_5 "," (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing])))
<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_384}> !_x_0::B = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105)
<{Sapl.Target.JS.CodeGeneratorJS._if;514;18_383}> !_x_0::B = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105)
<{Sapl.Target.JS.CodeGeneratorJS._if;511;18_382}> !_x_0::B = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105)
<{Sapl.Target.JS.CodeGeneratorJS._if;495;13_381}> !needsvar_0::B = case needsvar_0 (True -> "") (_ -> ";\n")
<{Sapl.Target.JS.CodeGeneratorJS._if;489;13_380}> !needsvar_0::B = case needsvar_0 (True -> "var ") (_ -> ",")
<{Sapl.Target.JS.CodeGeneratorJS._if;486;17_379}> !needsvar_0::B = case needsvar_0 (True -> "") (_ -> ";\n")
<{Sapl.Target.JS.CodeGeneratorJS._if;485;17_378}> !needsvar_0::B = case needsvar_0 (True -> "var ") (_ -> ",")
<{Sapl.Target.JS.CodeGeneratorJS._c;774;19_377}> !_x_0 defs_1 = case _x_0 (Data.Maybe.Just ds_1_0 -> ds_1_0) (Data.Maybe.Nothing -> defs_1) 
<{Sapl.Target.JS.CodeGeneratorJS._c;727;11_376}> !_x_0 a_1 expr_2 s_3 ps_4 = case _x_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_2 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "){") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_82 ps_4) "" (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) "};") (Sapl.Target.JS.CodeGeneratorJS.termCoder_93 (_Tuple3 Sapl.SaplStruct.PDefault d_1_0 False) s_3)) ";") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 expr_2 (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [1:Data.Maybe.Nothing]))) "){") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_317 (StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_82 ps_4) "" (update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [4:True]))) "};") (<{Sapl.Target.JS.CodeGeneratorJS._if;729;31_375}> (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 4)))
<{Sapl.Target.JS.CodeGeneratorJS._if;729;31_375}> !_x_0::B = case _x_0 (True -> "break;") (_ -> "throw \"nomatch\";")
Sapl.Target.JS.CodeGeneratorJS.argsCoder_301 !_vAppendable_0 !_x_1 !_x_2 sep_3 s_4 a_5 = case _x_1 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar _x_2_0 _x_2_1 -> case _x_2_0 (Sapl.SaplStruct.NormalVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_2 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_5_0 s_4 a_5) ) ) (_ -> case _x_2 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 t_4_0 s_4)) sep_3) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_301 _vAppendable_0 _x_1_1 ts_4_1 sep_3 s_4)) )) (Sapl.SaplStruct.StrictVar _x_3_0 _x_3_1 -> case _x_1_1 (_predefined._Nil -> case _x_2 (_predefined._Cons t_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_5_0 s_4 a_5) ) ) (_ -> case _x_2 (_predefined._Cons t_4_0 ts_4_1 -> <{Text.StringAppender.<++_8}> (select _vAppendable_0::<{Text.StringAppender.Appendable;}> 0 (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_104 t_4_0 s_4)) sep_3) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_301 _vAppendable_0 _x_1_1 ts_4_1 sep_3 s_4)) )) ) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> a_5) ) 
Sapl.Target.JS.CodeGeneratorJS.genUpd_312 !_vTermCoder_0 s_1 strictness_2::I var_3 !_x_4 a_5 = case _x_4 (_predefined._Nil -> a_5) (_predefined._Cons _x_1_0 us_1_1 -> case _x_1_0 (_Tuple2 idx_2_0 expr_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 var_3 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing,3:_predefined._Nil]))) "[") (<{StdInt.+_6}> idx_2_0 2)) "]=") (<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_402}> (Sapl.Target.JS.CodeGeneratorJS.isStrict_69 strictness_2 idx_2_0) _vTermCoder_0 expr_2_1 (update s_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [2:Data.Maybe.Nothing]))) ";") (Sapl.Target.JS.CodeGeneratorJS.genUpd_312 _vTermCoder_0 s_1 strictness_2 var_3 us_1_1)) ) 
<{Sapl.Target.JS.CodeGeneratorJS._if;642;14_402}> !_x_0::B !_vTermCoder_1 = case _x_0 (True -> select _vTermCoder_1::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 0) (_ -> select _vTermCoder_1::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1)
Sapl.Target.JS.CodeGeneratorJS.anon_310 !_vTermCoder_0 name_1 args_2 s_3 a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_1 s_3)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_0 args_2 "," s_3)) "]"
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_92 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_93 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_94 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_93 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_95 !var_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_98 (Sapl.SaplStruct.removeTypeInfo var_0) s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_97 !var_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_100 (Sapl.SaplStruct.removeTypeInfo var_0) s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.strictsep_352 !args_0 !_x_1 arg_2 = case _x_1 (_Tuple2 a_1_0 i_1_1 -> case (<{StdInt.<_17}> i_1_1 (StdList.length_47 args_0)) (True -> _Tuple2 (<{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (Sapl.SaplStruct.isStrictVar_15 arg_2) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) ",") (<{StdInt.+_6}> i_1_1 1)) (False -> _Tuple2 (Sapl.Target.JS.CodeGeneratorJS.condForce_282 (Sapl.SaplStruct.isStrictVar_15 arg_2) (Sapl.Target.JS.CodeGeneratorJS.anon_36 i_1_1) a_1_0) i_1_1) ) 
Sapl.Target.JS.CodeGeneratorJS.foldl_351 args_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_351 args_0 (Sapl.Target.JS.CodeGeneratorJS.strictsep_352 args_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_350 !args_0 a_1 = select (Sapl.Target.JS.CodeGeneratorJS.foldl_351 args_0 (_Tuple2 a_1 1) args_0)::_Tuple2 0
Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "function ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_0)) "$eval(") (Text.StringAppender.joinList (<{StdOverloaded.toString;}> StdString.toString_9) "," (<{Sapl.Target.JS.CodeGeneratorJS.c;186;48_34}> 1 (StdList.length_47 args_1)))) "){return ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) name_0)) "(") (Sapl.Target.JS.CodeGeneratorJS.anon_350 args_1)) ");};"
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 !_x_0 !sep_1 !s_2 !a_3 = case _x_0 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_96 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.normalFunc !name_0 !body_1 !args_2 !s_3 !a_4 = let s_1_0 = update s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState [0:Data.Maybe.Just name_0,1:<{Sapl.Target.JS.CodeGeneratorJS._if;174;30_403}> (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive name_0 body_1) name_0,5:args_2] in <{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;179;11_410}> (Data.Maybe.isJust (select s_1_0::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) body_1 s_1_0 args_2 name_0 s_3 a_4) "};"
<{Sapl.Target.JS.CodeGeneratorJS._if;179;11_410}> !_x_0::B body_1 s_2 args_3 name_4 s_5 a_6 = case _x_0 (True -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 s_2 (<{Sapl.Target.JS.CodeGeneratorJS._if;177;11_406}> (Data.Maybe.isJust (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) args_3 name_4 s_5 a_6)) "}") (_ -> Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 s_2 (<{Sapl.Target.JS.CodeGeneratorJS._if;177;11_409}> (Data.Maybe.isJust (select s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState 1)) args_3 name_4 s_5 a_6))
<{Sapl.Target.JS.CodeGeneratorJS._if;177;11_409}> !_x_0::B args_1 name_2 s_3 a_4 = case _x_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_407}> (StdList.any Sapl.SaplStruct.isStrictVar_15 args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 args_1 "," s_3)) "){") "while(1){") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_408}> (StdList.any Sapl.SaplStruct.isStrictVar_15 args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 args_1 "," s_3)) "){")
<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_408}> !_x_0::B name_1 args_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_21 name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_407}> !_x_0::B name_1 args_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_21 name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;177;11_406}> !_x_0::B args_1 name_2 s_3 a_4 = case _x_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_404}> (StdList.any Sapl.SaplStruct.isStrictVar_15 args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 args_1 "," s_3)) "){") "while(1){") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_405}> (StdList.any Sapl.SaplStruct.isStrictVar_15 args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_353 args_1 "," s_3)) "){")
<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_405}> !_x_0::B name_1 args_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_21 name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;164;11_404}> !_x_0::B name_1 args_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_21 name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;174;30_403}> !_x_0::B name_1 = case _x_0 (True -> Data.Maybe.Just name_1) (_ -> Data.Maybe.Nothing)
Sapl.Target.JS.CodeGeneratorJS.encodeCAF !name_0 !body_1 !s_2 !a_3 = case body_1 (Sapl.SaplStruct.SLit _x_1_0 -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 body_1 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [0:Data.Maybe.Just name_0,1:Data.Maybe.Nothing,5:_predefined._Nil]) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_0 s_2)) " = ")) ";") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_96 name_0 s_2)) " = [function (){") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 (update s_2::Sapl.Target.JS.CodeGeneratorJS._CoderState [0:Data.Maybe.Just name_0,1:Data.Maybe.Nothing,5:_predefined._Nil]))) "},[]];")
Sapl.Target.JS.CodeGeneratorJS.anon_33 !_vTermCoder_0 s_1 a_2 t_3 = select _vTermCoder_0::<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> 1 t_3 s_1 a_2
<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_39}> !<{_v<_0}> !_vtoString_1 !_vone_2 !<{_v+_3}> i_4 g_s_5 = case (StdBool.not (select <{_v<_0}>::<{StdOverloaded.<;}> 0 g_s_5 i_4)) (True -> _predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (select _vtoString_1::<{StdOverloaded.toString;}> 0 i_4)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_39}> <{_v<_0}> _vtoString_1 _vone_2 <{_v+_3}> (select <{_v+_3}>::<{StdOverloaded.+;}> 0 i_4 (select _vone_2::<{StdOverloaded.one;}> 0)) g_s_5)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_354}> !_vtoString_0 !_vone_1 !<{_v+_2}> !i_3::I !g_s_4::I = case (StdBool.not (<{StdInt.<_17}> g_s_4 i_3)) (True -> _predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (select _vtoString_0::<{StdOverloaded.toString;}> 0 i_3)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_354}> _vtoString_0 _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_s_4)) (False -> _predefined._Nil) 
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_355 !_x_0 !sep_1 !s_2 !a_3 = case _x_0 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_355 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_356}> !_vone_0 !<{_v+_1}> !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> _predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 i_2)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_356}> _vone_0 <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 i_2 (select _vone_0::<{StdOverloaded.one;}> 0)) g_s_3)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_357}> !<{_v+_0}> !i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 i_1)) (True -> _predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 i_1)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_357}> <{_v+_0}> (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_1 StdInt.one_11) g_s_2)) (False -> _predefined._Nil) 
<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_358}> !i_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 i_0)) (True -> _predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 i_0)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_358}> (<{StdInt.+_6}> i_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
Sapl.Target.JS.CodeGeneratorJS.constructorCoder !name_0 !id_1::I !_x_2 s_3 !a_4 = case _x_2 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "var ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (select s_3::Sapl.Target.JS.CodeGeneratorJS._CoderState 12) (Sapl.SaplStruct.unpackVar_20 name_0))) " = [") id_1) ",\"") (Sapl.SaplStruct.unpackVar_20 name_0)) "\"];") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;255;11_413}> (StdList.length_47 _x_2) _x_2 name_0 s_3 a_4 id_1) "];};") "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_0 s_3)) "$n = \"") (Sapl.SaplStruct.unpackVar_20 name_0)) "\";")
<{Sapl.Target.JS.CodeGeneratorJS._c;255;11_413}> !_x_0::I _x_1 name_2 s_3 a_4 id_5::I = case _x_0 (0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;247;11_411}> (StdList.any Sapl.SaplStruct.isStrictVar_15 _x_1) name_2 _x_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_355 (<{Sapl.Target.JS.CodeGeneratorJS.c;251;49_358}> 1 (StdList.length_47 _x_1)) "," s_3)) "){return [") id_5) ",") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_2 s_3)) "$n") (_ -> let newargs_1_0 = <{Sapl.Target.JS.CodeGeneratorJS.c;251;49_358}> 1 (StdList.length_47 _x_1) in <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;247;11_412}> (StdList.any Sapl.SaplStruct.isStrictVar_15 _x_1) name_2 _x_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_355 newargs_1_0 "," s_3)) "){return [") id_5) ",") (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_2 s_3)) "$n") ",") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_355 newargs_1_0 "," s_3))
<{Sapl.Target.JS.CodeGeneratorJS._if;247;11_412}> !_x_0::B name_1 _x_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_20 name_1) _x_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;247;11_411}> !_x_0::B name_1 _x_2 s_3 a_4 = case _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure_349 (Sapl.SaplStruct.unpackVar_20 name_1) _x_2 s_3 a_4) (_ -> a_4)
Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder !_x_0 !a_1 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplStruct.TypedVar t_2_0 _x_2_1 -> case _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "\"") (Sapl.SaplStruct.unpackVar_20 t_2_0)) "\"") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "\"") (Sapl.SaplStruct.unpackVar_20 t_2_0)) "\",") (Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder _x_1_1))) ) (_predefined._Nil -> a_1) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_87 !_x_0 !s_1 !a_2 = case _x_0 (Sapl.SaplStruct.SaplConstructor name_1_0 id_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.constructorCoder name_1_0 id_1_1 args_1_2 s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_86 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_87 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_88 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_87 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_359 !s_0 !a_1 !t_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_87 t_2 s_0 a_1
Sapl.Target.JS.CodeGeneratorJS.foldl_360 s_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_360 s_0 (Sapl.Target.JS.CodeGeneratorJS.anon_359 s_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.funcCoder !_x_0 !s_1 !a_2 = case _x_0 (Sapl.SaplStruct.FTFunc name_1_0 body_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.normalFunc name_1_0 (Sapl.Transform.AddSelectors.addSelectors_0 body_1_1) args_1_2 s_1 a_2) (Sapl.SaplStruct.FTMacro name_1_0 body_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.normalFunc name_1_0 body_1_1 args_1_2 s_1 a_2) (Sapl.SaplStruct.FTCAF name_1_0 body_1_1 -> Sapl.Target.JS.CodeGeneratorJS.encodeCAF name_1_0 body_1_1 s_1 a_2) (Sapl.SaplStruct.FTADT name_1_0 args_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_360 s_1 a_2 args_1_1) (Sapl.SaplStruct.FTRecord name_1_0 args_1_1 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.constructorCoder name_1_0 0 args_1_1 s_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_99 name_1_0 s_1)) ".$f=[") (Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder args_1_1)) "];") 
Sapl.Target.JS.CodeGeneratorJS.anon_42 state_0 a_1 curr_2 = <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.funcCoder curr_2 state_0)
Sapl.Target.JS.CodeGeneratorJS.foldl_361 sf_0 !r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_361 sf_0 (Sapl.Target.JS.CodeGeneratorJS.upd_43 sf_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_362 _x_0 v_1 acc_2 = Sapl.Target.JS.CodeGeneratorJS.anon_116 v_1 acc_2
Sapl.Target.JS.CodeGeneratorJS.foldl_363 state_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_363 state_0 (Sapl.Target.JS.CodeGeneratorJS.anon_42 state_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.generateJS !f_0 !tramp_1::B !saplsrc_2 !mbPst_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;794;7_416}> (Sapl.SaplParser.parse (Sapl.SaplTokenizer.tokensWithPositions saplsrc_2)) f_0 mbPst_3 tramp_1
<{Sapl.Target.JS.CodeGeneratorJS._c;794;7_416}> !_x_0 f_1 mbPst_2 tramp_3::B = case _x_0 (Data.Error.Ok _x_1_0 -> case _x_1_0 (_Tuple2 funcs_2_0 s_2_1 -> let _x_3_0 = <{Sapl.Target.JS.CodeGeneratorJS._if;796;43_414}> (Sapl.Target.Flavour.isSet f_1 "enableStrictnessPropagation") s_2_1 mbPst_2 f_1 funcs_2_0, newpst_3_1 = select _x_3_0::_Tuple2 1, _x_3_2 = Sapl.Target.JS.CodeGeneratorJS.foldl_361 (Sapl.Optimization.StrictnessPropagation.isStrictArgFlavour f_1 newpst_3_1) (_Tuple2 _predefined._Nil Data.Map.newMap) (select _x_3_0::_Tuple2 0) in Data.Error.Ok (_Tuple2 (Sapl.Target.JS.CodeGeneratorJS.foldl_363 (Sapl.Target.JS.CodeGeneratorJS.newState f_1 tramp_3 newpst_3_1) (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;800;29_415}> tramp_3) "*/") (<{StdList.++}> (StdList.reverse (select _x_3_2::_Tuple2 0)) (Data.Map.foldrWithKey Sapl.Target.JS.CodeGeneratorJS.anon_362 _predefined._Nil (select _x_3_2::_Tuple2 1)))) newpst_3_1)) ) (Data.Error.Error msg_1_0 -> Data.Error.Error msg_1_0) 
<{Sapl.Target.JS.CodeGeneratorJS._if;800;29_415}> !tramp_0::B = case tramp_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> Text.StringAppender.newAppender "\"use strict\";") "/*Trampoline: ") "ON") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> Text.StringAppender.newAppender "\"use strict\";") "/*Trampoline: ") "OFF")
<{Sapl.Target.JS.CodeGeneratorJS._if;796;43_414}> !_x_0::B s_1 mbPst_2 f_3 funcs_4 = case _x_0 (True -> Sapl.Optimization.StrictnessPropagation.doStrictnessPropagation (Sapl.SaplParser.mergeParserStates s_1 mbPst_2) (Sapl.Optimization.StrictnessPropagation.isStrictArgFlavour f_3) funcs_4) (_ -> _Tuple2 funcs_4 (Sapl.SaplParser.mergeParserStates s_1 mbPst_2))
Sapl.Target.JS.CodeGeneratorJS.foldl_118 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_118 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_44 state_0 a_1 curr_2 = <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.funcCoder curr_2 state_0)
Sapl.Target.JS.CodeGeneratorJS.foldl_364 state_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_364 state_0 (Sapl.Target.JS.CodeGeneratorJS.anon_44 state_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.exprGenerateJS !f_0 !tramp_1::B !saplsrc_2 !mbPst_3 !out_4 = <{Sapl.Target.JS.CodeGeneratorJS._c;817;7_417}> (Sapl.SaplParser.parseExpr (Sapl.SaplTokenizer.tokensWithPositions saplsrc_2)) f_0 tramp_1 mbPst_3 out_4
<{Sapl.Target.JS.CodeGeneratorJS._c;817;7_417}> !_x_0 f_1 tramp_2::B mbPst_3 out_4 = case _x_0 (Data.Error.Ok _x_1_0 -> case _x_1_0 (_Tuple2 body_2_0 s_2_1 -> let newpst_3_0 = Sapl.SaplParser.mergeParserStates s_2_1 mbPst_3, state_3_1 = Sapl.Target.JS.CodeGeneratorJS.newState f_1 tramp_2 newpst_3_0 in Data.Error.Ok (_Tuple3 (Text.StringAppender.toString_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_105 (select (Sapl.Target.JS.Lifting.prepareExpr (Sapl.Optimization.StrictnessPropagation.isStrictArgFlavour f_1 newpst_3_0) body_2_0 Data.Map.newMap)::_Tuple2 0) (update state_3_1::Sapl.Target.JS.CodeGeneratorJS._CoderState [0:Data.Maybe.Just (Sapl.SaplStruct.TypedVar (Sapl.SaplStruct.NormalVar "__dummy" 0) Sapl.SaplStruct.NoType)]) Text.StringAppender.newAppender)) (Sapl.Target.JS.CodeGeneratorJS.foldl_364 state_3_1 out_4 (select s_2_1::Sapl.SaplParser._ParserState 4)) newpst_3_0)) ) (Data.Error.Error msg_1_0 -> Data.Error.Error msg_1_0) 
Sapl.Target.JS.CodeGeneratorJS.isDependent::B !vs_0 !_x_1 = case _x_1 (Sapl.SaplStruct.SApplication _x_1_0 as_1_1 -> case _x_1_0 (Sapl.SaplStruct.SVar f_2_0 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.isDependent vs_0) (_predefined._Cons (Sapl.SaplStruct.SVar f_2_0) as_1_1)) ) (Sapl.SaplStruct.SVar v_1_0 -> Data.List.elem_by Sapl.SaplStruct.eqVarByNameLevel v_1_0 vs_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_89 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_90 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_91 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_90 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_101 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_103 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_102 t_0 s_1 a_2
<{Sapl.Target.JS.CodeGeneratorJS.TD;CoderState}> _x_0::B = _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.TD;TermCoder;}> _x_0::B = _predefined._Nil


|| Converted Records
:: Sapl.Target.JS.CodeGeneratorJS._CoderState = {!Sapl.Target.JS.CodeGeneratorJS.cs_inbody, !Sapl.Target.JS.CodeGeneratorJS.cs_intrfunc, !Sapl.Target.JS.CodeGeneratorJS.cs_inletbind, !Sapl.Target.JS.CodeGeneratorJS.cs_futuredefs, !Sapl.Target.JS.CodeGeneratorJS.cs_incaseexpr::B, !Sapl.Target.JS.CodeGeneratorJS.cs_current_vars, !Sapl.Target.JS.CodeGeneratorJS.cs_constructors, !Sapl.Target.JS.CodeGeneratorJS.cs_functions, !Sapl.Target.JS.CodeGeneratorJS.cs_CAFs, !Sapl.Target.JS.CodeGeneratorJS.cs_builtins, !Sapl.Target.JS.CodeGeneratorJS.cs_inlinefuncs, !Sapl.Target.JS.CodeGeneratorJS.cs_trampoline::B, !Sapl.Target.JS.CodeGeneratorJS.cs_prefix}

:: <{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> = {!Sapl.Target.JS.CodeGeneratorJS.forceTermCoder, !Sapl.Target.JS.CodeGeneratorJS.termCoder, !Sapl.Target.JS.CodeGeneratorJS.trampolineCoder}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_s;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_s}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_ss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_sss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_ssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_sssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_s;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_s}

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_ss;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_ss}

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_sss;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_sss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssssss}

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssssssss;}> = {!Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssssssss}

