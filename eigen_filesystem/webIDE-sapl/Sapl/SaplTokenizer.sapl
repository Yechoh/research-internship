|| ?module? Sapl.SaplTokenizer


Sapl.SaplTokenizer.rnoarg_26 !<{_v+_0}> start_1 t_2 length_3 = _Tuple3 start_1 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 start_1 length_3) t_2
Sapl.SaplTokenizer.anon_23::B prev_0 !str_1 !base_2::I = StdBool.not (Sapl.FastString.matchAt "}>" str_1 base_2)
Sapl.SaplTokenizer.find_first_string::I !line_0 !start_1::I f_2 = case (<{StdInt.==_16}> start_1 (_SystemArray.size_20 line_0)) (True -> _SystemArray.size_20 line_0) (False -> case (f_2 (_SystemArray.select_19 line_0 (<{StdInt.-_7}> start_1 1)) line_0 start_1) (True -> Sapl.SaplTokenizer.find_first_string line_0 (<{StdInt.+_6}> start_1 1) f_2) (False -> start_1) ) 
Sapl.SaplTokenizer.return_27 start_0 !_x_1 = case _x_1 (_Tuple2 a_1_0 newbase_1_1 -> _Tuple3 start_0 newbase_1_1 a_1_0) 
Sapl.SaplTokenizer.anon_24::B prev_0 !str_1 !base_2::I = StdBool.not (Sapl.FastString.matchAt "}>" str_1 base_2)
Sapl.SaplTokenizer.not_eol::B !c_0::C = StdBool.not (<{StdChar.==_18}> c_0 '\n')
Sapl.SaplTokenizer.eof_20::B !_vArray_0 str_1 !p_2::I = StdBool.not (<{StdInt.<_17}> p_2 (select _vArray_0::<{_SystemArray.Array;}> 4 str_1))
Sapl.SaplTokenizer.dti_22::I !c_0::C = case (case (StdBool.not (<{StdChar.<_19}> c_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_0)) (False -> False) ) (True -> StdInt.toInt_20 (<{StdChar.-_15}> c_0 '0')) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'a')) (True -> StdBool.not (<{StdChar.<_19}> 'f' c_0)) (False -> False) ) (True -> <{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'a'))) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_0 'A')) (True -> StdBool.not (<{StdChar.<_19}> 'F' c_0)) (False -> False) ) (True -> <{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'A'))) ) ) 
Sapl.SaplTokenizer.decodeTable_21 = _SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray._createArray_8 8) 7 268435456) 6 16777216) 5 1048576) 4 65536) 3 4096) 2 256) 1 16) 0 1
<{Sapl.SaplTokenizer.decodeHex`_17}> !_vArray_0 str_1 !p_2::I !len_3::I !s_4::I !acc_5::I = case (<{StdInt.==_16}> s_4 0) (True -> <{_Tuple2!3}> (<{StdInt.+_6}> (<{StdInt.+_6}> p_2 len_3) 1) (Text.Unicode.UChar.fromInt_25 acc_5)) (False -> case (StdChar.isHexDigit (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 (<{StdInt.+_6}> p_2 s_4))) (True -> <{Sapl.SaplTokenizer.decodeHex`_17}> _vArray_0 str_1 p_2 len_3 (<{StdInt.-_7}> s_4 1) (<{StdInt.+_6}> acc_5 (<{StdInt.*_9}> (_SystemArray.select_11 Sapl.SaplTokenizer.decodeTable_21 (<{StdInt.-_7}> len_3 s_4)) (Sapl.SaplTokenizer.dti_22 (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 (<{StdInt.+_6}> p_2 s_4)))))) (False -> <{_Tuple2!3}> (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2))) ) 
Sapl.SaplTokenizer.decodeHex_16 !_vArray_0 str_1 !p_2::I !len_3::I !s_4::I !acc_5::I = case (Sapl.SaplTokenizer.eof_20 _vArray_0 str_1 (<{StdInt.+_6}> p_2 len_3)) (True -> <{_Tuple2!3}> (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2))) (False -> <{Sapl.SaplTokenizer.decodeHex`_17}> _vArray_0 str_1 p_2 len_3 s_4 acc_5) 
Sapl.SaplTokenizer.decodeBSChar_19 !_vArray_0 str_1 !p_2::I = case (Sapl.SaplTokenizer.eof_20 _vArray_0 str_1 p_2) (True -> _Tuple2 p_2 (Text.Unicode.UChar.fromChar_26 '\\')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) '0') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromInt_25 0)) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'a') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromInt_25 7)) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'b') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\b')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'f') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\f')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'n') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\n')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'r') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\r')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 't') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\t')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'v') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\v')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) '\'') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\'')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) '"') (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '"')) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'x') (True -> Sapl.SaplTokenizer.decodeHex_16 _vArray_0 str_1 p_2 2 2 0) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'u') (True -> Sapl.SaplTokenizer.decodeHex_16 _vArray_0 str_1 p_2 4 4 0) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2) 'U') (True -> Sapl.SaplTokenizer.decodeHex_16 _vArray_0 str_1 p_2 8 8 0) (False -> _Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_2))) ) ) ) ) ) ) ) ) ) ) ) ) ) 
Sapl.SaplTokenizer.decode_18 !_vArray_0 str_1 qc_2::C !p_3::I cs_4 = case (Sapl.SaplTokenizer.eof_20 _vArray_0 str_1 p_3) (True -> _Tuple2 p_3 cs_4) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_3) qc_2) (True -> _Tuple2 (<{StdInt.+_6}> p_3 1) cs_4) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_3) '\\') (True -> let _x_4_0 = Sapl.SaplTokenizer.decodeBSChar_19 _vArray_0 str_1 (<{StdInt.+_6}> p_3 1) in Sapl.SaplTokenizer.decode_18 _vArray_0 str_1 qc_2 (select _x_4_0::_Tuple2 0) (_predefined._Cons (select _x_4_0::_Tuple2 1) cs_4)) (False -> Sapl.SaplTokenizer.decode_18 _vArray_0 str_1 qc_2 (<{StdInt.+_6}> p_3 1) (_predefined._Cons (Text.Unicode.UChar.fromChar_26 (select _vArray_0::<{_SystemArray.Array;}> 3 str_1 p_3)) cs_4)) ) ) 
<{Sapl.SaplTokenizer.decodeHex`_42}> str_0 !p_1::I !len_2::I !s_3::I !acc_4::I = case (<{StdInt.==_16}> s_3 0) (True -> <{_Tuple2!3}> (<{StdInt.+_6}> (<{StdInt.+_6}> p_1 len_2) 1) (Text.Unicode.UChar.fromInt_25 acc_4)) (False -> case (StdChar.isHexDigit (_SystemArray.select_19 str_0 (<{StdInt.+_6}> p_1 s_3))) (True -> <{Sapl.SaplTokenizer.decodeHex`_42}> str_0 p_1 len_2 (<{StdInt.-_7}> s_3 1) (<{StdInt.+_6}> acc_4 (<{StdInt.*_9}> (_SystemArray.select_11 Sapl.SaplTokenizer.decodeTable_21 (<{StdInt.-_7}> len_2 s_3)) (Sapl.SaplTokenizer.dti_22 (_SystemArray.select_19 str_0 (<{StdInt.+_6}> p_1 s_3)))))) (False -> <{_Tuple2!3}> (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))) ) 
Sapl.SaplTokenizer.eof_39::B !str_0 !p_1::I = StdBool.not (<{StdInt.<_17}> p_1 (_SystemArray.size_20 str_0))
Sapl.SaplTokenizer.decodeHex_41 !str_0 !p_1::I !len_2::I !s_3::I !acc_4::I = case (Sapl.SaplTokenizer.eof_39 str_0 (<{StdInt.+_6}> p_1 len_2)) (True -> <{_Tuple2!3}> (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))) (False -> <{Sapl.SaplTokenizer.decodeHex`_42}> str_0 p_1 len_2 s_3 acc_4) 
Sapl.SaplTokenizer.decodeBSChar_40 !str_0 !p_1::I = case (Sapl.SaplTokenizer.eof_39 str_0 p_1) (True -> _Tuple2 p_1 (Text.Unicode.UChar.fromChar_26 '\\')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '0') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromInt_25 0)) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'a') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromInt_25 7)) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'b') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\b')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'f') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\f')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'n') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\n')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'r') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\r')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 't') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\t')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'v') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\v')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '\'') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\'')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '"') (True -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '"')) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'x') (True -> Sapl.SaplTokenizer.decodeHex_41 str_0 p_1 2 2 0) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'u') (True -> Sapl.SaplTokenizer.decodeHex_41 str_0 p_1 4 4 0) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'U') (True -> Sapl.SaplTokenizer.decodeHex_41 str_0 p_1 8 8 0) (False -> _Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))) ) ) ) ) ) ) ) ) ) ) ) ) ) 
Sapl.SaplTokenizer.decode_38 !str_0 qc_1::C !p_2::I cs_3 = case (Sapl.SaplTokenizer.eof_39 str_0 p_2) (True -> _Tuple2 p_2 cs_3) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_2) qc_1) (True -> _Tuple2 (<{StdInt.+_6}> p_2 1) cs_3) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_2) '\\') (True -> let _x_4_0 = Sapl.SaplTokenizer.decodeBSChar_40 str_0 (<{StdInt.+_6}> p_2 1) in Sapl.SaplTokenizer.decode_38 str_0 qc_1 (select _x_4_0::_Tuple2 0) (_predefined._Cons (select _x_4_0::_Tuple2 1) cs_3)) (False -> Sapl.SaplTokenizer.decode_38 str_0 qc_1 (<{StdInt.+_6}> p_2 1) (_predefined._Cons (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_2)) cs_3)) ) ) 
Sapl.SaplTokenizer.read_string_lit !qc_0::C !start_1::I !str_2 = let _x_1_0 = Sapl.SaplTokenizer.decode_38 str_2 qc_0 start_1 _predefined._Nil in <{_Tuple2!3}> (select _x_1_0::_Tuple2 0) (StdList.reverse (select _x_1_0::_Tuple2 1))
Sapl.SaplTokenizer.readExp_29 !line_0 !start_1::I = case (<{StdInt.<_17}> (_SystemArray.size_20 line_0) (<{StdInt.+_6}> start_1 2)) (True -> _Tuple2 0 start_1) (False -> case (case (StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 line_0 start_1) 'e')) (True -> StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 line_0 start_1) 'E')) (False -> False) ) (True -> _Tuple2 0 start_1) (False -> let signskip_3_0::I = <{Sapl.SaplTokenizer._if;179;20_49}> (StdChar.isDigit (_SystemArray.select_19 line_0 (<{StdInt.+_6}> start_1 1))), stop_3_1::I = Sapl.FastString.skipChars line_0 (<{StdInt.+_6}> (<{StdInt.+_6}> start_1 1) signskip_3_0) StdChar.isDigit in _Tuple2 (<{StdInt.*_9}> (<{Sapl.SaplTokenizer._c;175;16_50}> (_SystemArray.select_19 line_0 (<{StdInt.+_6}> start_1 1))) (StdInt.toInt_23 (<{StdString.%_10}> line_0 (_Tuple2 (<{StdInt.+_6}> (<{StdInt.+_6}> start_1 1) signskip_3_0) (<{StdInt.-_7}> stop_3_1 1))))) stop_3_1) ) 
<{Sapl.SaplTokenizer._c;175;16_50}>::I !_x_0::C = case _x_0 ('+' -> 1) ('-' -> -1) (_ -> 1)
<{Sapl.SaplTokenizer._if;179;20_49}>::I !_x_0::B = case _x_0 (True -> 0) (_ -> 1)
Sapl.SaplTokenizer.tstr_25 !<{_v%_0}> line_1 start_2::I stop_3::I = select <{_v%_0}>::<{StdOverloaded.%;}> 0 line_1 (_Tuple2 start_2 (<{StdInt.-_7}> stop_3 1))
Sapl.SaplTokenizer.tstr_43 !line_0 !start_1::I !stop_2::I = <{StdString.%_10}> line_0 (_Tuple2 start_1 (<{StdInt.-_7}> stop_2 1))
Sapl.SaplTokenizer.numberToken_28 line_0 start_1::I p1_2::I = let fpart_1_0::I = Sapl.FastString.skipChars line_0 (<{StdInt.+_6}> start_1 p1_2) StdChar.isDigit, _x_1_1 = <{Sapl.SaplTokenizer._if;160;25_52}> (Sapl.SaplTokenizer._f51_51 (<{StdInt.<_17}> fpart_1_0 (_SystemArray.size_20 line_0)) line_0 fpart_1_0) line_0 fpart_1_0, stop_1_2::I = select _x_1_1::_Tuple2 1, _x_1_3 = Sapl.SaplTokenizer.readExp_29 line_0 stop_1_2, exp_1_4::I = select _x_1_3::_Tuple2 0 in Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (<{Sapl.SaplTokenizer._if;163;25_54}> (Sapl.SaplTokenizer._f53_53 (select _x_1_1::_Tuple2 0) exp_1_4) line_0 start_1 stop_1_2 exp_1_4)) (select _x_1_3::_Tuple2 1))
<{Sapl.SaplTokenizer._if;163;25_54}> !_x_0::B line_1 start_2::I stop_3::I exp_4::I = case _x_0 (True -> Sapl.SaplTokenizer.LReal (<{StdReal.*_4}> (StdReal.toReal_15 (Sapl.SaplTokenizer.tstr_43 line_1 start_2 stop_3)) (<{StdReal.^_7}> 10.0 (StdReal.toReal_13 exp_4)))) (_ -> Sapl.SaplTokenizer.LInt (StdInt.toInt_23 (Sapl.SaplTokenizer.tstr_43 line_1 start_2 stop_3)))
Sapl.SaplTokenizer._f53_53::B !_x_0::B exp_1::I = case _x_0 (True -> True) (_ -> StdBool.not (<{StdInt.==_16}> exp_1 0))
<{Sapl.SaplTokenizer._if;160;25_52}> !_x_0::B line_1 fpart_2::I = case _x_0 (True -> _Tuple2 True (Sapl.FastString.skipChars line_1 (<{StdInt.+_6}> fpart_2 1) StdChar.isDigit)) (_ -> _Tuple2 False fpart_2)
Sapl.SaplTokenizer._f51_51::B !_x_0::B line_1 fpart_2::I = case _x_0 (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_1 fpart_2) '.') (_ -> False)
Sapl.SaplTokenizer.anon_37 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.SaplTokenizer.is_stopchar::B !char_0::C = case (<{StdChar.==_18}> char_0 '=') (True -> True) (False -> case (<{StdChar.==_18}> char_0 ':') (True -> True) (False -> case (<{StdChar.==_18}> char_0 ')') (True -> True) (False -> case (<{StdChar.==_18}> char_0 '(') (True -> True) (False -> case (<{StdChar.==_18}> char_0 '|') (True -> True) (False -> case (<{StdChar.==_18}> char_0 '{') (True -> True) (False -> case (<{StdChar.==_18}> char_0 '}') (True -> True) (False -> case (<{StdChar.==_18}> char_0 ',') (True -> True) (False -> case (<{StdChar.==_18}> char_0 '[') (True -> True) (False -> case (<{StdChar.==_18}> char_0 ']') (True -> True) (False -> StdChar.isSpace char_0) ) ) ) ) ) ) ) ) ) 
Sapl.SaplTokenizer.anon_44::B !g_0 x_1 = StdBool.not (g_0 x_1)
Sapl.SaplTokenizer.anon_45::B !x_0::C = StdBool.not (Sapl.SaplTokenizer.is_stopchar x_0)
Sapl.SaplTokenizer.not_stopchar = Sapl.SaplTokenizer.anon_45
Sapl.SaplTokenizer.is_space::B !c_0::C = case (StdChar.isSpace c_0) (True -> Sapl.SaplTokenizer.not_eol c_0) (False -> False) 
Sapl.SaplTokenizer.rnoarg_46 start_0::I t_1 length_2::I = _Tuple3 start_0 (<{StdInt.+_6}> start_0 length_2) t_1
Sapl.SaplTokenizer.read_token !base_0::I !line_1 = let start_1_0::I = Sapl.FastString.skipChars line_1 base_0 Sapl.SaplTokenizer.is_space in case (<{StdInt.<_17}> (<{StdInt.-_7}> (_SystemArray.size_20 line_1) 1) start_1_0) (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TEndOfLine 0) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '\n') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TEndOfLine 1) (False -> case (Sapl.FastString.matchAt "!<{" line_1 start_1_0) (True -> let stop_5_0::I = Sapl.SaplTokenizer.find_first_string line_1 (<{StdInt.+_6}> start_1_0 3) Sapl.SaplTokenizer.anon_23 in Sapl.SaplTokenizer.return_27 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TStrictIdentifier (<{StdString.%_10}> line_1 (_Tuple2 (<{StdInt.+_6}> start_1_0 3) (<{StdInt.-_7}> stop_5_0 1)))) (<{StdInt.+_6}> stop_5_0 2))) (False -> case (Sapl.FastString.matchAt "<{" line_1 start_1_0) (True -> let stop_6_0::I = Sapl.SaplTokenizer.find_first_string line_1 (<{StdInt.+_6}> start_1_0 2) Sapl.SaplTokenizer.anon_24 in Sapl.SaplTokenizer.return_27 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TIdentifier (<{StdString.%_10}> line_1 (_Tuple2 (<{StdInt.+_6}> start_1_0 2) (<{StdInt.-_7}> stop_6_0 1)))) (<{StdInt.+_6}> stop_6_0 2))) (False -> case (Sapl.FastString.matchAt "=:" line_1 start_1_0) (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TCAFAssignmentOp 2) (False -> case (Sapl.FastString.matchAt "::" line_1 start_1_0) (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TTypeDef 2) (False -> case (Sapl.FastString.matchAt "||" line_1 start_1_0) (True -> Sapl.SaplTokenizer.read_token (Sapl.FastString.skipChars line_1 (<{StdInt.+_6}> start_1_0 2) Sapl.SaplTokenizer.not_eol) line_1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '|') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TVerticalBar 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '=') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TAssignmentOp 1) (False -> case (Sapl.FastString.matchAt ":==" line_1 start_1_0) (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TMacroAssignmentOp 3) (False -> case (Sapl.FastString.matchAt "->" line_1 start_1_0) (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TCaseAssignmentOp 2) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ',') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TComma 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ':') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TColon 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '(') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TOpenParenthesis 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ')') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TCloseParenthesis 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '{') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TOpenBracket 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '}') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TCloseBracket 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '[') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TOpenSquareBracket 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ']') (True -> Sapl.SaplTokenizer.rnoarg_46 start_1_0 Sapl.SaplTokenizer.TCloseSquareBracket 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '"') (True -> let _x_22_0 = Sapl.SaplTokenizer.read_string_lit '"' (<{StdInt.+_6}> start_1_0 1) line_1 in Sapl.SaplTokenizer.return_27 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LString (select _x_22_0::_Tuple2 1))) (select _x_22_0::_Tuple2 0))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '\'') (True -> let _x_23_0 = Sapl.SaplTokenizer.read_string_lit '\'' (<{StdInt.+_6}> start_1_0 1) line_1 in Sapl.SaplTokenizer.return_27 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LChar (select _x_23_0::_Tuple2 1))) (select _x_23_0::_Tuple2 0))) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '+') (True -> Sapl.SaplTokenizer.numberToken_28 line_1 start_1_0 1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '-') (True -> Sapl.SaplTokenizer.numberToken_28 line_1 start_1_0 1) (False -> case (StdChar.isDigit (_SystemArray.select_19 line_1 start_1_0)) (True -> Sapl.SaplTokenizer.numberToken_28 line_1 start_1_0 0) (False -> let stop_26_0 = Sapl.FastString.skipChars line_1 start_1_0 Sapl.SaplTokenizer.not_stopchar, str_26_1::I = Sapl.SaplTokenizer.tstr_43 line_1 start_1_0 stop_26_0 in <{Sapl.SaplTokenizer._c;138;11_55}> str_26_1 start_1_0 stop_26_0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
<{Sapl.SaplTokenizer._c;138;11_55}> !str_0 !start_1::I !stop_2::I = case str_0 ("False" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool False)) stop_2)) ("false" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool False)) stop_2)) ("True" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool True)) stop_2)) ("true" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool True)) stop_2)) ("case" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 Sapl.SaplTokenizer.TCaseKeyword stop_2)) ("select" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 Sapl.SaplTokenizer.TSelectKeyword stop_2)) ("update" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 Sapl.SaplTokenizer.TUpdateKeyword stop_2)) ("let" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 Sapl.SaplTokenizer.TLetKeyword stop_2)) ("in" -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 Sapl.SaplTokenizer.TInKeyword stop_2)) (_ -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_0 0) '!') (True -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TStrictIdentifier (<{StdString.%_10}> str_0 (_Tuple2 1 (_SystemArray.size_20 str_0)))) stop_2)) (False -> Sapl.SaplTokenizer.return_27 start_1 (_Tuple2 (Sapl.SaplTokenizer.TIdentifier str_0) stop_2)) )
Sapl.SaplTokenizer.tokens__32 !inp_0 !base_1::I ts_2 = case (<{StdInt.<_17}> base_1 (_SystemArray.size_20 inp_0)) (True -> let _x_2_0 = Sapl.SaplTokenizer.read_token base_1 inp_0 in Sapl.SaplTokenizer.tokens__32 inp_0 (select _x_2_0::_Tuple3 1) (_predefined._Cons (select _x_2_0::_Tuple3 2) ts_2)) (False -> StdList.reverse ts_2) 
Sapl.SaplTokenizer.tokens !inp_0 = Sapl.SaplTokenizer.tokens__32 inp_0 0 _predefined._Nil
Sapl.SaplTokenizer.finalise_30 _x_0::I _x_1::I !ts_2 = case ts_2 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Sapl.SaplTokenizer.PosToken _x_2_0 _x_2_1 _x_2_2 -> case _x_2_2 (Sapl.SaplTokenizer.TEndOfLine -> StdList.reverse ts_2) ) ) (_ -> StdList.reverse (_predefined._Cons (Sapl.SaplTokenizer.PosToken _x_0 _x_1 Sapl.SaplTokenizer.TEndOfLine) ts_2))
Sapl.SaplTokenizer.tokens__31 !inp_0 lp_1::I cp_2::I !base_3::I ts_4 = <{Sapl.SaplTokenizer._c;188;15_57}> (<{StdInt.<_17}> base_3 (_SystemArray.size_20 inp_0)) base_3 inp_0 lp_1 cp_2 ts_4
<{Sapl.SaplTokenizer._c;188;15_57}> !_x_0::B base_1::I inp_2 lp_3::I cp_4::I ts_5 = case _x_0 (True -> let _x_2_0::I = Sapl.SaplTokenizer.read_token base_1 inp_2, t_2_1::I = select _x_2_0::_Tuple3 2, newbase_2_2 = select _x_2_0::_Tuple3 1, cp2_2_3 = select _x_2_0::_Tuple3 0 in <{Sapl.SaplTokenizer._c;190;29_56}> t_2_1 inp_2 lp_3 newbase_2_2 cp_4 cp2_2_3 base_1 ts_5) (_ -> Sapl.SaplTokenizer.finalise_30 lp_3 cp_4 ts_5)
<{Sapl.SaplTokenizer._c;190;29_56}> !t_0 !inp_1 lp_2::I !newbase_3::I cp_4::I cp2_5::I base_6::I ts_7 = case t_0 (Sapl.SaplTokenizer.TEndOfLine -> Sapl.SaplTokenizer.tokens__31 inp_1 (<{StdInt.+_6}> lp_2 1) 1 newbase_3 (_predefined._Cons (Sapl.SaplTokenizer.PosToken lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 cp2_5) base_6) t_0) ts_7)) (_ -> Sapl.SaplTokenizer.tokens__31 inp_1 lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 newbase_3) base_6) newbase_3 (_predefined._Cons (Sapl.SaplTokenizer.PosToken lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 cp2_5) base_6) t_0) ts_7))
Sapl.SaplTokenizer.tokensWithPositions !inp_0 = Sapl.SaplTokenizer.tokens__31 inp_0 1 1 0 _predefined._Nil
Sapl.SaplTokenizer.toStringR !r_0::D = case (<{StdReal.==_11}> (<{StdReal.-_2}> r_0 (StdReal.toReal_13 (StdReal.entier r_0))) 0.0) (True -> <{StdString.+++_11}> (StdString.toString_7 r_0) ".0") (False -> StdString.toString_7 r_0) 
Sapl.SaplTokenizer.is_ss_35::B !c_0::C = StdBool.not (Sapl.SaplTokenizer._f58_58 (StdChar.isAlphanum c_0) c_0)
Sapl.SaplTokenizer._f58_58::B !_x_0::B c_1::C = case _x_0 (True -> True) (_ -> case (<{StdChar.==_18}> c_1 '_') (True -> True) (False -> <{StdChar.==_18}> c_1 '.') )
<{Sapl.SaplTokenizer.c;244;24_33}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (Sapl.SaplTokenizer.is_ss_35 (select _x_2_1::_Tuple2 0)) (<{Sapl.SaplTokenizer.c;244;24_33}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
Sapl.SaplTokenizer.ss_34::B !_vArray_0 f_1 = let _x_1_0 = select _vArray_0::<{_SystemArray.Array;}> 7 f_1 in StdList.or (<{Sapl.SaplTokenizer.c;244;24_33}> _vArray_0 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1))
<{Sapl.SaplTokenizer.c;244;24_48}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (Sapl.SaplTokenizer.is_ss_35 (select _x_2_1::_Tuple2 0)) (<{Sapl.SaplTokenizer.c;244;24_48}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
Sapl.SaplTokenizer.ss_47::B !f_0 = let _x_1_0 = _SystemArray.usize_23 f_0 in StdList.or (<{Sapl.SaplTokenizer.c;244;24_48}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1))
Sapl.SaplTokenizer.escape !f_0 = case (Sapl.SaplTokenizer.ss_47 f_0) (True -> <{StdString.+++_11}> "<{" (<{StdString.+++_11}> f_0 "}>")) (False -> f_0) 
Sapl.SaplTokenizer.toString_3 !_x_0 = case _x_0 (Sapl.SaplTokenizer.LString ustr_1_0 -> <{StdString.+++_11}> "\"" (<{StdString.+++_11}> (Text.Unicode.Encodings.JS.toJSLiteral ustr_1_0) "\"")) (Sapl.SaplTokenizer.LChar uchr_1_0 -> <{StdString.+++_11}> "'" (<{StdString.+++_11}> (Text.Unicode.Encodings.JS.toJSLiteral uchr_1_0) "'")) (Sapl.SaplTokenizer.LInt int_1_0 -> StdString.toString_5 int_1_0) (Sapl.SaplTokenizer.LReal real_1_0 -> Sapl.SaplTokenizer.toStringR real_1_0) (Sapl.SaplTokenizer.LBool _x_1_0 -> case _x_1_0 (True -> "True") (False -> "False") ) 
Sapl.SaplTokenizer.toString_4 !_x_0 = case _x_0 (Sapl.SaplTokenizer.TIdentifier name_1_0 -> Sapl.SaplTokenizer.escape name_1_0) (Sapl.SaplTokenizer.TStrictIdentifier name_1_0 -> <{StdString.+++_11}> "!" (Sapl.SaplTokenizer.escape name_1_0)) (Sapl.SaplTokenizer.TComment comment_1_0 -> <{StdString.+++_11}> "||" comment_1_0) (Sapl.SaplTokenizer.TInlineAnnotation -> "") (Sapl.SaplTokenizer.TAssignmentOp -> "=") (Sapl.SaplTokenizer.TMacroAssignmentOp -> ":==") (Sapl.SaplTokenizer.TCAFAssignmentOp -> "=:") (Sapl.SaplTokenizer.TComma -> ",") (Sapl.SaplTokenizer.TColon -> ":") (Sapl.SaplTokenizer.TVerticalBar -> "|") (Sapl.SaplTokenizer.TOpenParenthesis -> "(") (Sapl.SaplTokenizer.TCloseParenthesis -> ")") (Sapl.SaplTokenizer.TOpenBracket -> "{") (Sapl.SaplTokenizer.TCloseBracket -> "}") (Sapl.SaplTokenizer.TTypeDef -> "::") (Sapl.SaplTokenizer.TLit lit_1_0 -> Sapl.SaplTokenizer.toString_3 lit_1_0) (Sapl.SaplTokenizer.TCaseKeyword -> "case") (Sapl.SaplTokenizer.TSelectKeyword -> "select") (Sapl.SaplTokenizer.TLetKeyword -> "let") (Sapl.SaplTokenizer.TInKeyword -> "in") (Sapl.SaplTokenizer.TEndOfLine -> "\n") (_ -> "\n")
<{Sapl.SaplTokenizer.TD;Token}> _x_0::B = _predefined._Nil
<{Sapl.SaplTokenizer.TD;PosToken}> _x_0::B = _predefined._Nil
<{Sapl.SaplTokenizer.TD;Literal}> _x_0::B = _predefined._Nil

:: Sapl.SaplTokenizer.Token = Sapl.SaplTokenizer.TIdentifier a1 | Sapl.SaplTokenizer.TStrictIdentifier a1 | Sapl.SaplTokenizer.TComment a1 | Sapl.SaplTokenizer.TInlineAnnotation | Sapl.SaplTokenizer.TAssignmentOp | Sapl.SaplTokenizer.TCaseAssignmentOp | Sapl.SaplTokenizer.TMacroAssignmentOp | Sapl.SaplTokenizer.TCAFAssignmentOp | Sapl.SaplTokenizer.TLambda | Sapl.SaplTokenizer.TComma | Sapl.SaplTokenizer.TColon | Sapl.SaplTokenizer.TVerticalBar | Sapl.SaplTokenizer.TOpenParenthesis | Sapl.SaplTokenizer.TCloseParenthesis | Sapl.SaplTokenizer.TOpenBracket | Sapl.SaplTokenizer.TCloseBracket | Sapl.SaplTokenizer.TOpenSquareBracket | Sapl.SaplTokenizer.TCloseSquareBracket | Sapl.SaplTokenizer.TTypeDef | Sapl.SaplTokenizer.TLit a1 | Sapl.SaplTokenizer.TCaseKeyword | Sapl.SaplTokenizer.TSelectKeyword | Sapl.SaplTokenizer.TUpdateKeyword | Sapl.SaplTokenizer.TLetKeyword | Sapl.SaplTokenizer.TInKeyword | Sapl.SaplTokenizer.TEndOfLine
:: Sapl.SaplTokenizer.PosToken = Sapl.SaplTokenizer.PosToken a1::I a2::I a3
:: Sapl.SaplTokenizer.Literal = Sapl.SaplTokenizer.LString a1 | Sapl.SaplTokenizer.LChar a1 | Sapl.SaplTokenizer.LInt a1::I | Sapl.SaplTokenizer.LReal a1::D | Sapl.SaplTokenizer.LBool a1::B

|| Converted Records
