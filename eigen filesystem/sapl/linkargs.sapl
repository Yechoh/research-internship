|| ?module? linkargs


<{linkargs.emptyLinkInfo`}> = <{linkargs._LinkInfo`}> "a.exe" "" True True False False False False <{_predefined._!Nil!}> <{_predefined._!Nil!}> <{_predefined._!Nil!}> 1048576 False "" "" ""
linkargs.Strip_46 !_x_0 = case _x_0 ("" -> "") (_ -> let !last_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 _x_0) StdInt.one_11, !char_1_1::C = _SystemArray.select_19 _x_0 last_1_0 in case (case (<{StdChar.==_18}> char_1_1 '\n') (True -> True) (False -> <{StdChar.==_18}> char_1_1 '\r') ) (True -> linkargs.Strip_46 (<{StdString.%_10}> _x_0 (_Tuple2 0 (<{StdInt.-_7}> last_1_0 StdInt.one_11)))) (False -> _x_0) )
linkargs.ReadErrorLines_45 !file_0 = let !_x_1_0 = StdFile.freadline file_0, !_x_1_1 = StdFile.fend (select _x_1_0::_Tuple2 1), !errline_1_2 = linkargs.Strip_46 (select _x_1_0::_Tuple2 0) in case (select _x_1_1::_Tuple2 0) (True -> case (<{StdString.==_2}> errline_1_2 "") (True -> _Tuple2 _predefined._Nil (select _x_1_1::_Tuple2 1)) (False -> _Tuple2 (_predefined._Cons errline_1_2 _predefined._Nil) (select _x_1_1::_Tuple2 1)) ) (False -> let _x_3_0 = linkargs.ReadErrorLines_45 (select _x_1_1::_Tuple2 1) in _Tuple2 (_predefined._Cons errline_1_2 (select _x_3_0::_Tuple2 0)) (select _x_3_0::_Tuple2 1)) 
linkargs.ReadLinkErrors !errors_path_0 !files_1 = let _x_1_0 = StdFile.fopen_27 errors_path_0 0 files_1 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> _Tuple2 (_Tuple2 (Data.Maybe.Just (_predefined._Cons "Fatal read link errors..." _predefined._Nil)) _predefined._Nil) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = linkargs.ReadErrorLines_45 file_3_0, file_3_2 = select _x_3_1::_Tuple2 1, files_3_3 = select _x_1_0::_Tuple3 2, _x_3_4 = StdFile.fclose_26 file_3_2 files_3_3 in case (StdBool.not (select _x_3_4::_Tuple2 0)) (True -> _Tuple2 (_Tuple2 (Data.Maybe.Just (_predefined._Cons "Fatal close link errors..." _predefined._Nil)) _predefined._Nil) (select _x_3_4::_Tuple2 1)) (False -> _Tuple2 (_Tuple2 Data.Maybe.Nothing (select _x_3_1::_Tuple2 0)) (select _x_3_4::_Tuple2 1)) ) 
linkargs.WriteErrorLines_47 !_x_0 !file_1 = case _x_0 (_predefined._Nil -> file_1) (_predefined._Cons h_1_0 t_1_1 -> linkargs.WriteErrorLines_47 t_1_1 (StdFile.fwrites (<{StdString.+++_11}> h_1_0 "\n") file_1)) 
linkargs.WriteLinkErrors !errors_path_0 !le_1 !files_2 = let _x_1_0 = StdFile.fopen_27 errors_path_0 1 files_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> _Tuple2 (Data.Maybe.Just (_predefined._Cons "Unable to open linkerrs" _predefined._Nil)) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, file_3_1 = linkargs.WriteErrorLines_47 le_1 file_3_0, files_3_2 = select _x_1_0::_Tuple3 2, _x_3_3 = StdFile.fclose_26 file_3_1 files_3_2 in case (StdBool.not (select _x_3_3::_Tuple2 0)) (True -> _Tuple2 (Data.Maybe.Just (_predefined._Cons "Unable to close linkerrs" _predefined._Nil)) (select _x_3_3::_Tuple2 1)) (False -> _Tuple2 Data.Maybe.Nothing (select _x_3_3::_Tuple2 1)) ) 
linkargs.anon_44 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [0:v_0]
linkargs.anon_43 !a_0 = select a_0::<{linkargs._LinkInfo`}> 0
linkargs.anon_42 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [1:v_0]
linkargs.anon_41 !a_0 = select a_0::<{linkargs._LinkInfo`}> 1
linkargs.is_1_string::B !_x_0 = case _x_0 ("1" -> True) (_ -> False)
linkargs.anon_40 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [2:linkargs.is_1_string v_0]
linkargs.bool_to_1_or_0_string !_x_0::B = case _x_0 (True -> "1") (False -> "0") 
linkargs.anon_39 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 2)
linkargs.anon_38 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [3:linkargs.is_1_string v_0]
linkargs.anon_37 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 3)
linkargs.anon_36 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [4:linkargs.is_1_string v_0]
linkargs.anon_35 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 4)
linkargs.anon_34 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [5:linkargs.is_1_string v_0]
linkargs.anon_33 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 5)
linkargs.anon_32 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [6:linkargs.is_1_string v_0]
linkargs.anon_31 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 6)
linkargs.anon_30 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [7:linkargs.is_1_string v_0]
linkargs.anon_29 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 7)
linkargs.anon_28 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [8:v_0]
linkargs.anon_27 !a_0 = select a_0::<{linkargs._LinkInfo`}> 8
linkargs.PathOption !_vtoString_0 !_vfromString_1 = UtilOptions._OptionsTableEntry "Path" (UtilOptions.Simple _vtoString_0 _vfromString_1) StdFunc.id StdFunc.const
linkargs.anon_26 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [9:v_0]
linkargs.anon_25 !a_0 = select a_0::<{linkargs._LinkInfo`}> 9
linkargs.anon_24 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [10:v_0]
linkargs.anon_23 !a_0 = select a_0::<{linkargs._LinkInfo`}> 10
linkargs.anon_22 !v_0::I !a_1 = update a_1::<{linkargs._LinkInfo`}> [11:v_0]
linkargs.anon_21::I !a_0 = select a_0::<{linkargs._LinkInfo`}> 11
linkargs.anon_20 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [12:linkargs.is_1_string v_0]
linkargs.anon_19 !a_0 = linkargs.bool_to_1_or_0_string (select a_0::<{linkargs._LinkInfo`}> 12)
linkargs.anon_18 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [13:v_0]
linkargs.anon_17 !a_0 = select a_0::<{linkargs._LinkInfo`}> 13
linkargs.anon_16 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [14:v_0]
linkargs.anon_15 !a_0 = select a_0::<{linkargs._LinkInfo`}> 14
linkargs.anon_14 !v_0 !a_1 = update a_1::<{linkargs._LinkInfo`}> [15:v_0]
linkargs.anon_13 !a_0 = select a_0::<{linkargs._LinkInfo`}> 15
linkargs.fromString_49::I !s_0 = StdInt.toInt_23 s_0
linkargs.PathOption_93 !_vfromString_0 = UtilOptions._OptionsTableEntry "Path" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) _vfromString_0) StdFunc.id StdFunc.const
linkargs.PathOption_94 = UtilOptions._OptionsTableEntry "Path" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) StdFunc.id StdFunc.const
linkargs.LinkOptionsTable = _SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray.update_5 (_SystemArray._createArray_0 16) 15 (UtilOptions._OptionsTableEntry "LibNameObjPath" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_13 linkargs.anon_14)) 14 (UtilOptions._OptionsTableEntry "DynamicLinker" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_15 linkargs.anon_16)) 13 (UtilOptions._OptionsTableEntry "DLLSymbols" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_17 linkargs.anon_18)) 12 (UtilOptions._OptionsTableEntry "GenDLL" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_19 linkargs.anon_20)) 11 (UtilOptions._OptionsTableEntry "StackSize" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_5) (<{StdOverloaded.fromString;}> linkargs.fromString_49)) linkargs.anon_21 linkargs.anon_22)) 10 (UtilOptions._OptionsTableEntry "StaticLibs" (UtilOptions.List linkargs.PathOption_94 "") linkargs.anon_23 linkargs.anon_24)) 9 (UtilOptions._OptionsTableEntry "DynamicLibs" (UtilOptions.List linkargs.PathOption_94 "") linkargs.anon_25 linkargs.anon_26)) 8 (UtilOptions._OptionsTableEntry "ObjectPaths" (UtilOptions.List linkargs.PathOption_94 "") linkargs.anon_27 linkargs.anon_28)) 7 (UtilOptions._OptionsTableEntry "LinkResources" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_29 linkargs.anon_30)) 6 (UtilOptions._OptionsTableEntry "GenLinkMap" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_31 linkargs.anon_32)) 5 (UtilOptions._OptionsTableEntry "GenSymbolTable" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_33 linkargs.anon_34)) 4 (UtilOptions._OptionsTableEntry "GenRelocations" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_35 linkargs.anon_36)) 3 (UtilOptions._OptionsTableEntry "StaticLink" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_37 linkargs.anon_38)) 2 (UtilOptions._OptionsTableEntry "OpenConsole" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_39 linkargs.anon_40)) 1 (UtilOptions._OptionsTableEntry "ResPath" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_41 linkargs.anon_42)) 0 (UtilOptions._OptionsTableEntry "ExePath" (UtilOptions.Simple (<{StdOverloaded.toString;}> StdString.toString_9) (<{StdOverloaded.fromString;}> StdString.fromString_4)) linkargs.anon_43 linkargs.anon_44)
linkargs.WLO !prefs_0 = UtilOptions.PutOptions linkargs.LinkOptionsTable prefs_0
linkargs.WriteLinkOpts !linkargsPath_0 !linkargs_1 !files_2 = let !_x_1_0 = StdFile.fopen_27 linkargsPath_0 1 files_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (Data.Maybe.Just (_predefined._Cons "Fatal open link opts..." _predefined._Nil)) (select _x_1_0::_Tuple3 2)) (False -> let !options_3_0 = linkargs.WLO linkargs_1, !file_3_1 = UtilOptions.WriteOptionsFile "1.0" options_3_0 (select _x_1_0::_Tuple3 1), files_3_2 = select _x_1_0::_Tuple3 2, _x_3_3 = StdFile.fclose_26 file_3_1 files_3_2 in case (StdBool.not (select _x_3_3::_Tuple2 0)) (True -> <{_Tuple2!3}> (Data.Maybe.Just (_predefined._Cons "Fatal close link opts..." _predefined._Nil)) (select _x_3_3::_Tuple2 1)) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_3_3::_Tuple2 1)) ) 
linkargs.RLO !options_0 = UtilOptions.GetOptions linkargs.LinkOptionsTable options_0 <{linkargs.emptyLinkInfo`}>
linkargs.ReadLinkOpts !linkargsPath_0 !ps_1 = let _x_1_0 = StdFile.fopen_27 linkargsPath_0 3 ps_1 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!2}> (_Tuple3 <{linkargs.emptyLinkInfo`}> False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> linkargsPath_0 "\" could not be opened."))) (select _x_1_0::_Tuple3 2)) (False -> let file_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = UtilOptions.ReadVersion file_3_0, version_3_2 = select _x_3_1::_Tuple2 0 in case (StdBool.not (<{StdString.==_2}> version_3_2 "1.0")) (True -> <{_Tuple2!2}> (_Tuple3 <{linkargs.emptyLinkInfo`}> False (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> linkargsPath_0 (<{StdString.+++_11}> "\" has the wrong version." (<{StdString.+++_11}> version_3_2 "<<<"))))) (select (StdFile.fclose_26 (select _x_3_1::_Tuple2 1) (select _x_1_0::_Tuple3 2))::_Tuple2 1)) (False -> let !_x_5_0 = UtilOptions.ReadOptionsFile (select _x_3_1::_Tuple2 1), !linkargs_5_1 = linkargs.RLO (select _x_5_0::_Tuple2 0), !_x_5_2 = StdFile.fclose_26 (select _x_5_0::_Tuple2 1) (select _x_1_0::_Tuple3 2) in case (StdBool.not (select _x_5_2::_Tuple2 0)) (True -> <{_Tuple2!2}> (_Tuple3 linkargs_5_1 True (<{StdString.+++_11}> "The file \"" (<{StdString.+++_11}> linkargsPath_0 "\" could not be closed."))) (select _x_5_2::_Tuple2 1)) (False -> <{_Tuple2!2}> (_Tuple3 linkargs_5_1 True "") (select _x_5_2::_Tuple2 1)) ) ) 
<{linkargs.TD;LPathname}> _x_0::B = _predefined._Nil
<{linkargs.TD;LinkInfo`}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{linkargs._LinkInfo`}> = {!linkargs.exe_path, !linkargs.res_path, !linkargs.open_console::B, !linkargs.static_link::B, !linkargs.gen_relocs::B, !linkargs.gen_symbol_table::B, !linkargs.gen_linkmap::B, !linkargs.link_resources::B, !linkargs.object_paths, !linkargs.dynamic_libs, !linkargs.static_libs, !linkargs.stack_size::I, !linkargs.gen_dll::B, !linkargs.dll_names, !linkargs.dynamics_path, !linkargs.lib_name_obj_path}

:: <{linkargs.gEq_s;}> = {!linkargs.gEq_s}

:: <{linkargs.gEq_ss;}> = {!linkargs.gEq_ss}

:: <{linkargs.gEq_sss;}> = {!linkargs.gEq_sss}

:: <{linkargs.gEq_ssss;}> = {!linkargs.gEq_ssss}

:: <{linkargs.gEq_sssss;}> = {!linkargs.gEq_sssss}

:: <{linkargs.gEq_ssssss;}> = {!linkargs.gEq_ssssss}

:: <{linkargs.gEq_sssssss;}> = {!linkargs.gEq_sssssss}

:: <{linkargs.gEq_ssssssss;}> = {!linkargs.gEq_ssssssss}

:: <{linkargs.gEq_sssssssss;}> = {!linkargs.gEq_sssssssss}

:: <{linkargs.bimap_s;}> = {linkargs.bimap_s}

:: <{linkargs.bimap_ss;}> = {linkargs.bimap_ss}

:: <{linkargs.bimap_sss;}> = {linkargs.bimap_sss}

