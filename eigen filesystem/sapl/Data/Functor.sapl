|| ?module? Data.Functor


<{Data.Functor.<$>}> !_vFunctor_0 f_1 fa_2 = select _vFunctor_0::<{Data.Functor.Functor;}> 0 f_1 fa_2
<{Data.Functor.<$}> !_vFunctor_0 x_1 fa_2 = select _vFunctor_0::<{Data.Functor.Functor;}> 0 (StdFunc.const x_1) fa_2
<{Data.Functor.$>}> !_vFunctor_0 fa_1 x_2 = <{Data.Functor.<$}> _vFunctor_0 x_2 fa_1
Data.Functor.void !_vFunctor_0 x_1 = <{Data.Functor.<$}> _vFunctor_0 _predefined._Unit x_1
Data.Functor.anon_8 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Data.Functor.anon_7 !f_0 g_1 x_2 = Data.Functor.anon_8 f_0 g_1 x_2
Data.Functor.fmap_4 f_0 g_1 = Data.Functor.anon_7 f_0 g_1
Data.Functor.fmap_5 f_0 !_x_1 = case _x_1 (_Tuple2 x_1_0 y_1_1 -> _Tuple2 x_1_0 (f_0 y_1_1)) 
<{Data.Functor.TD;Functor;}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{Data.Functor.Functor;}> = {!Data.Functor.fmap}

:: <{Data.Functor.gEq_s;}> = {!Data.Functor.gEq_s}

:: <{Data.Functor.gEq_ss;}> = {!Data.Functor.gEq_ss}

:: <{Data.Functor.gEq_sss;}> = {!Data.Functor.gEq_sss}

:: <{Data.Functor.gEq_ssss;}> = {!Data.Functor.gEq_ssss}

:: <{Data.Functor.gEq_sssss;}> = {!Data.Functor.gEq_sssss}

:: <{Data.Functor.gEq_ssssss;}> = {!Data.Functor.gEq_ssssss}

:: <{Data.Functor.gEq_sssssss;}> = {!Data.Functor.gEq_sssssss}

:: <{Data.Functor.gEq_ssssssss;}> = {!Data.Functor.gEq_ssssssss}

:: <{Data.Functor.gEq_sssssssss;}> = {!Data.Functor.gEq_sssssssss}

:: <{Data.Functor.bimap_s;}> = {Data.Functor.bimap_s}

:: <{Data.Functor.bimap_ss;}> = {Data.Functor.bimap_ss}

:: <{Data.Functor.bimap_sss;}> = {Data.Functor.bimap_sss}

