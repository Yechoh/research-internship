|| ?module? Data.CircularStack


Data.CircularStack.newStack !n_0::I = Data.CircularStack._CircularStack n_0 0 0 Data.IntMap.Strict.newMap
Data.CircularStack.modulo::I !i_0::I !n_1::I = case (<{StdInt.==_16}> n_1 0) (True -> StdMisc.abort "Division by zero") (False -> case (<{StdInt.==_16}> n_1 -1) (True -> 0) (False -> case (<{StdInt.==_16}> i_0 n_1) (True -> 0) (False -> case (<{StdInt.<_17}> i_0 n_1) (True -> i_0) (False -> <{StdInt.-_7}> i_0 (<{StdInt.*_9}> (<{StdInt./_10}> i_0 n_1) n_1)) ) ) ) 
Data.CircularStack.push !x_0 !stack_1 = update stack_1::Data.CircularStack._CircularStack [1:<{Data.CircularStack._if;21;20_136}> (<{StdInt.==_16}> (select stack_1::Data.CircularStack._CircularStack 1) (select stack_1::Data.CircularStack._CircularStack 0)) stack_1,2:Data.CircularStack.modulo (<{StdInt.+_6}> (select stack_1::Data.CircularStack._CircularStack 2) 1) (select stack_1::Data.CircularStack._CircularStack 0),3:Data.IntMap.Strict.put (select stack_1::Data.CircularStack._CircularStack 2) x_0 (select stack_1::Data.CircularStack._CircularStack 3)]
<{Data.CircularStack._if;21;20_136}>::I !_x_0::B !stack_1 = case _x_0 (True -> select stack_1::Data.CircularStack._CircularStack 1) (_ -> <{StdInt.+_6}> (select stack_1::Data.CircularStack._CircularStack 1) 1)
Data.CircularStack.emptyStack::B !stack_0 = <{StdInt.==_16}> (select stack_0::Data.CircularStack._CircularStack 1) 0
Data.CircularStack.topElemIdx::I !stack_0 = case (<{StdInt.==_16}> (select stack_0::Data.CircularStack._CircularStack 2) 0) (True -> <{StdInt.-_7}> (select stack_0::Data.CircularStack._CircularStack 0) 1) (False -> <{StdInt.-_7}> (select stack_0::Data.CircularStack._CircularStack 2) 1) 
Data.CircularStack.pop !stack_0 = case (Data.CircularStack.emptyStack stack_0) (True -> _Tuple2 Data.Maybe.Nothing stack_0) (False -> let top_2_0::I = Data.CircularStack.topElemIdx stack_0 in _Tuple2 (Data.IntMap.Strict.get top_2_0 (select stack_0::Data.CircularStack._CircularStack 3)) (update stack_0::Data.CircularStack._CircularStack [1:<{StdInt.-_7}> (select stack_0::Data.CircularStack._CircularStack 1) 1,2:top_2_0])) 
Data.CircularStack.peek !stack_0 = case (Data.CircularStack.emptyStack stack_0) (True -> Data.Maybe.Nothing) (False -> Data.IntMap.Strict.get (Data.CircularStack.topElemIdx stack_0) (select stack_0::Data.CircularStack._CircularStack 3)) 
Data.CircularStack.foldr_10 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.CircularStack.foldr_10 op_0 r_1 x_1_1)) 
Data.CircularStack.foldr_135 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Data.CircularStack.push a_1_0 (Data.CircularStack.foldr_135 r_0 x_1_1)) 
Data.CircularStack.fromList !xs_0 = Data.CircularStack.foldr_135 (Data.CircularStack.newStack (StdList.length_47 xs_0)) xs_0
Data.CircularStack.toList !stack_0 = case (Data.CircularStack.emptyStack stack_0) (True -> _predefined._Nil) (False -> let _x_2_0 = Data.CircularStack.pop stack_0, stack_2_1 = select _x_2_0::_Tuple2 1 in <{Data.CircularStack._c;55;9_137}> (select _x_2_0::_Tuple2 0) stack_2_1) 
<{Data.CircularStack._c;55;9_137}> !_x_0 stack_1 = case _x_0 (Data.Maybe.Just x_1_0 -> _predefined._Cons x_1_0 (Data.CircularStack.toList stack_1)) (_ -> Data.CircularStack.toList stack_1)
<{Data.CircularStack.TD;CircularStack}> _x_0::B = _predefined._Nil


|| Converted Records
:: Data.CircularStack._CircularStack = {!Data.CircularStack.maxSize::I, !Data.CircularStack.actualSize::I, !Data.CircularStack.nextIdx::I, !Data.CircularStack.stackData}

:: <{Data.CircularStack.gEq_s;}> = {!Data.CircularStack.gEq_s}

:: <{Data.CircularStack.gEq_ss;}> = {!Data.CircularStack.gEq_ss}

:: <{Data.CircularStack.gEq_sss;}> = {!Data.CircularStack.gEq_sss}

:: <{Data.CircularStack.gEq_ssss;}> = {!Data.CircularStack.gEq_ssss}

:: <{Data.CircularStack.gEq_sssss;}> = {!Data.CircularStack.gEq_sssss}

:: <{Data.CircularStack.gEq_ssssss;}> = {!Data.CircularStack.gEq_ssssss}

:: <{Data.CircularStack.gEq_sssssss;}> = {!Data.CircularStack.gEq_sssssss}

:: <{Data.CircularStack.gEq_ssssssss;}> = {!Data.CircularStack.gEq_ssssssss}

:: <{Data.CircularStack.gEq_sssssssss;}> = {!Data.CircularStack.gEq_sssssssss}

:: <{Data.CircularStack.bimap_s;}> = {Data.CircularStack.bimap_s}

:: <{Data.CircularStack.bimap_ss;}> = {Data.CircularStack.bimap_ss}

:: <{Data.CircularStack.bimap_sss;}> = {Data.CircularStack.bimap_sss}

:: <{Data.CircularStack.JSONEncode_s;}> = {!Data.CircularStack.JSONEncode_s}

:: <{Data.CircularStack.JSONEncode_ss;}> = {!Data.CircularStack.JSONEncode_ss}

:: <{Data.CircularStack.JSONEncode_sss;}> = {!Data.CircularStack.JSONEncode_sss}

:: <{Data.CircularStack.JSONEncode_ssss;}> = {!Data.CircularStack.JSONEncode_ssss}

:: <{Data.CircularStack.JSONEncode_sssss;}> = {!Data.CircularStack.JSONEncode_sssss}

:: <{Data.CircularStack.JSONEncode_ssssss;}> = {!Data.CircularStack.JSONEncode_ssssss}

:: <{Data.CircularStack.JSONEncode_sssssss;}> = {!Data.CircularStack.JSONEncode_sssssss}

:: <{Data.CircularStack.JSONEncode_ssssssss;}> = {!Data.CircularStack.JSONEncode_ssssssss}

:: <{Data.CircularStack.JSONEncode_sssssssss;}> = {!Data.CircularStack.JSONEncode_sssssssss}

:: <{Data.CircularStack.JSONDecode_s;}> = {!Data.CircularStack.JSONDecode_s}

:: <{Data.CircularStack.JSONDecode_ss;}> = {!Data.CircularStack.JSONDecode_ss}

:: <{Data.CircularStack.JSONDecode_sss;}> = {!Data.CircularStack.JSONDecode_sss}

:: <{Data.CircularStack.JSONDecode_ssss;}> = {!Data.CircularStack.JSONDecode_ssss}

:: <{Data.CircularStack.JSONDecode_sssss;}> = {!Data.CircularStack.JSONDecode_sssss}

:: <{Data.CircularStack.JSONDecode_ssssss;}> = {!Data.CircularStack.JSONDecode_ssssss}

:: <{Data.CircularStack.JSONDecode_sssssss;}> = {!Data.CircularStack.JSONDecode_sssssss}

:: <{Data.CircularStack.JSONDecode_ssssssss;}> = {!Data.CircularStack.JSONDecode_ssssssss}

:: <{Data.CircularStack.JSONDecode_sssssssss;}> = {!Data.CircularStack.JSONDecode_sssssssss}

