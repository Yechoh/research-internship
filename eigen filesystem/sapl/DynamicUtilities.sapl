|| ?module? DynamicUtilities


DynamicUtilities.FromStringToInt::I !array_0 !i_1::I = <{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (StdInt.toInt_20 (_SystemArray.select_19 array_0 i_1)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 array_0 (<{StdInt.+_6}> i_1 1))) 8)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 array_0 (<{StdInt.+_6}> i_1 2))) 16)) (<{StdInt.<<}> (StdInt.toInt_20 (_SystemArray.select_19 array_0 (<{StdInt.+_6}> i_1 3))) 24)
DynamicUtilities.WriteLong !array_0 !i_1::I !v_2::I = _SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 array_0 i_1 (StdChar.toChar_21 v_2)) (<{StdInt.+_6}> i_1 1) (StdChar.toChar_21 (<{StdInt.>>}> v_2 8))) (<{StdInt.+_6}> i_1 2) (StdChar.toChar_21 (<{StdInt.>>}> v_2 16))) (<{StdInt.+_6}> i_1 3) (StdChar.toChar_21 (<{StdInt.>>}> v_2 24))
DynamicUtilities.NF !_x_0 = error "no AnyCodeExpr"
DynamicUtilities.ends::B !s_0 !postfix_1 = let !s_length_1_0::I = _SystemArray.size_20 s_0, !postfix_length_1_1::I = _SystemArray.size_20 postfix_1 in <{StdString.==_2}> (<{StdString.%_10}> s_0 (_Tuple2 (<{StdInt.-_7}> s_length_1_0 postfix_length_1_1) (<{StdInt.-_7}> s_length_1_0 1))) postfix_1
DynamicUtilities.CharIndexBackwards !s_0 !i_1::I !char_2::C = case (<{StdInt.==_16}> i_1 -1) (True -> <{_Tuple2!3}> False (_SystemArray.size_20 s_0)) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_0 i_1) char_2) (True -> <{_Tuple2!3}> True i_1) (False -> DynamicUtilities.CharIndexBackwards s_0 (<{StdInt.-_7}> i_1 StdInt.one_11) char_2) ) 
DynamicUtilities.ExtractPathAndFile !path_and_file_0 = let !_x_1_0 = DynamicUtilities.CharIndexBackwards path_and_file_0 (<{StdInt.-_7}> (_SystemArray.size_20 path_and_file_0) 1) '\\' in case (select _x_1_0::_Tuple2 0) (True -> let i_3_0::I = select _x_1_0::_Tuple2 1 in <{_Tuple2!3}> (<{DynamicUtilities._if;49;12_9}> (<{StdInt.==_16}> i_3_0 0) path_and_file_0 i_3_0) (<{StdString.%_10}> path_and_file_0 (_Tuple2 (<{StdInt.+_6}> i_3_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 path_and_file_0) 1)))) (False -> <{_Tuple2!3}> "" path_and_file_0) 
<{DynamicUtilities._if;49;12_9}> !_x_0::B path_and_file_1 i_2::I = case _x_0 (True -> StdString.toString_6 '\\') (_ -> <{StdString.%_10}> path_and_file_1 (_Tuple2 0 (<{StdInt.-_7}> i_2 1)))
DynamicUtilities.CharIndex !s_0 !i_1::I !char_2::C = case (<{StdInt.==_16}> i_1 (_SystemArray.size_20 s_0)) (True -> <{_Tuple2!3}> False (_SystemArray.size_20 s_0)) (False -> case (<{StdInt.<_17}> i_1 (_SystemArray.size_20 s_0)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 s_0 i_1) char_2) (True -> <{_Tuple2!3}> True i_1) (False -> DynamicUtilities.CharIndex s_0 (<{StdInt.+_6}> i_1 StdInt.one_11) char_2) ) (False -> StdMisc.abort "CharIndex: index out of range") ) 
DynamicUtilities.ExtractPathFileAndExtension !path_and_file_0 = let _x_1_0::I = DynamicUtilities.CharIndexBackwards path_and_file_0 (<{StdInt.-_7}> (_SystemArray.size_20 path_and_file_0) 1) '.', dot_index_1_1 = select _x_1_0::_Tuple2 1 in case (case (select _x_1_0::_Tuple2 0) (True -> StdBool.not (select (DynamicUtilities.CharIndex path_and_file_0 (<{StdInt.+_6}> dot_index_1_1 StdInt.one_11) '\\')::_Tuple2 0)) (False -> False) ) (True -> let !extension_3_0 = <{StdString.%_10}> path_and_file_0 (_Tuple2 (<{StdInt.+_6}> dot_index_1_1 StdInt.one_11) (<{StdInt.-_7}> (_SystemArray.size_20 path_and_file_0) 1)), !pathfile_3_1 = <{StdString.%_10}> path_and_file_0 (_Tuple2 0 (<{StdInt.-_7}> dot_index_1_1 1)) in <{_Tuple2!3}> pathfile_3_1 extension_3_0) (False -> <{_Tuple2!3}> path_and_file_0 "") 


|| Converted Records
