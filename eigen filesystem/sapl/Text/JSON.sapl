|| ?module? Text.JSON


<{Text.JSON.toJSON`}> !<{_vJSONEncode*_0}> !flag_1::B !x_2 = <{Text.JSON._c;444;18_260}> (select <{_vJSONEncode*_0}>::<{Text.JSON.JSONEncode_s;}> 0 flag_1 x_2)
<{Text.JSON._c;444;18_260}> !_x_0 = case _x_0 (_predefined._Cons node_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> node_1_0) ) (_ -> Text.JSON.JSONError)
Text.JSON.toJSON !<{_vJSONEncode*_0}> !x_1 = <{Text.JSON.toJSON`}> <{_vJSONEncode*_0}> False x_1
Text.JSON.toJSONInField !<{_vJSONEncode*_0}> !x_1 = <{Text.JSON.toJSON`}> <{_vJSONEncode*_0}> True x_1
Text.JSON.fromJSON !<{_vJSONDecode*_0}> !node_1 = select (select <{_vJSONDecode*_0}>::<{Text.JSON.JSONDecode_s;}> 0 False (_predefined._Cons node_1 _predefined._Nil))::_Tuple2 0
Text.JSON.findChars !i_0::I !s_1 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 s_1)) (True -> let !c_2_0::C = _SystemArray.select_19 s_1 i_0 in case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1) (False -> <{_predefined._!Cons!}> (_Tuple2 i_0 c_2_0) (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) ) (False -> case (case (<{StdChar.==_18}> c_2_0 '"') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '/') ) (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 c_2_0) (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> case (<{StdChar.==_18}> c_2_0 '\b') (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 'b') (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 'f') (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> case (<{StdChar.==_18}> c_2_0 '\n') (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 'n') (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> case (<{StdChar.==_18}> c_2_0 '\r') (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 'r') (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> case (<{StdChar.==_18}> c_2_0 '\t') (True -> <{_predefined._!Cons!}> (_Tuple2 i_0 't') (Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1)) (False -> Text.JSON.findChars (<{StdInt.+_6}> i_0 1) s_1) ) ) ) ) ) ) ) (False -> <{_predefined._!Nil!}>) 
Text.JSON.copyCharsI !is_0::I !id_1::I !iend_2::I !src_3 !dest_4 = case (<{StdInt.<_17}> is_0 iend_2) (True -> Text.JSON.copyCharsI (<{StdInt.+_6}> is_0 1) (<{StdInt.+_6}> id_1 1) iend_2 src_3 (_SystemArray.update_21 dest_4 id_1 (_SystemArray.select_19 src_3 is_0))) (False -> <{_Tuple4!15}> is_0 id_1 src_3 dest_4) 
Text.JSON.copyRemainingChars !is_0::I !id_1::I !src_2 !dest_3 = case (<{StdInt.<_17}> is_0 (_SystemArray.size_20 src_2)) (True -> Text.JSON.copyRemainingChars (<{StdInt.+_6}> is_0 1) (<{StdInt.+_6}> id_1 1) src_2 (_SystemArray.update_21 dest_3 id_1 (_SystemArray.select_19 src_2 is_0))) (False -> dest_3) 
Text.JSON.copyAndReplaceChars_91 !is_0::I !id_1::I !reps_2 !src_3 !dest_4 = case reps_2 (<{_predefined._!Cons!}> _x_1_0 rs_1_1 -> case _x_1_0 (_Tuple2 ir_2_0 c_2_1 -> let !_x_3_0 = Text.JSON.copyCharsI is_0 id_1 ir_2_0 src_3 dest_4, id_3_1::I = select _x_3_0::_Tuple4 1 in Text.JSON.copyAndReplaceChars_91 (<{StdInt.+_6}> (select _x_3_0::_Tuple4 0) 1) (<{StdInt.+_6}> id_3_1 2) rs_1_1 (select _x_3_0::_Tuple4 2) (_SystemArray.update_21 (_SystemArray.update_21 (select _x_3_0::_Tuple4 3) id_3_1 '\\') (<{StdInt.+_6}> id_3_1 1) c_2_1)) ) (<{_predefined._!Nil!}> -> Text.JSON.copyRemainingChars is_0 id_1 src_3 dest_4) 
Text.JSON.jsonEscape !src_0 = let !reps_1_0 = Text.JSON.findChars 0 src_0 in <{Text.JSON._c;344;7_261}> reps_1_0 src_0
<{Text.JSON._c;344;7_261}> !reps_0 !src_1 = case reps_0 (<{_predefined._!Nil!}> -> src_1) (_ -> Text.JSON.copyAndReplaceChars_91 0 0 reps_0 src_1 (_SystemArray.createArray_17 (<{StdInt.+_6}> (_SystemArray.size_20 src_1) (StdOverloadedList.Length_63 reps_0)) '\0'))
Text.JSON.rep_92::C !_x_0::C = case _x_0 ('\\' -> '\\') ('"' -> '"') ('/' -> '/') ('b' -> '\b') ('f' -> '\f') ('n' -> '\n') ('r' -> '\r') ('t' -> '\t') (_ -> _x_0)
Text.JSON.findChars_93 !i_0::I !s_1 = case (StdBool.not (<{StdInt.<_17}> (<{StdInt.+_6}> i_0 1) (_SystemArray.size_20 s_1))) (True -> <{_predefined._!Nil!}>) (False -> let !c0_2_0::C = _SystemArray.select_19 s_1 i_0 in case (<{StdChar.==_18}> c0_2_0 '\\') (True -> let !c1_4_0::C = _SystemArray.select_19 s_1 (<{StdInt.+_6}> i_0 1), !rc_4_1::C = Text.JSON.rep_92 c1_4_0 in <{_predefined._!Cons!}> (_Tuple2 i_0 rc_4_1) (Text.JSON.findChars_93 (<{StdInt.+_6}> i_0 2) s_1)) (False -> Text.JSON.findChars_93 (<{StdInt.+_6}> i_0 1) s_1) ) 
Text.JSON.copyAndReplaceChars_94 !is_0::I !id_1::I !reps_2 !src_3 !dest_4 = case reps_2 (<{_predefined._!Cons!}> _x_1_0 rs_1_1 -> case _x_1_0 (_Tuple2 ir_2_0 c_2_1 -> let !_x_3_0 = Text.JSON.copyCharsI is_0 id_1 ir_2_0 src_3 dest_4, id_3_1::I = select _x_3_0::_Tuple4 1 in Text.JSON.copyAndReplaceChars_94 (<{StdInt.+_6}> (select _x_3_0::_Tuple4 0) 2) (<{StdInt.+_6}> id_3_1 1) rs_1_1 (select _x_3_0::_Tuple4 2) (_SystemArray.update_21 (select _x_3_0::_Tuple4 3) id_3_1 c_2_1)) ) (<{_predefined._!Nil!}> -> Text.JSON.copyRemainingChars is_0 id_1 src_3 dest_4) 
Text.JSON.jsonUnescape !src_0 = let !reps_1_0 = Text.JSON.findChars_93 0 src_0 in <{Text.JSON._c;384;7_262}> reps_1_0 src_0
<{Text.JSON._c;384;7_262}> !reps_0 !src_1 = case reps_0 (<{_predefined._!Nil!}> -> src_1) (_ -> Text.JSON.copyAndReplaceChars_94 0 0 reps_0 src_1 (_SystemArray.createArray_17 (<{StdInt.-_7}> (_SystemArray.size_20 src_1) (StdOverloadedList.length_44 reps_0)) '\0'))
Text.JSON.findField_96 !s_0 !_x_1 = case _x_1 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (_Tuple2 l_2_0 x_2_1 -> case (<{StdString.==_2}> l_2_0 s_0) (True -> Data.Maybe.Just x_2_1) (False -> Text.JSON.findField_96 s_0 xs_1_1) ) ) 
Text.JSON.findNode_95 !_x_0 !node_1 = case _x_0 (_predefined._Nil -> Data.Maybe.Just node_1) (_predefined._Cons s_1_0 ss_1_1 -> case node_1 (Text.JSON.JSONObject fields_2_0 -> <{Text.JSON._c;729;11_263}> (Text.JSON.findField_96 s_1_0 fields_2_0) ss_1_1) (Text.JSON.JSONArray items_2_0 -> let !index_3_0::I = StdInt.toInt_23 s_1_0 in case (case (StdBool.not (<{StdInt.<_17}> index_3_0 0)) (True -> <{StdInt.<_17}> index_3_0 (StdList.length_47 items_2_0)) (False -> False) ) (True -> Text.JSON.findNode_95 ss_1_1 (<{StdList.!!}> items_2_0 index_3_0)) (False -> Data.Maybe.Nothing) ) ) (_ -> Data.Maybe.Nothing)
<{Text.JSON._c;729;11_263}> !_x_0 ss_1 = case _x_0 (Data.Maybe.Just f_1_0 -> Text.JSON.findNode_95 ss_1 f_1_0) (Data.Maybe.Nothing -> Data.Maybe.Nothing) 
Text.JSON.jsonQuery !<{_vJSONDecode*_0}> !path_1 !node_2 = <{Text.JSON._c;722;7_264}> (Text.JSON.findNode_95 (Text.split_12 "/" path_1) node_2) <{_vJSONDecode*_0}>
<{Text.JSON._c;722;7_264}> !_x_0 <{_vJSONDecode*_1}> = case _x_0 (Data.Maybe.Just child_1_0 -> Text.JSON.fromJSON <{_vJSONDecode*_1}> child_1_0) (Data.Maybe.Nothing -> Data.Maybe.Nothing) 
<{Text.JSON.c;773;115_99}> !_vPretty_0 !g_l_1 = <{Text.JSON.g_c1;773;130_266}> g_l_1 _vPretty_0
<{Text.JSON.g_c1;773;130_266}> !g_l_0 _vPretty_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Text.JSON.g_c2;773;130_265}> g_h_1_0 _vPretty_1 g_t_1_1) (_ -> _predefined._Nil)
<{Text.JSON.g_c2;773;130_265}> !g_h_0 _vPretty_1 g_t_2 = case g_h_0 (_Tuple2 label_1_0 val_1_1 -> _predefined._Cons (<{Text.PPrint.<->}> (Text.PPrint.dquotes (Text.PPrint.string label_1_0)) (<{Text.PPrint.<->}> Text.PPrint.colon (select _vPretty_1::<{Text.PPrint.Pretty;}> 0 val_1_1))) (<{Text.JSON.c;773;115_99}> _vPretty_1 g_t_2)) (_ -> <{Text.JSON.c;773;115_99}> _vPretty_1 g_t_2)
<{Text.JSON.c;773;115_244}> !g_l_0 = <{Text.JSON.g_c1;773;130_269}> g_l_0
Text.JSON.pretty_116 !_x_0 = case _x_0 (Text.JSON.JSONNull -> Text.PPrint.string "null") (Text.JSON.JSONBool x_1_0 -> Text.PPrint.string (<{Text.JSON._if;768;43_267}> x_1_0)) (Text.JSON.JSONInt x_1_0 -> Text.PPrint.string (StdString.toString_5 x_1_0)) (Text.JSON.JSONReal x_1_0 -> Text.PPrint.string (StdString.toString_7 x_1_0)) (Text.JSON.JSONString x_1_0 -> Text.PPrint.dquotes (Text.PPrint.string (Text.JSON.jsonEscape x_1_0))) (Text.JSON.JSONArray nodes_1_0 -> Text.PPrint.list (StdList.map Text.JSON.pretty_116 nodes_1_0)) (Text.JSON.JSONObject attr_1_0 -> Text.PPrint.encloseSep Text.PPrint.lbrace Text.PPrint.rbrace Text.PPrint.comma (<{Text.JSON.c;773;115_244}> attr_1_0)) (Text.JSON.JSONRaw x_1_0 -> Text.PPrint.string x_1_0) (Text.JSON.JSONError -> Text.PPrint.string "null") 
<{Text.JSON.g_c1;773;130_269}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Text.JSON.g_c2;773;130_268}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Text.JSON.g_c2;773;130_268}> !g_h_0 g_t_1 = case g_h_0 (_Tuple2 label_1_0 val_1_1 -> _predefined._Cons (<{Text.PPrint.<->}> (Text.PPrint.dquotes (Text.PPrint.string label_1_0)) (<{Text.PPrint.<->}> Text.PPrint.colon (Text.JSON.pretty_116 val_1_1))) (<{Text.JSON.c;773;115_244}> g_t_1)) (_ -> <{Text.JSON.c;773;115_244}> g_t_1)
<{Text.JSON._if;768;43_267}> !x_0::B = case x_0 (True -> "true") (_ -> "false")
Text.JSON.jsonPrettyPrint !json_0 = Text.PPrint.display (Text.PPrint.renderPretty 0.0 400 (Text.JSON.pretty_116 json_0))
Text.JSON.foldl_118 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Text.JSON.foldl_118 op_0 (op_0 r_1 a_1_0) x_1_1) 
Text.JSON.foldl_117 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Text.JSON.foldl_117 op_0 (op_0 r_1 a_1_0) x_1_1) 
Text.JSON.count_more_escape_chars_72::I !i_0::I !s_1 !n_2::I = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 s_1)) (True -> let !c_2_0::C = _SystemArray.select_19 s_1 i_0 in case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 n_2) (False -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 (<{StdInt.+_6}> n_2 1)) ) (False -> case (case (<{StdChar.==_18}> c_2_0 '"') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\b') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\r') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\t') ) ) ) ) ) ) (True -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 (<{StdInt.+_6}> n_2 1)) (False -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 n_2) ) ) (False -> n_2) 
Text.JSON.count_escape_chars::I !i_0::I !s_1 = case (<{StdInt.<_17}> i_0 (_SystemArray.size_20 s_1)) (True -> let !c_2_0::C = _SystemArray.select_19 s_1 i_0 in case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.count_escape_chars (<{StdInt.+_6}> i_0 1) s_1) (False -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 1) ) (False -> case (case (<{StdChar.==_18}> c_2_0 '"') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '/') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\b') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\r') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\t') ) ) ) ) ) ) (True -> Text.JSON.count_more_escape_chars_72 (<{StdInt.+_6}> i_0 1) s_1 1) (False -> Text.JSON.count_escape_chars (<{StdInt.+_6}> i_0 1) s_1) ) ) (False -> 0) 
Text.JSON.anon_70::I !s_0::I !x_1 = <{StdInt.+_6}> s_0 (Text.JSON.sizeOf x_1)
Text.JSON.foldl_245::I !r_0::I !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Text.JSON.foldl_245 (Text.JSON.anon_70 r_0 a_1_0) x_1_1) 
Text.JSON.anon_71::I !s_0::I !_x_1 = case _x_1 (_Tuple2 l_1_0 o_1_1 -> <{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> s_0 (_SystemArray.size_20 l_1_0)) 2) 1) (Text.JSON.sizeOf o_1_1)) 
Text.JSON.foldl_246::I !r_0::I !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Text.JSON.foldl_246 (Text.JSON.anon_71 r_0 a_1_0) x_1_1) 
Text.JSON.sizeOf::I !_x_0 = case _x_0 (Text.JSON.JSONNull -> 4) (Text.JSON.JSONBool _x_1_0 -> case _x_1_0 (True -> 4) (False -> 5) ) (Text.JSON.JSONInt x_1_0 -> _SystemArray.size_20 (StdString.toString_5 x_1_0)) (Text.JSON.JSONReal x_1_0 -> _SystemArray.size_20 (StdString.toString_7 x_1_0)) (Text.JSON.JSONString x_1_0 -> <{StdInt.+_6}> (<{StdInt.+_6}> (_SystemArray.size_20 x_1_0) 2) (Text.JSON.count_escape_chars 0 x_1_0)) (Text.JSON.JSONArray x_1_0 -> let !len_2_0::I = StdList.length_47 x_1_0 in <{StdInt.+_6}> (<{Text.JSON._if;26;6_270}> (<{StdInt.<_17}> 0 len_2_0) len_2_0 x_1_0) 2) (Text.JSON.JSONObject x_1_0 -> let !len_2_0::I = StdList.length_47 x_1_0 in <{StdInt.+_6}> (<{Text.JSON._if;29;6_271}> (<{StdInt.<_17}> 0 len_2_0) len_2_0 x_1_0) 2) (Text.JSON.JSONRaw x_1_0 -> _SystemArray.size_20 x_1_0) (Text.JSON.JSONError -> 0) 
<{Text.JSON._if;29;6_271}>::I !_x_0::B len_1::I x_2 = case _x_0 (True -> Text.JSON.foldl_246 (<{StdInt.-_7}> len_1 1) x_2) (_ -> 0)
<{Text.JSON._if;26;6_270}>::I !_x_0::B len_1::I x_2 = case _x_0 (True -> Text.JSON.foldl_245 (<{StdInt.-_7}> len_1 1) x_2) (_ -> 0)
Text.JSON.copyChars !offset_0::I !i_1::I !src_2 !dst_3 = case (<{StdInt.<_17}> 3 i_1) (True -> let !di_2_0::I = <{StdInt.+_6}> offset_0 i_1, !dst_2_1 = _SystemArray.update_21 dst_3 (<{StdInt.-_7}> di_2_0 4) (_SystemArray.select_19 src_2 (<{StdInt.-_7}> i_1 4)), !dst_2_2 = _SystemArray.update_21 dst_2_1 (<{StdInt.-_7}> di_2_0 3) (_SystemArray.select_19 src_2 (<{StdInt.-_7}> i_1 3)), !dst_2_3 = _SystemArray.update_21 dst_2_2 (<{StdInt.-_7}> di_2_0 2) (_SystemArray.select_19 src_2 (<{StdInt.-_7}> i_1 2)), !dst_2_4 = _SystemArray.update_21 dst_2_3 (<{StdInt.-_7}> di_2_0 1) (_SystemArray.select_19 src_2 (<{StdInt.-_7}> i_1 1)) in Text.JSON.copyChars offset_0 (<{StdInt.-_7}> i_1 4) src_2 dst_2_4) (False -> case (<{StdInt.<_17}> 1 i_1) (True -> let !dst_3_0 = _SystemArray.update_21 dst_3 offset_0 (_SystemArray.select_19 src_2 0), !dst_3_1 = _SystemArray.update_21 dst_3_0 (<{StdInt.+_6}> offset_0 1) (_SystemArray.select_19 src_2 1) in case (<{StdInt.==_16}> i_1 3) (True -> _SystemArray.update_21 dst_3_1 (<{StdInt.+_6}> offset_0 2) (_SystemArray.select_19 src_2 2)) (False -> dst_3_1) ) (False -> case (<{StdInt.==_16}> i_1 1) (True -> _SystemArray.update_21 dst_3 offset_0 (_SystemArray.select_19 src_2 0)) (False -> dst_3) ) ) 
Text.JSON.copyRemainingChars_74 !is_0::I !id_1::I !src_2 !dest_3 = case (<{StdInt.<_17}> is_0 (_SystemArray.size_20 src_2)) (True -> Text.JSON.copyRemainingChars_74 (<{StdInt.+_6}> is_0 1) (<{StdInt.+_6}> id_1 1) src_2 (_SystemArray.update_21 dest_3 id_1 (_SystemArray.select_19 src_2 is_0))) (False -> <{_Tuple2!3}> id_1 dest_3) 
Text.JSON.copyAndReplaceChars_73 !is_0::I !id_1::I !_x_2 !src_3 !dest_4 = case _x_2 (<{_predefined._!Cons!}> _x_1_0 rs_1_1 -> case _x_1_0 (_Tuple2 ir_2_0 c_2_1 -> let !_x_3_0 = Text.JSON.copyCharsI is_0 id_1 ir_2_0 src_3 dest_4, id_3_1::I = select _x_3_0::_Tuple4 1 in Text.JSON.copyAndReplaceChars_73 (<{StdInt.+_6}> (select _x_3_0::_Tuple4 0) 1) (<{StdInt.+_6}> id_3_1 2) rs_1_1 (select _x_3_0::_Tuple4 2) (_SystemArray.update_21 (_SystemArray.update_21 (select _x_3_0::_Tuple4 3) id_3_1 '\\') (<{StdInt.+_6}> id_3_1 1) c_2_1)) ) (<{_predefined._!Nil!}> -> Text.JSON.copyRemainingChars_74 is_0 id_1 src_3 dest_4) 
Text.JSON.copyObjectItems_76 !start_0::I !_x_1 !buffer_2 = case _x_1 (_predefined._Nil -> <{_Tuple2!3}> start_0 buffer_2) (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple2 l_2_0 x_2_1 -> case _x_1_1 (_predefined._Nil -> let len_4_0 = _SystemArray.size_20 l_2_0, _x_4_1::I = _Tuple2 (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_4_0) 3) (Text.JSON.copyChars (<{StdInt.+_6}> start_0 1) len_4_0 l_2_0 (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 buffer_2 start_0 '"') (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_4_0) 1) '"') (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_4_0) 2) ':')) in Text.JSON.copyNode (select _x_4_1::_Tuple2 0) x_2_1 (select _x_4_1::_Tuple2 1)) (_ -> let len_3_0::I = _SystemArray.size_20 l_2_0, _x_3_1 = _Tuple2 (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_3_0) 3) (Text.JSON.copyChars (<{StdInt.+_6}> start_0 1) len_3_0 l_2_0 (_SystemArray.update_21 (_SystemArray.update_21 (_SystemArray.update_21 buffer_2 start_0 '"') (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_3_0) 1) '"') (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_3_0) 2) ':')), _x_3_2 = Text.JSON.copyNode (select _x_3_1::_Tuple2 0) x_2_1 (select _x_3_1::_Tuple2 1), start_3_3::I = select _x_3_2::_Tuple2 0 in Text.JSON.copyObjectItems_76 (<{StdInt.+_6}> start_3_3 1) _x_1_1 (_SystemArray.update_21 (select _x_3_2::_Tuple2 1) start_3_3 ','))) ) 
Text.JSON.copyArrayItems_75 !start_0::I !_x_1 !buffer_2 = case _x_1 (_predefined._Nil -> <{_Tuple2!3}> start_0 buffer_2) (_predefined._Cons x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Text.JSON.copyNode start_0 x_1_0 buffer_2) (_ -> let !_x_2_0 = Text.JSON.copyNode start_0 x_1_0 buffer_2, start_2_1::I = select _x_2_0::_Tuple2 0 in Text.JSON.copyArrayItems_75 (<{StdInt.+_6}> start_2_1 1) _x_1_1 (_SystemArray.update_21 (select _x_2_0::_Tuple2 1) start_2_1 ','))) 
Text.JSON.copyNode !start_0::I !_x_1 !buffer_2 = case _x_1 (Text.JSON.JSONNull -> <{_Tuple2!3}> (<{StdInt.+_6}> start_0 4) (Text.JSON.copyChars start_0 4 "null" buffer_2)) (Text.JSON.JSONBool _x_1_0 -> case _x_1_0 (True -> <{_Tuple2!3}> (<{StdInt.+_6}> start_0 4) (Text.JSON.copyChars start_0 4 "true" buffer_2)) (False -> <{_Tuple2!3}> (<{StdInt.+_6}> start_0 5) (Text.JSON.copyChars start_0 5 "false" buffer_2)) ) (Text.JSON.JSONInt x_1_0 -> let !s_2_0 = StdString.toString_5 x_1_0 in <{_Tuple2!3}> (<{StdInt.+_6}> start_0 (_SystemArray.size_20 s_2_0)) (Text.JSON.copyChars start_0 (_SystemArray.size_20 s_2_0) s_2_0 buffer_2)) (Text.JSON.JSONReal x_1_0 -> let !s_2_0 = StdString.toString_7 x_1_0 in <{_Tuple2!3}> (<{StdInt.+_6}> start_0 (_SystemArray.size_20 s_2_0)) (Text.JSON.copyChars start_0 (_SystemArray.size_20 s_2_0) s_2_0 buffer_2)) (Text.JSON.JSONString s_1_0 -> let !reps_2_0 = Text.JSON.findChars 0 s_1_0 in case (<{Text.JSON._c;72;16_272}> reps_2_0) (True -> let !len_4_0::I = _SystemArray.size_20 s_1_0 in <{_Tuple2!3}> (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_4_0) 2) (Text.JSON.copyChars (<{StdInt.+_6}> start_0 1) len_4_0 s_1_0 (_SystemArray.update_21 (_SystemArray.update_21 buffer_2 start_0 '"') (<{StdInt.+_6}> (<{StdInt.+_6}> start_0 len_4_0) 1) '"'))) (False -> let !buffer_4_0 = _SystemArray.update_21 buffer_2 start_0 '"', !_x_4_1 = Text.JSON.copyAndReplaceChars_73 0 (<{StdInt.+_6}> start_0 1) reps_2_0 s_1_0 buffer_4_0, start_4_2::I = select _x_4_1::_Tuple2 0 in <{_Tuple2!3}> (<{StdInt.+_6}> start_4_2 1) (_SystemArray.update_21 (select _x_4_1::_Tuple2 1) start_4_2 '"')) ) (Text.JSON.JSONArray items_1_0 -> let !_x_2_0 = _Tuple2 (<{StdInt.+_6}> start_0 1) (_SystemArray.update_21 buffer_2 start_0 '['), !_x_2_1 = Text.JSON.copyArrayItems_75 (select _x_2_0::_Tuple2 0) items_1_0 (select _x_2_0::_Tuple2 1), start_2_2::I = select _x_2_1::_Tuple2 0 in <{_Tuple2!3}> (<{StdInt.+_6}> start_2_2 1) (_SystemArray.update_21 (select _x_2_1::_Tuple2 1) start_2_2 ']')) (Text.JSON.JSONObject items_1_0 -> let !_x_2_0 = _Tuple2 (<{StdInt.+_6}> start_0 1) (_SystemArray.update_21 buffer_2 start_0 '{'), !_x_2_1 = Text.JSON.copyObjectItems_76 (select _x_2_0::_Tuple2 0) items_1_0 (select _x_2_0::_Tuple2 1), start_2_2::I = select _x_2_1::_Tuple2 0 in <{_Tuple2!3}> (<{StdInt.+_6}> start_2_2 1) (_SystemArray.update_21 (select _x_2_1::_Tuple2 1) start_2_2 '}')) (Text.JSON.JSONRaw x_1_0 -> <{_Tuple2!3}> (<{StdInt.+_6}> start_0 (_SystemArray.size_20 x_1_0)) (Text.JSON.copyChars start_0 (_SystemArray.size_20 x_1_0) x_1_0 buffer_2)) (_ -> <{_Tuple2!3}> start_0 buffer_2)
<{Text.JSON._c;72;16_272}>::B !_x_0 = case _x_0 (<{_predefined._!Nil!}> -> True) (_ -> False)
Text.JSON.parse_string_with_escape_77 !offset_0::I !stringCharsOffset_1::I !input_2 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2)) (True -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (StdBool.not (<{StdChar.==_18}> c_2_0 '"')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.parse_string_with_escape_77 (<{StdInt.+_6}> offset_0 1) stringCharsOffset_1 input_2) (False -> Text.JSON.parse_string_with_escape_77 (<{StdInt.+_6}> offset_0 2) stringCharsOffset_1 input_2) ) (False -> let !string_4_0 = <{StdString.%_10}> input_2 (_Tuple2 stringCharsOffset_1 (<{StdInt.-_7}> offset_0 1)) in <{_Tuple2!3}> (Text.JSON.JSONString (Text.JSON.jsonUnescape string_4_0)) (<{StdInt.+_6}> offset_0 1)) ) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_0) 
Text.JSON.parse_string_85 !offset_0::I !stringCharsOffset_1::I !input_2 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2)) (True -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (StdBool.not (<{StdChar.==_18}> c_2_0 '"')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.parse_string_85 (<{StdInt.+_6}> offset_0 1) stringCharsOffset_1 input_2) (False -> Text.JSON.parse_string_with_escape_77 (<{StdInt.+_6}> offset_0 2) stringCharsOffset_1 input_2) ) (False -> let !string_4_0 = <{StdString.%_10}> input_2 (_Tuple2 stringCharsOffset_1 (<{StdInt.-_7}> offset_0 1)) in <{_Tuple2!3}> (Text.JSON.JSONString string_4_0) (<{StdInt.+_6}> offset_0 1)) ) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_0) 
Text.JSON.parse_real_with_exponent_79 !offset_0::I !numberOffset_1::I !input_2 = case (StdBool.not (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2))) (True -> let !r_2_0::D = StdReal.toReal_15 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONReal r_2_0) offset_0) (False -> let c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> Text.JSON.parse_real_with_exponent_79 (<{StdInt.+_6}> offset_0 1) numberOffset_1 input_2) (False -> let !r_4_0::D = StdReal.toReal_15 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONReal r_4_0) offset_0) ) 
Text.JSON.parse_real_78 !offset_0::I !numberOffset_1::I !input_2 = case (StdBool.not (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2))) (True -> let !r_2_0::D = StdReal.toReal_15 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONReal r_2_0) offset_0) (False -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> Text.JSON.parse_real_78 (<{StdInt.+_6}> offset_0 1) numberOffset_1 input_2) (False -> case (case (StdBool.not (<{StdChar.==_18}> c_2_0 'e')) (True -> StdBool.not (<{StdChar.==_18}> c_2_0 'E')) (False -> False) ) (True -> let !r_5_0::D = StdReal.toReal_15 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONReal r_5_0) offset_0) (False -> case (case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 1) (_SystemArray.size_20 input_2)) (True -> let c_6_0::C = _SystemArray.select_19 input_2 (<{StdInt.+_6}> offset_0 1) in case (StdBool.not (<{StdChar.<_19}> c_6_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_6_0)) (False -> False) ) (False -> False) ) (True -> Text.JSON.parse_real_with_exponent_79 (<{StdInt.+_6}> offset_0 2) numberOffset_1 input_2) (False -> case (case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 2) (_SystemArray.size_20 input_2)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_2 (<{StdInt.+_6}> offset_0 1)) '-') (True -> let c_8_0::C = _SystemArray.select_19 input_2 (<{StdInt.+_6}> offset_0 2) in case (StdBool.not (<{StdChar.<_19}> c_8_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_8_0)) (False -> False) ) (False -> False) ) (False -> False) ) (True -> Text.JSON.parse_real_with_exponent_79 (<{StdInt.+_6}> offset_0 3) numberOffset_1 input_2) (False -> let !r_7_0::D = StdReal.toReal_15 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONReal r_7_0) offset_0) ) ) ) ) 
Text.JSON.parse_number_87 !offset_0::I !numberOffset_1::I !input_2 = case (StdBool.not (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2))) (True -> let !i_2_0::I = StdInt.toInt_23 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONInt i_2_0) offset_0) (False -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> Text.JSON.parse_number_87 (<{StdInt.+_6}> offset_0 1) numberOffset_1 input_2) (False -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '.')) (True -> let !i_5_0::I = StdInt.toInt_23 (<{StdString.%_10}> input_2 (_Tuple2 numberOffset_1 (<{StdInt.-_7}> offset_0 1))) in <{_Tuple2!3}> (Text.JSON.JSONInt i_5_0) offset_0) (False -> Text.JSON.parse_real_78 (<{StdInt.+_6}> offset_0 1) numberOffset_1 input_2) ) ) 
Text.JSON.skip_spaces_86::I !offset_0::I !input_1 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_1)) (True -> let !c_2_0::C = _SystemArray.select_19 input_1 offset_0 in case (case (<{StdChar.==_18}> c_2_0 ' ') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\t') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\r') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\v') ) ) ) ) ) (True -> Text.JSON.skip_spaces_86 (<{StdInt.+_6}> offset_0 1) input_1) (False -> offset_0) ) (False -> offset_0) 
Text.JSON.reverse_append_90 !_x_0 !list_1 = case _x_0 (_predefined._Cons hd_1_0 tl_1_1 -> Text.JSON.reverse_append_90 tl_1_1 (_predefined._Cons hd_1_0 list_1)) (_predefined._Nil -> list_1) 
Text.JSON.lex_label_with_escape_82 !offset_0::I !stringCharsOffset_1::I !input_2 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2)) (True -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (StdBool.not (<{StdChar.==_18}> c_2_0 '"')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.lex_label_with_escape_82 (<{StdInt.+_6}> offset_0 1) stringCharsOffset_1 input_2) (False -> Text.JSON.lex_label_with_escape_82 (<{StdInt.+_6}> offset_0 2) stringCharsOffset_1 input_2) ) (False -> let !string_4_0 = <{StdString.%_10}> input_2 (_Tuple2 stringCharsOffset_1 (<{StdInt.-_7}> offset_0 1)) in <{_Tuple2!3}> (Text.JSON.jsonUnescape string_4_0) (<{StdInt.+_6}> offset_0 1)) ) (False -> <{_Tuple2!3}> "" -1) 
Text.JSON.lex_label_81 !offset_0::I !stringCharsOffset_1::I !input_2 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_2)) (True -> let !c_2_0::C = _SystemArray.select_19 input_2 offset_0 in case (StdBool.not (<{StdChar.==_18}> c_2_0 '"')) (True -> case (StdBool.not (<{StdChar.==_18}> c_2_0 '\\')) (True -> Text.JSON.lex_label_81 (<{StdInt.+_6}> offset_0 1) stringCharsOffset_1 input_2) (False -> Text.JSON.lex_label_with_escape_82 (<{StdInt.+_6}> offset_0 2) stringCharsOffset_1 input_2) ) (False -> let !string_4_0 = <{StdString.%_10}> input_2 (_Tuple2 stringCharsOffset_1 (<{StdInt.-_7}> offset_0 1)) in <{_Tuple2!3}> string_4_0 (<{StdInt.+_6}> offset_0 1)) ) (False -> <{_Tuple2!3}> "" -1) 
Text.JSON.parse_object_items_after_label_and_colon_84 !label_0 !offset_1::I !items_2 !offset_after_brace_open_3::I !input_4 = let !_x_1_0 = Text.JSON.parse offset_1 input_4, offset_1_1::I = select _x_1_0::_Tuple2 1 in case (case (<{StdInt.<_17}> offset_1_1 (_SystemArray.size_20 input_4)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_4 offset_1_1) ',') (False -> False) ) (True -> Text.JSON.parse_object_items_83 (<{StdInt.+_6}> offset_1_1 1) (_predefined._Cons (_Tuple2 label_0 (select _x_1_0::_Tuple2 0)) items_2) offset_after_brace_open_3 input_4) (False -> case (case (<{StdInt.<_17}> offset_1_1 (_SystemArray.size_20 input_4)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_4 offset_1_1) '}') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONObject (Text.JSON.reverse_append_90 items_2 (_predefined._Cons (_Tuple2 label_0 (select _x_1_0::_Tuple2 0)) _predefined._Nil))) (<{StdInt.+_6}> offset_1_1 1)) (False -> let !offset_4_0::I = Text.JSON.skip_spaces_86 offset_1_1 input_4 in case (case (<{StdInt.<_17}> offset_4_0 (_SystemArray.size_20 input_4)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_4 offset_4_0) ',') (False -> False) ) (True -> Text.JSON.parse_object_items_83 (<{StdInt.+_6}> offset_4_0 1) (_predefined._Cons (_Tuple2 label_0 (select _x_1_0::_Tuple2 0)) items_2) offset_after_brace_open_3 input_4) (False -> case (case (<{StdInt.<_17}> offset_4_0 (_SystemArray.size_20 input_4)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_4 offset_4_0) '}') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONObject (Text.JSON.reverse_append_90 items_2 (_predefined._Cons (_Tuple2 label_0 (select _x_1_0::_Tuple2 0)) _predefined._Nil))) (<{StdInt.+_6}> offset_4_0 1)) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_brace_open_3) ) ) ) 
Text.JSON.parse_object_items_83 !offset_0::I !items_1 !offset_after_bracket_open_2::I !input_3 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_3)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_0) '"') (True -> let !offset_3_0::I = <{StdInt.+_6}> offset_0 1, !_x_3_1 = Text.JSON.lex_label_81 offset_3_0 offset_3_0 input_3, offset_3_2::I = select _x_3_1::_Tuple2 1 in case (StdBool.not (<{StdInt.<_17}> offset_3_2 0)) (True -> case (case (<{StdInt.<_17}> offset_3_2 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_3_2) ':') (False -> False) ) (True -> Text.JSON.parse_object_items_after_label_and_colon_84 (select _x_3_1::_Tuple2 0) (<{StdInt.+_6}> offset_3_2 1) items_1 offset_after_bracket_open_2 input_3) (False -> let !offset_6_0::I = Text.JSON.skip_spaces_86 offset_3_2 input_3 in case (case (<{StdInt.<_17}> offset_6_0 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_6_0) ':') (False -> False) ) (True -> Text.JSON.parse_object_items_after_label_and_colon_84 (select _x_3_1::_Tuple2 0) (<{StdInt.+_6}> offset_6_0 1) items_1 offset_after_bracket_open_2 input_3) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_bracket_open_2) ) ) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_bracket_open_2) ) (False -> let !c_3_0::C = _SystemArray.select_19 input_3 offset_0 in case (case (<{StdChar.==_18}> c_3_0 ' ') (True -> True) (False -> case (<{StdChar.==_18}> c_3_0 '\t') (True -> True) (False -> case (<{StdChar.==_18}> c_3_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_3_0 '\r') (True -> True) (False -> case (<{StdChar.==_18}> c_3_0 '\f') (True -> True) (False -> <{StdChar.==_18}> c_3_0 '\v') ) ) ) ) ) (True -> Text.JSON.parse_object_items_83 (Text.JSON.skip_spaces_86 (<{StdInt.+_6}> offset_0 1) input_3) items_1 offset_after_bracket_open_2 input_3) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_bracket_open_2) ) ) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_bracket_open_2) 
Text.JSON.parse_object_89 !offset_0::I !input_1 = case (case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_1)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 offset_0) '}') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONObject _predefined._Nil) (<{StdInt.+_6}> offset_0 1)) (False -> let !offset_2_0::I = Text.JSON.skip_spaces_86 offset_0 input_1 in case (case (<{StdInt.<_17}> offset_2_0 (_SystemArray.size_20 input_1)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 offset_2_0) '}') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONObject _predefined._Nil) (<{StdInt.+_6}> offset_2_0 1)) (False -> Text.JSON.parse_object_items_83 offset_2_0 _predefined._Nil offset_2_0 input_1) ) 
Text.JSON.parse_array_items_80 !offset_0::I !items_1 !offset_after_bracket_open_2::I !input_3 = let !_x_1_0 = Text.JSON.parse offset_0 input_3, offset_1_1::I = select _x_1_0::_Tuple2 1 in case (case (<{StdInt.<_17}> offset_1_1 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_1_1) ',') (False -> False) ) (True -> Text.JSON.parse_array_items_80 (<{StdInt.+_6}> offset_1_1 1) (_predefined._Cons (select _x_1_0::_Tuple2 0) items_1) offset_after_bracket_open_2 input_3) (False -> case (case (<{StdInt.<_17}> offset_1_1 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_1_1) ']') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONArray (Text.JSON.reverse_append_90 items_1 (_predefined._Cons (select _x_1_0::_Tuple2 0) _predefined._Nil))) (<{StdInt.+_6}> offset_1_1 1)) (False -> let !offset_4_0::I = Text.JSON.skip_spaces_86 offset_1_1 input_3 in case (case (<{StdInt.<_17}> offset_4_0 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_4_0) ',') (False -> False) ) (True -> Text.JSON.parse_array_items_80 (<{StdInt.+_6}> offset_4_0 1) (_predefined._Cons (select _x_1_0::_Tuple2 0) items_1) offset_after_bracket_open_2 input_3) (False -> case (case (<{StdInt.<_17}> offset_4_0 (_SystemArray.size_20 input_3)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_3 offset_4_0) ']') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONArray (Text.JSON.reverse_append_90 items_1 (_predefined._Cons (select _x_1_0::_Tuple2 0) _predefined._Nil))) (<{StdInt.+_6}> offset_4_0 1)) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_after_bracket_open_2) ) ) ) 
Text.JSON.parse_array_88 !offset_0::I !input_1 = case (case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_1)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 offset_0) ']') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONArray _predefined._Nil) (<{StdInt.+_6}> offset_0 1)) (False -> let !offset_2_0::I = Text.JSON.skip_spaces_86 offset_0 input_1 in case (case (<{StdInt.<_17}> offset_2_0 (_SystemArray.size_20 input_1)) (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 offset_2_0) ']') (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONArray _predefined._Nil) (<{StdInt.+_6}> offset_2_0 1)) (False -> Text.JSON.parse_array_items_80 offset_2_0 _predefined._Nil offset_2_0 input_1) ) 
Text.JSON.parse !offset_0::I !input_1 = case (<{StdInt.<_17}> offset_0 (_SystemArray.size_20 input_1)) (True -> let !c_2_0::C = _SystemArray.select_19 input_1 offset_0 in case (<{StdChar.==_18}> c_2_0 '"') (True -> let !offset_4_0::I = <{StdInt.+_6}> offset_0 1 in Text.JSON.parse_string_85 offset_4_0 offset_4_0 input_1) (False -> case (case (<{StdChar.==_18}> c_2_0 'n') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 3) (_SystemArray.size_20 input_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 1)) 'u') (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 2)) 'l') (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 3)) 'l') (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (True -> <{_Tuple2!3}> Text.JSON.JSONNull (<{StdInt.+_6}> offset_0 4)) (False -> case (case (<{StdChar.==_18}> c_2_0 't') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 3) (_SystemArray.size_20 input_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 1)) 'r') (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 2)) 'u') (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 3)) 'e') (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONBool True) (<{StdInt.+_6}> offset_0 4)) (False -> case (case (<{StdChar.==_18}> c_2_0 'f') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 4) (_SystemArray.size_20 input_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 1)) 'a') (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 2)) 'l') (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 3)) 's') (True -> <{StdChar.==_18}> (_SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 4)) 'e') (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (False -> False) ) (True -> <{_Tuple2!3}> (Text.JSON.JSONBool False) (<{StdInt.+_6}> offset_0 5)) (False -> case (case (StdBool.not (<{StdChar.<_19}> c_2_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_2_0)) (False -> False) ) (True -> Text.JSON.parse_number_87 (<{StdInt.+_6}> offset_0 1) offset_0 input_1) (False -> case (case (<{StdChar.==_18}> c_2_0 '-') (True -> case (<{StdInt.<_17}> (<{StdInt.+_6}> offset_0 1) (_SystemArray.size_20 input_1)) (True -> let c_10_0::C = _SystemArray.select_19 input_1 (<{StdInt.+_6}> offset_0 1) in case (StdBool.not (<{StdChar.<_19}> c_10_0 '0')) (True -> StdBool.not (<{StdChar.<_19}> '9' c_10_0)) (False -> False) ) (False -> False) ) (False -> False) ) (True -> Text.JSON.parse_number_87 (<{StdInt.+_6}> offset_0 2) offset_0 input_1) (False -> case (<{StdChar.==_18}> c_2_0 '[') (True -> Text.JSON.parse_array_88 (<{StdInt.+_6}> offset_0 1) input_1) (False -> case (<{StdChar.==_18}> c_2_0 '{') (True -> Text.JSON.parse_object_89 (<{StdInt.+_6}> offset_0 1) input_1) (False -> case (case (<{StdChar.==_18}> c_2_0 ' ') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\t') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\n') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\r') (True -> True) (False -> case (<{StdChar.==_18}> c_2_0 '\f') (True -> True) (False -> <{StdChar.==_18}> c_2_0 '\v') ) ) ) ) ) (True -> Text.JSON.parse (Text.JSON.skip_spaces_86 (<{StdInt.+_6}> offset_0 1) input_1) input_1) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_0) ) ) ) ) ) ) ) ) ) (False -> <{_Tuple2!3}> Text.JSON.JSONError offset_0) 
Text.JSON.intersperse !i_0 !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> _predefined._Cons x_1_0 _predefined._Nil) (_ -> _predefined._Cons x_1_0 (_predefined._Cons i_0 (Text.JSON.intersperse i_0 _x_1_1)))) 
Text.JSON.decodeItems !fx_0 !_x_1 = case _x_1 (_predefined._Nil -> Data.Maybe.Just _predefined._Nil) (_predefined._Cons ox_1_0 oxs_1_1 -> <{Text.JSON._c;695;27_274}> (fx_0 False (_predefined._Cons ox_1_0 _predefined._Nil)) fx_0 oxs_1_1) 
<{Text.JSON._c;695;27_274}> !_x_0 fx_1 oxs_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;696;19_273}> (Text.JSON.decodeItems fx_1 oxs_2) x_2_0) ) (_ -> Data.Maybe.Nothing)
<{Text.JSON._c;696;19_273}> !_x_0 x_1 = case _x_0 (Data.Maybe.Just xs_1_0 -> Data.Maybe.Just (_predefined._Cons x_1 xs_1_0)) (_ -> Data.Maybe.Nothing)
Text.JSON.toString_7 !node_0 = let !len_1_0::I = Text.JSON.sizeOf node_0 in select (Text.JSON.copyNode 0 node_0 (_SystemArray.createArray_17 len_1_0 '\0'))::_Tuple2 1
Text.JSON.fromString_8 !s_0 = select (Text.JSON.parse 0 s_0)::_Tuple2 0
Text.JSON.anon_122 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.JSON.snd_121 !tuple_0 = select tuple_0::_Tuple2 1
Text.JSON.anon_120 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Text.JSON.snd_119 !tuple_0 = select tuple_0::_Tuple2 1
Text.JSON.notNull_98::B !_x_0 = case _x_0 (Text.JSON.JSONNull -> False) (_ -> True)
Text.JSON.cmpFst_97::B !<{_v<_0}> !a_1 !b_2 = select <{_v<_0}>::<{StdOverloaded.<;}> 0 (select a_1::_Tuple2 0) (select b_2::_Tuple2 0)
Text.JSON.anon_249::B !g_0 x_1 = Text.JSON.notNull_98 (g_0 x_1)
Text.JSON.cmpFst_247::B !a_0 !b_1 = <{StdString.<_3}> (select a_0::_Tuple2 0) (select b_1::_Tuple2 0)
Text.JSON.anon_248::B !g_0 x_1 = Text.JSON.notNull_98 (g_0 x_1)
Text.JSON.anon_251::B !x_0 = Text.JSON.notNull_98 (Text.JSON.snd_121 x_0)
Text.JSON.anon_250::B !x_0 = Text.JSON.notNull_98 (Text.JSON.snd_119 x_0)
<{Text.JSON.==_9}>::B !_x_0 !_x_1 = case _x_0 (Text.JSON.JSONNull -> case _x_1 (Text.JSON.JSONNull -> True) ) (Text.JSON.JSONBool x_1_0 -> case _x_1 (Text.JSON.JSONBool y_2_0 -> <{StdBool.==_3}> x_1_0 y_2_0) ) (Text.JSON.JSONInt x_1_0 -> case _x_1 (Text.JSON.JSONInt y_2_0 -> <{StdInt.==_16}> x_1_0 y_2_0) (Text.JSON.JSONReal y_2_0 -> <{StdString.==_2}> (StdString.toString_7 (StdReal.toReal_13 x_1_0)) (StdString.toString_7 y_2_0)) ) (Text.JSON.JSONReal x_1_0 -> case _x_1 (Text.JSON.JSONReal y_2_0 -> <{StdString.==_2}> (StdString.toString_7 x_1_0) (StdString.toString_7 y_2_0)) (Text.JSON.JSONInt y_2_0 -> <{StdString.==_2}> (StdString.toString_7 x_1_0) (StdString.toString_7 (StdReal.toReal_13 y_2_0))) ) (Text.JSON.JSONString x_1_0 -> case _x_1 (Text.JSON.JSONString y_2_0 -> <{StdString.==_2}> x_1_0 y_2_0) ) (Text.JSON.JSONArray xs_1_0 -> case _x_1 (Text.JSON.JSONArray ys_2_0 -> <{StdList.==_45}> (<{StdOverloaded.==;}> <{Text.JSON.==_9}>) xs_1_0 ys_2_0) ) (Text.JSON.JSONObject xs_1_0 -> case _x_1 (Text.JSON.JSONObject ys_2_0 -> <{StdList.==_45}> (<{StdOverloaded.==;}> (<{StdTuple.==_4}> (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{Text.JSON.==_9}>)))) (StdOrdList.sortBy Text.JSON.cmpFst_247 (StdList.filter Text.JSON.anon_250 xs_1_0)) (StdOrdList.sortBy Text.JSON.cmpFst_247 (StdList.filter Text.JSON.anon_251 ys_2_0))) ) (Text.JSON.JSONRaw x_1_0 -> case _x_1 (Text.JSON.JSONRaw y_2_0 -> <{StdString.==_2}> x_1_0 y_2_0) ) (Text.JSON.JSONError -> case _x_1 (Text.JSON.JSONError -> True) ) (_ -> False)
Text.JSON.JSONEncode_Int_10 !_x_0::B !x_1::I = _predefined._Cons (Text.JSON.JSONInt x_1) _predefined._Nil
Text.JSON.JSONEncode_Real_11 !_x_0::B !x_1::D = _predefined._Cons (Text.JSON.JSONReal x_1) _predefined._Nil
Text.JSON.JSONEncode_Char_12 !_x_0::B !x_1::C = _predefined._Cons (Text.JSON.JSONString (_SystemArray.update_21 (_SystemArray._createArray_16 1) 0 x_1)) _predefined._Nil
Text.JSON.JSONEncode_Bool_13 !_x_0::B !x_1::B = _predefined._Cons (Text.JSON.JSONBool x_1) _predefined._Nil
Text.JSON.JSONEncode__String_14 !_x_0::B !x_1 = _predefined._Cons (Text.JSON.JSONString x_1) _predefined._Nil
Text.JSON.JSONEncode_UNIT_15 !_x_0::B !_x_1 = case _x_1 (StdGeneric.UNIT -> _predefined._Nil) 
<{Text.JSON.c;476;59_103}> fx_0 !g_l_1 = <{Text.JSON.g_c1;476;64_275}> g_l_1 fx_0
<{Text.JSON.g_c1;476;64_275}> !g_l_0 fx_1 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> _predefined._Cons (fx_1 False e_1_0) (<{Text.JSON.c;476;59_103}> fx_1 g_t_1_1)) (_ -> _predefined._Nil)
Text.JSON.JSONEncode__List_16 fx_0 !_x_1::B !x_2 = _predefined._Cons (Text.JSON.JSONArray (StdList.flatten (<{Text.JSON.c;476;59_103}> fx_0 x_2))) _predefined._Nil
Text.JSON.JSONEncode__Tuple2_17 fx_0 fy_1 !_x_2::B !_x_3 = case _x_3 (_Tuple2 x_1_0 y_1_1 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (fy_1 False y_1_1))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple3_18 fx_0 fy_1 fz_2 !_x_3::B !_x_4 = case _x_4 (_Tuple3 x_1_0 y_1_1 z_1_2 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (fz_2 False z_1_2)))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple4_19 fx_0 fy_1 fz_2 fi_3 !_x_4::B !_x_5 = case _x_5 (_Tuple4 x_1_0 y_1_1 z_1_2 i_1_3 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (<{StdList.++}> (fz_2 False z_1_2) (fi_3 False i_1_3))))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple5_20 fx_0 fy_1 fz_2 fi_3 fj_4 !_x_5::B !_x_6 = case _x_6 (_Tuple5 x_1_0 y_1_1 z_1_2 i_1_3 j_1_4 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (<{StdList.++}> (fz_2 False z_1_2) (<{StdList.++}> (fi_3 False i_1_3) (fj_4 False j_1_4)))))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple6_21 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 !_x_6::B !_x_7 = case _x_7 (_Tuple6 x_1_0 y_1_1 z_1_2 i_1_3 j_1_4 k_1_5 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (<{StdList.++}> (fz_2 False z_1_2) (<{StdList.++}> (fi_3 False i_1_3) (<{StdList.++}> (fj_4 False j_1_4) (fk_5 False k_1_5))))))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple7_22 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 fl_6 !_x_7::B !_x_8 = case _x_8 (_Tuple7 x_1_0 y_1_1 z_1_2 i_1_3 j_1_4 k_1_5 l_1_6 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (<{StdList.++}> (fz_2 False z_1_2) (<{StdList.++}> (fi_3 False i_1_3) (<{StdList.++}> (fj_4 False j_1_4) (<{StdList.++}> (fk_5 False k_1_5) (fl_6 False l_1_6)))))))) _predefined._Nil) 
Text.JSON.JSONEncode__Tuple8_23 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 fl_6 fm_7 !_x_8::B !_x_9 = case _x_9 (_Tuple8 x_1_0 y_1_1 z_1_2 i_1_3 j_1_4 k_1_5 l_1_6 m_1_7 -> _predefined._Cons (Text.JSON.JSONArray (<{StdList.++}> (fx_0 False x_1_0) (<{StdList.++}> (fy_1 False y_1_1) (<{StdList.++}> (fz_2 False z_1_2) (<{StdList.++}> (fi_3 False i_1_3) (<{StdList.++}> (fj_4 False j_1_4) (<{StdList.++}> (fk_5 False k_1_5) (<{StdList.++}> (fl_6 False l_1_6) (fm_7 False m_1_7))))))))) _predefined._Nil) 
<{Text.JSON.c;484;59_104}> !_vArray_0 fx_1 !g_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_2 in _predefined._Cons (fx_1 False (select _x_2_1::_Tuple2 0)) (<{Text.JSON.c;484;59_104}> _vArray_0 fx_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_2_0)) (False -> _predefined._Nil) 
<{Text.JSON.c;484;59_252}> fx_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_78 g_a_3 g_i_1 in _predefined._Cons (fx_0 False (select _x_2_1::_Tuple2 0)) (<{Text.JSON.c;484;59_252}> fx_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
Text.JSON.JSONEncode__Array_24 fx_0 !_x_1::B !x_2 = let _x_1_0 = _SystemArray.usize_79 x_2 in _predefined._Cons (Text.JSON.JSONArray (StdList.flatten (<{Text.JSON.c;484;59_252}> fx_0 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)))) _predefined._Nil
<{Text.JSON.c;485;60_105}> !_vArray_0 fx_1 !g_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_4 g_i_2 in _predefined._Cons (fx_1 False (select _x_2_1::_Tuple2 0)) (<{Text.JSON.c;485;60_105}> _vArray_0 fx_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_2_0)) (False -> _predefined._Nil) 
<{Text.JSON.c;485;60_253}> fx_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_6 g_a_3 g_i_1 in _predefined._Cons (fx_0 False (select _x_2_1::_Tuple2 0)) (<{Text.JSON.c;485;60_253}> fx_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{Text.JSON.JSONEncode__!Array_25}> fx_0 !_x_1::B !x_2 = let _x_1_0 = _SystemArray.usize_7 x_2 in _predefined._Cons (Text.JSON.JSONArray (StdList.flatten (<{Text.JSON.c;485;60_253}> fx_0 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)))) _predefined._Nil
Text.JSON.JSONEncode_Maybe_26 fx_0 !inField_1::B !_x_2 = case _x_2 (Data.Maybe.Just x_1_0 -> case inField_1 (True -> fx_0 False x_1_0) (False -> _predefined._Cons (Text.JSON.JSONArray (_predefined._Cons (Text.JSON.JSONString "Just") (fx_0 False x_1_0))) _predefined._Nil) ) (Data.Maybe.Nothing -> case inField_1 (True -> _predefined._Cons Text.JSON.JSONNull _predefined._Nil) (False -> _predefined._Cons (Text.JSON.JSONArray (_predefined._Cons (Text.JSON.JSONString "Nothing") _predefined._Nil)) _predefined._Nil) ) 
Text.JSON.JSONEncode_JSONNode_27 !_x_0::B !node_1 = _predefined._Cons node_1 _predefined._Nil
Text.JSON.JSONEncode_EITHER_28 fx_0 fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.LEFT x_1_0 -> fx_0 False x_1_0) (StdGeneric.RIGHT y_1_0 -> fy_1 False y_1_0) 
Text.JSON.JSONEncode_CONS_29 gcd_name_0 fx_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.CONS x_1_0 -> _predefined._Cons (Text.JSON.JSONArray (_predefined._Cons (Text.JSON.JSONString gcd_name_0) (fx_1 False x_1_0))) _predefined._Nil) 
Text.JSON.JSONEncode_OBJECT_30 !fx_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.OBJECT x_1_0 -> fx_0 False x_1_0) 
Text.JSON.isNotNull_102::B !_x_0 = case _x_0 (Text.JSON.JSONNull -> False) (_ -> True)
<{Text.JSON.c;470;47_101}> !g_l_0 g_l_1 = <{Text.JSON.g_c1;470;33_277}> g_l_0 g_l_1
<{Text.JSON.g_c1;470;33_277}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> <{Text.JSON.g_c1;470;54_276}> g_l_1 o_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Text.JSON.g_c1;470;54_276}> !g_l_0 o_1 g_t_2 = case g_l_0 (_predefined._Cons name_1_0 g_t_1_1 -> case (Text.JSON.isNotNull_102 o_1) (True -> _predefined._Cons (_Tuple2 name_1_0 o_1) (<{Text.JSON.c;470;47_101}> g_t_2 g_t_1_1)) (False -> <{Text.JSON.c;470;47_101}> g_t_2 g_t_1_1) ) (_ -> _predefined._Nil)
Text.JSON.JSONEncode_RECORD_31 grd_fields_0 fx_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Text.JSON.c;470;47_101}> (fx_1 False x_1_0) grd_fields_0)) _predefined._Nil) 
Text.JSON.JSONEncode_FIELD_32 !fx_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.FIELD x_1_0 -> fx_0 True x_1_0) 
<{Text.JSON.++_100}> !_x_0 !list_1 = case _x_0 (_predefined._Cons hd_1_0 tl_1_1 -> _predefined._Cons hd_1_0 (<{Text.JSON.++_100}> tl_1_1 list_1)) (_ -> list_1)
Text.JSON.JSONEncode_PAIR_33 !fx_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Text.JSON.++_100}> (fx_0 False x_1_0) (fy_1 False y_1_1)) 
Text.JSON.JSONDecode_Int_34 !_x_0::B !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONInt i_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just i_2_0) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
Text.JSON.JSONDecode_Real_35 !_x_0::B !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONReal r_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just r_2_0) xs_1_1) (Text.JSON.JSONInt i_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdReal.toReal_13 i_2_0)) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
Text.JSON.JSONDecode_Char_36 !_x_0::B !l_1 = case l_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONString s_2_0 -> case (<{StdInt.==_16}> (_SystemArray.size_20 s_2_0) 1) (True -> <{_Tuple2!3}> (Data.Maybe.Just (_SystemArray.select_19 s_2_0 0)) xs_1_1) (False -> <{_Tuple2!3}> Data.Maybe.Nothing l_1) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)
Text.JSON.JSONDecode_Bool_37 !_x_0::B !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONBool b_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just b_2_0) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
Text.JSON.JSONDecode__String_38 !_x_0::B !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONString s_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just s_2_0) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
Text.JSON.JSONDecode_UNIT_39 !_x_0::B !l_1 = <{_Tuple2!3}> (Data.Maybe.Just StdGeneric.UNIT) l_1
Text.JSON.JSONDecode_EITHER_40 !fx_0 fy_1 !_x_2::B !l_3 = <{Text.JSON._c;530;34_279}> (fx_0 False l_3) fy_1 l_3
<{Text.JSON._c;530;34_279}> !_x_0 fy_1 l_2 = case _x_0 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.LEFT x_2_0)) xs_1_1) (Data.Maybe.Nothing -> <{Text.JSON._c;532;35_278}> (fy_1 False l_2) l_2) ) 
<{Text.JSON._c;532;35_278}> !_x_0 l_1 = case _x_0 (_Tuple2 _x_1_0 ys_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.RIGHT y_2_0)) ys_1_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_1) ) 
Text.JSON.JSONDecode_CONS_41 gcd_name_0 fx_1 !_x_2::B !l_3 = case l_3 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons _x_3_0 fields_3_1 -> case _x_3_0 (Text.JSON.JSONString name_4_0 -> case (<{StdString.==_2}> name_4_0 gcd_name_0) (True -> <{Text.JSON._c;541;39_280}> (fx_1 False fields_3_1) xs_1_1 l_3) (False -> <{_Tuple2!3}> Data.Maybe.Nothing l_3) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_3)
<{Text.JSON._c;541;39_280}> !_x_0 xs_1 l_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.CONS x_2_0)) xs_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
Text.JSON.JSONDecode_OBJECT_42 !fx_0 !_x_1::B !l_2 = <{Text.JSON._c;536;31_281}> (fx_0 False l_2) l_2
<{Text.JSON._c;536;31_281}> !_x_0 l_1 = case _x_0 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.OBJECT x_2_0)) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)
Text.JSON.JSONDecode__List_43 fx_0 !_x_1::B !l_2 = case l_2 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray items_2_0 -> <{Text.JSON._c;578;7_282}> (Text.JSON.decodeItems fx_0 items_2_0) xs_1_1 l_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
<{Text.JSON._c;578;7_282}> !_x_0 xs_1 l_2 = case _x_0 (Data.Maybe.Just x_1_0 -> <{_Tuple2!3}> (Data.Maybe.Just x_1_0) xs_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
Text.JSON.JSONDecode__Tuple2_44 fx_0 fy_1 !_x_2::B !l_3 = case l_3 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Nil -> <{Text.JSON._c;584;7_284}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 xs_1_1 l_3) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_3)
<{Text.JSON._c;584;7_284}> !_x_0 fy_1 yo_2 xs_3 l_4 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;585;23_283}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) x_2_0 xs_3 l_4) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Text.JSON._c;585;23_283}> !_x_0 x_1 xs_2 l_3 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple2 x_1 y_2_0)) xs_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_3)
Text.JSON.JSONDecode__Tuple3_45 fx_0 fy_1 fz_2 !_x_3::B !l_4 = case l_4 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Nil -> <{Text.JSON._c;592;7_287}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 xs_1_1 l_4) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Text.JSON._c;592;7_287}> !_x_0 fy_1 yo_2 fz_3 zo_4 xs_5 l_6 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;593;23_286}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 x_2_0 xs_5 l_6) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_6)
<{Text.JSON._c;593;23_286}> !_x_0 fz_1 zo_2 x_3 xs_4 l_5 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;594;35_285}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) x_3 y_2_0 xs_4 l_5) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_5)
<{Text.JSON._c;594;35_285}> !_x_0 x_1 y_2 xs_3 l_4 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple3 x_1 y_2 z_2_0)) xs_3) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
Text.JSON.JSONDecode__Tuple4_46 fx_0 fy_1 fz_2 fi_3 !_x_4::B !l_5 = case l_5 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons io_6_0 _x_6_1 -> case _x_6_1 (_predefined._Nil -> <{Text.JSON._c;602;7_291}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 fi_3 io_6_0 xs_1_1 l_5) ) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_5)
<{Text.JSON._c;602;7_291}> !_x_0 fy_1 yo_2 fz_3 zo_4 fi_5 io_6 xs_7 l_8 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;603;22_290}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 fi_5 io_6 x_2_0 xs_7 l_8) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_8)
<{Text.JSON._c;603;22_290}> !_x_0 fz_1 zo_2 fi_3 io_4 x_5 xs_6 l_7 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;604;27_289}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) fi_3 io_4 x_5 y_2_0 xs_6 l_7) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_7)
<{Text.JSON._c;604;27_289}> !_x_0 fi_1 io_2 x_3 y_4 xs_5 l_6 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{Text.JSON._c;605;30_288}> (fi_1 False (_predefined._Cons io_2 _predefined._Nil)) x_3 y_4 z_2_0 xs_5 l_6) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_6)
<{Text.JSON._c;605;30_288}> !_x_0 x_1 y_2 z_3 xs_4 l_5 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just i_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple4 x_1 y_2 z_3 i_2_0)) xs_4) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_5)
Text.JSON.JSONDecode__Tuple5_47 fx_0 fy_1 fz_2 fi_3 fj_4 !_x_5::B !l_6 = case l_6 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons io_6_0 _x_6_1 -> case _x_6_1 (_predefined._Cons jo_7_0 _x_7_1 -> case _x_7_1 (_predefined._Nil -> <{Text.JSON._c;614;7_296}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 fi_3 io_6_0 fj_4 jo_7_0 xs_1_1 l_6) ) ) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_6)
<{Text.JSON._c;614;7_296}> !_x_0 fy_1 yo_2 fz_3 zo_4 fi_5 io_6 fj_7 jo_8 xs_9 l_10 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;615;23_295}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 fi_5 io_6 fj_7 jo_8 x_2_0 xs_9 l_10) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_10)
<{Text.JSON._c;615;23_295}> !_x_0 fz_1 zo_2 fi_3 io_4 fj_5 jo_6 x_7 xs_8 l_9 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;616;27_294}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) fi_3 io_4 fj_5 jo_6 x_7 y_2_0 xs_8 l_9) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
<{Text.JSON._c;616;27_294}> !_x_0 fi_1 io_2 fj_3 jo_4 x_5 y_6 xs_7 l_8 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{Text.JSON._c;617;30_293}> (fi_1 False (_predefined._Cons io_2 _predefined._Nil)) fj_3 jo_4 x_5 y_6 z_2_0 xs_7 l_8) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_8)
<{Text.JSON._c;617;30_293}> !_x_0 fj_1 jo_2 x_3 y_4 z_5 xs_6 l_7 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just i_2_0 -> <{Text.JSON._c;618;35_292}> (fj_1 False (_predefined._Cons jo_2 _predefined._Nil)) x_3 y_4 z_5 i_2_0 xs_6 l_7) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_7)
<{Text.JSON._c;618;35_292}> !_x_0 x_1 y_2 z_3 i_4 xs_5 l_6 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just j_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple5 x_1 y_2 z_3 i_4 j_2_0)) xs_5) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_6)
Text.JSON.JSONDecode__Tuple6_48 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 !_x_6::B !l_7 = case l_7 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons io_6_0 _x_6_1 -> case _x_6_1 (_predefined._Cons jo_7_0 _x_7_1 -> case _x_7_1 (_predefined._Cons ko_8_0 _x_8_1 -> case _x_8_1 (_predefined._Nil -> <{Text.JSON._c;628;7_302}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 fi_3 io_6_0 fj_4 jo_7_0 fk_5 ko_8_0 xs_1_1 l_7) ) ) ) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_7)
<{Text.JSON._c;628;7_302}> !_x_0 fy_1 yo_2 fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 xs_11 l_12 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;629;23_301}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 x_2_0 xs_11 l_12) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_12)
<{Text.JSON._c;629;23_301}> !_x_0 fz_1 zo_2 fi_3 io_4 fj_5 jo_6 fk_7 ko_8 x_9 xs_10 l_11 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;630;27_300}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) fi_3 io_4 fj_5 jo_6 fk_7 ko_8 x_9 y_2_0 xs_10 l_11) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_11)
<{Text.JSON._c;630;27_300}> !_x_0 fi_1 io_2 fj_3 jo_4 fk_5 ko_6 x_7 y_8 xs_9 l_10 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{Text.JSON._c;631;30_299}> (fi_1 False (_predefined._Cons io_2 _predefined._Nil)) fj_3 jo_4 fk_5 ko_6 x_7 y_8 z_2_0 xs_9 l_10) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_10)
<{Text.JSON._c;631;30_299}> !_x_0 fj_1 jo_2 fk_3 ko_4 x_5 y_6 z_7 xs_8 l_9 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just i_2_0 -> <{Text.JSON._c;632;35_298}> (fj_1 False (_predefined._Cons jo_2 _predefined._Nil)) fk_3 ko_4 x_5 y_6 z_7 i_2_0 xs_8 l_9) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
<{Text.JSON._c;632;35_298}> !_x_0 fk_1 ko_2 x_3 y_4 z_5 i_6 xs_7 l_8 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just j_2_0 -> <{Text.JSON._c;633;43_297}> (fk_1 False (_predefined._Cons ko_2 _predefined._Nil)) x_3 y_4 z_5 i_6 j_2_0 xs_7 l_8) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_8)
<{Text.JSON._c;633;43_297}> !_x_0 x_1 y_2 z_3 i_4 j_5 xs_6 l_7 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just k_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple6 x_1 y_2 z_3 i_4 j_5 k_2_0)) xs_6) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_7)
Text.JSON.JSONDecode__Tuple7_49 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 fm_6 !_x_7::B !l_8 = case l_8 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons io_6_0 _x_6_1 -> case _x_6_1 (_predefined._Cons jo_7_0 _x_7_1 -> case _x_7_1 (_predefined._Cons ko_8_0 _x_8_1 -> case _x_8_1 (_predefined._Cons mo_9_0 _x_9_1 -> case _x_9_1 (_predefined._Nil -> <{Text.JSON._c;644;7_309}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 fi_3 io_6_0 fj_4 jo_7_0 fk_5 ko_8_0 fm_6 mo_9_0 xs_1_1 l_8) ) ) ) ) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_8)
<{Text.JSON._c;644;7_309}> !_x_0 fy_1 yo_2 fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 fm_11 mo_12 xs_13 l_14 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;645;23_308}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 fm_11 mo_12 x_2_0 xs_13 l_14) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_14)
<{Text.JSON._c;645;23_308}> !_x_0 fz_1 zo_2 fi_3 io_4 fj_5 jo_6 fk_7 ko_8 fm_9 mo_10 x_11 xs_12 l_13 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;646;27_307}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) fi_3 io_4 fj_5 jo_6 fk_7 ko_8 fm_9 mo_10 x_11 y_2_0 xs_12 l_13) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_13)
<{Text.JSON._c;646;27_307}> !_x_0 fi_1 io_2 fj_3 jo_4 fk_5 ko_6 fm_7 mo_8 x_9 y_10 xs_11 l_12 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{Text.JSON._c;647;30_306}> (fi_1 False (_predefined._Cons io_2 _predefined._Nil)) fj_3 jo_4 fk_5 ko_6 fm_7 mo_8 x_9 y_10 z_2_0 xs_11 l_12) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_12)
<{Text.JSON._c;647;30_306}> !_x_0 fj_1 jo_2 fk_3 ko_4 fm_5 mo_6 x_7 y_8 z_9 xs_10 l_11 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just i_2_0 -> <{Text.JSON._c;648;34_305}> (fj_1 False (_predefined._Cons jo_2 _predefined._Nil)) fk_3 ko_4 fm_5 mo_6 x_7 y_8 z_9 i_2_0 xs_10 l_11) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_11)
<{Text.JSON._c;648;34_305}> !_x_0 fk_1 ko_2 fm_3 mo_4 x_5 y_6 z_7 i_8 xs_9 l_10 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just j_2_0 -> <{Text.JSON._c;649;38_304}> (fk_1 False (_predefined._Cons ko_2 _predefined._Nil)) fm_3 mo_4 x_5 y_6 z_7 i_8 j_2_0 xs_9 l_10) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_10)
<{Text.JSON._c;649;38_304}> !_x_0 fm_1 mo_2 x_3 y_4 z_5 i_6 j_7 xs_8 l_9 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just k_2_0 -> <{Text.JSON._c;650;43_303}> (fm_1 False (_predefined._Cons mo_2 _predefined._Nil)) x_3 y_4 z_5 i_6 j_7 k_2_0 xs_8 l_9) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
<{Text.JSON._c;650;43_303}> !_x_0 x_1 y_2 z_3 i_4 j_5 k_6 xs_7 l_8 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just m_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple7 x_1 y_2 z_3 i_4 j_5 k_6 m_2_0)) xs_7) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_8)
Text.JSON.JSONDecode__Tuple8_50 fx_0 fy_1 fz_2 fi_3 fj_4 fk_5 fm_6 fn_7 !_x_8::B !l_9 = case l_9 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray _x_2_0 -> case _x_2_0 (_predefined._Cons xo_3_0 _x_3_1 -> case _x_3_1 (_predefined._Cons yo_4_0 _x_4_1 -> case _x_4_1 (_predefined._Cons zo_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons io_6_0 _x_6_1 -> case _x_6_1 (_predefined._Cons jo_7_0 _x_7_1 -> case _x_7_1 (_predefined._Cons ko_8_0 _x_8_1 -> case _x_8_1 (_predefined._Cons mo_9_0 _x_9_1 -> case _x_9_1 (_predefined._Cons no_10_0 _x_10_1 -> case _x_10_1 (_predefined._Nil -> <{Text.JSON._c;662;7_317}> (fx_0 False (_predefined._Cons xo_3_0 _predefined._Nil)) fy_1 yo_4_0 fz_2 zo_5_0 fi_3 io_6_0 fj_4 jo_7_0 fk_5 ko_8_0 fm_6 mo_9_0 fn_7 no_10_0 xs_1_1 l_9) ) ) ) ) ) ) ) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
<{Text.JSON._c;662;7_317}> !_x_0 fy_1 yo_2 fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 fm_11 mo_12 fn_13 no_14 xs_15 l_16 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{Text.JSON._c;663;23_316}> (fy_1 False (_predefined._Cons yo_2 _predefined._Nil)) fz_3 zo_4 fi_5 io_6 fj_7 jo_8 fk_9 ko_10 fm_11 mo_12 fn_13 no_14 x_2_0 xs_15 l_16) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_16)
<{Text.JSON._c;663;23_316}> !_x_0 fz_1 zo_2 fi_3 io_4 fj_5 jo_6 fk_7 ko_8 fm_9 mo_10 fn_11 no_12 x_13 xs_14 l_15 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{Text.JSON._c;664;27_315}> (fz_1 False (_predefined._Cons zo_2 _predefined._Nil)) fi_3 io_4 fj_5 jo_6 fk_7 ko_8 fm_9 mo_10 fn_11 no_12 x_13 y_2_0 xs_14 l_15) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_15)
<{Text.JSON._c;664;27_315}> !_x_0 fi_1 io_2 fj_3 jo_4 fk_5 ko_6 fm_7 mo_8 fn_9 no_10 x_11 y_12 xs_13 l_14 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just z_2_0 -> <{Text.JSON._c;665;30_314}> (fi_1 False (_predefined._Cons io_2 _predefined._Nil)) fj_3 jo_4 fk_5 ko_6 fm_7 mo_8 fn_9 no_10 x_11 y_12 z_2_0 xs_13 l_14) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_14)
<{Text.JSON._c;665;30_314}> !_x_0 fj_1 jo_2 fk_3 ko_4 fm_5 mo_6 fn_7 no_8 x_9 y_10 z_11 xs_12 l_13 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just i_2_0 -> <{Text.JSON._c;666;34_313}> (fj_1 False (_predefined._Cons jo_2 _predefined._Nil)) fk_3 ko_4 fm_5 mo_6 fn_7 no_8 x_9 y_10 z_11 i_2_0 xs_12 l_13) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_13)
<{Text.JSON._c;666;34_313}> !_x_0 fk_1 ko_2 fm_3 mo_4 fn_5 no_6 x_7 y_8 z_9 i_10 xs_11 l_12 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just j_2_0 -> <{Text.JSON._c;667;38_312}> (fk_1 False (_predefined._Cons ko_2 _predefined._Nil)) fm_3 mo_4 fn_5 no_6 x_7 y_8 z_9 i_10 j_2_0 xs_11 l_12) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_12)
<{Text.JSON._c;667;38_312}> !_x_0 fm_1 mo_2 fn_3 no_4 x_5 y_6 z_7 i_8 j_9 xs_10 l_11 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just k_2_0 -> <{Text.JSON._c;668;43_311}> (fm_1 False (_predefined._Cons mo_2 _predefined._Nil)) fn_3 no_4 x_5 y_6 z_7 i_8 j_9 k_2_0 xs_10 l_11) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_11)
<{Text.JSON._c;668;43_311}> !_x_0 fn_1 no_2 x_3 y_4 z_5 i_6 j_7 k_8 xs_9 l_10 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just m_2_0 -> <{Text.JSON._c;669;45_310}> (fn_1 False (_predefined._Cons no_2 _predefined._Nil)) x_3 y_4 z_5 i_6 j_7 k_8 m_2_0 xs_9 l_10) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_10)
<{Text.JSON._c;669;45_310}> !_x_0 x_1 y_2 z_3 i_4 j_5 k_6 m_7 xs_8 l_9 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just n_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (_Tuple8 x_1 y_2 z_3 i_4 j_5 k_6 m_7 n_2_0)) xs_8) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
<{Text.JSON.cu;683;36_112}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{Text.JSON.g_c1;683;41_318}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{Text.JSON.g_c1;683;41_318}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;683;36_112}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{Text.JSON.cu;683;36_111}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{Text.JSON.g_c1;683;41_319}> g_l_3 _vArray_0 c_a_1 c_i_2
<{Text.JSON.g_c1;683;41_319}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;683;36_111}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 e_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{Text.JSON.cu;683;36_254}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{Text.JSON.g_c1;683;41_320}> g_l_2 <{_v+_0}> c_l_i_1
<{Text.JSON.g_c1;683;41_320}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;683;36_254}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{Text.JSON.cu;683;36_255}> !c_a_0 c_i_1::I !g_l_2 = <{Text.JSON.g_c1;683;41_321}> g_l_2 c_a_0 c_i_1
<{Text.JSON.g_c1;683;41_321}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;683;36_255}> (_SystemArray.update_77 c_a_1 c_i_2 e_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{Text.JSON.cu;683;36_256}>::I !c_l_i_0::I !g_l_1 = <{Text.JSON.g_c1;683;41_322}> g_l_1 c_l_i_0
<{Text.JSON.g_c1;683;41_322}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;683;36_256}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
Text.JSON.JSONDecode__Array_51 fx_0 !_x_1::B !l_2 = case l_2 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray items_2_0 -> <{Text.JSON._c;682;7_323}> (Text.JSON.decodeItems fx_0 items_2_0) xs_1_1 l_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
<{Text.JSON._c;682;7_323}> !_x_0 xs_1 l_2 = case _x_0 (Data.Maybe.Just x_1_0 -> <{_Tuple2!3}> (Data.Maybe.Just (<{Text.JSON.cu;683;36_255}> (_SystemArray._createArray_72 (<{Text.JSON.cu;683;36_256}> 0 x_1_0)) 0 x_1_0)) xs_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
<{Text.JSON.cu;689;36_114}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{Text.JSON.g_c1;689;41_324}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{Text.JSON.g_c1;689;41_324}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;689;36_114}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{Text.JSON.cu;689;36_113}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{Text.JSON.g_c1;689;41_325}> g_l_3 _vArray_0 c_a_1 c_i_2
<{Text.JSON.g_c1;689;41_325}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;689;36_113}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 e_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{Text.JSON.cu;689;36_257}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{Text.JSON.g_c1;689;41_326}> g_l_2 <{_v+_0}> c_l_i_1
<{Text.JSON.g_c1;689;41_326}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;689;36_257}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{Text.JSON.cu;689;36_258}> !c_a_0 c_i_1::I !g_l_2 = <{Text.JSON.g_c1;689;41_327}> g_l_2 c_a_0 c_i_1
<{Text.JSON.g_c1;689;41_327}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;689;36_258}> (_SystemArray.update_5 c_a_1 c_i_2 e_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{Text.JSON.cu;689;36_259}>::I !c_l_i_0::I !g_l_1 = <{Text.JSON.g_c1;689;41_328}> g_l_1 c_l_i_0
<{Text.JSON.g_c1;689;41_328}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons e_1_0 g_t_1_1 -> <{Text.JSON.cu;689;36_259}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
<{Text.JSON.JSONDecode__!Array_52}> fx_0 !_x_1::B !l_2 = case l_2 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (Text.JSON.JSONArray items_2_0 -> <{Text.JSON._c;688;7_329}> (Text.JSON.decodeItems fx_0 items_2_0) xs_1_1 l_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
<{Text.JSON._c;688;7_329}> !_x_0 xs_1 l_2 = case _x_0 (Data.Maybe.Just x_1_0 -> <{_Tuple2!3}> (Data.Maybe.Just (<{Text.JSON.cu;689;36_258}> (_SystemArray._createArray_0 (<{Text.JSON.cu;689;36_259}> 0 x_1_0)) 0 x_1_0)) xs_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
Text.JSON.JSONDecode_Maybe_53 fx_0 !_x_1::B !_x_2 = case _x_1 (False -> case _x_2 (_predefined._Cons _x_2_0 xs_2_1 -> case _x_2_0 (Text.JSON.JSONArray _x_3_0 -> case _x_3_0 (_predefined._Cons _x_4_0 _x_4_1 -> case _x_4_0 (Text.JSON.JSONString _x_5_0 -> case _x_5_0 ("Nothing" -> case _x_4_1 (_predefined._Nil -> <{_Tuple2!3}> (Data.Maybe.Just Data.Maybe.Nothing) xs_2_1) ) ("Just" -> <{Text.JSON._c;704;5_330}> (fx_0 False _x_4_1) xs_2_1 _x_4_1) ) ) ) ) ) (True -> case _x_2 (_predefined._Cons _x_2_0 xs_2_1 -> case _x_2_0 (Text.JSON.JSONNull -> <{_Tuple2!3}> (Data.Maybe.Just Data.Maybe.Nothing) xs_2_1) ) (_predefined._Nil -> <{_Tuple2!3}> (Data.Maybe.Just Data.Maybe.Nothing) _predefined._Nil) (_ -> <{Text.JSON._c;711;5_331}> (fx_0 False _x_2) _x_2)) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_2)
<{Text.JSON._c;711;5_331}> !_x_0 _x_1 = case _x_0 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (Data.Maybe.Just x_2_0)) xs_1_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
<{Text.JSON._c;704;5_330}> !_x_0 xs_1 _x_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (Data.Maybe.Just x_2_0)) xs_1) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_2)
Text.JSON.JSONDecode_JSONNode_54 !_x_0::B !_x_1 = case _x_1 (_predefined._Cons node_1_0 xs_1_1 -> <{_Tuple2!3}> (Data.Maybe.Just node_1_0) xs_1_1) (_predefined._Nil -> case _x_0 (True -> <{_Tuple2!3}> (Data.Maybe.Just Text.JSON.JSONNull) _predefined._Nil) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _x_1)
Text.JSON.d2_107 !x_0 !_x_1 !l_2 = case _x_1 (_Tuple2 _x_1_0 ys_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.PAIR x_0 y_2_0)) ys_1_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Text.JSON.d1_106 !fy_0 !_x_1 !l_2 = case _x_1 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Text.JSON.d2_107 x_2_0 (fy_0 False xs_1_1) l_2) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Text.JSON.JSONDecode_PAIR_55 !fx_0 !fy_1 !_x_2::B !l_3 = Text.JSON.d1_106 fy_1 (fx_0 False l_3) l_3
Text.JSON.d_108 !_x_0 !xs_1 !l_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.RECORD x_2_0)) xs_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Text.JSON.d_109 !_x_0 !xs_1 !l_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.RECORD x_2_0)) xs_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Text.JSON.JSONDecode_RECORD_56 fx_0 !_x_1::B !l_2 = case l_2 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Text.JSON.d_108 (fx_0 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_2) (Text.JSON.JSONArray fields_2_0 -> Text.JSON.d_109 (fx_0 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
Text.JSON.findField_110 !match_0 !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (_Tuple2 l_2_0 x_2_1 -> case (<{StdString.==_2}> l_2_0 match_0) (True -> _predefined._Cons x_2_1 _predefined._Nil) (False -> Text.JSON.findField_110 match_0 xs_1_1) ) ) (_predefined._Nil -> _predefined._Nil) 
Text.JSON.JSONDecode_FIELD_57 gfd_name_0 _x_1::I fx_2 !_x_3::B !l_4 = case l_4 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Text.JSON.findField_110 gfd_name_0 fields_2_0 in <{Text.JSON._c;561;5_332}> (fx_2 True field_4_0) l_4) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Text.JSON._c;572;5_333}> (fx_2 True (_predefined._Cons field_4_0 _predefined._Nil)) l_4) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Text.JSON._c;572;5_333}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Text.JSON._c;561;5_332}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Text.JSON.TD;JSONNode}> _x_0::B = _predefined._Nil

:: Text.JSON.JSONNode = Text.JSON.JSONNull | Text.JSON.JSONBool !a1::B | Text.JSON.JSONInt !a1::I | Text.JSON.JSONReal !a1::D | Text.JSON.JSONString !a1 | Text.JSON.JSONArray !a1 | Text.JSON.JSONObject !a1 | Text.JSON.JSONRaw !a1 | Text.JSON.JSONError

|| Converted Records
:: <{Text.JSON.gEq_s;}> = {!Text.JSON.gEq_s}

:: <{Text.JSON.gEq_ss;}> = {!Text.JSON.gEq_ss}

:: <{Text.JSON.gEq_sss;}> = {!Text.JSON.gEq_sss}

:: <{Text.JSON.gEq_ssss;}> = {!Text.JSON.gEq_ssss}

:: <{Text.JSON.gEq_sssss;}> = {!Text.JSON.gEq_sssss}

:: <{Text.JSON.gEq_ssssss;}> = {!Text.JSON.gEq_ssssss}

:: <{Text.JSON.gEq_sssssss;}> = {!Text.JSON.gEq_sssssss}

:: <{Text.JSON.gEq_ssssssss;}> = {!Text.JSON.gEq_ssssssss}

:: <{Text.JSON.gEq_sssssssss;}> = {!Text.JSON.gEq_sssssssss}

:: <{Text.JSON.bimap_s;}> = {Text.JSON.bimap_s}

:: <{Text.JSON.bimap_ss;}> = {Text.JSON.bimap_ss}

:: <{Text.JSON.bimap_sss;}> = {Text.JSON.bimap_sss}

:: <{Text.JSON.JSONEncode_s;}> = {!Text.JSON.JSONEncode_s}

:: <{Text.JSON.JSONEncode_ss;}> = {!Text.JSON.JSONEncode_ss}

:: <{Text.JSON.JSONEncode_sss;}> = {!Text.JSON.JSONEncode_sss}

:: <{Text.JSON.JSONEncode_ssss;}> = {!Text.JSON.JSONEncode_ssss}

:: <{Text.JSON.JSONEncode_sssss;}> = {!Text.JSON.JSONEncode_sssss}

:: <{Text.JSON.JSONEncode_ssssss;}> = {!Text.JSON.JSONEncode_ssssss}

:: <{Text.JSON.JSONEncode_sssssss;}> = {!Text.JSON.JSONEncode_sssssss}

:: <{Text.JSON.JSONEncode_ssssssss;}> = {!Text.JSON.JSONEncode_ssssssss}

:: <{Text.JSON.JSONEncode_sssssssss;}> = {!Text.JSON.JSONEncode_sssssssss}

:: <{Text.JSON.JSONDecode_s;}> = {!Text.JSON.JSONDecode_s}

:: <{Text.JSON.JSONDecode_ss;}> = {!Text.JSON.JSONDecode_ss}

:: <{Text.JSON.JSONDecode_sss;}> = {!Text.JSON.JSONDecode_sss}

:: <{Text.JSON.JSONDecode_ssss;}> = {!Text.JSON.JSONDecode_ssss}

:: <{Text.JSON.JSONDecode_sssss;}> = {!Text.JSON.JSONDecode_sssss}

:: <{Text.JSON.JSONDecode_ssssss;}> = {!Text.JSON.JSONDecode_ssssss}

:: <{Text.JSON.JSONDecode_sssssss;}> = {!Text.JSON.JSONDecode_sssssss}

:: <{Text.JSON.JSONDecode_ssssssss;}> = {!Text.JSON.JSONDecode_ssssssss}

:: <{Text.JSON.JSONDecode_sssssssss;}> = {!Text.JSON.JSONDecode_sssssssss}

