|| ?module? Text.StringAppender


Text.StringAppender.newAppender = Text.StringAppender._StringAppender _predefined._Nil 0
Text.StringAppender.append !_vtoString_0 !appender_1 a_2 = let !str_1_0 = select _vtoString_0::<{StdOverloaded.toString;}> 0 a_2, !new_length_1_1::I = <{StdInt.+_6}> (select appender_1::Text.StringAppender._StringAppender 1) (_SystemArray.size_20 str_1_0) in Text.StringAppender._StringAppender (_predefined._Cons str_1_0 (select appender_1::Text.StringAppender._StringAppender 0)) new_length_1_1
Text.StringAppender.append_59 !appender_0 !a_1 = let !str_1_0 = StdString.toString_9 a_1, !new_length_1_1::I = <{StdInt.+_6}> (select appender_0::Text.StringAppender._StringAppender 1) (_SystemArray.size_20 str_1_0) in Text.StringAppender._StringAppender (_predefined._Cons str_1_0 (select appender_0::Text.StringAppender._StringAppender 0)) new_length_1_1
Text.StringAppender.joinList !_vtoString_0 !sep_1 !_x_2 !a_3 = case _x_2 (_predefined._Cons t_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Text.StringAppender.append _vtoString_0 a_3 t_1_0) (_ -> Text.StringAppender.joinList _vtoString_0 sep_1 _x_1_1 (Text.StringAppender.append_59 (Text.StringAppender.append _vtoString_0 a_3 t_1_0) sep_1))) (_predefined._Nil -> a_3) 
Text.StringAppender.foldl_15 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Text.StringAppender.foldl_15 op_0 (op_0 r_1 a_1_0) x_1_1) 
Text.StringAppender.wrt_14 !_x_0 !str_1 = case _x_0 (_Tuple2 _x_1_0 file_1_1 -> case _x_1_0 (Data.Error.Ok _x_2_0 -> case _x_2_0 (_predefined._Unit -> let file_4_0 = StdFile.fwrites str_1 file_1_1, _x_4_1 = StdFile.ferror file_4_0 in case (select _x_4_1::_Tuple2 0) (True -> _Tuple2 (Data.Error.Error System.File.IOError) (select _x_4_1::_Tuple2 1)) (False -> _Tuple2 (Data.Error.Ok _predefined._Unit) (select _x_4_1::_Tuple2 1)) ) ) ) 
Text.StringAppender.foldl_60 !r_0 !_x_1 = case _x_1 (_predefined._Nil -> r_0) (_predefined._Cons a_1_0 x_1_1 -> Text.StringAppender.foldl_60 (Text.StringAppender.wrt_14 r_0 a_1_0) x_1_1) 
Text.StringAppender.intoFile !_x_0 !file_1 = case _x_0 (Text.StringAppender._StringAppender elements_1_0 full_length_1_1 -> Text.StringAppender.foldl_60 (_Tuple2 (Data.Error.Ok _predefined._Unit) file_1) (StdList.reverse elements_1_0)) 
Text.StringAppender.copyChars_13 !_vArray_0 !_vArray_1 offset_2::I !i_3::I !num_4::I src_5 dst_6 = case (<{StdInt.==_16}> i_3 num_4) (True -> dst_6) (False -> Text.StringAppender.copyChars_13 _vArray_0 _vArray_1 offset_2 (<{StdInt.+_6}> i_3 1) num_4 src_5 (select _vArray_1::<{_SystemArray.Array;}> 5 dst_6 (<{StdInt.+_6}> offset_2 i_3) (select _vArray_0::<{_SystemArray.Array;}> 3 src_5 i_3))) 
<{Text.StringAppender.concat`_12}> !_vArray_0 !_vArray_1 full_length_2::I !_x_3 dst_4 _x_5::I = case _x_3 (_predefined._Nil -> dst_4) (_predefined._Cons x_1_0 xs_1_1 -> <{Text.StringAppender.concat`_12}> _vArray_0 _vArray_1 full_length_2 xs_1_1 (Text.StringAppender.copyChars_13 _vArray_0 _vArray_1 (<{StdInt.-_7}> (<{StdInt.-_7}> full_length_2 _x_5) (select _vArray_0::<{_SystemArray.Array;}> 4 x_1_0)) 0 (select _vArray_0::<{_SystemArray.Array;}> 4 x_1_0) x_1_0 dst_4) (<{StdInt.+_6}> _x_5 (select _vArray_0::<{_SystemArray.Array;}> 4 x_1_0))) 
Text.StringAppender.copyChars_62 !_vArray_0 offset_1::I !i_2::I !num_3::I src_4 dst_5 = case (<{StdInt.==_16}> i_2 num_3) (True -> dst_5) (False -> Text.StringAppender.copyChars_62 _vArray_0 offset_1 (<{StdInt.+_6}> i_2 1) num_3 src_4 (select _vArray_0::<{_SystemArray.Array;}> 5 dst_5 (<{StdInt.+_6}> offset_1 i_2) (_SystemArray.select_19 src_4 i_2))) 
<{Text.StringAppender.concat`_61}> !_vArray_0 full_length_1::I !_x_2 dst_3 _x_4::I = case _x_2 (_predefined._Nil -> dst_3) (_predefined._Cons x_1_0 xs_1_1 -> <{Text.StringAppender.concat`_61}> _vArray_0 full_length_1 xs_1_1 (Text.StringAppender.copyChars_62 _vArray_0 (<{StdInt.-_7}> (<{StdInt.-_7}> full_length_1 _x_4) (_SystemArray.size_20 x_1_0)) 0 (_SystemArray.size_20 x_1_0) x_1_0 dst_3) (<{StdInt.+_6}> _x_4 (_SystemArray.size_20 x_1_0))) 
Text.StringAppender.copyChars_64 offset_0::I !i_1::I !num_2::I src_3 !dst_4 = case (<{StdInt.==_16}> i_1 num_2) (True -> dst_4) (False -> Text.StringAppender.copyChars_64 offset_0 (<{StdInt.+_6}> i_1 1) num_2 src_3 (_SystemArray.update_21 dst_4 (<{StdInt.+_6}> offset_0 i_1) (_SystemArray.select_19 src_3 i_1))) 
<{Text.StringAppender.concat`_63}> full_length_0::I !_x_1 !dst_2 _x_3::I = case _x_1 (_predefined._Nil -> dst_2) (_predefined._Cons x_1_0 xs_1_1 -> <{Text.StringAppender.concat`_63}> full_length_0 xs_1_1 (Text.StringAppender.copyChars_64 (<{StdInt.-_7}> (<{StdInt.-_7}> full_length_0 _x_3) (_SystemArray.size_20 x_1_0)) 0 (_SystemArray.size_20 x_1_0) x_1_0 dst_2) (<{StdInt.+_6}> _x_3 (_SystemArray.size_20 x_1_0))) 
Text.StringAppender.concat_rev !xs_0 !full_length_1::I = <{Text.StringAppender.concat`_63}> full_length_1 xs_0 (_SystemArray.createArray_17 full_length_1 '\0') 0
Text.StringAppender.toString_4 !appender_0 = Text.StringAppender.concat_rev (select appender_0::Text.StringAppender._StringAppender 0) (select appender_0::Text.StringAppender._StringAppender 1)
<{Text.StringAppender.<++_5}> !a_0 !b_1 = Text.StringAppender.append_59 a_0 b_1
Text.StringAppender.append_65 !appender_0 !a_1::I = let !str_1_0 = StdString.toString_5 a_1, !new_length_1_1::I = <{StdInt.+_6}> (select appender_0::Text.StringAppender._StringAppender 1) (_SystemArray.size_20 str_1_0) in Text.StringAppender._StringAppender (_predefined._Cons str_1_0 (select appender_0::Text.StringAppender._StringAppender 0)) new_length_1_1
<{Text.StringAppender.<++_6}> !a_0 !b_1::I = Text.StringAppender.append_65 a_0 b_1
Text.StringAppender.append_66 !appender_0 !a_1::D = let !str_1_0 = StdString.toString_7 a_1, !new_length_1_1::I = <{StdInt.+_6}> (select appender_0::Text.StringAppender._StringAppender 1) (_SystemArray.size_20 str_1_0) in Text.StringAppender._StringAppender (_predefined._Cons str_1_0 (select appender_0::Text.StringAppender._StringAppender 0)) new_length_1_1
<{Text.StringAppender.<++_7}> !a_0 !b_1::D = Text.StringAppender.append_66 a_0 b_1
<{Text.StringAppender.<++_8}> a_0 !f_1 = f_1 a_0
<{Text.StringAppender.TD;StringAppender}> _x_0::B = _predefined._Nil
<{Text.StringAppender.TD;Appendable;}> _x_0::B = _predefined._Nil


|| Converted Records
:: Text.StringAppender._StringAppender = {Text.StringAppender.elements, Text.StringAppender.full_length::I}

:: <{Text.StringAppender.Appendable;}> = {!<{Text.StringAppender.<++}>}

:: <{Text.StringAppender.gEq_s;}> = {!Text.StringAppender.gEq_s}

:: <{Text.StringAppender.gEq_ss;}> = {!Text.StringAppender.gEq_ss}

:: <{Text.StringAppender.gEq_sss;}> = {!Text.StringAppender.gEq_sss}

:: <{Text.StringAppender.gEq_ssss;}> = {!Text.StringAppender.gEq_ssss}

:: <{Text.StringAppender.gEq_sssss;}> = {!Text.StringAppender.gEq_sssss}

:: <{Text.StringAppender.gEq_ssssss;}> = {!Text.StringAppender.gEq_ssssss}

:: <{Text.StringAppender.gEq_sssssss;}> = {!Text.StringAppender.gEq_sssssss}

:: <{Text.StringAppender.gEq_ssssssss;}> = {!Text.StringAppender.gEq_ssssssss}

:: <{Text.StringAppender.gEq_sssssssss;}> = {!Text.StringAppender.gEq_sssssssss}

:: <{Text.StringAppender.bimap_s;}> = {Text.StringAppender.bimap_s}

:: <{Text.StringAppender.bimap_ss;}> = {Text.StringAppender.bimap_ss}

:: <{Text.StringAppender.bimap_sss;}> = {Text.StringAppender.bimap_sss}

