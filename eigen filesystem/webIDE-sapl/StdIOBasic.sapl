|| ?module? StdIOBasic


StdIOBasic.noLS f_0 !_x_1 = case _x_1 (_Tuple2 c_1_0 a_1_1 -> _Tuple2 c_1_0 (f_0 a_1_1)) 
StdIOBasic.noLS1 f_0 x_1 !_x_2 = case _x_2 (_Tuple2 c_1_0 a_1_1 -> _Tuple2 c_1_0 (f_0 x_1 a_1_1)) 
StdIOBasic.rectangleSize !_x_0 = case _x_0 (StdIOBasic._Rectangle _x_1_0 _x_1_1 -> case _x_1_0 (StdIOBasic._Point2 x1_2_0 y1_2_1 -> case _x_1_1 (StdIOBasic._Point2 x2_3_0 y2_3_1 -> StdIOBasic._Size (StdInt.abs_13 (<{StdInt.-_7}> x2_3_0 x1_2_0)) (StdInt.abs_13 (<{StdInt.-_7}> y2_3_1 y1_2_1))) ) ) 
StdIOBasic.movePoint !_x_0 !_x_1 = case _x_0 (StdIOBasic._Vector2 vx_1_0 vy_1_1 -> case _x_1 (StdIOBasic._Point2 x_2_0 y_2_1 -> StdIOBasic._Point2 (<{StdInt.+_6}> vx_1_0 x_2_0) (<{StdInt.+_6}> vy_1_1 y_2_1)) ) 
StdIOBasic.alt1Of2 !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 a_1_0 -> a_1_0) (_ -> commondef.error "alt1Of2" "StdIOBasic" "argument is (Alt2Of2 _) instead of (Alt1Of2 _)")
StdIOBasic.alt2Of2 !_x_0 = case _x_0 (StdIOBasic.Alt2Of2 b_1_0 -> b_1_0) (_ -> commondef.error "alt2Of2" "StdIOBasic" "argument is (Alt1Of2 _) instead of (Alt2Of2 _)")
StdIOBasic.isAlt1Of2::B !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 _x_1_0 -> True) (_ -> False)
StdIOBasic.isAlt2Of2::B !_x_0 = case _x_0 (StdIOBasic.Alt2Of2 _x_1_0 -> True) (_ -> False)
StdIOBasic.curlify !x_0 = <{StdString.+++_11}> "{" (<{StdString.+++_11}> x_0 "}")
StdIOBasic.recordFieldtoString !_vtoString_0 !_x_1 = case _x_1 (_Tuple2 field_1_0 value_1_1 -> <{StdString.+++_11}> field_1_0 (<{StdString.+++_11}> "=" (select _vtoString_0::<{StdOverloaded.toString;}> 0 value_1_1))) 
<{StdIOBasic.itemsList`_50}> separator_0 !_x_1 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> <{StdString.+++_11}> separator_0 (<{StdString.+++_11}> x_1_0 (<{StdIOBasic.itemsList`_50}> separator_0 xs_1_1))) (_ -> "")
StdIOBasic.itemsList !separator_0 !_x_1 = case _x_1 (_predefined._Cons x_1_0 xs_1_1 -> <{StdString.+++_11}> x_1_0 (<{StdIOBasic.itemsList`_50}> separator_0 xs_1_1)) (_ -> "")
<{StdIOBasic.==_8}>::B !_x_0 !_x_1 = case _x_0 (StdIOBasic._Vector2 a_1_0 b_1_1 -> case _x_1 (StdIOBasic._Vector2 c_2_0 d_2_1 -> case (<{StdInt.==_16}> a_1_0 c_2_0) (True -> <{StdInt.==_16}> b_1_1 d_2_1) (False -> False) ) ) 
<{StdIOBasic.+_9}> !_x_0 !_x_1 = case _x_0 (StdIOBasic._Vector2 vx1_1_0 vy1_1_1 -> case _x_1 (StdIOBasic._Vector2 vx2_2_0 vy2_2_1 -> StdIOBasic._Vector2 (<{StdInt.+_6}> vx1_1_0 vx2_2_0) (<{StdInt.+_6}> vy1_1_1 vy2_2_1)) ) 
<{StdIOBasic.-_10}> !_x_0 !_x_1 = case _x_0 (StdIOBasic._Vector2 vx1_1_0 vy1_1_1 -> case _x_1 (StdIOBasic._Vector2 vx2_2_0 vy2_2_1 -> StdIOBasic._Vector2 (<{StdInt.-_7}> vx1_1_0 vx2_2_0) (<{StdInt.-_7}> vy1_1_1 vy2_2_1)) ) 
StdIOBasic.zero_11 = StdIOBasic._Vector2 0 0
<{StdIOBasic.~_12}> !_x_0 = case _x_0 (StdIOBasic._Vector2 vx_1_0 vy_1_1 -> StdIOBasic._Vector2 (<{StdInt.-_7}> 0 vx_1_0) (<{StdInt.-_7}> 0 vy_1_1)) 
StdIOBasic.recordFieldtoString_94 !_x_0 = case _x_0 (_Tuple2 field_1_0 value_1_1 -> <{StdString.+++_11}> field_1_0 (<{StdString.+++_11}> "=" (StdString.toString_5 value_1_1))) 
StdIOBasic.toString_13 !_x_0 = case _x_0 (StdIOBasic._Vector2 vx_1_0 vy_1_1 -> StdIOBasic.curlify (StdIOBasic.itemsList "," (StdList.map StdIOBasic.recordFieldtoString_94 (StdList.zip2 (_predefined._Cons "vx" (_predefined._Cons "vy" _predefined._Nil)) (_predefined._Cons vx_1_0 (_predefined._Cons vy_1_1 _predefined._Nil)))))) 
<{StdIOBasic.==_14}>::B !_x_0 !_x_1 = case _x_0 (StdIOBasic._Size a_1_0 b_1_1 -> case _x_1 (StdIOBasic._Size c_2_0 d_2_1 -> case (<{StdInt.==_16}> a_1_0 c_2_0) (True -> <{StdInt.==_16}> b_1_1 d_2_1) (False -> False) ) ) 
StdIOBasic.zero_15 = StdIOBasic._Size 0 0
StdIOBasic.toVector_16 !_x_0 = case _x_0 (StdIOBasic._Size w_1_0 h_1_1 -> StdIOBasic._Vector2 w_1_0 h_1_1) 
StdIOBasic.toString_17 !_x_0 = case _x_0 (StdIOBasic._Size w_1_0 h_1_1 -> StdIOBasic.curlify (StdIOBasic.itemsList "," (StdList.map StdIOBasic.recordFieldtoString_94 (StdList.zip2 (_predefined._Cons "w" (_predefined._Cons "h" _predefined._Nil)) (_predefined._Cons w_1_0 (_predefined._Cons h_1_1 _predefined._Nil)))))) 
<{StdIOBasic.==_18}>::B !_x_0 !_x_1 = case _x_0 (StdIOBasic._Point2 a_1_0 b_1_1 -> case _x_1 (StdIOBasic._Point2 c_2_0 d_2_1 -> case (<{StdInt.==_16}> a_1_0 c_2_0) (True -> <{StdInt.==_16}> b_1_1 d_2_1) (False -> False) ) ) 
<{StdIOBasic.+_19}> !_x_0 !_x_1 = case _x_0 (StdIOBasic._Point2 x1_1_0 y1_1_1 -> case _x_1 (StdIOBasic._Point2 x2_2_0 y2_2_1 -> StdIOBasic._Point2 (<{StdInt.+_6}> x1_1_0 x2_2_0) (<{StdInt.+_6}> y1_1_1 y2_2_1)) ) 
<{StdIOBasic.-_20}> !_x_0 !_x_1 = case _x_0 (StdIOBasic._Point2 x1_1_0 y1_1_1 -> case _x_1 (StdIOBasic._Point2 x2_2_0 y2_2_1 -> StdIOBasic._Point2 (<{StdInt.-_7}> x1_1_0 x2_2_0) (<{StdInt.-_7}> y1_1_1 y2_2_1)) ) 
StdIOBasic.zero_21 = StdIOBasic._Point2 0 0
<{StdIOBasic.~_22}> !_x_0 = case _x_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> StdIOBasic._Point2 (<{StdInt.-_7}> 0 x_1_0) (<{StdInt.-_7}> 0 y_1_1)) 
StdIOBasic.toVector_23 !_x_0 = case _x_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> StdIOBasic._Vector2 x_1_0 y_1_1) 
StdIOBasic.toString_24 !_x_0 = case _x_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> StdIOBasic.curlify (StdIOBasic.itemsList "," (StdList.map StdIOBasic.recordFieldtoString_94 (StdList.zip2 (_predefined._Cons "x" (_predefined._Cons "y" _predefined._Nil)) (_predefined._Cons x_1_0 (_predefined._Cons y_1_1 _predefined._Nil)))))) 
<{StdIOBasic.==_25}>::B !_x_0 !_x_1 = case _x_0 (StdIOBasic._Rectangle a_1_0 b_1_1 -> case _x_1 (StdIOBasic._Rectangle c_2_0 d_2_1 -> case (<{StdIOBasic.==_18}> a_1_0 c_2_0) (True -> <{StdIOBasic.==_18}> b_1_1 d_2_1) (False -> False) ) ) 
StdIOBasic.zero_26 = StdIOBasic._Rectangle StdIOBasic.zero_21 StdIOBasic.zero_21
StdIOBasic.recordFieldtoString_95 !_x_0 = case _x_0 (_Tuple2 field_1_0 value_1_1 -> <{StdString.+++_11}> field_1_0 (<{StdString.+++_11}> "=" (StdIOBasic.toString_24 value_1_1))) 
StdIOBasic.toString_27 !_x_0 = case _x_0 (StdIOBasic._Rectangle corner1_1_0 corner2_1_1 -> StdIOBasic.curlify (StdIOBasic.itemsList "," (StdList.map StdIOBasic.recordFieldtoString_95 (StdList.zip2 (_predefined._Cons "corner1" (_predefined._Cons "corner2" _predefined._Nil)) (_predefined._Cons corner1_1_0 (_predefined._Cons corner2_1_1 _predefined._Nil)))))) 
<{StdIOBasic.TD;:^:}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;:~:}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;ListCS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;NilCS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;:+:}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;ListLS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;NilLS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;NewLS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;AddLS}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Index}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Title}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Vector2}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Size}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Point2}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Rectangle}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;IdFun}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Void}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;Alt2}> _x_0::B = _predefined._Nil
<{StdIOBasic.TD;toVector;}> _x_0::B = _predefined._Nil

:: StdIOBasic.:^: = <{StdIOBasic.:^:}> a1 a2
:: StdIOBasic.:~: = <{StdIOBasic.:~:}> a1 a2
:: StdIOBasic.ListCS = StdIOBasic.ListCS a1
:: StdIOBasic.NilCS = StdIOBasic.NilCS
:: StdIOBasic.:+: = <{StdIOBasic.:+:}> a1 a2
:: StdIOBasic.ListLS = StdIOBasic.ListLS a1
:: StdIOBasic.NilLS = StdIOBasic.NilLS
:: StdIOBasic.Void = StdIOBasic.Void
:: StdIOBasic.Alt2 = StdIOBasic.Alt1Of2 a1 | StdIOBasic.Alt2Of2 a1

|| Converted Records
:: StdIOBasic._NewLS = {StdIOBasic.newLS, StdIOBasic.newDef}

:: StdIOBasic._AddLS = {StdIOBasic.addLS, StdIOBasic.addDef}

:: StdIOBasic._Vector2 = {!StdIOBasic.vx::I, !StdIOBasic.vy::I}

:: StdIOBasic._Size = {!StdIOBasic.w::I, !StdIOBasic.h::I}

:: StdIOBasic._Point2 = {!StdIOBasic.x::I, !StdIOBasic.y::I}

:: StdIOBasic._Rectangle = {!StdIOBasic.corner1, !StdIOBasic.corner2}

:: <{StdIOBasic.toVector;}> = {!StdIOBasic.toVector}

:: <{StdIOBasic.gEq_s;}> = {!StdIOBasic.gEq_s}

:: <{StdIOBasic.gEq_ss;}> = {!StdIOBasic.gEq_ss}

:: <{StdIOBasic.gEq_sss;}> = {!StdIOBasic.gEq_sss}

:: <{StdIOBasic.gEq_ssss;}> = {!StdIOBasic.gEq_ssss}

:: <{StdIOBasic.gEq_sssss;}> = {!StdIOBasic.gEq_sssss}

:: <{StdIOBasic.gEq_ssssss;}> = {!StdIOBasic.gEq_ssssss}

:: <{StdIOBasic.gEq_sssssss;}> = {!StdIOBasic.gEq_sssssss}

:: <{StdIOBasic.gEq_ssssssss;}> = {!StdIOBasic.gEq_ssssssss}

:: <{StdIOBasic.gEq_sssssssss;}> = {!StdIOBasic.gEq_sssssssss}

:: <{StdIOBasic.bimap_s;}> = {StdIOBasic.bimap_s}

:: <{StdIOBasic.bimap_ss;}> = {StdIOBasic.bimap_ss}

:: <{StdIOBasic.bimap_sss;}> = {StdIOBasic.bimap_sss}

