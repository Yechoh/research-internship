|| ?module? PmCallBack


PmCallBack.start !ini_step_0 !step_1 !ps_2 = let _x_1_0 = step_1 False ini_step_0 ps_2, ps_1_1 = select _x_1_0::_Tuple2 1 in case (StdBool.not (select ps_1_1::IdeState._GeneralSt 2)) (True -> PmCallBack.start (select _x_1_0::_Tuple2 0) step_1 ps_1_1) (False -> update ps_1_1::IdeState._GeneralSt [2:False]) 
PmCallBack.cont !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> <{_Tuple2!2}> ls_1_0 ps_1_1) 
PmCallBack.stop !_x_0 = case _x_0 (_Tuple2 ls_1_0 ps_1_1 -> <{_Tuple2!2}> ls_1_0 (update ps_1_1::IdeState._GeneralSt [2:True])) 


|| Converted Records
:: <{PmCallBack.gEq_s;}> = {!PmCallBack.gEq_s}

:: <{PmCallBack.gEq_ss;}> = {!PmCallBack.gEq_ss}

:: <{PmCallBack.gEq_sss;}> = {!PmCallBack.gEq_sss}

:: <{PmCallBack.gEq_ssss;}> = {!PmCallBack.gEq_ssss}

:: <{PmCallBack.gEq_sssss;}> = {!PmCallBack.gEq_sssss}

:: <{PmCallBack.gEq_ssssss;}> = {!PmCallBack.gEq_ssssss}

:: <{PmCallBack.gEq_sssssss;}> = {!PmCallBack.gEq_sssssss}

:: <{PmCallBack.gEq_ssssssss;}> = {!PmCallBack.gEq_ssssssss}

:: <{PmCallBack.gEq_sssssssss;}> = {!PmCallBack.gEq_sssssssss}

:: <{PmCallBack.bimap_s;}> = {PmCallBack.bimap_s}

:: <{PmCallBack.bimap_ss;}> = {PmCallBack.bimap_ss}

:: <{PmCallBack.bimap_sss;}> = {PmCallBack.bimap_sss}

