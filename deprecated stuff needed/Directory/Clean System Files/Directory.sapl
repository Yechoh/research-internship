|| ?module? Directory


Directory.dummy::I = 0
Directory.getPlatformIdC !_x_0::I !_x_1 = error "no AnyCodeExpr"
Directory.isBadString_75::B !_vArray_0 !_vEq_1 bad_chars_2 string_3 !i_4::I = case (StdBool.not (<{StdInt.<_17}> i_4 (select _vArray_0::<{_SystemArray.Array;}> 4 string_3))) (True -> False) (False -> case (StdList.isMember _vEq_1 (select _vArray_0::<{_SystemArray.Array;}> 3 string_3 i_4) bad_chars_2) (True -> True) (False -> Directory.isBadString_75 _vArray_0 _vEq_1 bad_chars_2 string_3 (<{StdInt.+_6}> i_4 1)) ) 
Directory.isBadString_181::B !_vEq_0 bad_chars_1 !string_2 !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 (_SystemArray.size_20 string_2))) (True -> False) (False -> case (StdList.isMember _vEq_0 (_SystemArray.select_19 string_2 i_3) bad_chars_1) (True -> True) (False -> Directory.isBadString_181 _vEq_0 bad_chars_1 string_2 (<{StdInt.+_6}> i_3 1)) ) 
Directory.isBadString_182::B bad_chars_0 !string_1 !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 (_SystemArray.size_20 string_1))) (True -> False) (False -> case (StdList.isMember_52 (_SystemArray.select_19 string_1 i_2) bad_chars_0) (True -> True) (False -> Directory.isBadString_182 bad_chars_0 string_1 (<{StdInt.+_6}> i_2 1)) ) 
Directory.stepIsBad_71::B _x_0 !_x_1 = case _x_1 (Directory.PathUp -> False) (Directory.PathDown string_1_0 -> Directory.isBadString_182 _x_0 string_1_0 0) 
Directory.aStepIsBad_74::B _x_0 !_x_1 = case _x_1 (_predefined._Nil -> False) (_predefined._Cons step_1_0 steps_1_1 -> case (Directory.stepIsBad_71 _x_0 step_1_0) (True -> True) (False -> Directory.aStepIsBad_74 _x_0 steps_1_1) ) 
Directory.isBadString_183::B !_vArray_0 bad_chars_1 string_2 !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 (select _vArray_0::<{_SystemArray.Array;}> 4 string_2))) (True -> False) (False -> case (StdList.isMember_52 (select _vArray_0::<{_SystemArray.Array;}> 3 string_2 i_3) bad_chars_1) (True -> True) (False -> Directory.isBadString_183 _vArray_0 bad_chars_1 string_2 (<{StdInt.+_6}> i_3 1)) ) 
Directory.diskNameIsBad_73::B !_vArray_0 bad_chars_1 diskName_2 !_x_3::I = case _x_3 (1 -> case (case (<{StdInt.<_17}> 2 (select _vArray_0::<{_SystemArray.Array;}> 4 diskName_2)) (True -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 diskName_2 0) '\\') (True -> <{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 diskName_2 1) '\\') (False -> False) ) (False -> False) ) (True -> Directory.isBadString_183 _vArray_0 bad_chars_1 diskName_2 2) ) (_ -> Directory.isBadString_183 _vArray_0 bad_chars_1 diskName_2 0)
Directory.get_disk_and_steps_72 !_x_0 = case _x_0 (Directory.AbsolutePath diskname_1_0 steps_1_1 -> _Tuple2 diskname_1_0 steps_1_1) (Directory.RelativePath steps_1_0 -> _Tuple2 "" steps_1_0) 
Directory.bad_path_chars !_x_0::I = case _x_0 (2 -> _predefined._Cons ':' _predefined._Nil) (1 -> _predefined._Cons '\\' (_predefined._Cons '/' (_predefined._Cons '?' (_predefined._Cons '*' _predefined._Nil)))) (0 -> _predefined._Cons '/' _predefined._Nil) 
Directory.isBadString_185::B bad_chars_0 !string_1 !i_2::I = case (StdBool.not (<{StdInt.<_17}> i_2 (_SystemArray.size_20 string_1))) (True -> False) (False -> case (StdList.isMember_52 (_SystemArray.select_19 string_1 i_2) bad_chars_0) (True -> True) (False -> Directory.isBadString_185 bad_chars_0 string_1 (<{StdInt.+_6}> i_2 1)) ) 
Directory.diskNameIsBad_184::B bad_chars_0 !diskName_1 !_x_2::I = case _x_2 (1 -> case (case (<{StdInt.<_17}> 2 (_SystemArray.size_20 diskName_1)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 diskName_1 0) '\\') (True -> <{StdChar.==_18}> (_SystemArray.select_19 diskName_1 1) '\\') (False -> False) ) (False -> False) ) (True -> Directory.isBadString_185 bad_chars_0 diskName_1 2) ) (_ -> Directory.isBadString_185 bad_chars_0 diskName_1 0)
Directory.isBadPath::B !path_0 !platform_1::I = let bad_chars_1_0 = Directory.bad_path_chars platform_1, _x_1_1 = Directory.get_disk_and_steps_72 path_0 in case (Directory.diskNameIsBad_184 bad_chars_1_0 (select _x_1_1::_Tuple2 0) platform_1) (True -> True) (False -> Directory.aStepIsBad_74 bad_chars_1_0 (select _x_1_1::_Tuple2 1)) 
Directory.fail !function_name_0 = StdMisc.abort (<{StdString.+++_11}> "fatal error: tried to evaluate an error value returned by function " (<{StdString.+++_11}> function_name_0 "."))
Directory.up_101 !_x_0::I = case _x_0 (2 -> "") (1 -> "..") (0 -> "..") 
Directory.replaceUp_102 _x_0 !_x_1 = case _x_1 (Directory.PathDown x_1_0 -> x_1_0) (Directory.PathUp -> _x_0) 
Directory.delimiter !_x_0::I = case _x_0 (2 -> ":") (1 -> "\\") (0 -> "/") 
Directory.addDelimiter !<{_v+++_0}> delimiter_1 left_2 right_3 = select <{_v+++_0}>::<{StdOverloaded.+++;}> 0 left_2 (select <{_v+++_0}>::<{StdOverloaded.+++;}> 0 delimiter_1 right_3)
Directory.foldl_135 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Directory.foldl_135 op_0 (op_0 r_1 a_1_0) x_1_1) 
Directory.foldl1 op_0 !_x_1 = case _x_1 (_predefined._Cons h_1_0 t_1_1 -> Directory.foldl_135 op_0 h_1_0 t_1_1) 
Directory.addDelimiter_186 !delimiter_0 !left_1 !right_2 = <{StdString.+++_11}> left_1 (<{StdString.+++_11}> delimiter_0 right_2)
Directory.relative_path_to_string !path_0 !platform_1::I = <{Directory._c;502;7_200}> (_Tuple2 platform_1 (StdList.last path_0)) platform_1 path_0
<{Directory._c;502;7_200}> !_x_0 platform_1::I !path_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (2 -> Directory._f199_199 _x_1_1 platform_1 path_2) ) (_ -> <{Directory._c;502;7_198}> platform_1 path_2)
Directory._f199_199 !_x_0 platform_1::I !path_2 = case _x_0 (Directory.PathUp -> <{StdString.+++_11}> (Directory.foldl1 (Directory.addDelimiter_186 (Directory.delimiter platform_1)) (StdList.map (Directory.replaceUp_102 (Directory.up_101 platform_1)) path_2)) ":") (_ -> <{Directory._c;502;7_198}> platform_1 path_2)
<{Directory._c;502;7_198}> platform_0::I !path_1 = Directory.foldl1 (Directory.addDelimiter_186 (Directory.delimiter platform_0)) (StdList.map (Directory.replaceUp_102 (Directory.up_101 platform_0)) path_1)
Directory.pathToPD_String !_vFileSystem_0 !_x_1 !env_2 = case _x_1 (Directory.AbsolutePath diskName_1_0 path_1_1 -> case (StdList.isEmpty path_1_1) (True -> let _x_3_0 = Directory.getPlatformIdC Directory.dummy env_2 in <{_Tuple2!3}> (<{Directory._c;476;18_201}> (select _x_3_0::_Tuple2 0) diskName_1_0) (select _x_3_0::_Tuple2 1)) (False -> let _x_3_0::I = Directory.getPlatformIdC Directory.dummy env_2, platform_3_1 = select _x_3_0::_Tuple2 0 in <{_Tuple2!3}> (<{StdString.+++_11}> (<{Directory._c;476;18_202}> platform_3_1 diskName_1_0) (Directory.relative_path_to_string path_1_1 platform_3_1)) (select _x_3_0::_Tuple2 1)) ) (Directory.RelativePath path_1_0 -> case (StdList.isEmpty path_1_0) (True -> let _x_3_0 = Directory.getPlatformIdC Directory.dummy env_2 in <{_Tuple2!3}> (<{Directory._if;488;12_203}> (<{StdInt.==_16}> (select _x_3_0::_Tuple2 0) 2)) (select _x_3_0::_Tuple2 1)) (False -> let _x_3_0::I = Directory.getPlatformIdC Directory.dummy env_2, platform_3_1 = select _x_3_0::_Tuple2 0 in case (case (<{StdInt.==_16}> platform_3_1 2) (True -> <{StdInt.==_16}> (StdList.length_47 path_1_0) 1) (False -> False) ) (True -> <{_Tuple2!3}> (<{Directory._c;491;23_204}> (StdList.hd path_1_0)) (select _x_3_0::_Tuple2 1)) (False -> case (<{StdInt.==_16}> platform_3_1 2) (True -> <{_Tuple2!3}> (<{StdString.+++_11}> ":" (Directory.relative_path_to_string path_1_0 platform_3_1)) (select _x_3_0::_Tuple2 1)) (False -> <{_Tuple2!3}> (Directory.relative_path_to_string path_1_0 platform_3_1) (select _x_3_0::_Tuple2 1)) ) ) ) 
<{Directory._c;491;23_204}> !_x_0 = case _x_0 (Directory.PathUp -> "::") (Directory.PathDown p_1_0 -> p_1_0) 
<{Directory._if;488;12_203}> !_x_0::B = case _x_0 (True -> ":") (_ -> ".")
<{Directory._c;476;18_202}> !platform_0::I diskName_1 = case platform_0 (2 -> <{StdString.+++_11}> diskName_1 ":") (1 -> case (case (StdBool.not (<{StdInt.<_17}> (_SystemArray.size_20 diskName_1) 2)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 diskName_1 0) '\\') (True -> <{StdChar.==_18}> (_SystemArray.select_19 diskName_1 1) '\\') (False -> False) ) (False -> False) ) (True -> <{StdString.+++_11}> diskName_1 "\\") (False -> <{StdString.+++_11}> diskName_1 ":\\") ) (0 -> "/") 
<{Directory._c;476;18_201}> !_x_0::I diskName_1 = case _x_0 (2 -> <{StdString.+++_11}> diskName_1 ":") (1 -> case (case (StdBool.not (<{StdInt.<_17}> (_SystemArray.size_20 diskName_1) 2)) (True -> case (<{StdChar.==_18}> (_SystemArray.select_19 diskName_1 0) '\\') (True -> <{StdChar.==_18}> (_SystemArray.select_19 diskName_1 1) '\\') (False -> False) ) (False -> False) ) (True -> <{StdString.+++_11}> diskName_1 "\\") (False -> <{StdString.+++_11}> diskName_1 ":\\") ) (0 -> "/") 
Directory.findFirstFileC !_x_0 !_x_1 = error "no AnyCodeExpr"
<{Directory.toDirError`}> !_x_0::I = case _x_0 (0 -> Directory.NoDirError) (-1 -> Directory.OtherDirError) (-2 -> Directory.DoesntExist) (-3 -> Directory.BadName) (-4 -> Directory.NotEnoughSpace) (-5 -> Directory.AlreadyExists) (-6 -> Directory.NoPermission) (-7 -> Directory.MoveIntoOffspring) (-8 -> Directory.MoveAcrossDisks) (-9 -> Directory.NotYetRemovable) 
Directory.toDirError !restriction_0 errCode_1::I = case (StdList.isMember_51 errCode_1 restriction_0) (True -> <{Directory.toDirError`}> errCode_1) (False -> Directory.OtherDirError) 
Directory.getCommonFileInfoC !_x_0::B !_x_1 = error "no AnyCodeExpr"
Directory.DT_tuple_to_record !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (_Tuple4 year_2_0 month_2_1 day_2_2 dayNr_2_3 -> case _x_1_1 (_Tuple3 hours_3_0 minutes_3_1 seconds_3_2 -> <{_Tuple2!3}> (StdLibMisc._Date year_2_0 month_2_1 day_2_2 dayNr_2_3) (StdLibMisc._Time hours_3_0 minutes_3_1 seconds_3_2)) ) ) 
Directory.getMacFileInfoC !_x_0 = error "no AnyCodeExpr"
Directory.getWindowsFileInfoC !_x_0 = error "no AnyCodeExpr"
Directory.getUnixFileInfoC !_x_0 = error "no AnyCodeExpr"
Directory.getDirEntry !_vFileSystem_0 !also_get_file_name_1::B !platform_2::I !files_3 = case (<{StdInt.==_16}> platform_2 2) (True -> let _x_2_0 = Directory.getCommonFileInfoC also_get_file_name_1 files_3, _x_2_1 = select _x_2_0::_Tuple2 0, fileSizeTuple_2_2 = select _x_2_1::_Tuple5 1, isDirectory_2_3 = select _x_2_1::_Tuple5 3, files_2_4 = select _x_2_0::_Tuple2 1, _x_2_5::B = Directory.getMacFileInfoC files_2_4, _x_2_6 = select _x_2_5::_Tuple2 0, macFileType_2_7 = select _x_2_6::_Tuple6 4, macCreator_2_8 = select _x_2_6::_Tuple6 3 in <{_Tuple2!2}> (Directory._DirEntry (select _x_2_1::_Tuple5 0) (Directory._FileInfo (Directory._PI_FileInfo (_Tuple2 (select fileSizeTuple_2_2::_Tuple2 0) (select fileSizeTuple_2_2::_Tuple2 1)) (Directory.DT_tuple_to_record (select _x_2_1::_Tuple5 2)) isDirectory_2_3 (select _x_2_1::_Tuple5 4)) (Directory.Mac (Directory._MacFileInfo (Directory.DT_tuple_to_record (select _x_2_6::_Tuple6 0)) (Directory.DT_tuple_to_record (select _x_2_6::_Tuple6 1)) (select _x_2_6::_Tuple6 2) (select _x_2_6::_Tuple6 5) (<{Directory._if;51;31_205}> isDirectory_2_3 macCreator_2_8 macFileType_2_7))))) (select _x_2_5::_Tuple2 1)) (False -> case (<{StdInt.==_16}> platform_2 1) (True -> let _x_3_0::I = Directory.getCommonFileInfoC also_get_file_name_1 files_3, _x_3_1 = select _x_3_0::_Tuple2 0, fileSizeTuple_3_2 = select _x_3_1::_Tuple5 1, _x_3_3 = Directory.getWindowsFileInfoC (select _x_3_0::_Tuple2 1), _x_3_4 = select _x_3_3::_Tuple2 0, winFileAttributes_3_5 = select _x_3_4::_Tuple5 0 in <{_Tuple2!2}> (Directory._DirEntry (select _x_3_1::_Tuple5 0) (Directory._FileInfo (Directory._PI_FileInfo (_Tuple2 (select fileSizeTuple_3_2::_Tuple2 0) (select fileSizeTuple_3_2::_Tuple2 1)) (Directory.DT_tuple_to_record (select _x_3_1::_Tuple5 2)) (select _x_3_1::_Tuple5 3) (select _x_3_1::_Tuple5 4)) (Directory.Windows (Directory._WindowsFileInfo (Directory.DT_tuple_to_record (select _x_3_4::_Tuple5 1)) (Directory.DT_tuple_to_record (select _x_3_4::_Tuple5 2)) (select _x_3_4::_Tuple5 3) (select _x_3_4::_Tuple5 4) (StdBool.not (<{StdInt.==_16}> (StdInt.bitand 32 winFileAttributes_3_5) 0)) (StdBool.not (<{StdInt.==_16}> (StdInt.bitand 4 winFileAttributes_3_5) 0)))))) (select _x_3_3::_Tuple2 1)) (False -> case (<{StdInt.==_16}> platform_2 0) (True -> let _x_4_0 = Directory.getCommonFileInfoC also_get_file_name_1 files_3, _x_4_1 = select _x_4_0::_Tuple2 0, fileSizeTuple_4_2 = select _x_4_1::_Tuple5 1, _x_4_3 = Directory.getUnixFileInfoC (select _x_4_0::_Tuple2 1), _x_4_4 = select _x_4_3::_Tuple2 0 in <{_Tuple2!2}> (Directory._DirEntry (select _x_4_1::_Tuple5 0) (Directory._FileInfo (Directory._PI_FileInfo (_Tuple2 (select fileSizeTuple_4_2::_Tuple2 0) (select fileSizeTuple_4_2::_Tuple2 1)) (Directory.DT_tuple_to_record (select _x_4_1::_Tuple5 2)) (select _x_4_1::_Tuple5 3) (select _x_4_1::_Tuple5 4)) (Directory.Unix (Directory._UnixFileInfo (select _x_4_4::_Tuple4 0) (select _x_4_4::_Tuple4 1) (select _x_4_4::_Tuple4 2) (Directory.DT_tuple_to_record (select _x_4_4::_Tuple4 3)))))) (select _x_4_3::_Tuple2 1)) ) ) 
<{Directory._if;51;31_205}> !isDirectory_0::B macCreator_1 macFileType_2 = case isDirectory_0 (True -> Directory.Directory) (_ -> Directory.File (_Tuple2 macCreator_1 macFileType_2))
Directory.findNextFileC !_x_0::I !_x_1 = error "no AnyCodeExpr"
Directory.getDirEntries !_vFileSystem_0 !platform_1::I akku_2 !files_3 = let _x_1_0 = Directory.getDirEntry _vFileSystem_0 True platform_1 files_3, files_1_1 = select _x_1_0::_Tuple2 1, _x_1_2 = Directory.findNextFileC Directory.dummy files_1_1 in case (StdBool.not (<{StdInt.==_16}> (select _x_1_2::_Tuple2 0) 0)) (True -> <{_Tuple2!3}> (StdList.reverse (_predefined._Cons (select _x_1_0::_Tuple2 0) akku_2)) (select _x_1_2::_Tuple2 1)) (False -> Directory.getDirEntries _vFileSystem_0 platform_1 (_predefined._Cons (select _x_1_0::_Tuple2 0) akku_2) (select _x_1_2::_Tuple2 1)) 
Directory.closeSearchC !_x_0 = error "no AnyCodeExpr"
Directory.getDirectoryContents !_vFileSystem_0 !path_1 !files_2 = let _x_1_0::I = Directory.getPlatformIdC Directory.dummy files_2, platform_1_1 = select _x_1_0::_Tuple2 0 in case (Directory.isBadPath path_1 platform_1_1) (True -> <{_Tuple2!3}> (_Tuple2 Directory.BadName (Directory.fail "getDirectoryContents")) (select _x_1_0::_Tuple2 1)) (False -> let files_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = Directory.pathToPD_String _vFileSystem_0 path_1 files_3_0, path_string_3_2::I = select _x_3_1::_Tuple2 0, files_3_3 = select _x_3_1::_Tuple2 1, _x_3_4 = Directory.findFirstFileC path_string_3_2 files_3_3, errCode_3_5 = select _x_3_4::_Tuple2 0, _x_3_6 = <{Directory._c;15;35_206}> errCode_3_5 _vFileSystem_0 platform_1_1 files_3_7, files_3_7 = select _x_3_4::_Tuple2 1 in <{_Tuple2!3}> (select _x_3_6::_Tuple2 0) (Directory.closeSearchC (select _x_3_6::_Tuple2 1))) 
<{Directory._c;15;35_206}> !errCode_0::I _vFileSystem_1 platform_2::I files_3 = case errCode_0 (0 -> let _x_2_0 = Directory.getDirEntries _vFileSystem_1 platform_2 _predefined._Nil files_3 in _Tuple2 (_Tuple2 Directory.NoDirError (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (1 -> _Tuple2 (_Tuple2 Directory.NoDirError _predefined._Nil) files_3) (_ -> _Tuple2 (_Tuple2 (Directory.toDirError (_predefined._Cons -3 (_predefined._Cons -2 (_predefined._Cons -6 _predefined._Nil))) errCode_0) (Directory.fail "getDirectoryContents")) files_3)
Directory.isHidden::B !_x_0 = case _x_0 (Directory._DirEntry fileName_1_0 _x_1_1 -> case _x_1_1 (Directory._FileInfo pi_file_2_0 _x_2_1 -> case _x_2_1 (Directory.Unix _x_3_0 -> case (<{StdInt.==_16}> (_SystemArray.size_20 fileName_1_0) 0) (True -> True) (False -> <{StdChar.==_18}> (_SystemArray.select_19 fileName_1_0 0) '.') ) (Directory.Windows _x_3_0 -> case _x_3_0 (Directory._WindowsFileInfo winCreationTime_4_0 winLastAccessTime_4_1 winDOSName_4_2 win_4_3 win_4_4 win_4_5 -> win_4_3) ) (Directory.Mac _x_3_0 -> case _x_3_0 (Directory._MacFileInfo macCreationTime_4_0 macBackupTime_4_1 mac_4_2 macFDFlags_4_3 macFurther_4_4 -> mac_4_2) ) ) ) 
Directory.findSingleFileC !_x_0 !_x_1 = error "no AnyCodeExpr"
Directory.closeSingleSearchC !_x_0 = error "no AnyCodeExpr"
Directory.getFileInfo !_vFileSystem_0 !_x_1 !files_2 = case _x_1 (Directory.AbsolutePath _x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{_Tuple2!3}> (_Tuple2 Directory.BadName (Directory.fail "getFileInfo")) files_2) ) (_ -> let _x_1_0::I = Directory.getPlatformIdC Directory.dummy files_2, platform_1_1 = select _x_1_0::_Tuple2 0 in case (Directory.isBadPath _x_1 platform_1_1) (True -> <{_Tuple2!3}> (_Tuple2 Directory.BadName (Directory.fail "getFileInfo")) (select _x_1_0::_Tuple2 1)) (False -> let files_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = Directory.pathToPD_String _vFileSystem_0 _x_1 files_3_0, path_string_3_2::I = select _x_3_1::_Tuple2 0, files_3_3 = select _x_3_1::_Tuple2 1, _x_3_4 = Directory.findSingleFileC (<{StdString.+++_11}> path_string_3_2 "\0") files_3_3, errCode_3_5 = select _x_3_4::_Tuple2 0, _x_3_6 = <{Directory._c;154;15_207}> errCode_3_5 _vFileSystem_0 platform_1_1 files_3_7, files_3_7 = select _x_3_4::_Tuple2 1 in <{_Tuple2!3}> (select _x_3_6::_Tuple2 0) (Directory.closeSingleSearchC (select _x_3_6::_Tuple2 1))) )
<{Directory._c;154;15_207}> !errCode_0::I _vFileSystem_1 platform_2::I files_3 = case errCode_0 (0 -> let _x_2_0 = Directory.getDirEntry _vFileSystem_1 False platform_2 files_3 in _Tuple2 (_Tuple2 Directory.NoDirError (select (select _x_2_0::_Tuple2 0)::Directory._DirEntry 1)) (select _x_2_0::_Tuple2 1)) (_ -> _Tuple2 (_Tuple2 (Directory.toDirError (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -6 (_predefined._Cons -1 _predefined._Nil)))) errCode_0) (Directory.fail "getFileInfo")) files_3)
Directory.getFileName !_vFileSystem_0 !_x_1 !files_2 = case _x_1 (Directory.AbsolutePath _x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> <{_Tuple2!3}> (_Tuple2 Directory.BadName (Directory.fail "getFileName")) files_2) ) (_ -> let _x_1_0::I = Directory.getPlatformIdC Directory.dummy files_2, platform_1_1 = select _x_1_0::_Tuple2 0 in case (Directory.isBadPath _x_1 platform_1_1) (True -> <{_Tuple2!3}> (_Tuple2 Directory.BadName (Directory.fail "getFileName")) (select _x_1_0::_Tuple2 1)) (False -> let files_3_0 = select _x_1_0::_Tuple2 1, _x_3_1 = Directory.pathToPD_String _vFileSystem_0 _x_1 files_3_0, path_string_3_2::I = select _x_3_1::_Tuple2 0, files_3_3 = select _x_3_1::_Tuple2 1, _x_3_4 = Directory.findSingleFileC (<{StdString.+++_11}> path_string_3_2 "\0") files_3_3, errCode_3_5 = select _x_3_4::_Tuple2 0, _x_3_6 = <{Directory._c;175;15_208}> errCode_3_5 _vFileSystem_0 platform_1_1 files_3_7, files_3_7 = select _x_3_4::_Tuple2 1 in <{_Tuple2!3}> (select _x_3_6::_Tuple2 0) (Directory.closeSingleSearchC (select _x_3_6::_Tuple2 1))) )
<{Directory._c;175;15_208}> !errCode_0::I _vFileSystem_1 platform_2::I files_3 = case errCode_0 (0 -> let _x_2_0 = Directory.getDirEntry _vFileSystem_1 True platform_2 files_3 in _Tuple2 (_Tuple2 Directory.NoDirError (select (select _x_2_0::_Tuple2 0)::Directory._DirEntry 0)) (select _x_2_0::_Tuple2 1)) (_ -> _Tuple2 (_Tuple2 (Directory.toDirError (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -6 (_predefined._Cons -1 _predefined._Nil)))) errCode_0) (Directory.fail "getFileName")) files_3)
Directory.createDirectoryC !_x_0 !_x_1 = error "no AnyCodeExpr"
Directory.createDirectory !_vFileSystem_0 !path_1 !env_2 = let _x_1_0 = Directory.getPlatformIdC Directory.dummy env_2 in case (Directory.isBadPath path_1 (select _x_1_0::_Tuple2 0)) (True -> <{_Tuple2!3}> Directory.BadName (select _x_1_0::_Tuple2 1)) (False -> let _x_3_0 = Directory.pathToPD_String _vFileSystem_0 path_1 (select _x_1_0::_Tuple2 1), _x_3_1 = Directory.createDirectoryC (<{StdString.+++_11}> (select _x_3_0::_Tuple2 0) "\0") (select _x_3_0::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -4 (_predefined._Cons -5 (_predefined._Cons -6 _predefined._Nil)))))) (select _x_3_1::_Tuple2 0)) (select _x_3_1::_Tuple2 1)) 
Directory.get_mac_dir_parent_and_name_C !dir_0::I !env_1 = error "no AnyCodeExpr"
Directory.mac_loop_91 !_x_0::I _x_1 env_2 = case _x_0 (1 -> case _x_1 (_predefined._Cons disk_name_2_0 _x_2_1 -> case _x_2_1 (_predefined._Nil -> _Tuple2 (Directory.AbsolutePath disk_name_2_0 _predefined._Nil) env_2) (_ -> _Tuple2 (Directory.AbsolutePath disk_name_2_0 (StdList.map Directory.PathDown _x_2_1)) env_2)) ) (_ -> let _x_1_0 = Directory.get_mac_dir_parent_and_name_C _x_0 env_2, _x_1_1 = select _x_1_0::_Tuple2 0 in Directory.mac_loop_91 (select _x_1_1::_Tuple2 0) (_predefined._Cons (select _x_1_1::_Tuple2 1) _x_1) (select _x_1_0::_Tuple2 1))
Directory.getCurrentDirectory_SE !_x_0 !_x_1 = error "no AnyCodeExpr"
Directory.getCurrentDirectoryC !s_0 !env_1 = <{_Tuple2!3}> (Directory.getCurrentDirectory_SE s_0 s_0) env_1
<{Directory.c;416;33_93}> !_vArray_0 !g_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_3 g_i_1 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{Directory.c;416;33_93}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_2_0)) (False -> _predefined._Nil) 
<{Directory.<>_137}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
<{Directory.<>_136}>::B !_vEq_0 !x_1 !y_2 = StdBool.not (select (select _vEq_0::<{StdClass.Eq;}> 0)::<{StdOverloaded.==;}> 0 x_1 y_2)
<{Directory.cu;121;12_77}> !_vone_0 !<{_v+_1}> c_l_i_2 !g_l_3 = <{Directory.g_c1;121;17_209}> g_l_3 _vone_0 <{_v+_1}> c_l_i_2
<{Directory.g_c1;121;17_209}> !g_l_0 _vone_1 <{_v+_2}> c_l_i_3 = case g_l_0 (_predefined._Cons ch_1_0 g_t_1_1 -> <{Directory.cu;121;12_77}> _vone_1 <{_v+_2}> (select <{_v+_2}>::<{StdOverloaded.+;}> 0 c_l_i_3 (select _vone_1::<{StdOverloaded.one;}> 0)) g_t_1_1) (_ -> c_l_i_3)
<{Directory.cu;121;12_76}> !_vArray_0 c_a_1 c_i_2::I !g_l_3 = <{Directory.g_c1;121;17_210}> g_l_3 _vArray_0 c_a_1 c_i_2
<{Directory.g_c1;121;17_210}> !g_l_0 _vArray_1 c_a_2 c_i_3::I = case g_l_0 (_predefined._Cons ch_1_0 g_t_1_1 -> <{Directory.cu;121;12_76}> _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 ch_1_0) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_t_1_1) (_ -> c_a_2)
<{Directory.cu;121;12_187}>::I !<{_v+_0}> c_l_i_1::I !g_l_2 = <{Directory.g_c1;121;17_211}> g_l_2 <{_v+_0}> c_l_i_1
<{Directory.g_c1;121;17_211}>::I !g_l_0 <{_v+_1}> c_l_i_2::I = case g_l_0 (_predefined._Cons ch_1_0 g_t_1_1 -> <{Directory.cu;121;12_187}> <{_v+_1}> (select <{_v+_1}>::<{StdOverloaded.+;}> 0 c_l_i_2 StdInt.one_11) g_t_1_1) (_ -> c_l_i_2)
<{Directory.cu;121;12_188}> !c_a_0 c_i_1::I !g_l_2 = <{Directory.g_c1;121;17_212}> g_l_2 c_a_0 c_i_1
<{Directory.g_c1;121;17_212}> !g_l_0 !c_a_1 c_i_2::I = case g_l_0 (_predefined._Cons ch_1_0 g_t_1_1 -> <{Directory.cu;121;12_188}> (_SystemArray.update_21 c_a_1 c_i_2 ch_1_0) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_t_1_1) (_ -> c_a_1)
<{Directory.cu;121;12_189}>::I !c_l_i_0::I !g_l_1 = <{Directory.g_c1;121;17_213}> g_l_1 c_l_i_0
<{Directory.g_c1;121;17_213}>::I !g_l_0 !c_l_i_1::I = case g_l_0 (_predefined._Cons ch_1_0 g_t_1_1 -> <{Directory.cu;121;12_189}> (<{StdInt.+_6}> c_l_i_1 StdInt.one_11) g_t_1_1) (_ -> c_l_i_1)
Directory.listToString !l_0 = <{Directory.cu;121;12_188}> (_SystemArray._createArray_16 (<{Directory.cu;121;12_189}> 0 l_0)) 0 l_0
Directory.split_in_parts_96 !<{_v==_0}> delimiter_1 !_x_2 partAccu_3 partsAccu_4 = case _x_2 (_predefined._Nil -> _predefined._Cons (StdList.reverse partAccu_3) partsAccu_4) (_predefined._Cons h_1_0 t_1_1 -> case (select <{_v==_0}>::<{StdOverloaded.==;}> 0 h_1_0 delimiter_1) (True -> Directory.split_in_parts_96 <{_v==_0}> delimiter_1 t_1_1 _predefined._Nil (_predefined._Cons (StdList.reverse partAccu_3) partsAccu_4)) (False -> Directory.split_in_parts_96 <{_v==_0}> delimiter_1 t_1_1 (_predefined._Cons h_1_0 partAccu_3) partsAccu_4) ) 
Directory.splitInParts_98 !<{_v==_0}> delimiter_1 !l_2 = Directory.split_in_parts_96 <{_v==_0}> delimiter_1 l_2 _predefined._Nil _predefined._Nil
Directory.remove_last_empty_and_reverse_99 !reverse_parts_0 = case (StdList.isEmpty (StdList.hd reverse_parts_0)) (True -> StdList.reverse (StdList.tl reverse_parts_0)) (False -> StdList.reverse reverse_parts_0) 
Directory.emptyToUp_94 !_x_0 = case _x_0 (_predefined._Nil -> Directory.PathUp) (_ -> Directory.PathDown (Directory.listToString _x_0))
Directory.pointsToUp_100 !_x_0 = case _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 ('.' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('.' -> case _x_3_1 (_predefined._Nil -> Directory.PathUp) ) ) ) ) (_ -> Directory.PathDown (Directory.listToString _x_0))
<{Directory.c;440;85_95}> !g_l_0 = <{Directory.g_c1;440;93_214}> g_l_0
<{Directory.g_c1;440;93_214}> !g_l_0 = case g_l_0 (_predefined._Cons part_1_0 g_t_1_1 -> _predefined._Cons (Directory.pointsToUp_100 part_1_0) (<{Directory.c;440;85_95}> g_t_1_1)) (_ -> _predefined._Nil)
Directory.split_in_parts_191 delimiter_0::C !_x_1 partAccu_2 partsAccu_3 = case _x_1 (_predefined._Nil -> _predefined._Cons (StdList.reverse partAccu_2) partsAccu_3) (_predefined._Cons h_1_0 t_1_1 -> case (<{StdChar.==_18}> h_1_0 delimiter_0) (True -> Directory.split_in_parts_191 delimiter_0 t_1_1 _predefined._Nil (_predefined._Cons (StdList.reverse partAccu_2) partsAccu_3)) (False -> Directory.split_in_parts_191 delimiter_0 t_1_1 (_predefined._Cons h_1_0 partAccu_2) partsAccu_3) ) 
Directory.splitInParts_190 delimiter_0::C !l_1 = Directory.split_in_parts_191 delimiter_0 l_1 _predefined._Nil _predefined._Nil
<{Directory.<>_192}>::B !x_0::C !y_1::C = StdBool.not (<{StdChar.==_18}> x_0 y_1)
<{Directory.<>_193}>::B !x_0::C !y_1::C = StdBool.not (<{StdChar.==_18}> x_0 y_1)
Directory.pd_string_to_pi_path_97 !pd_list_0 !_x_1::I = case _x_1 (2 -> case (StdBool.not (StdList.isMember_52 ':' pd_list_0)) (True -> _Tuple2 True (Directory.RelativePath (_predefined._Cons (Directory.PathDown (Directory.listToString pd_list_0)) _predefined._Nil))) (False -> case (<{StdList.==_84}> pd_list_0 (_predefined._Cons ':' _predefined._Nil)) (True -> _Tuple2 True (Directory.RelativePath _predefined._Nil)) (False -> let reverse_parts_4_0 = Directory.splitInParts_190 ':' pd_list_0, parts_4_1 = Directory.remove_last_empty_and_reverse_99 reverse_parts_4_0 in case (StdList.isEmpty (StdList.hd parts_4_1)) (True -> _Tuple2 True (Directory.RelativePath (StdList.map Directory.emptyToUp_94 (StdList.tl parts_4_1)))) (False -> _Tuple2 True (Directory.AbsolutePath (Directory.listToString (StdList.hd parts_4_1)) (StdList.map Directory.emptyToUp_94 (StdList.tl parts_4_1)))) ) ) ) (1 -> let reverse_parts_2_0 = Directory.splitInParts_190 '\\' pd_list_0, parts_2_1 = Directory.remove_last_empty_and_reverse_99 reverse_parts_2_0 in case (case (StdBool.not (<{StdInt.<_17}> (StdList.length_47 parts_2_1) 2)) (True -> case (StdList.isEmpty (StdList.hd parts_2_1)) (True -> StdList.isEmpty (StdList.hd (StdList.tl parts_2_1))) (False -> False) ) (False -> False) ) (True -> case (<{StdInt.==_16}> (StdList.length_47 parts_2_1) 2) (True -> _Tuple2 False (Directory.fail "pd_StringToPath")) (False -> _Tuple2 True (Directory.AbsolutePath (<{StdString.+++_11}> "\\\\" (StdList.toString_79 (<{StdList.!!}> parts_2_1 2))) (<{Directory.c;440;85_95}> (StdList.tl (StdList.tl (StdList.tl parts_2_1)))))) ) (False -> let _x_4_0 = StdList.span (<{Directory.<>_193}> ':') pd_list_0, until_double_colon_4_1 = select _x_4_0::_Tuple2 0 in case (<{StdInt.<_17}> (StdList.length_47 until_double_colon_4_1) (StdList.length_47 (StdList.takeWhile (<{Directory.<>_192}> '\\') pd_list_0))) (True -> let from_double_colon_6_0 = select _x_4_0::_Tuple2 1 in case (case (StdList.isEmpty (StdList.tl from_double_colon_6_0)) (True -> True) (False -> StdBool.not (<{StdChar.==_18}> (StdList.hd (StdList.tl from_double_colon_6_0)) '\\')) ) (True -> _Tuple2 False (Directory.fail "pd_StringToPath")) (False -> _Tuple2 True (Directory.AbsolutePath (Directory.listToString until_double_colon_4_1) (StdList.map Directory.pointsToUp_100 (StdList.tl parts_2_1)))) ) (False -> _Tuple2 True (Directory.RelativePath (StdList.map Directory.pointsToUp_100 parts_2_1))) ) ) (0 -> case (<{StdChar.==_18}> (StdList.hd pd_list_0) '/') (True -> _Tuple2 True (Directory.AbsolutePath "" (StdList.map Directory.pointsToUp_100 (StdList.tl (Directory.remove_last_empty_and_reverse_99 (Directory.splitInParts_190 '/' pd_list_0)))))) (False -> _Tuple2 True (Directory.RelativePath (StdList.map Directory.pointsToUp_100 (Directory.remove_last_empty_and_reverse_99 (Directory.splitInParts_190 '/' pd_list_0))))) ) 
<{Directory.c;416;33_194}> !g_i_0::I !g_s_1::I g_a_2 = case (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (select _x_2_1::_Tuple2 0) (<{Directory.c;416;33_194}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_2_0)) (False -> _predefined._Nil) 
Directory.pd_StringToPath !_vFileSystem_0 !_x_1 !env_2 = case _x_1 ("" -> <{_Tuple2!3}> (_Tuple2 True (Directory.RelativePath _predefined._Nil)) env_2) (_ -> let _x_1_0 = _SystemArray.usize_23 _x_1, _x_1_1 = Directory.getPlatformIdC Directory.dummy env_2 in <{_Tuple2!3}> (Directory.pd_string_to_pi_path_97 (<{Directory.c;416;33_194}> 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1) (select _x_1_0::_Tuple2 1)) (select _x_1_1::_Tuple2 0)) (select _x_1_1::_Tuple2 1))
Directory.unix_or_windows_loop_92 !_vFileSystem_0 !ok_1::I !fatalError_2::I !s_3 !env_4 = let !s_size_1_0::I = _SystemArray.size_20 s_3, _x_1_1::I = Directory.getCurrentDirectoryC s_3 env_4, _x_1_2 = select _x_1_1::_Tuple2 0, errCode_1_3 = select _x_1_2::_Tuple2 0 in case (<{StdInt.==_16}> errCode_1_3 fatalError_2) (True -> StdMisc.abort "StdDirectory: a fatal error occured during execution of \"getCurrentDirectory\"") (False -> case (<{StdInt.==_16}> errCode_1_3 ok_1) (True -> let _x_4_0 = Directory.pd_StringToPath _vFileSystem_0 (select _x_1_2::_Tuple2 1) (select _x_1_1::_Tuple2 1) in _Tuple2 (select (select _x_4_0::_Tuple2 0)::_Tuple2 1) (select _x_4_0::_Tuple2 1)) (False -> Directory.unix_or_windows_loop_92 _vFileSystem_0 ok_1 fatalError_2 (_SystemArray.createArray_17 (<{StdInt.*_9}> 2 s_size_1_0) ' ') (select _x_1_1::_Tuple2 1)) ) 
Directory.getCurrentDirectory !_vFileSystem_0 !env_1 = let _x_1_0 = Directory.getPlatformIdC Directory.dummy env_1 in case (<{StdInt.==_16}> (select _x_1_0::_Tuple2 0) 2) (True -> Directory.mac_loop_91 0 _predefined._Nil (select _x_1_0::_Tuple2 1)) (False -> Directory.unix_or_windows_loop_92 _vFileSystem_0 0 2 (_SystemArray.createArray_17 32 ' ') (select _x_1_0::_Tuple2 1)) 
Directory.diskname_of_89 !_vFileSystem_0 !_x_1 env_2 = case _x_1 (Directory.RelativePath _x_1_0 -> let _x_2_0 = Directory.getCurrentDirectory _vFileSystem_0 env_2 in _Tuple2 (_SystemArray.select_19 (select (select _x_2_0::_Tuple2 0)::_Tuple2 0) 0) (select _x_2_0::_Tuple2 1)) (Directory.AbsolutePath diskname_1_0 _x_1_1 -> _Tuple2 (_SystemArray.select_19 diskname_1_0 0) env_2) 
Directory.on_different_disks_88 !_vFileSystem_0 !_x_1 _x_2 env_3 = case _x_1 (Directory.RelativePath _x_1_0 -> case _x_2 (Directory.RelativePath _x_2_0 -> _Tuple2 False env_3) ) (_ -> let _x_1_0 = Directory.diskname_of_89 _vFileSystem_0 _x_1 env_3, _x_1_1 = Directory.diskname_of_89 _vFileSystem_0 _x_2 (select _x_1_0::_Tuple2 1) in _Tuple2 (StdBool.not (<{StdChar.==_18}> (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0))) (select _x_1_1::_Tuple2 1))
Directory.fmoveC !_x_0::B !_x_1 !_x_2 !_x_3 = error "no AnyCodeExpr"
Directory.splitPath_85 !_x_0 = case _x_0 (Directory.RelativePath _x_1_0 -> case _x_1_0 (_predefined._Nil -> Data.Maybe.Nothing) (_ -> <{Directory._c;319;15_215}> (StdList.last _x_1_0) _x_1_0)) (Directory.AbsolutePath _x_1_0 _x_1_1 -> case _x_1_1 (_predefined._Nil -> Data.Maybe.Nothing) (_ -> <{Directory._c;325;15_216}> (StdList.last _x_1_1) _x_1_0 _x_1_1)) 
<{Directory._c;325;15_216}> !_x_0 _x_1 _x_2 = case _x_0 (Directory.PathUp -> Data.Maybe.Nothing) (Directory.PathDown name_1_0 -> Data.Maybe.Just (_Tuple2 (Directory.AbsolutePath _x_1 (<{StdList.%_48}> _x_2 (_Tuple2 0 (<{StdInt.-_7}> (StdList.length_47 _x_2) 2)))) name_1_0)) 
<{Directory._c;319;15_215}> !_x_0 _x_1 = case _x_0 (Directory.PathUp -> Data.Maybe.Nothing) (Directory.PathDown name_1_0 -> Data.Maybe.Just (_Tuple2 (Directory.RelativePath (<{StdList.%_48}> _x_1 (_Tuple2 0 (<{StdInt.-_7}> (StdList.length_47 _x_1) 2)))) name_1_0)) 
Directory.macMoveC !_x_0 !_x_1 !_x_2 = error "no AnyCodeExpr"
Directory.appendPath_86 !_x_0 !path_step_1 = case _x_0 (Directory.RelativePath path_1_0 -> Directory.RelativePath (<{StdList.++}> path_1_0 (_predefined._Cons (Directory.PathDown path_step_1) _predefined._Nil))) (Directory.AbsolutePath diskname_1_0 path_1_1 -> Directory.AbsolutePath diskname_1_0 (<{StdList.++}> path_1_1 (_predefined._Cons (Directory.PathDown path_step_1) _predefined._Nil))) 
<{Directory.==_13}>::B !_x_0 !_x_1 = case _x_0 (Directory.NoDirError -> case _x_1 (Directory.NoDirError -> True) ) (Directory.DoesntExist -> case _x_1 (Directory.DoesntExist -> True) ) (Directory.BadName -> case _x_1 (Directory.BadName -> True) ) (Directory.NotEnoughSpace -> case _x_1 (Directory.NotEnoughSpace -> True) ) (Directory.AlreadyExists -> case _x_1 (Directory.AlreadyExists -> True) ) (Directory.NoPermission -> case _x_1 (Directory.NoPermission -> True) ) (Directory.MoveIntoOffspring -> case _x_1 (Directory.MoveIntoOffspring -> True) ) (Directory.MoveAcrossDisks -> case _x_1 (Directory.MoveAcrossDisks -> True) ) (Directory.NotYetRemovable -> case _x_1 (Directory.NotYetRemovable -> True) ) (Directory.OtherDirError -> case _x_1 (Directory.OtherDirError -> True) ) (_ -> False)
Directory.doesExist_87 !_vFileSystem_0 path_1 env_2 = let _x_1_0 = Directory.getFileInfo _vFileSystem_0 path_1 env_2 in _Tuple2 (<{Directory.==_13}> (select (select _x_1_0::_Tuple2 0)::_Tuple2 0) Directory.NoDirError) (select _x_1_0::_Tuple2 1)
Directory.macRenameC !_x_0 !_x_1 !_x_2 = error "no AnyCodeExpr"
Directory.macRename_84 !_vFileSystem_0 !path_1 !filename_after_2 !env_3 = let _x_1_0 = Directory.pathToPD_String _vFileSystem_0 path_1 env_3, _x_1_1 = Directory.pathToPD_String _vFileSystem_0 (Directory.appendPath_86 (select (select (Directory.splitPath_85 path_1)::_Tuple1 0)::_Tuple2 0) filename_after_2) (select _x_1_0::_Tuple2 1) in Directory.macRenameC (select _x_1_0::_Tuple2 0) (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1)
Directory.macMoveVia_82 !_vFileSystem_0 !filename_fromm_1 !p_fromm_up_2 !filename_via_3 !ps_to_up_4 !env_5 = let _x_1_0::I = Directory.macRename_84 _vFileSystem_0 (Directory.appendPath_86 p_fromm_up_2 filename_fromm_1) filename_via_3 env_5, errCode_1_1 = select _x_1_0::_Tuple2 0 in case (StdBool.not (<{StdInt.==_16}> errCode_1_1 0)) (True -> <{_Tuple2!3}> errCode_1_1 (select _x_1_0::_Tuple2 1)) (False -> let env_3_0::I = select _x_1_0::_Tuple2 1, _x_3_1 = Directory.pathToPD_String _vFileSystem_0 (Directory.appendPath_86 p_fromm_up_2 filename_via_3) env_3_0, ps_via_3_2 = select _x_3_1::_Tuple2 0, env_3_3 = select _x_3_1::_Tuple2 1, _x_3_4 = Directory.macMoveC ps_via_3_2 ps_to_up_4 env_3_3, errCode2_3_5 = select _x_3_4::_Tuple2 0 in case (<{StdInt.==_16}> errCode2_3_5 0) (True -> <{_Tuple2!3}> errCode2_3_5 (select _x_3_4::_Tuple2 1)) (False -> Directory.macRename_84 _vFileSystem_0 (Directory.appendPath_86 p_fromm_up_2 filename_via_3) filename_fromm_1 (select _x_3_4::_Tuple2 1)) ) 
Directory.toMaybe_80 !_x_0 dir_1 = case _x_0 (Directory.NoDirError -> Data.Maybe.Just dir_1) (_ -> Data.Maybe.Nothing)
<{Directory.c;306;48_78}> !g_l_0 = <{Directory.g_c1;306;61_218}> g_l_0
<{Directory.g_c1;306;61_218}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Directory.g_c2;306;61_217}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Directory.g_c2;306;61_217}> !g_h_0 g_t_1 = case g_h_0 (Directory._DirEntry fileName_1_0 file_1_1 -> _predefined._Cons fileName_1_0 (<{Directory.c;306;48_78}> g_t_1)) (_ -> <{Directory.c;306;48_78}> g_t_1)
<{Directory.doesExist`_79}> !_vFileSystem_0 !_x_1 dir_path_2 filename_3 env_4 = case _x_1 (Data.Maybe.Nothing -> Directory.doesExist_87 _vFileSystem_0 (Directory.appendPath_86 dir_path_2 filename_3) env_4) (Data.Maybe.Just dir_entries_1_0 -> _Tuple2 (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) filename_3 (<{Directory.c;306;48_78}> dir_entries_1_0)) env_4) 
Directory.mac_search_temporary_name_83 !_vFileSystem_0 !dir_path_1_1 !dir_path_2_2 !filename_3 !mb_dir1_4 !mb_dir2_5 !i_6::I !env_7 = case (<{StdInt.==_16}> i_6 25) (True -> let _x_2_0 = Directory.getDirectoryContents _vFileSystem_0 dir_path_1_1 env_7, _x_2_1 = select _x_2_0::_Tuple2 0, _x_2_2 = Directory.getDirectoryContents _vFileSystem_0 dir_path_1_1 (select _x_2_0::_Tuple2 1), _x_2_3 = select _x_2_2::_Tuple2 0 in Directory.mac_search_temporary_name_83 _vFileSystem_0 dir_path_1_1 dir_path_2_2 filename_3 (Directory.toMaybe_80 (select _x_2_1::_Tuple2 0) (select _x_2_1::_Tuple2 1)) (Directory.toMaybe_80 (select _x_2_3::_Tuple2 0) (select _x_2_3::_Tuple2 1)) (<{StdInt.+_6}> i_6 StdInt.one_11) (select _x_2_2::_Tuple2 1)) (False -> let x_2_0 = _SystemArray.size_20 filename_3, max_mac_filename_length_2_1 = 31, i_string_2_2::I = StdString.toString_5 i_6, y_2_3::I = <{StdInt.-_7}> max_mac_filename_length_2_1 (_SystemArray.size_20 i_string_2_2), i_2_4 = <{Directory._c;48;16_219}> (<{StdInt.<_17}> x_2_0 y_2_3) x_2_0 y_2_3, filename1_2_5::I = <{StdString.+++_11}> (<{StdString.%_10}> filename_3 (_Tuple2 0 (<{StdInt.-_7}> i_2_4 1))) i_string_2_2, _x_2_6::I = <{Directory.doesExist`_79}> _vFileSystem_0 mb_dir1_4 dir_path_1_1 filename1_2_5 env_7 in case (select _x_2_6::_Tuple2 0) (True -> Directory.mac_search_temporary_name_83 _vFileSystem_0 dir_path_1_1 dir_path_2_2 filename_3 mb_dir1_4 mb_dir2_5 (<{StdInt.+_6}> i_2_4 StdInt.one_11) (select _x_2_6::_Tuple2 1)) (False -> let env_4_0 = select _x_2_6::_Tuple2 1, _x_4_1 = <{Directory.doesExist`_79}> _vFileSystem_0 mb_dir2_5 dir_path_2_2 filename1_2_5 env_4_0 in case (select _x_4_1::_Tuple2 0) (True -> Directory.mac_search_temporary_name_83 _vFileSystem_0 dir_path_1_1 dir_path_2_2 filename_3 mb_dir1_4 mb_dir2_5 (<{StdInt.+_6}> i_2_4 StdInt.one_11) (select _x_4_1::_Tuple2 1)) (False -> <{_Tuple2!3}> filename1_2_5 (select _x_4_1::_Tuple2 1)) ) ) 
<{Directory._c;48;16_219}>::I !_x_0::B x_1::I y_2::I = case _x_0 (True -> x_1) (_ -> y_2)
Directory.macMoveWithFreeTarget_81 !_vFileSystem_0 !_x_1 !_x_2 !env_3 = case _x_1 (_Tuple2 ps_fromm_1_0 p_fromm_1_1 -> case _x_2 (_Tuple2 ps_to_2_0 p_to_2_1 -> let mb_split_fromm_3_0 = Directory.splitPath_85 p_fromm_1_1, mb_split_to_3_1 = Directory.splitPath_85 p_to_2_1 in case (case (Data.Maybe.isNothing mb_split_fromm_3_0) (True -> True) (False -> Data.Maybe.isNothing mb_split_to_3_1) ) (True -> <{_Tuple2!3}> -1 env_3) (False -> let _x_5_0 = select mb_split_to_3_1::_Tuple1 0, p_to_up_5_1 = select _x_5_0::_Tuple2 0, _x_5_2::I = Directory.pathToPD_String _vFileSystem_0 p_to_up_5_1 env_3, ps_to_up_5_3 = select _x_5_2::_Tuple2 0, env_5_4 = select _x_5_2::_Tuple2 1, _x_5_5 = Directory.macMoveC ps_fromm_1_0 ps_to_up_5_3 env_5_4, errCode_5_6 = select _x_5_5::_Tuple2 0, env_5_7 = select _x_5_5::_Tuple2 1, filename_to_5_8 = select _x_5_0::_Tuple2 1 in <{Directory._c;253;15_220}> errCode_5_6 _vFileSystem_0 p_to_up_5_1 mb_split_fromm_3_0 filename_to_5_8 env_5_7 ps_to_up_5_3) ) ) 
<{Directory._c;253;15_220}> !errCode_0::I _vFileSystem_1 p_to_up_2 mb_split_fromm_3 filename_to_4 !env_5 ps_to_up_6 = case errCode_0 (0 -> Directory.macRename_84 _vFileSystem_1 (Directory.appendPath_86 p_to_up_2 (select (select mb_split_fromm_3::_Tuple1 0)::_Tuple2 1)) filename_to_4 env_5) (-5 -> let _x_2_0 = select mb_split_fromm_3::_Tuple1 0, p_fromm_up_2_1 = select _x_2_0::_Tuple2 0, p_mixed_2_2 = Directory.appendPath_86 p_fromm_up_2_1 filename_to_4, _x_2_3 = Directory.doesExist_87 _vFileSystem_1 p_mixed_2_2 env_5 in case (StdBool.not (select _x_2_3::_Tuple2 0)) (True -> Directory.macMoveVia_82 _vFileSystem_1 (select _x_2_0::_Tuple2 1) p_fromm_up_2_1 filename_to_4 ps_to_up_6 (select _x_2_3::_Tuple2 1)) (False -> let filename_fromm_4_0::I = select _x_2_0::_Tuple2 1, env_4_1 = select _x_2_3::_Tuple2 1, _x_4_2 = Directory.mac_search_temporary_name_83 _vFileSystem_1 p_fromm_up_2_1 p_to_up_2 filename_fromm_4_0 Data.Maybe.Nothing Data.Maybe.Nothing 0 env_4_1, temp_name_4_3 = select _x_4_2::_Tuple2 0, env_4_4 = select _x_4_2::_Tuple2 1, _x_4_5 = Directory.macMoveVia_82 _vFileSystem_1 filename_fromm_4_0 p_fromm_up_2_1 temp_name_4_3 ps_to_up_6 env_4_4, errCode2_4_6 = select _x_4_5::_Tuple2 0 in case (<{StdInt.==_16}> errCode2_4_6 0) (True -> <{_Tuple2!3}> errCode2_4_6 (select _x_4_5::_Tuple2 1)) (False -> <{_Tuple2!3}> errCode2_4_6 (select (Directory.macRename_84 _vFileSystem_1 (Directory.appendPath_86 p_to_up_2 temp_name_4_3) filename_to_4 (select _x_4_5::_Tuple2 1))::_Tuple2 1)) ) ) (_ -> <{_Tuple2!3}> errCode_0 env_5)
Directory.fremoveC !_x_0 !_x_1 = error "no AnyCodeExpr"
Directory.macMove_90 !_vFileSystem_0 fmoveRestrictions_1 !overwrite_2::B !_x_3 !_x_4 !env_5 = case _x_3 (_Tuple2 ps_fromm_1_0 p_fromm_1_1 -> case _x_4 (_Tuple2 ps_to_2_0 p_to_2_1 -> let _x_3_0 = Directory.getFileInfo _vFileSystem_0 p_to_2_1 env_5, _x_3_1 = select _x_3_0::_Tuple2 0 in case (StdBool.not (<{Directory.==_13}> (select _x_3_1::_Tuple2 0) Directory.NoDirError)) (True -> let _x_5_0 = Directory.macMoveWithFreeTarget_81 _vFileSystem_0 (_Tuple2 ps_fromm_1_0 p_fromm_1_1) (_Tuple2 ps_to_2_0 p_to_2_1) (select _x_3_0::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError fmoveRestrictions_1 (select _x_5_0::_Tuple2 0)) (select _x_5_0::_Tuple2 1)) (False -> case (case (select (select (select _x_3_1::_Tuple2 1)::Directory._FileInfo 0)::Directory._PI_FileInfo 2) (True -> True) (False -> StdBool.not overwrite_2) ) (True -> <{_Tuple2!3}> Directory.AlreadyExists (select _x_3_0::_Tuple2 1)) (False -> let env_6_0 = select _x_3_0::_Tuple2 1, _x_6_1 = Directory.getFileInfo _vFileSystem_0 p_fromm_1_1 env_6_0, _x_6_2 = select _x_6_1::_Tuple2 0, err_6_3 = select _x_6_2::_Tuple2 0 in case (StdBool.not (<{Directory.==_13}> err_6_3 Directory.NoDirError)) (True -> <{_Tuple2!3}> err_6_3 (select _x_6_1::_Tuple2 1)) (False -> let env_8_0::I = select _x_6_1::_Tuple2 1, _x_8_1 = Directory.fremoveC ps_to_2_0 env_8_0, errCode_8_2 = select _x_8_1::_Tuple2 0 in case (StdBool.not (<{StdInt.==_16}> errCode_8_2 0)) (True -> <{_Tuple2!3}> (Directory.toDirError fmoveRestrictions_1 errCode_8_2) (select _x_8_1::_Tuple2 1)) (False -> let _x_10_0 = Directory.macMoveWithFreeTarget_81 _vFileSystem_0 (_Tuple2 ps_fromm_1_0 p_fromm_1_1) (_Tuple2 ps_to_2_0 p_to_2_1) (select _x_8_1::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError fmoveRestrictions_1 (select _x_10_0::_Tuple2 0)) (select _x_10_0::_Tuple2 1)) ) ) ) ) ) 
Directory.fmove !_vFileSystem_0 !moveMode_1 !p_fromm_2 !p_to_3 !env_4 = let _x_1_0::I = Directory.getPlatformIdC Directory.dummy env_4, platform_1_1 = select _x_1_0::_Tuple2 0 in case (case (Directory.isBadPath p_fromm_2 platform_1_1) (True -> True) (False -> Directory.isBadPath p_to_3 platform_1_1) ) (True -> <{_Tuple2!3}> Directory.BadName (select _x_1_0::_Tuple2 1)) (False -> let env_3_0 = select _x_1_0::_Tuple2 1 in <{Directory._c;196;7_224}> platform_1_1 moveMode_1 _vFileSystem_0 p_to_3 p_fromm_2 env_3_0) 
<{Directory._c;196;7_224}> !platform_0::I moveMode_1 !_vFileSystem_2 p_to_3 !p_fromm_4 env_5 = case platform_0 (0 -> let _x_2_0 = Directory.pathToPD_String _vFileSystem_2 p_fromm_4 env_5, _x_2_1 = Directory.pathToPD_String _vFileSystem_2 p_to_3 (select _x_2_0::_Tuple2 1), _x_2_2 = Directory.fmoveC (<{Directory._c;191;21_221}> moveMode_1) (<{StdString.+++_11}> (select _x_2_0::_Tuple2 0) "\0") (<{StdString.+++_11}> (select _x_2_1::_Tuple2 0) "\0") (select _x_2_1::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -4 (_predefined._Cons -5 (_predefined._Cons -6 (_predefined._Cons -7 (_predefined._Cons -8 (_predefined._Cons -1 _predefined._Nil))))))))) (select _x_2_2::_Tuple2 0)) (select _x_2_2::_Tuple2 1)) (2 -> let _x_2_0 = Directory.pathToPD_String _vFileSystem_2 p_fromm_4 env_5, _x_2_1 = Directory.pathToPD_String _vFileSystem_2 p_to_3 (select _x_2_0::_Tuple2 1) in Directory.macMove_90 _vFileSystem_2 (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -4 (_predefined._Cons -5 (_predefined._Cons -6 (_predefined._Cons -7 (_predefined._Cons -8 (_predefined._Cons -1 _predefined._Nil))))))))) (<{Directory._c;191;21_222}> moveMode_1) (_Tuple2 (select _x_2_0::_Tuple2 0) p_fromm_4) (_Tuple2 (select _x_2_1::_Tuple2 0) p_to_3) (select _x_2_1::_Tuple2 1)) (1 -> let _x_2_0 = Directory.pathToPD_String _vFileSystem_2 p_fromm_4 env_5, env_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = Directory.pathToPD_String _vFileSystem_2 p_to_3 env_2_1, env_2_3 = select _x_2_2::_Tuple2 1, _x_2_4 = Directory.on_different_disks_88 _vFileSystem_2 p_fromm_4 p_to_3 env_2_3 in case (select _x_2_4::_Tuple2 0) (True -> <{_Tuple2!3}> Directory.MoveAcrossDisks (select _x_2_4::_Tuple2 1)) (False -> let _x_4_0 = Directory.fmoveC (<{Directory._c;191;21_223}> moveMode_1) (<{StdString.+++_11}> (select _x_2_0::_Tuple2 0) "\0") (<{StdString.+++_11}> (select _x_2_2::_Tuple2 0) "\0") (select _x_2_4::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -4 (_predefined._Cons -5 (_predefined._Cons -6 (_predefined._Cons -7 (_predefined._Cons -8 (_predefined._Cons -1 _predefined._Nil))))))))) (select _x_4_0::_Tuple2 0)) (select _x_4_0::_Tuple2 1)) ) 
<{Directory._c;191;21_223}>::B !moveMode_0 = case moveMode_0 (Directory.OverwriteFile -> True) (Directory.DontOverwrite -> False) 
<{Directory._c;191;21_222}>::B !moveMode_0 = case moveMode_0 (Directory.OverwriteFile -> True) (Directory.DontOverwrite -> False) 
<{Directory._c;191;21_221}>::B !moveMode_0 = case moveMode_0 (Directory.OverwriteFile -> True) (Directory.DontOverwrite -> False) 
Directory.fremove !_vFileSystem_0 !path_1 !env_2 = let _x_1_0 = Directory.getPlatformIdC Directory.dummy env_2 in case (Directory.isBadPath path_1 (select _x_1_0::_Tuple2 0)) (True -> <{_Tuple2!3}> Directory.BadName (select _x_1_0::_Tuple2 1)) (False -> let _x_3_0 = Directory.pathToPD_String _vFileSystem_0 path_1 (select _x_1_0::_Tuple2 1), _x_3_1 = Directory.fremoveC (<{StdString.+++_11}> (select _x_3_0::_Tuple2 0) "\0") (select _x_3_0::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -6 (_predefined._Cons -9 _predefined._Nil))))) (select _x_3_1::_Tuple2 0)) (select _x_3_1::_Tuple2 1)) 
Directory.setCurrentDirectoryC !_x_0 !_x_1 = error "no AnyCodeExpr"
Directory.setCurrentDirectory !_vFileSystem_0 !path_1 !env_2 = let _x_1_0 = Directory.getPlatformIdC Directory.dummy env_2 in case (Directory.isBadPath path_1 (select _x_1_0::_Tuple2 0)) (True -> <{_Tuple2!3}> Directory.BadName (select _x_1_0::_Tuple2 1)) (False -> let _x_3_0 = Directory.pathToPD_String _vFileSystem_0 path_1 (select _x_1_0::_Tuple2 1), _x_3_1 = Directory.setCurrentDirectoryC (<{StdString.+++_11}> (select _x_3_0::_Tuple2 0) "\0") (select _x_3_0::_Tuple2 1) in <{_Tuple2!3}> (Directory.toDirError (_predefined._Cons 0 (_predefined._Cons -2 (_predefined._Cons -3 (_predefined._Cons -6 _predefined._Nil)))) (select _x_3_1::_Tuple2 0)) (select _x_3_1::_Tuple2 1)) 
Directory.getMacDiskNameC !disk_0::I !_x_1 = error "no AnyCodeExpr"
Directory.loop_105 !i_0::I accu_1 !files_2 = let _x_1_0 = Directory.getMacDiskNameC i_0 files_2, diskName_1_1 = select _x_1_0::_Tuple2 0 in case (<{StdString.==_2}> diskName_1_1 "") (True -> _Tuple2 (StdList.reverse accu_1) (select _x_1_0::_Tuple2 1)) (False -> Directory.loop_105 (<{StdInt.+_6}> i_0 StdInt.one_11) (_predefined._Cons diskName_1_1 accu_1) (select _x_1_0::_Tuple2 1)) 
Directory.get_windows_disk_available_bits_C !_x_0::I !_x_1 = error "no AnyCodeExpr"
Directory.intToChar_106::C !<{_v+_0}> !_vtoChar_1 a_2 i_3 = select _vtoChar_1::<{StdOverloaded.toChar;}> 0 (select <{_v+_0}>::<{StdOverloaded.+;}> 0 i_3 a_2)
Directory.intToChar_195::C !_vtoChar_0 a_1::I i_2::I = select _vtoChar_0::<{StdOverloaded.toChar;}> 0 (<{StdInt.+_6}> i_2 a_1)
Directory.intToChar_196::C !a_0::I !i_1::I = StdChar.toChar_21 (<{StdInt.+_6}> i_1 a_0)
<{Directory.c;535;73_103}> a_0::I bits_1::I !i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 i_2)) (True -> _predefined._Cons (_Tuple2 (StdInt.bitand (<{StdInt.>>}> bits_1 i_2) 1) (Directory.intToChar_196 a_0 i_2)) (<{Directory.c;535;73_103}> a_0 bits_1 (<{StdInt.+_6}> i_2 StdInt.one_11) g_s_3)) (False -> _predefined._Nil) 
<{Directory.c;536;49_104}> !_vtoString_0 !g_l_1 = <{Directory.g_c1;536;73_226}> g_l_1 _vtoString_0
<{Directory.g_c1;536;73_226}> !g_l_0 _vtoString_1 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Directory.g_c2;536;73_225}> g_h_1_0 _vtoString_1 g_t_1_1) (_ -> _predefined._Nil)
<{Directory.g_c2;536;73_225}> !g_h_0 _vtoString_1 g_t_2 = case g_h_0 (_Tuple2 available_1_0 diskChar_1_1 -> case (StdBool.not (<{StdInt.==_16}> available_1_0 0)) (True -> _predefined._Cons (select _vtoString_1::<{StdOverloaded.toString;}> 0 diskChar_1_1) (<{Directory.c;536;49_104}> _vtoString_1 g_t_2)) ) (_ -> <{Directory.c;536;49_104}> _vtoString_1 g_t_2)
<{Directory.c;536;49_197}> !g_l_0 = <{Directory.g_c1;536;73_228}> g_l_0
<{Directory.g_c1;536;73_228}> !g_l_0 = case g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Directory.g_c2;536;73_227}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Directory.g_c2;536;73_227}> !g_h_0 g_t_1 = case g_h_0 (_Tuple2 available_1_0 diskChar_1_1 -> case (StdBool.not (<{StdInt.==_16}> available_1_0 0)) (True -> _predefined._Cons (StdString.toString_6 diskChar_1_1) (<{Directory.c;536;49_197}> g_t_1)) ) (_ -> <{Directory.c;536;49_197}> g_t_1)
Directory.getDiskNames !_vFileSystem_0 !files_1 = let _x_1_0 = Directory.getPlatformIdC Directory.dummy files_1, files_1_1 = select _x_1_0::_Tuple2 1 in <{Directory._c;532;7_229}> (select _x_1_0::_Tuple2 0) files_1_1
<{Directory._c;532;7_229}> !_x_0::I !files_1 = case _x_0 (0 -> <{_Tuple2!2}> (_predefined._Cons "" _predefined._Nil) files_1) (1 -> let _x_2_0 = Directory.get_windows_disk_available_bits_C Directory.dummy files_1 in <{_Tuple2!2}> (<{Directory.c;536;49_197}> (<{Directory.c;535;73_103}> (StdInt.toInt_20 'A') (select _x_2_0::_Tuple2 0) 0 25)) (select _x_2_0::_Tuple2 1)) (2 -> Directory.loop_105 1 _predefined._Nil files_1) 
Directory.bitTest::B !mask_0::I !bitField_1::I = StdBool.not (<{StdInt.==_16}> (StdInt.bitand mask_0 bitField_1) 0)
Directory.encodeUnixModeBits !unixModeBits_0::I = Directory._UnixAccessRights (Directory._UnixRight (Directory.bitTest 256 unixModeBits_0) (Directory.bitTest 128 unixModeBits_0) (Directory.bitTest 64 unixModeBits_0)) (Directory._UnixRight (Directory.bitTest 32 unixModeBits_0) (Directory.bitTest 16 unixModeBits_0) (Directory.bitTest 8 unixModeBits_0)) (Directory._UnixRight (Directory.bitTest 4 unixModeBits_0) (Directory.bitTest 2 unixModeBits_0) (Directory.bitTest 1 unixModeBits_0))
<{Directory.TD;Path}> _x_0::B = _predefined._Nil
<{Directory.TD;PathStep}> _x_0::B = _predefined._Nil
<{Directory.TD;DiskName}> _x_0::B = _predefined._Nil
<{Directory.TD;DirError}> _x_0::B = _predefined._Nil
<{Directory.TD;DirEntry}> _x_0::B = _predefined._Nil
<{Directory.TD;FileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;PI_FileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;PD_FileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;PlatformDependent}> _x_0::B = _predefined._Nil
<{Directory.TD;UnixFileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;UnixModeBitsField}> _x_0::B = _predefined._Nil
<{Directory.TD;UnixAccessRights}> _x_0::B = _predefined._Nil
<{Directory.TD;UnixRight}> _x_0::B = _predefined._Nil
<{Directory.TD;WindowsFileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;MacFileInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;MacFurtherInfo}> _x_0::B = _predefined._Nil
<{Directory.TD;MacCreator}> _x_0::B = _predefined._Nil
<{Directory.TD;MacFileType}> _x_0::B = _predefined._Nil
<{Directory.TD;MoveMode}> _x_0::B = _predefined._Nil
<{Directory.TD;DateTime}> _x_0::B = _predefined._Nil
<{Directory.TD;ForFile}> _x_0::B = _predefined._Nil
<{Directory.TD;ErrCode}> _x_0::B = _predefined._Nil
<{Directory.TD;DateTimeTuple}> _x_0::B = _predefined._Nil
<{Directory.TD;DateTuple}> _x_0::B = _predefined._Nil
<{Directory.TD;TimeTuple}> _x_0::B = _predefined._Nil

:: Directory.Path = Directory.RelativePath a1 | Directory.AbsolutePath a1 a2
:: Directory.PathStep = Directory.PathUp | Directory.PathDown a1
:: Directory.DirError = Directory.NoDirError | Directory.DoesntExist | Directory.BadName | Directory.NotEnoughSpace | Directory.AlreadyExists | Directory.NoPermission | Directory.MoveIntoOffspring | Directory.MoveAcrossDisks | Directory.NotYetRemovable | Directory.OtherDirError
:: Directory.PlatformDependent = Directory.Unix a1 | Directory.Windows a1 | Directory.Mac a1
:: Directory.MoveMode = Directory.OverwriteFile | Directory.DontOverwrite
:: Directory.ForFile = Directory.File a1 | Directory.Directory

|| Converted Records
:: Directory._DirEntry = {!Directory.fileName, !Directory.fileInfo}

:: Directory._FileInfo = {!Directory.pi_fileInfo, !Directory.pd_fileInfo}

:: Directory._PI_FileInfo = {!Directory.fileSize, !Directory.lastModified, !Directory.isDirectory::B, !Directory.isReadOnly::B}

:: Directory._UnixFileInfo = {!Directory.unixModeBitsField, Directory.unixOwnerUserId::I, Directory.unixOwnerGroupId::I, !Directory.unixLastAccessTime}

:: Directory._UnixAccessRights = {Directory.ownerRight, Directory.groupRight, Directory.othersRight}

:: Directory._UnixRight = {!Directory.mayRead::B, !Directory.mayWrite::B, !Directory.mayExecute::B}

:: Directory._WindowsFileInfo = {!Directory.winCreationTime, !Directory.winLastAccessTime, !Directory.winDOSName, !Directory.winIsHidden::B, !Directory.winIsArchiveFile::B, !Directory.winIsSystemFile::B}

:: Directory._MacFileInfo = {!Directory.macCreationTime, !Directory.macBackupTime, !Directory.macIsHidden::B, !Directory.macFDFlags::I, !Directory.macFurtherInfo}

:: <{Directory.gEq_s;}> = {!Directory.gEq_s}

:: <{Directory.gEq_ss;}> = {!Directory.gEq_ss}

:: <{Directory.gEq_sss;}> = {!Directory.gEq_sss}

:: <{Directory.gEq_ssss;}> = {!Directory.gEq_ssss}

:: <{Directory.gEq_sssss;}> = {!Directory.gEq_sssss}

:: <{Directory.gEq_ssssss;}> = {!Directory.gEq_ssssss}

:: <{Directory.gEq_sssssss;}> = {!Directory.gEq_sssssss}

:: <{Directory.gEq_ssssssss;}> = {!Directory.gEq_ssssssss}

:: <{Directory.gEq_sssssssss;}> = {!Directory.gEq_sssssssss}

:: <{Directory.bimap_s;}> = {Directory.bimap_s}

:: <{Directory.bimap_ss;}> = {Directory.bimap_ss}

:: <{Directory.bimap_sss;}> = {Directory.bimap_sss}

