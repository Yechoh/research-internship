|| ?module? osevent


osevent.osNewEvents = _predefined._Nil
osevent.osAppendEvents !newEvents_0 !osEvents_1 = <{StdList.++}> osEvents_1 newEvents_0
osevent.osInsertEvents !newEvents_0 !osEvents_1 = <{StdList.++}> newEvents_0 osEvents_1
osevent.osIsEmptyEvents !_x_0 = case _x_0 (_predefined._Nil -> <{_Tuple2!3}> True _predefined._Nil) (_ -> <{_Tuple2!3}> False _x_0)
osevent.oseventFatalError !function_0 !error_1 = commondef.fatalError function_0 "osevent" error_1
osevent.osRemoveEvent !_x_0 = case _x_0 (_predefined._Cons osEvent_1_0 osEvents_1_1 -> <{_Tuple2!3}> osEvent_1_0 osEvents_1_1) (_predefined._Nil -> osevent.oseventFatalError "osRemoveEvent" "OSEvents argument is empty") 
osevent.osNullEvent = clCrossCall_12._CrossCallInfo 116 0 0 0 0 0 0
osevent.setReplyInOSEvent !reply_0 = case (StdList.isEmpty reply_0) (True -> clCrossCall_12.return0Cci) (False -> let _x_2_0 = commondef.hdtl reply_0, reply_2_1 = select _x_2_0::_Tuple2 1 in case (StdList.isEmpty reply_2_1) (True -> clCrossCall_12.return1Cci (select _x_2_0::_Tuple2 0)) (False -> let _x_4_0 = commondef.hdtl reply_2_1, reply_4_1 = select _x_4_0::_Tuple2 1 in case (StdList.isEmpty reply_4_1) (True -> clCrossCall_12.return2Cci (select _x_2_0::_Tuple2 0) (select _x_4_0::_Tuple2 0)) (False -> let _x_6_0 = commondef.hdtl reply_4_1, reply_6_1 = select _x_6_0::_Tuple2 1 in case (StdList.isEmpty reply_6_1) (True -> clCrossCall_12.return3Cci (select _x_2_0::_Tuple2 0) (select _x_4_0::_Tuple2 0) (select _x_6_0::_Tuple2 0)) (False -> let _x_8_0 = commondef.hdtl reply_6_1, reply_8_1 = select _x_8_0::_Tuple2 1 in case (StdList.isEmpty reply_8_1) (True -> clCrossCall_12.return4Cci (select _x_2_0::_Tuple2 0) (select _x_4_0::_Tuple2 0) (select _x_6_0::_Tuple2 0) (select _x_8_0::_Tuple2 0)) (False -> let _x_10_0 = commondef.hdtl reply_8_1, reply_10_1 = select _x_10_0::_Tuple2 1 in case (StdList.isEmpty reply_10_1) (True -> clCrossCall_12.return5Cci (select _x_2_0::_Tuple2 0) (select _x_4_0::_Tuple2 0) (select _x_6_0::_Tuple2 0) (select _x_8_0::_Tuple2 0) (select _x_10_0::_Tuple2 0)) (False -> case (StdList.isEmpty reply_10_1) (True -> clCrossCall_12.return6Cci (select _x_2_0::_Tuple2 0) (select _x_4_0::_Tuple2 0) (select _x_6_0::_Tuple2 0) (select _x_8_0::_Tuple2 0) (select _x_10_0::_Tuple2 0) (select (commondef.hdtl reply_10_1)::_Tuple2 0)) (False -> osevent.oseventFatalError "setReplyInOSEvent" "number of reply codes > 6") ) ) ) ) ) ) 
osevent.rccitoevent_21 !handleOSEvent_0 !osEvent_1 !state_2 !tb_3::I = case osEvent_1 (clCrossCall_12._CrossCallInfo ccMsg_1_0 p1_1_1 p2_1_2 p3_1_3 p4_1_4 p5_1_5 p6_1_6 -> let _x_2_0 = handleOSEvent_0 osEvent_1 state_2 in <{_Tuple3!7}> (osevent.setReplyInOSEvent (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1) tb_3) 
osevent.osHandleEvents !isFinalState_0 !getOSEvents_1 !setOSEvents_2 !getSleepTime_3 !handleOSEvent_4 !_x_5 = case _x_5 (_Tuple2 state_1_0 tb_1_1 -> let _x_2_0 = isFinalState_0 state_1_0 in case (select _x_2_0::_Tuple2 0) (True -> <{_Tuple2!3}> (select _x_2_0::_Tuple2 1) tb_1_1) (False -> let state_4_0 = select _x_2_0::_Tuple2 1, _x_4_1 = getOSEvents_1 state_4_0, osEvents_4_2 = select _x_4_1::_Tuple2 0, _x_4_3 = osevent.osIsEmptyEvents osEvents_4_2 in case (select _x_4_3::_Tuple2 0) (True -> let _x_6_0 = getSleepTime_3 (setOSEvents_2 (_Tuple2 (select _x_4_3::_Tuple2 1) (select _x_4_1::_Tuple2 1))), sleep_6_1::I = select _x_6_0::_Tuple2 0, _x_6_2 = clCrossCall_12.issueCleanRequest (osevent.rccitoevent_21 handleOSEvent_4) (clCrossCall_12._CrossCallInfo 1100 (clCrossCall_12.toInt_19 (StdBool.not (<{StdInt.==_16}> sleep_6_1 (<{StdInt.-_7}> (<{StdInt.^_12}> 2 15) 1)))) sleep_6_1 0 0 0 0) (select _x_6_0::_Tuple2 1) tb_1_1 in osevent.osHandleEvents isFinalState_0 getOSEvents_1 setOSEvents_2 getSleepTime_3 handleOSEvent_4 (_Tuple2 (select _x_6_2::_Tuple3 1) (select _x_6_2::_Tuple3 2))) (False -> let _x_6_0 = osevent.osRemoveEvent (select _x_4_3::_Tuple2 1) in osevent.osHandleEvents isFinalState_0 getOSEvents_1 setOSEvents_2 getSleepTime_3 handleOSEvent_4 (_Tuple2 (select (handleOSEvent_4 (select _x_6_0::_Tuple2 0) (setOSEvents_2 (_Tuple2 (select _x_6_0::_Tuple2 1) (select _x_4_1::_Tuple2 1))))::_Tuple2 1) tb_1_1)) ) ) 
osevent.osEventIsUrgent::B !_x_0 = case _x_0 (clCrossCall_12._CrossCallInfo ccMsg_1_0 p1_1_1 p2_1_2 p3_1_3 p4_1_4 p5_1_5 p6_1_6 -> <{osevent._c;122;7_67}> ccMsg_1_0) 
<{osevent._c;122;7_67}>::B !ccMsg_0::I = case ccMsg_0 (126 -> False) (116 -> False) (115 -> False) (136 -> False) (_ -> True)
osevent.createOSActivateWindowEvent !wPtr_0::I !tb_1::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 106 wPtr_0 0 0 0 0 0) tb_1
osevent.createOSDeactivateWindowEvent !wPtr_0::I !tb_1::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 107 wPtr_0 0 0 0 0 0) tb_1
osevent.createOSActivateControlEvent !wPtr_0::I !cPtr_1::I !tb_2::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 130 wPtr_0 cPtr_1 0 0 0 0) tb_2
osevent.createOSDeactivateControlEvent !wPtr_0::I !cPtr_1::I !tb_2::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 129 wPtr_0 cPtr_1 0 0 0 0) tb_2
osevent.createOSLooseMouseEvent !wPtr_0::I !cPtr_1::I !tb_2::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 134 wPtr_0 cPtr_1 0 0 0 0) tb_2
osevent.createOSLooseKeyEvent !wPtr_0::I !cPtr_1::I !tb_2::I = <{_Tuple2!3}> (clCrossCall_12._CrossCallInfo 135 wPtr_0 cPtr_1 0 0 0 0) tb_2
osevent.createOSZeroTimerEvent !zeroStart_0 = clCrossCall_12._CrossCallInfo 136 (ostime.toInt_8 zeroStart_0) 0 0 0 0 0
osevent.getOSZeroTimerStartTime !_x_0 = case _x_0 (clCrossCall_12._CrossCallInfo ccMsg_1_0 p1_1_1 p2_1_2 p3_1_3 p4_1_4 p5_1_5 p6_1_6 -> case (<{StdInt.==_16}> ccMsg_1_0 136) (True -> Data.Maybe.Just (ostime.fromInt_9 p1_1_1)) (False -> Data.Maybe.Nothing) ) 
<{osevent.TD;OSEvents}> _x_0::B = _predefined._Nil
<{osevent.TD;OSEvent}> _x_0::B = _predefined._Nil
<{osevent.TD;OSSleepTime}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{osevent.gEq_s;}> = {!osevent.gEq_s}

:: <{osevent.gEq_ss;}> = {!osevent.gEq_ss}

:: <{osevent.gEq_sss;}> = {!osevent.gEq_sss}

:: <{osevent.gEq_ssss;}> = {!osevent.gEq_ssss}

:: <{osevent.gEq_sssss;}> = {!osevent.gEq_sssss}

:: <{osevent.gEq_ssssss;}> = {!osevent.gEq_ssssss}

:: <{osevent.gEq_sssssss;}> = {!osevent.gEq_sssssss}

:: <{osevent.gEq_ssssssss;}> = {!osevent.gEq_ssssssss}

:: <{osevent.gEq_sssssssss;}> = {!osevent.gEq_sssssssss}

:: <{osevent.bimap_s;}> = {osevent.bimap_s}

:: <{osevent.bimap_ss;}> = {osevent.bimap_ss}

:: <{osevent.bimap_sss;}> = {osevent.bimap_sss}

