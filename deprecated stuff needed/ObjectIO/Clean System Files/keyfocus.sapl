|| ?module? keyfocus


keyfocus.isShownFocusItem::B !_x_0 = case _x_0 (keyfocus._FocusItem focusNr_1_0 focusShow_1_1 -> focusShow_1_1) 
keyfocus.newFocusItems !items_0 = let _x_1_0 = commondef.ucselect keyfocus.isShownFocusItem StdMisc.undef items_0, item_1_1 = select _x_1_0::_Tuple3 1 in keyfocus._KeyFocus (<{keyfocus._if;27;18_64}> (select _x_1_0::_Tuple3 0) item_1_1) (select _x_1_0::_Tuple3 2)
<{keyfocus._if;27;18_64}> !_x_0::B item_1 = case _x_0 (True -> Data.Maybe.Just (select item_1::keyfocus._FocusItem 0)) (_ -> Data.Maybe.Nothing)
keyfocus.copyFocusItems_15 !_x_0 = case _x_0 (_predefined._Cons item_1_0 items_1_1 -> let _x_2_0 = keyfocus.copyFocusItems_15 items_1_1 in <{_Tuple2!3}> (_predefined._Cons item_1_0 (select _x_2_0::_Tuple2 0)) (_predefined._Cons item_1_0 (select _x_2_0::_Tuple2 1))) (_predefined._Nil -> <{_Tuple2!3}> _predefined._Nil _predefined._Nil) 
keyfocus.copyKeyFocus !kf_0 = case kf_0 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> let _x_2_0 = keyfocus.copyFocusItems_15 kf_1_1 in <{_Tuple2!3}> (keyfocus._KeyFocus kf_1_0 (select _x_2_0::_Tuple2 0)) (update kf_0::keyfocus._KeyFocus [1:select _x_2_0::_Tuple2 1])) 
keyfocus.setShowFocusItems !show_0::B !_x_1 !_x_2 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_ -> case _x_2 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons item_1_0 items_1_1 -> let _x_2_0 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdInt.==_16}>)) (select item_1_0::keyfocus._FocusItem 0) _x_1 in case (select _x_2_0::_Tuple2 0) (True -> _predefined._Cons (update item_1_0::keyfocus._FocusItem [1:show_0]) (keyfocus.setShowFocusItems show_0 (select _x_2_0::_Tuple2 1) items_1_1)) (False -> _predefined._Cons item_1_0 (keyfocus.setShowFocusItems show_0 (select _x_2_0::_Tuple2 1) items_1_1)) ) )
keyfocus.showFocusItems !nrs_0 !kf_1 = case kf_1 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> update kf_1::keyfocus._KeyFocus [1:keyfocus.setShowFocusItems True nrs_0 kf_1_1]) 
keyfocus.hideFocusItems !nrs_0 !kf_1 = case kf_1 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> update kf_1::keyfocus._KeyFocus [0:<{keyfocus._if;94;27_65}> (Data.Maybe.isNothing kf_1_0) kf_1_0 nrs_0,1:keyfocus.setShowFocusItems False nrs_0 kf_1_1]) 
<{keyfocus._if;94;27_65}> !_x_0::B kf_1 nrs_2 = case _x_0 (True -> kf_1) (_ -> case (StdList.isMember_51 (Data.Maybe.fromJust kf_1) nrs_2) (True -> Data.Maybe.Nothing) (False -> kf_1) )
keyfocus.getCurrentFocusItem !kf_0 = case kf_0 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> <{_Tuple2!3}> kf_1_0 kf_0) 
keyfocus.setNoFocusItem !kf_0 = update kf_0::keyfocus._KeyFocus [0:Data.Maybe.Nothing]
keyfocus.setNewFocusItem !new_0::I !kf_1 = update kf_1::keyfocus._KeyFocus [0:Data.Maybe.Just new_0]
keyfocus.anon_18 !f_0 g_1 x_2 = f_0 (g_1 x_2)
keyfocus.eqFocusItemNr::B !nr_0::I !_x_1 = case _x_1 (keyfocus._FocusItem focusNr_1_0 focusShow_1_1 -> <{StdInt.==_16}> nr_0 focusNr_1_0) 
keyfocus.anon_62::B !g_0 x_1 = StdBool.not (g_0 x_1)
keyfocus.anon_63::B !nr_0::I !x_1 = StdBool.not (keyfocus.eqFocusItemNr nr_0 x_1)
keyfocus.setNextFocusItem !_x_0 !kf_1 = case _x_0 (Data.Maybe.Just behind_1_0 -> case kf_1 (keyfocus._KeyFocus kf_2_0 kf_2_1 -> let _x_3_0 = StdList.span (keyfocus.anon_63 behind_1_0) kf_2_1, item_after_3_1 = select _x_3_0::_Tuple2 1, _x_3_2 = commondef.uisEmpty item_after_3_1 in case (select _x_3_2::_Tuple2 0) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (update kf_1::keyfocus._KeyFocus [1:select _x_3_0::_Tuple2 0])) (False -> let item_after_5_0 = select _x_3_2::_Tuple2 1, _x_5_1 = commondef.hdtl item_after_5_0, tl_item_after_5_2 = select _x_5_1::_Tuple2 1, _x_5_3 = commondef.ucselect keyfocus.isShownFocusItem StdMisc.undef tl_item_after_5_2 in case (select _x_5_3::_Tuple3 0) (True -> let item_7_0 = select _x_5_3::_Tuple3 1 in <{_Tuple2!3}> (Data.Maybe.Just (select item_7_0::keyfocus._FocusItem 0)) (update kf_1::keyfocus._KeyFocus [0:Data.Maybe.Just (select item_7_0::keyfocus._FocusItem 0),1:<{StdList.++}> (select _x_3_0::_Tuple2 0) (_predefined._Cons (select _x_5_1::_Tuple2 0) (select _x_5_3::_Tuple3 2))])) (False -> let before_7_0 = select _x_3_0::_Tuple2 0, _x_7_1 = commondef.ucselect keyfocus.isShownFocusItem StdMisc.undef before_7_0 in case (select _x_7_1::_Tuple3 0) (True -> let item_9_0 = select _x_7_1::_Tuple3 1 in <{_Tuple2!3}> (Data.Maybe.Just (select item_9_0::keyfocus._FocusItem 0)) (update kf_1::keyfocus._KeyFocus [0:Data.Maybe.Just (select item_9_0::keyfocus._FocusItem 0),1:<{StdList.++}> (select _x_7_1::_Tuple3 2) (_predefined._Cons (select _x_5_1::_Tuple2 0) (select _x_5_3::_Tuple3 2))])) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (update kf_1::keyfocus._KeyFocus [1:<{StdList.++}> (select _x_7_1::_Tuple3 2) (_predefined._Cons (select _x_5_1::_Tuple2 0) (select _x_5_3::_Tuple3 2))])) ) ) ) ) (_ -> case kf_1 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> let _x_2_0 = commondef.ucselect keyfocus.isShownFocusItem StdMisc.undef kf_1_1 in case (StdBool.not (select _x_2_0::_Tuple3 0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (update kf_1::keyfocus._KeyFocus [0:Data.Maybe.Nothing,1:select _x_2_0::_Tuple3 2])) (False -> let item_4_0 = select _x_2_0::_Tuple3 1 in <{_Tuple2!3}> (Data.Maybe.Just (select item_4_0::keyfocus._FocusItem 0)) (update kf_1::keyfocus._KeyFocus [0:Data.Maybe.Just (select item_4_0::keyfocus._FocusItem 0),1:select _x_2_0::_Tuple3 2])) ) )
<{keyfocus.openFocusItems`_16}> !behind_0::I !new_1 !_x_2 = case _x_2 (_predefined._Cons item_1_0 items_1_1 -> case item_1_0 (keyfocus._FocusItem focusNr_2_0 focusShow_2_1 -> case (<{StdInt.==_16}> behind_0 focusNr_2_0) (True -> _predefined._Cons item_1_0 (<{StdList.++}> new_1 items_1_1)) (False -> _predefined._Cons item_1_0 (<{keyfocus.openFocusItems`_16}> behind_0 new_1 items_1_1)) ) ) (_ -> new_1)
keyfocus.openFocusItems !_x_0 !new_1 !kf_2 = case _x_0 (Data.Maybe.Just behind_1_0 -> case kf_2 (keyfocus._KeyFocus kf_2_0 kf_2_1 -> update kf_2::keyfocus._KeyFocus [1:<{keyfocus.openFocusItems`_16}> behind_1_0 new_1 kf_2_1]) ) (_ -> case kf_2 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> update kf_2::keyfocus._KeyFocus [1:<{StdList.++}> kf_1_1 new_1]) )
<{keyfocus.closeFocusItems`_17}> !_x_0 !_x_1 = case _x_1 (_predefined._Nil -> _predefined._Nil) (_ -> case _x_0 (_predefined._Nil -> _predefined._Nil) (_ -> case _x_1 (_predefined._Cons item_1_0 items_1_1 -> let _x_2_0 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdInt.==_16}>)) (select item_1_0::keyfocus._FocusItem 0) _x_0 in case (select _x_2_0::_Tuple2 0) (True -> <{keyfocus.closeFocusItems`_17}> (select _x_2_0::_Tuple2 1) items_1_1) (False -> _predefined._Cons item_1_0 (<{keyfocus.closeFocusItems`_17}> (select _x_2_0::_Tuple2 1) items_1_1)) ) ))
keyfocus.closeFocusItems !nrs_0 !kf_1 = case kf_1 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> update kf_1::keyfocus._KeyFocus [0:<{keyfocus._if;59;27_66}> (Data.Maybe.isNothing kf_1_0) kf_1_0 nrs_0,1:<{keyfocus.closeFocusItems`_17}> nrs_0 kf_1_1]) 
<{keyfocus._if;59;27_66}> !_x_0::B kf_1 nrs_2 = case _x_0 (True -> kf_1) (_ -> case (StdList.isMember_51 (Data.Maybe.fromJust kf_1) nrs_2) (True -> Data.Maybe.Nothing) (False -> kf_1) )
<{keyfocus.TD;KeyFocus}> _x_0::B = _predefined._Nil
<{keyfocus.TD;FocusItem}> _x_0::B = _predefined._Nil


|| Converted Records
:: keyfocus._KeyFocus = {!keyfocus.kfItem, !keyfocus.kfItems}

:: keyfocus._FocusItem = {!keyfocus.focusNr::I, !keyfocus.focusShow::B}

:: <{keyfocus.gEq_s;}> = {!keyfocus.gEq_s}

:: <{keyfocus.gEq_ss;}> = {!keyfocus.gEq_ss}

:: <{keyfocus.gEq_sss;}> = {!keyfocus.gEq_sss}

:: <{keyfocus.gEq_ssss;}> = {!keyfocus.gEq_ssss}

:: <{keyfocus.gEq_sssss;}> = {!keyfocus.gEq_sssss}

:: <{keyfocus.gEq_ssssss;}> = {!keyfocus.gEq_ssssss}

:: <{keyfocus.gEq_sssssss;}> = {!keyfocus.gEq_sssssss}

:: <{keyfocus.gEq_ssssssss;}> = {!keyfocus.gEq_ssssssss}

:: <{keyfocus.gEq_sssssssss;}> = {!keyfocus.gEq_sssssssss}

:: <{keyfocus.bimap_s;}> = {keyfocus.bimap_s}

:: <{keyfocus.bimap_ss;}> = {keyfocus.bimap_ss}

:: <{keyfocus.bimap_sss;}> = {keyfocus.bimap_sss}

