|| ?module? windowvalidate


windowvalidate.validateWindowId !_x_0 !ioState_1 = case _x_0 (Data.Maybe.Nothing -> let _x_2_0 = StdId.openId_7 ioState_1 in <{_Tuple2!3}> (Data.Maybe.Just (select _x_2_0::_Tuple2 0)) (select _x_2_0::_Tuple2 1)) (Data.Maybe.Just id_1_0 -> let _x_2_0 = iostate.ioStGetIdTable ioState_1, idtable_2_1 = select _x_2_0::_Tuple2 0, _x_2_2 = id.memberIdTable id_1_0 idtable_2_1 in case (select _x_2_2::_Tuple2 0) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (iostate.ioStSetIdTable (select _x_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1))) (False -> <{_Tuple2!3}> (Data.Maybe.Just id_1_0) (iostate.ioStSetIdTable (select _x_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1))) ) 
windowvalidate.isModalWindow_32 !wsH_0 = let _x_1_0 = windowaccess.getWindowStateHandleWindowMode wsH_0 in <{_Tuple2!3}> (<{windowhandle.==_5}> (select _x_1_0::_Tuple2 0) windowhandle.Modal) (select _x_1_0::_Tuple2 1)
windowvalidate.validateWindowIndex !mode_0 !atts_1 !windows_2 = case windows_2 (windowhandle._WindowHandles whsWindows_1_0 whsCursor_1_1 whsNrWindowBound_1_2 whsModal_1_3 whsFinalModalLS_1_4 -> let _x_2_0::I = commondef.remove StdWindowAttribute.isWindowIndex (StdWindowDef.WindowIndex 0) atts_1, _x_2_1::I = commondef.uspan windowvalidate.isModalWindow_32 whsWindows_1_0, modal_2_2 = select _x_2_1::_Tuple2 0, _x_2_3 = commondef.ulength modal_2_2, modeless_2_4 = select _x_2_1::_Tuple2 1, _x_2_5 = commondef.ulength modeless_2_4, indexAtt_2_6 = select _x_2_0::_Tuple3 1, nrModals_2_7 = select _x_2_3::_Tuple2 0, nrModeless_2_8 = select _x_2_5::_Tuple2 0 in <{_Tuple3!7}> (<{windowvalidate._if;175;31_83}> (<{windowhandle.==_5}> mode_0 windowhandle.Modal) indexAtt_2_6 nrModals_2_7 nrModeless_2_8) (select _x_2_0::_Tuple3 2) (update windows_2::windowhandle._WindowHandles [0:<{StdList.++}> (select _x_2_3::_Tuple2 1) (select _x_2_5::_Tuple2 1)])) 
<{windowvalidate._if;175;31_83}>::I !_x_0::B indexAtt_1 nrModals_2::I nrModeless_3::I = case _x_0 (True -> 0) (_ -> commondef.setBetween (StdWindowAttribute.getWindowIndexAtt indexAtt_1) nrModals_2 (<{StdInt.+_6}> nrModals_2 nrModeless_3))
windowvalidate.isRelativeItemPos !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (StdIOCommon.LeftOf id_2_0 -> <{_Tuple2!1}> True id_2_0) (StdIOCommon.RightTo id_2_0 -> <{_Tuple2!1}> True id_2_0) (StdIOCommon.Above id_2_0 -> <{_Tuple2!1}> True id_2_0) (StdIOCommon.Below id_2_0 -> <{_Tuple2!1}> True id_2_0) ) (_ -> <{_Tuple2!1}> False StdMisc.undef)
windowvalidate.validateWindowPos !mode_0 !atts_1 !windows_2 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowPos StdMisc.undef atts_1 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple3!7}> Data.Maybe.Nothing (select _x_1_0::_Tuple3 2) windows_2) (False -> let posAtt_3_0 = select _x_1_0::_Tuple3 1, itemPos_3_1 = StdWindowAttribute.getWindowPosAtt posAtt_3_0, _x_3_2 = windowvalidate.isRelativeItemPos itemPos_3_1 in case (StdBool.not (select _x_3_2::_Tuple2 0)) (True -> <{_Tuple3!7}> (Data.Maybe.Just (controlvalidate.validateItemPos itemPos_3_1)) (select _x_1_0::_Tuple3 2) windows_2) (False -> let _x_5_0 = windowaccess.hasWindowHandlesWindow (windowaccess.toWID_71 (select _x_3_2::_Tuple2 1)) windows_2 in <{_Tuple3!7}> (<{windowvalidate._if;200;12_84}> (select _x_5_0::_Tuple2 0) itemPos_3_1) (select _x_1_0::_Tuple3 2) (select _x_5_0::_Tuple2 1)) ) 
<{windowvalidate._if;200;12_84}> !_x_0::B itemPos_1 = case _x_0 (True -> Data.Maybe.Just (controlvalidate.validateItemPos itemPos_1)) (_ -> Data.Maybe.Nothing)
windowvalidate.anon_35::B !att_0 = case (StdWindowAttribute.isWindowViewSize att_0) (True -> True) (False -> StdWindowAttribute.isWindowOuterSize att_0) 
windowvalidate.attrSize !atts_0 = let _x_1_0 = commondef.cselect windowvalidate.anon_35 StdMisc.undef atts_0 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> Data.Maybe.Nothing) (False -> let att_3_0 = select _x_1_0::_Tuple2 1 in case (StdWindowAttribute.isWindowViewSize att_3_0) (True -> Data.Maybe.Just (StdWindowAttribute.getWindowViewSizeAtt att_3_0)) (False -> Data.Maybe.Just (StdWindowAttribute.getWindowOuterSizeAtt att_3_0)) ) 
windowvalidate.attrMargins !wKind_0 !wMetrics_1 !atts_2 = <{_Tuple2!3}> (windowaccess.getWindowHMargins wKind_0 wMetrics_1 atts_2) (windowaccess.getWindowVMargins wKind_0 wMetrics_1 atts_2)
<{windowvalidate.getControlKind`_36}> !id_0 !_x_1 = case _x_1 (windowhandle.WItemHandle itemH_1_0 -> case itemH_1_0 (windowhandle._WItemHandle w_2_0 w_2_1 w_2_2 w_2_3 w_2_4 w_2_5 w_2_6 itemHs_2_7 w_2_8 w_2_9 w_2_10 w_2_11 w_2_12 -> case (case (Data.Maybe.isJust w_2_0) (True -> <{id.==_27}> (Data.Maybe.fromJust w_2_0) id_0) (False -> False) ) (True -> <{_Tuple2!3}> (Data.Maybe.Just w_2_2) (windowhandle.WItemHandle itemH_1_0)) (False -> let _x_4_0 = windowvalidate.getControlKind id_0 itemHs_2_7 in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (windowhandle.WItemHandle (update itemH_1_0::windowhandle._WItemHandle [7:select _x_4_0::_Tuple2 1]))) ) ) (windowhandle.WListLSHandle itemHs_1_0 -> let _x_2_0 = windowvalidate.getControlKind id_0 itemHs_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (windowhandle.WListLSHandle (select _x_2_0::_Tuple2 1))) (windowhandle.WExtendLSHandle wExH_1_0 -> case wExH_1_0 (windowhandle._WExtendLSHandle wExtendLS_2_0 itemHs_2_1 -> let _x_3_0 = windowvalidate.getControlKind id_0 itemHs_2_1 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (windowhandle.WExtendLSHandle (update wExH_1_0::windowhandle._WExtendLSHandle [1:select _x_3_0::_Tuple2 1]))) ) (windowhandle.WChangeLSHandle wChH_1_0 -> case wChH_1_0 (windowhandle._WChangeLSHandle wChangeLS_2_0 itemHs_2_1 -> let _x_3_0 = windowvalidate.getControlKind id_0 itemHs_2_1 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (windowhandle.WChangeLSHandle (update wChH_1_0::windowhandle._WChangeLSHandle [1:select _x_3_0::_Tuple2 1]))) ) 
windowvalidate.getControlKind !id_0 !_x_1 = case _x_1 (_predefined._Cons itemH_1_0 itemHs_1_1 -> let _x_2_0 = <{windowvalidate.getControlKind`_36}> id_0 itemH_1_0, maybe_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isJust maybe_2_1) (True -> <{_Tuple2!3}> maybe_2_1 (_predefined._Cons (select _x_2_0::_Tuple2 1) itemHs_1_1)) (False -> let _x_4_0 = windowvalidate.getControlKind id_0 itemHs_1_1 in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_4_0::_Tuple2 1))) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _predefined._Nil)
windowvalidate.isOkOrCancelControlId !id_0 !itemHs_1 = let _x_1_0 = windowvalidate.getControlKind id_0 itemHs_1, maybeKind_1_1 = select _x_1_0::_Tuple2 0 in case (Data.Maybe.isNothing maybeKind_1_1) (True -> <{_Tuple2!3}> False (select _x_1_0::_Tuple2 1)) (False -> let kind_3_0 = Data.Maybe.fromJust maybeKind_1_1 in <{_Tuple2!3}> (windowvalidate._f85_85 (<{windowhandle.==_8}> kind_3_0 windowhandle.IsButtonControl) kind_3_0) (select _x_1_0::_Tuple2 1)) 
windowvalidate._f85_85::B !_x_0::B kind_1 = case _x_0 (True -> True) (_ -> <{windowhandle.==_8}> kind_1 windowhandle.IsCustomButtonControl)
windowvalidate.getOkId !atts_0 !itemHs_1 = let _x_1_0 = commondef.cselect StdWindowAttribute.isWindowOk StdMisc.undef atts_0 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing itemHs_1) (False -> let idAtt_3_0 = select _x_1_0::_Tuple2 1, id_3_1 = StdWindowAttribute.getWindowOkAtt idAtt_3_0, _x_3_2 = windowvalidate.isOkOrCancelControlId id_3_1 itemHs_1 in case (select _x_3_2::_Tuple2 0) (True -> <{_Tuple2!3}> (Data.Maybe.Just id_3_1) (select _x_3_2::_Tuple2 1)) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_3_2::_Tuple2 1)) ) 
windowvalidate.getCancelId !atts_0 !itemHs_1 = let _x_1_0 = commondef.cselect StdWindowAttribute.isWindowCancel StdMisc.undef atts_0 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing itemHs_1) (False -> let idAtt_3_0 = select _x_1_0::_Tuple2 1, id_3_1 = StdWindowAttribute.getWindowCancelAtt idAtt_3_0, _x_3_2 = windowvalidate.isOkOrCancelControlId id_3_1 itemHs_1 in case (select _x_3_2::_Tuple2 0) (True -> <{_Tuple2!3}> (Data.Maybe.Just id_3_1) (select _x_3_2::_Tuple2 1)) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_3_2::_Tuple2 1)) ) 
windowvalidate.validateWindowInitActive !atts_0 !itemHs_1 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowInitActive StdMisc.undef atts_0 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (select _x_1_0::_Tuple3 2) itemHs_1) (False -> let att_3_0 = select _x_1_0::_Tuple3 1, _x_3_1 = windowvalidate.getControlKind (StdWindowAttribute.getWindowInitActiveAtt att_3_0) itemHs_1 in case (Data.Maybe.isNothing (select _x_3_1::_Tuple2 0)) (True -> <{_Tuple2!3}> (select _x_1_0::_Tuple3 2) (select _x_3_1::_Tuple2 1)) (False -> <{_Tuple2!3}> atts_0 (select _x_3_1::_Tuple2 1)) ) 
windowvalidate.determineRequestedSize size_0 !_x_1 = case _x_1 (Data.Maybe.Nothing -> size_0) (Data.Maybe.Just size_1_0 -> size_1_0) 
windowvalidate.exactWindowSize wMetrics_0 domain_1 !wSize_2 hasHScroll_3::B hasVScroll_4::B !wKind_5 = case wSize_2 (StdIOBasic._Size w_1_0 h_1_1 -> case (<{windowhandle.==_6}> wKind_5 windowhandle.IsDialog) (True -> wSize_2) (False -> let visHScroll_3_0::B = windowvalidate._f87_87 hasHScroll_3 domain_1 w_1_0, visVScroll_3_1::B = windowvalidate._f86_86 hasVScroll_4 domain_1 h_1_1 in case (case visHScroll_3_0 (True -> visVScroll_3_1) (False -> False) ) (True -> StdIOBasic._Size (<{StdInt.+_6}> w_1_0 (select wMetrics_0::ossystem._OSWindowMetrics 8)) (<{StdInt.+_6}> h_1_1 (select wMetrics_0::ossystem._OSWindowMetrics 7))) (False -> case visHScroll_3_0 (True -> update wSize_2::StdIOBasic._Size [1:<{StdInt.+_6}> h_1_1 (select wMetrics_0::ossystem._OSWindowMetrics 7)]) (False -> case visVScroll_3_1 (True -> update wSize_2::StdIOBasic._Size [0:<{StdInt.+_6}> w_1_0 (select wMetrics_0::ossystem._OSWindowMetrics 8)]) (False -> wSize_2) ) ) ) ) 
windowvalidate._f87_87::B !hasHScroll_0::B domain_1 w_2::I = case hasHScroll_0 (True -> oswindow.osScrollbarIsVisible (commondef.minmax (select (select domain_1::StdIOBasic._Rectangle 0)::StdIOBasic._Point2 0) (select (select domain_1::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 0)) w_2) (_ -> False)
windowvalidate._f86_86::B !hasVScroll_0::B domain_1 h_2::I = case hasVScroll_0 (True -> oswindow.osScrollbarIsVisible (commondef.minmax (select (select domain_1::StdIOBasic._Rectangle 0)::StdIOBasic._Point2 1) (select (select domain_1::StdIOBasic._Rectangle 1)::StdIOBasic._Point2 1)) h_2) (_ -> False)
windowvalidate.unidentifyWindow_37 !wid_0 !wsH_1 = let _x_1_0 = windowaccess.getWindowStateHandleWIDS wsH_1 in <{_Tuple2!3}> (StdBool.not (windowaccess.identifyWIDS wid_0 (select _x_1_0::_Tuple2 0))) (select _x_1_0::_Tuple2 1)
windowvalidate.windowvalidateFatalError !function_0 !message_1 = commondef.fatalError function_0 "windowvalidate" message_1
windowvalidate.isRelativeXItemPos::B !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (StdIOCommon.LeftOf _x_2_0 -> True) (StdIOCommon.RightTo _x_2_0 -> True) ) (_ -> False)
windowvalidate.isRelativeYItemPos::B !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (StdIOCommon.Above _x_2_0 -> True) (StdIOCommon.Below _x_2_0 -> True) ) (_ -> False)
windowvalidate.isAbsoluteItemPos !_x_0 = case _x_0 (_Tuple2 _x_1_0 offset_1_1 -> case _x_1_0 (StdIOCommon.Fix -> <{_Tuple2!1}> True offset_1_1) ) (_ -> <{_Tuple2!1}> False StdMisc.undef)
windowvalidate.isCornerItemPos::B !_x_0 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (StdIOCommon.LeftTop -> True) (StdIOCommon.RightTop -> True) (StdIOCommon.LeftBottom -> True) (StdIOCommon.RightBottom -> True) ) (_ -> False)
windowvalidate.getItemPosPosition_38 !wMetrics_0 !osd_1 !size_2 !itemPos_3 !windows_4 !tb_5::I = case windows_4 (windowhandle._WindowHandles wsHs_1_0 whsCursor_1_1 whsNrWindowBound_1_2 whsModal_1_3 whsFinalModalLS_1_4 -> let _x_2_0 = windowvalidate.isRelativeItemPos itemPos_3 in case (select _x_2_0::_Tuple2 0) (True -> let !_x_4_0 = commondef.uspan (windowvalidate.unidentifyWindow_37 (windowaccess.toWID_71 (select _x_2_0::_Tuple2 1))) wsHs_1_0, !_x_4_1 = <{windowvalidate._c;475;43_88}> (select _x_4_0::_Tuple2 1), !windows_4_2 = update windows_4::windowhandle._WindowHandles [0:<{StdList.++}> (select _x_4_0::_Tuple2 0) (_predefined._Cons (select _x_4_1::_Tuple3 1) (select _x_4_1::_Tuple3 2))], wPtr_4_3 = select _x_4_1::_Tuple3 0, _x_4_4::I = ossystem.osScreenrect tb_5, tb_4_5 = select _x_4_4::_Tuple2 1, _x_4_6::I = oswindow.osGetWindowSize wPtr_4_3 tb_4_5, tb_4_7 = select _x_4_6::_Tuple2 1, _x_4_8::I = oswindow.osGetWindowPos wPtr_4_3 tb_4_7, tb_4_9 = select _x_4_8::_Tuple2 1, _x_4_10 = osdocumentinterface.getOSDInfoOffset osd_1 tb_4_9, _x_4_11::I = select _x_4_10::_Tuple2 0, xD_4_12 = select _x_4_11::_Tuple2 0, _x_4_13::I = select _x_4_8::_Tuple2 0, relativeX_4_14 = select _x_4_13::_Tuple2 0, _x_4_15::I = select _x_4_6::_Tuple2 0, relativeW_4_16 = select _x_4_15::_Tuple2 0, rect_4_17::I = select _x_4_4::_Tuple2 0 in <{_Tuple3!7}> (<{windowvalidate._c;507;43_109}> (select itemPos_3::_Tuple2 0) _x_4_15 size_2 itemPos_3 relativeW_4_16 rect_4_17 relativeX_4_14 xD_4_12 _x_4_13 _x_4_11) windows_4_2 (select _x_4_10::_Tuple2 1)) ) (_ -> let _x_1_0 = windowvalidate.isAbsoluteItemPos itemPos_3 in case (select _x_1_0::_Tuple2 0) (True -> let _x_3_0 = ossystem.osScreenrect tb_5, rect_3_1 = select _x_3_0::_Tuple2 0 in <{_Tuple3!7}> (StdIOBasic.movePoint (<{windowvalidate._c;529;43_110}> (layout.itemPosOffset (select _x_1_0::_Tuple2 1) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle rect_3_1) (StdIOBasic._Point2 (select rect_3_1::ostypes._OSRect 0) (select rect_3_1::ostypes._OSRect 1))) _predefined._Nil))) StdIOBasic.zero_21) windows_4 (select _x_3_0::_Tuple2 1)) (False -> case (windowvalidate.isCornerItemPos itemPos_3) (True -> let _x_4_0 = ossystem.osScreenrect tb_5, rect_4_1 = select _x_4_0::_Tuple2 0 in <{_Tuple3!7}> (<{windowvalidate._c;544;43_115}> (select itemPos_3::_Tuple2 0) itemPos_3 rect_4_1 size_2) windows_4 (select _x_4_0::_Tuple2 1)) (False -> <{_Tuple3!7}> StdIOBasic.zero_21 windows_4 tb_5) ) )
<{windowvalidate._c;544;43_115}> !_x_0 !itemPos_1 !rect_2 size_3 = case _x_0 (StdIOCommon.LeftTop -> let _x_2_0 = <{windowvalidate._c;541;43_111}> (layout.itemPosOffset (select itemPos_1::_Tuple2 1) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle rect_2) (StdIOBasic._Point2 (select rect_2::ostypes._OSRect 0) (select rect_2::ostypes._OSRect 1))) _predefined._Nil)) in StdIOBasic._Point2 (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 0) (select _x_2_0::StdIOBasic._Vector2 0)) (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 1) (select _x_2_0::StdIOBasic._Vector2 1))) (StdIOCommon.RightTop -> let _x_2_0 = <{windowvalidate._c;541;43_112}> (layout.itemPosOffset (select itemPos_1::_Tuple2 1) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle rect_2) (StdIOBasic._Point2 (select rect_2::ostypes._OSRect 0) (select rect_2::ostypes._OSRect 1))) _predefined._Nil)) in StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 2) (select _x_2_0::StdIOBasic._Vector2 0)) (select (commondef.toTuple_72 size_3)::_Tuple2 0)) (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 1) (select _x_2_0::StdIOBasic._Vector2 1))) (StdIOCommon.LeftBottom -> let _x_2_0 = <{windowvalidate._c;541;43_113}> (layout.itemPosOffset (select itemPos_1::_Tuple2 1) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle rect_2) (StdIOBasic._Point2 (select rect_2::ostypes._OSRect 0) (select rect_2::ostypes._OSRect 1))) _predefined._Nil)) in StdIOBasic._Point2 (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 0) (select _x_2_0::StdIOBasic._Vector2 0)) (<{StdInt.-_7}> (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 3) (select _x_2_0::StdIOBasic._Vector2 1)) (select (commondef.toTuple_72 size_3)::_Tuple2 1))) (StdIOCommon.RightBottom -> let _x_2_0 = <{windowvalidate._c;541;43_114}> (layout.itemPosOffset (select itemPos_1::_Tuple2 1) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle rect_2) (StdIOBasic._Point2 (select rect_2::ostypes._OSRect 0) (select rect_2::ostypes._OSRect 1))) _predefined._Nil)), _x_2_1 = commondef.toTuple_72 size_3 in StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 2) (select _x_2_0::StdIOBasic._Vector2 0)) (select _x_2_1::_Tuple2 0)) (<{StdInt.-_7}> (<{StdInt.+_6}> (select rect_2::ostypes._OSRect 3) (select _x_2_0::StdIOBasic._Vector2 1)) (select _x_2_1::_Tuple2 1))) 
<{windowvalidate._c;541;43_114}> !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 v_1_0 -> v_1_0) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition _ _ (pos,offset)" "pos in {LeftTop,LeftBottom,RightTop,RightBottom}, but offset is illegal: OffsetAlign")
<{windowvalidate._c;541;43_113}> !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 v_1_0 -> v_1_0) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition _ _ (pos,offset)" "pos in {LeftTop,LeftBottom,RightTop,RightBottom}, but offset is illegal: OffsetAlign")
<{windowvalidate._c;541;43_112}> !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 v_1_0 -> v_1_0) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition _ _ (pos,offset)" "pos in {LeftTop,LeftBottom,RightTop,RightBottom}, but offset is illegal: OffsetAlign")
<{windowvalidate._c;541;43_111}> !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 v_1_0 -> v_1_0) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition _ _ (pos,offset)" "pos in {LeftTop,LeftBottom,RightTop,RightBottom}, but offset is illegal: OffsetAlign")
<{windowvalidate._c;529;43_110}> !_x_0 = case _x_0 (StdIOBasic.Alt1Of2 v_1_0 -> v_1_0) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition _ _ (Fix,offset)" "offset is illegal: OffsetAlign")
<{windowvalidate._c;507;43_109}> !_x_0 _x_1 size_2 itemPos_3 relativeW_4::I rect_5 relativeX_6::I xD_7::I _x_8 _x_9 = case _x_0 (StdIOCommon.LeftOf _x_1_0 -> let screenDomain_2_0::I = commondef.rectToRectangle rect_5, screenOrigin_2_1::I = StdIOBasic._Point2 (select rect_5::ostypes._OSRect 0) (select rect_5::ostypes._OSRect 1), offset_2_2::I = layout.itemPosOffset (select itemPos_3::_Tuple2 1) (_predefined._Cons (_Tuple2 screenDomain_2_0 screenOrigin_2_1) _predefined._Nil), isVectorOffset_2_3 = StdIOBasic.isAlt1Of2 offset_2_2, _x_2_4 = <{windowvalidate._if;493;43_93}> isVectorOffset_2_3 offset_2_2, _x_2_5 = <{windowvalidate._if;495;43_92}> isVectorOffset_2_3 itemPos_3 offset_2_2 relativeH_2_9 exactH_2_8 relativeW_4 exactW_2_7, _x_2_6::B = _Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1), exactW_2_7 = select _x_2_6::_Tuple2 0, exactH_2_8 = select _x_2_6::_Tuple2 1, relativeH_2_9 = select _x_1::_Tuple2 1 in StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> relativeX_6 (select _x_2_4::_Tuple2 0)) (select _x_2_5::_Tuple2 0)) xD_7) exactW_2_7) (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (select _x_8::_Tuple2 1) (select _x_2_4::_Tuple2 1)) (select _x_2_5::_Tuple2 1)) (select _x_9::_Tuple2 1))) (StdIOCommon.RightTo _x_1_0 -> let screenDomain_2_0::I = commondef.rectToRectangle rect_5, screenOrigin_2_1 = StdIOBasic._Point2 (select rect_5::ostypes._OSRect 0) (select rect_5::ostypes._OSRect 1), offset_2_2 = layout.itemPosOffset (select itemPos_3::_Tuple2 1) (_predefined._Cons (_Tuple2 screenDomain_2_0 screenOrigin_2_1) _predefined._Nil), isVectorOffset_2_3::B = StdIOBasic.isAlt1Of2 offset_2_2, _x_2_4 = <{windowvalidate._if;493;43_98}> isVectorOffset_2_3 offset_2_2, _x_2_5 = <{windowvalidate._if;495;43_97}> isVectorOffset_2_3 itemPos_3 offset_2_2 relativeH_2_6 size_2 relativeW_4, relativeH_2_6 = select _x_1::_Tuple2 1 in StdIOBasic._Point2 (<{StdInt.+_6}> (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> relativeX_6 (select _x_2_4::_Tuple2 0)) (select _x_2_5::_Tuple2 0)) xD_7) relativeW_4) (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (select _x_8::_Tuple2 1) (select _x_2_4::_Tuple2 1)) (select _x_2_5::_Tuple2 1)) (select _x_9::_Tuple2 1))) (StdIOCommon.Above _x_1_0 -> let screenDomain_2_0::I = commondef.rectToRectangle rect_5, screenOrigin_2_1::I = StdIOBasic._Point2 (select rect_5::ostypes._OSRect 0) (select rect_5::ostypes._OSRect 1), offset_2_2::I = layout.itemPosOffset (select itemPos_3::_Tuple2 1) (_predefined._Cons (_Tuple2 screenDomain_2_0 screenOrigin_2_1) _predefined._Nil), isVectorOffset_2_3 = StdIOBasic.isAlt1Of2 offset_2_2, _x_2_4 = <{windowvalidate._if;493;43_103}> isVectorOffset_2_3 offset_2_2, _x_2_5 = <{windowvalidate._if;495;43_102}> isVectorOffset_2_3 itemPos_3 offset_2_2 relativeH_2_8 exactH_2_7 relativeW_4 exactW_2_9, _x_2_6::B = _Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1), exactH_2_7 = select _x_2_6::_Tuple2 1, relativeH_2_8 = select _x_1::_Tuple2 1, exactW_2_9 = select _x_2_6::_Tuple2 0 in StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> relativeX_6 (select _x_2_4::_Tuple2 0)) (select _x_2_5::_Tuple2 0)) xD_7) (<{StdInt.-_7}> (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (select _x_8::_Tuple2 1) (select _x_2_4::_Tuple2 1)) (select _x_2_5::_Tuple2 1)) (select _x_9::_Tuple2 1)) exactH_2_7)) (StdIOCommon.Below _x_1_0 -> let screenDomain_2_0::I = commondef.rectToRectangle rect_5, screenOrigin_2_1 = StdIOBasic._Point2 (select rect_5::ostypes._OSRect 0) (select rect_5::ostypes._OSRect 1), offset_2_2 = layout.itemPosOffset (select itemPos_3::_Tuple2 1) (_predefined._Cons (_Tuple2 screenDomain_2_0 screenOrigin_2_1) _predefined._Nil), isVectorOffset_2_3::B = StdIOBasic.isAlt1Of2 offset_2_2, _x_2_4 = <{windowvalidate._if;493;43_108}> isVectorOffset_2_3 offset_2_2, _x_2_5 = <{windowvalidate._if;495;43_107}> isVectorOffset_2_3 itemPos_3 offset_2_2 relativeH_2_6 size_2 relativeW_4, relativeH_2_6 = select _x_1::_Tuple2 1 in StdIOBasic._Point2 (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> relativeX_6 (select _x_2_4::_Tuple2 0)) (select _x_2_5::_Tuple2 0)) xD_7) (<{StdInt.+_6}> (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (select _x_8::_Tuple2 1) (select _x_2_4::_Tuple2 1)) (select _x_2_5::_Tuple2 1)) (select _x_9::_Tuple2 1)) relativeH_2_6)) (_ -> windowvalidate.windowvalidateFatalError "getItemPosPosition" "unexpected ItemLoc alternative")
<{windowvalidate._if;493;43_108}> !isVectorOffset_0::B offset_1 = case isVectorOffset_0 (True -> commondef.toTuple_76 (StdIOBasic.alt1Of2 offset_1)) (_ -> _Tuple2 0 0)
<{windowvalidate._if;495;43_107}> !isVectorOffset_0::B itemPos_1 offset_2 relativeH_3::I size_4 relativeW_5::I = case isVectorOffset_0 (True -> _Tuple2 0 0) (_ -> <{windowvalidate._if;496;43_106}> (windowvalidate.isRelativeXItemPos itemPos_1) offset_2 relativeH_3 size_4 relativeW_5)
<{windowvalidate._if;496;43_106}> !_x_0::B !offset_1 relativeH_2::I size_3 relativeW_4::I = case _x_0 (True -> <{windowvalidate._c;496;62_104}> (StdIOBasic.alt2Of2 offset_1) relativeH_2 size_3) (_ -> <{windowvalidate._c;501;62_105}> (StdIOBasic.alt2Of2 offset_1) relativeW_4 size_3)
<{windowvalidate._c;501;62_105}> !_x_0 relativeW_1::I size_2 = case _x_0 (StdIOCommon.AlignLeft -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 (<{StdInt./_10}> (<{StdInt.-_7}> relativeW_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 0)) 2) 0) (StdIOCommon.AlignRight -> _Tuple2 (<{StdInt.-_7}> relativeW_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 0)) 0) 
<{windowvalidate._c;496;62_104}> !_x_0 relativeH_1::I size_2 = case _x_0 (StdIOCommon.AlignTop -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 0 (<{StdInt./_10}> (<{StdInt.-_7}> relativeH_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 1)) 2)) (StdIOCommon.AlignBottom -> _Tuple2 0 (<{StdInt.-_7}> relativeH_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 1))) 
<{windowvalidate._if;493;43_103}> !isVectorOffset_0::B offset_1 = case isVectorOffset_0 (True -> commondef.toTuple_76 (StdIOBasic.alt1Of2 offset_1)) (_ -> _Tuple2 0 0)
<{windowvalidate._if;495;43_102}> !isVectorOffset_0::B itemPos_1 offset_2 relativeH_3::I exactH_4::I relativeW_5::I exactW_6::I = case isVectorOffset_0 (True -> _Tuple2 0 0) (_ -> <{windowvalidate._if;496;43_101}> (windowvalidate.isRelativeXItemPos itemPos_1) offset_2 relativeH_3 exactH_4 relativeW_5 exactW_6)
<{windowvalidate._if;496;43_101}> !_x_0::B !offset_1 relativeH_2::I exactH_3::I relativeW_4::I exactW_5::I = case _x_0 (True -> <{windowvalidate._c;496;62_99}> (StdIOBasic.alt2Of2 offset_1) relativeH_2 exactH_3) (_ -> <{windowvalidate._c;501;62_100}> (StdIOBasic.alt2Of2 offset_1) relativeW_4 exactW_5)
<{windowvalidate._c;501;62_100}> !_x_0 relativeW_1::I exactW_2::I = case _x_0 (StdIOCommon.AlignLeft -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 (<{StdInt./_10}> (<{StdInt.-_7}> relativeW_1 exactW_2) 2) 0) (StdIOCommon.AlignRight -> _Tuple2 (<{StdInt.-_7}> relativeW_1 exactW_2) 0) 
<{windowvalidate._c;496;62_99}> !_x_0 relativeH_1::I exactH_2::I = case _x_0 (StdIOCommon.AlignTop -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 0 (<{StdInt./_10}> (<{StdInt.-_7}> relativeH_1 exactH_2) 2)) (StdIOCommon.AlignBottom -> _Tuple2 0 (<{StdInt.-_7}> relativeH_1 exactH_2)) 
<{windowvalidate._if;493;43_98}> !isVectorOffset_0::B offset_1 = case isVectorOffset_0 (True -> commondef.toTuple_76 (StdIOBasic.alt1Of2 offset_1)) (_ -> _Tuple2 0 0)
<{windowvalidate._if;495;43_97}> !isVectorOffset_0::B itemPos_1 offset_2 relativeH_3::I size_4 relativeW_5::I = case isVectorOffset_0 (True -> _Tuple2 0 0) (_ -> <{windowvalidate._if;496;43_96}> (windowvalidate.isRelativeXItemPos itemPos_1) offset_2 relativeH_3 size_4 relativeW_5)
<{windowvalidate._if;496;43_96}> !_x_0::B !offset_1 relativeH_2::I size_3 relativeW_4::I = case _x_0 (True -> <{windowvalidate._c;496;62_94}> (StdIOBasic.alt2Of2 offset_1) relativeH_2 size_3) (_ -> <{windowvalidate._c;501;62_95}> (StdIOBasic.alt2Of2 offset_1) relativeW_4 size_3)
<{windowvalidate._c;501;62_95}> !_x_0 relativeW_1::I size_2 = case _x_0 (StdIOCommon.AlignLeft -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 (<{StdInt./_10}> (<{StdInt.-_7}> relativeW_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 0)) 2) 0) (StdIOCommon.AlignRight -> _Tuple2 (<{StdInt.-_7}> relativeW_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 0)) 0) 
<{windowvalidate._c;496;62_94}> !_x_0 relativeH_1::I size_2 = case _x_0 (StdIOCommon.AlignTop -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 0 (<{StdInt./_10}> (<{StdInt.-_7}> relativeH_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 1)) 2)) (StdIOCommon.AlignBottom -> _Tuple2 0 (<{StdInt.-_7}> relativeH_1 (select (_Tuple2 (select size_2::StdIOBasic._Size 0) (select size_2::StdIOBasic._Size 1))::_Tuple2 1))) 
<{windowvalidate._if;493;43_93}> !isVectorOffset_0::B offset_1 = case isVectorOffset_0 (True -> commondef.toTuple_76 (StdIOBasic.alt1Of2 offset_1)) (_ -> _Tuple2 0 0)
<{windowvalidate._if;495;43_92}> !isVectorOffset_0::B itemPos_1 offset_2 relativeH_3::I exactH_4::I relativeW_5::I exactW_6::I = case isVectorOffset_0 (True -> _Tuple2 0 0) (_ -> <{windowvalidate._if;496;43_91}> (windowvalidate.isRelativeXItemPos itemPos_1) offset_2 relativeH_3 exactH_4 relativeW_5 exactW_6)
<{windowvalidate._if;496;43_91}> !_x_0::B !offset_1 relativeH_2::I exactH_3::I relativeW_4::I exactW_5::I = case _x_0 (True -> <{windowvalidate._c;496;62_89}> (StdIOBasic.alt2Of2 offset_1) relativeH_2 exactH_3) (_ -> <{windowvalidate._c;501;62_90}> (StdIOBasic.alt2Of2 offset_1) relativeW_4 exactW_5)
<{windowvalidate._c;501;62_90}> !_x_0 relativeW_1::I exactW_2::I = case _x_0 (StdIOCommon.AlignLeft -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 (<{StdInt./_10}> (<{StdInt.-_7}> relativeW_1 exactW_2) 2) 0) (StdIOCommon.AlignRight -> _Tuple2 (<{StdInt.-_7}> relativeW_1 exactW_2) 0) 
<{windowvalidate._c;496;62_89}> !_x_0 relativeH_1::I exactH_2::I = case _x_0 (StdIOCommon.AlignTop -> _Tuple2 0 0) (StdIOCommon.AlignCenter -> _Tuple2 0 (<{StdInt./_10}> (<{StdInt.-_7}> relativeH_1 exactH_2) 2)) (StdIOCommon.AlignBottom -> _Tuple2 0 (<{StdInt.-_7}> relativeH_1 exactH_2)) 
<{windowvalidate._c;475;43_88}> !_x_0 = case _x_0 (_predefined._Nil -> windowvalidate.windowvalidateFatalError "getItemPosPosition" "target window could not be found") (_predefined._Cons wsH_1_0 after_1_1 -> let _x_2_0 = select (select wsH_1_0::windowhandle._WindowStateHandle 0)::windowhandle._WIDS 1 in _Tuple3 (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1) after_1_1) 
windowvalidate.setWindowInsideScreen_39 !pos_0 !size_1 !tb_2::I = case pos_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> case size_1 (StdIOBasic._Size w_2_0 h_2_1 -> let _x_3_0::I = ossystem.osScreenrect tb_2, screenRect_3_1::I = select _x_3_0::_Tuple2 0, _x_3_2 = commondef.rectSize screenRect_3_1, screenW_3_3 = select _x_3_2::StdIOBasic._Size 0, screenH_3_4 = select _x_3_2::StdIOBasic._Size 1 in <{_Tuple2!3}> (<{windowvalidate._if;561;35_117}> (windowvalidate._f116_116 (StdBool.not (<{StdInt.<_17}> screenW_3_3 w_2_0)) screenH_3_4 h_2_1) x_1_0 screenRect_3_1 w_2_0 y_1_1 h_2_1 screenW_3_3 screenH_3_4) (select _x_3_0::_Tuple2 1)) ) 
<{windowvalidate._if;561;35_117}> !_x_0::B x_1::I screenRect_2 !w_3::I y_4::I h_5::I screenW_6::I screenH_7::I = case _x_0 (True -> let _x_2_0 = _Tuple2 (commondef.setBetween x_1 (select screenRect_2::ostypes._OSRect 0) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 2) w_3)) (commondef.setBetween y_4 (select screenRect_2::ostypes._OSRect 1) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 3) h_5)) in StdIOBasic._Point2 (select _x_2_0::_Tuple2 0) (select _x_2_0::_Tuple2 1)) (_ -> case (StdBool.not (<{StdInt.<_17}> screenW_6 w_3)) (True -> StdIOBasic._Point2 (select (_Tuple2 (commondef.setBetween x_1 (select screenRect_2::ostypes._OSRect 0) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 2) w_3)) (commondef.setBetween y_4 (select screenRect_2::ostypes._OSRect 1) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 3) h_5)))::_Tuple2 0) 0) (False -> case (StdBool.not (<{StdInt.<_17}> screenH_7 h_5)) (True -> StdIOBasic._Point2 0 (select (_Tuple2 (commondef.setBetween x_1 (select screenRect_2::ostypes._OSRect 0) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 2) w_3)) (commondef.setBetween y_4 (select screenRect_2::ostypes._OSRect 1) (<{StdInt.-_7}> (select screenRect_2::ostypes._OSRect 3) h_5)))::_Tuple2 1)) (False -> StdIOBasic.zero_21) ) )
windowvalidate._f116_116::B !_x_0::B screenH_1::I h_2::I = case _x_0 (True -> StdBool.not (<{StdInt.<_17}> screenH_1 h_2)) (_ -> False)
windowvalidate.exactWindowPos !wMetrics_0 !osd_1 !exactSize_2 !maybePos_3 !wKind_4 !wMode_5 !windows_6 !tb_7::I = case exactSize_2 (StdIOBasic._Size w_1_0 h_1_1 -> case (case (<{windowhandle.==_6}> wKind_4 windowhandle.IsDialog) (True -> <{windowhandle.==_5}> wMode_5 windowhandle.Modal) (False -> False) ) (True -> let _x_3_0 = ossystem.osScreenrect tb_7, screenRect_3_1 = select _x_3_0::_Tuple2 0, screenSize_3_2 = commondef.rectSize screenRect_3_1, exactSize_3_3 = StdIOBasic._Size (<{StdInt.+_6}> (<{StdInt.+_6}> w_1_0 oswindow.osWindowFrameWidth) oswindow.osWindowFrameWidth) (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> h_1_1 oswindow.osWindowFrameWidth) oswindow.osWindowFrameWidth) oswindow.osWindowTitleBarHeight) 1) in <{_Tuple3!7}> (StdIOBasic._Point2 (commondef.setBetween (<{StdInt.+_6}> (select screenRect_3_1::ostypes._OSRect 0) (<{StdInt./_10}> (<{StdInt.-_7}> (select screenSize_3_2::StdIOBasic._Size 0) (select exactSize_3_3::StdIOBasic._Size 0)) 2)) (select screenRect_3_1::ostypes._OSRect 0) (select screenRect_3_1::ostypes._OSRect 2)) (commondef.setBetween (<{StdInt.+_6}> (select screenRect_3_1::ostypes._OSRect 1) (<{StdInt./_10}> (<{StdInt.-_7}> (select screenSize_3_2::StdIOBasic._Size 1) (select exactSize_3_3::StdIOBasic._Size 1)) 3)) (select screenRect_3_1::ostypes._OSRect 1) (select screenRect_3_1::ostypes._OSRect 3))) windows_6 (select _x_3_0::_Tuple2 1)) (False -> case (Data.Maybe.isNothing maybePos_3) (True -> <{_Tuple3!7}> StdIOBasic.zero_21 windows_6 tb_7) (False -> let exactSize_4_0 = StdIOBasic._Size (<{StdInt.+_6}> (<{StdInt.+_6}> w_1_0 oswindow.osWindowFrameWidth) oswindow.osWindowFrameWidth) (<{StdInt.-_7}> (<{StdInt.+_6}> (<{StdInt.+_6}> (<{StdInt.+_6}> h_1_1 oswindow.osWindowFrameWidth) oswindow.osWindowFrameWidth) oswindow.osWindowTitleBarHeight) 1), _x_4_1 = windowvalidate.getItemPosPosition_38 wMetrics_0 osd_1 exactSize_4_0 (Data.Maybe.fromJust maybePos_3) windows_6 tb_7, _x_4_2 = windowvalidate.setWindowInsideScreen_39 (select _x_4_1::_Tuple3 0) exactSize_4_0 (select _x_4_1::_Tuple3 2) in <{_Tuple3!7}> (select _x_4_2::_Tuple2 0) (select _x_4_1::_Tuple3 1) (select _x_4_2::_Tuple2 1)) ) ) 
windowvalidate.windowvalidateError !function_0 !message_1 = commondef.error function_0 "windowvalidate" message_1
windowvalidate.validateViewDomain !domain_0 = let _x_1_0::I = commondef.rectangleToRect domain_0, _x_1_1::I = commondef.rectangleToRect StdIOCommon.viewDomainRange, rl_1_2::I = select _x_1_1::ostypes._OSRect 0, rr_1_3::I = select _x_1_1::ostypes._OSRect 2, rt_1_4 = select _x_1_1::ostypes._OSRect 1, rb_1_5 = select _x_1_1::ostypes._OSRect 3 in StdIOBasic._Rectangle (StdIOBasic._Point2 (commondef.setBetween (select _x_1_0::ostypes._OSRect 0) rl_1_2 rr_1_3) (commondef.setBetween (select _x_1_0::ostypes._OSRect 1) rt_1_4 rb_1_5)) (StdIOBasic._Point2 (commondef.setBetween (select _x_1_0::ostypes._OSRect 2) rl_1_2 rr_1_3) (commondef.setBetween (select _x_1_0::ostypes._OSRect 3) rt_1_4 rb_1_5))
windowvalidate.validateWindowDomain !atts_0 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowViewDomain StdMisc.undef atts_0 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> (update StdIOCommon.viewDomainRange::StdIOBasic._Rectangle [0:StdIOBasic.zero_21]) (select _x_1_0::_Tuple3 2)) (False -> let domainAtt_3_0 = select _x_1_0::_Tuple3 1, domain_3_1 = StdWindowAttribute.getWindowViewDomainAtt domainAtt_3_0 in case (commondef.isEmptyRectangle domain_3_1) (True -> windowvalidate.windowvalidateError "validateWindowDomain" "Window has illegal ViewDomain argument") (False -> <{_Tuple2!3}> (windowvalidate.validateViewDomain domain_3_1) (select _x_1_0::_Tuple3 2)) ) 
windowvalidate.validateWindowHScroll !atts_0 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowHScroll StdMisc.undef atts_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (Data.Maybe.Just (StdWindowAttribute.getWindowHScrollFun (select _x_1_0::_Tuple3 1))) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_1_0::_Tuple3 2)) 
windowvalidate.validateWindowVScroll !atts_0 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowVScroll StdMisc.undef atts_0 in case (select _x_1_0::_Tuple3 0) (True -> <{_Tuple2!3}> (Data.Maybe.Just (StdWindowAttribute.getWindowVScrollFun (select _x_1_0::_Tuple3 1))) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_1_0::_Tuple3 2)) 
windowvalidate.defaultlook_34 _x_0 !_x_1 !picture_2 = case _x_1 (StdIOCommon._UpdateState oldFrame_1_0 newFrame_1_1 updArea_1_2 -> commondef.strictSeq (StdList.map StdPicture.unfill_103 updArea_1_2) picture_2) 
windowvalidate.validateWindowLook !atts_0 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowLook (StdWindowDef.WindowLook True windowvalidate.defaultlook_34) atts_0, _x_1_1 = StdWindowAttribute.getWindowLookAtt (select _x_1_0::_Tuple3 1) in <{_Tuple3!7}> (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1) (select _x_1_0::_Tuple3 2)
windowvalidate.anon_33::B !att_0 = case (StdWindowAttribute.isWindowViewSize att_0) (True -> True) (False -> StdWindowAttribute.isWindowOuterSize att_0) 
windowvalidate.validateWindowSize !wMetrics_0 !domain_1 !isMD_2::B !isResizable_3::B !hasScrolls_4 !atts_5 !tb_6::I = let _x_1_0 = commondef.cselect windowvalidate.anon_33 StdMisc.undef atts_5 in case (StdBool.not (select _x_1_0::_Tuple2 0)) (True -> let domainSize_3_0 = StdIOBasic.rectangleSize domain_1, x_3_1::I = select domainSize_3_0::StdIOBasic._Size 0, maxSize_3_2::I = StdSystem.maxScrollWindowSize, y_3_3::I = select maxSize_3_2::StdIOBasic._Size 0, x_3_4 = select domainSize_3_0::StdIOBasic._Size 1, y_3_5::I = select maxSize_3_2::StdIOBasic._Size 1, pictSize_3_6 = StdIOBasic._Size (<{windowvalidate._c;48;16_118}> (<{StdInt.<_17}> x_3_1 y_3_3) x_3_1 y_3_3) (<{windowvalidate._c;48;16_119}> (<{StdInt.<_17}> x_3_4 y_3_5) x_3_4 y_3_5) in <{_Tuple3!7}> pictSize_3_6 (_predefined._Cons (StdWindowDef.WindowViewSize pictSize_3_6) atts_5) tb_6) (False -> let sizeAtt_3_0 = select _x_1_0::_Tuple2 1 in case (StdWindowAttribute.isWindowViewSize sizeAtt_3_0) (True -> let size_5_0 = StdWindowAttribute.getWindowViewSizeAtt sizeAtt_3_0, minSize_5_1 = oswindow.osMinWindowSize, maxSize_5_2 = StdSystem.maxScrollWindowSize, size1_5_3 = StdIOBasic._Size (commondef.setBetween (select size_5_0::StdIOBasic._Size 0) (select minSize_5_1::_Tuple2 0) (select maxSize_5_2::StdIOBasic._Size 0)) (commondef.setBetween (select size_5_0::StdIOBasic._Size 1) (select minSize_5_1::_Tuple2 1) (select maxSize_5_2::StdIOBasic._Size 1)) in <{_Tuple3!7}> size1_5_3 (select (commondef.creplace StdWindowAttribute.isWindowViewSize (StdWindowDef.WindowViewSize size1_5_3) atts_5)::_Tuple2 1) tb_6) (False -> let outerSize_5_0 = StdWindowAttribute.getWindowOuterSizeAtt sizeAtt_3_0, _x_5_1::I = ossystem.osStripOuterSize isMD_2 isResizable_3 tb_6, _x_5_2::I = select _x_5_1::_Tuple2 0, _x_5_3 = _Tuple2 (<{StdInt.-_7}> (select outerSize_5_0::StdIOBasic._Size 0) (select _x_5_2::_Tuple2 0)) (<{StdInt.-_7}> (select outerSize_5_0::StdIOBasic._Size 1) (select _x_5_2::_Tuple2 1)), w_5_4 = select _x_5_3::_Tuple2 0, h_5_5 = select _x_5_3::_Tuple2 1, viewSize_5_6 = commondef.rectSize (oswindow.osGetWindowContentRect wMetrics_0 (oswindow.osScrollbarsAreVisible wMetrics_0 (commondef.rectangleToRect domain_1) (_Tuple2 w_5_4 h_5_5) hasScrolls_4) (commondef.sizeToRect (StdIOBasic._Size w_5_4 h_5_5))) in <{_Tuple3!7}> viewSize_5_6 (_predefined._Cons (StdWindowDef.WindowViewSize viewSize_5_6) (select (commondef.remove StdWindowAttribute.isWindowViewSize StdMisc.undef (select (commondef.remove StdWindowAttribute.isWindowOuterSize StdMisc.undef atts_5)::_Tuple3 2))::_Tuple3 2)) (select _x_5_1::_Tuple2 1)) ) 
<{windowvalidate._c;48;16_119}>::I !_x_0::B x_1::I y_2::I = case _x_0 (True -> x_1) (_ -> y_2)
<{windowvalidate._c;48;16_118}>::I !_x_0::B x_1::I y_2::I = case _x_0 (True -> x_1) (_ -> y_2)
windowvalidate.attrPen !atts_0 = let _x_1_0 = commondef.remove StdWindowAttribute.isWindowPen (StdWindowDef.WindowPen _predefined._Nil) atts_0 in <{_Tuple2!3}> (StdWindowAttribute.getWindowPenAtt (select _x_1_0::_Tuple3 1)) (select _x_1_0::_Tuple3 2)
windowvalidate.attrSelectState::B !atts_0 = StdIOCommon.enabled (StdWindowAttribute.getWindowSelectStateAtt (select (commondef.cselect StdWindowAttribute.isWindowSelectState (StdWindowDef.WindowSelectState StdIOCommon.Able) atts_0)::_Tuple2 1))
windowvalidate.validateOrigin !_x_0 !domain_1 !atts_2 = case _x_0 (StdIOBasic._Size w_1_0 h_1_1 -> case domain_1 (StdIOBasic._Rectangle corner1_2_0 corner2_2_1 -> case corner1_2_0 (StdIOBasic._Point2 l_3_0 t_3_1 -> case corner2_2_1 (StdIOBasic._Point2 r_4_0 b_4_1 -> let _x_5_0::I = commondef.remove StdWindowAttribute.isWindowOrigin (StdWindowDef.WindowOrigin (select domain_1::StdIOBasic._Rectangle 0)) atts_2, origin_5_1::I = StdWindowAttribute.getWindowOriginAtt (select _x_5_0::_Tuple3 1), y_5_2 = <{StdInt.-_7}> r_4_0 w_1_0, y_5_3 = <{StdInt.-_7}> b_4_1 h_1_1 in <{_Tuple2!3}> (StdIOBasic._Point2 (commondef.setBetween (select origin_5_1::StdIOBasic._Point2 0) l_3_0 (<{windowvalidate._c;51;16_120}> (<{StdInt.<_17}> l_3_0 y_5_2) y_5_2 l_3_0)) (commondef.setBetween (select origin_5_1::StdIOBasic._Point2 1) t_3_1 (<{windowvalidate._c;51;16_121}> (<{StdInt.<_17}> t_3_1 y_5_3) y_5_3 t_3_1))) (select _x_5_0::_Tuple3 2)) ) ) ) 
<{windowvalidate._c;51;16_121}>::I !_x_0::B y_1::I t_2::I = case _x_0 (True -> y_1) (_ -> t_2)
<{windowvalidate._c;51;16_120}>::I !_x_0::B y_1::I l_2::I = case _x_0 (True -> y_1) (_ -> l_2)
windowvalidate.scrollInfo_30 !r_0 !scrollFun_1 = case r_0 (ostypes._OSRect rleft_1_0 rtop_1_1 rright_1_2 rbottom_1_3 -> windowhandle._ScrollInfo scrollFun_1 (StdIOBasic._Point2 rleft_1_0 rtop_1_1) (commondef.rectSize r_0) -1) 
windowvalidate.validScrollInfos_31 wMetrics_0 !wSize_1 !maybe_hScroll_2 !maybe_vScroll_3 = let hasScrolls_1_0 = _Tuple2 (Data.Maybe.isJust maybe_hScroll_2) (Data.Maybe.isJust maybe_vScroll_3), windowRect_1_1 = commondef.sizeToRect wSize_1 in <{_Tuple2!3}> (StdMaybe.mapMaybe (windowvalidate.scrollInfo_30 (oswindow.osGetWindowHScrollRect wMetrics_0 hasScrolls_1_0 windowRect_1_1)) maybe_hScroll_2) (StdMaybe.mapMaybe (windowvalidate.scrollInfo_30 (oswindow.osGetWindowVScrollRect wMetrics_0 hasScrolls_1_0 windowRect_1_1)) maybe_vScroll_3)
windowvalidate.validateWindow !wMetrics_0 !osd_1 !wH_2 !windows_3 !tb_4::I = case wH_2 (windowhandle._WindowHandle mode_1_0 whKind_1_1 whTitle_1_2 wh_1_3 whKeyFocus_1_4 whWindow_1_5 wh_1_6 whShow_1_7 whSelect_1_8 whAtts_1_9 whDefault_1_10 whCancel_1_11 whSize_1_12 whClosing_1_13 -> case whKind_1_1 (windowhandle.IsDialog -> let _x_3_0 = windowvalidate.validateWindowIndex mode_1_0 (StdList.filter StdWindowAttribute.isValidDialogAttribute whAtts_1_9) windows_3, _x_3_1 = windowvalidate.validateWindowPos mode_1_0 (select _x_3_0::_Tuple3 1) (select _x_3_0::_Tuple3 2), atts_3_2 = select _x_3_1::_Tuple3 1, _x_3_3 = windowvalidate.attrMargins windowhandle.IsDialog wMetrics_0 atts_3_2, sizeAtt_3_4 = windowvalidate.attrSize atts_3_2, reqSize_3_5 = windowvalidate.determineRequestedSize StdIOBasic.zero_15 sizeAtt_3_4, _x_3_6 = oswindow.osMinWindowSize, _x_3_7 = windowvalidate.getOkId atts_3_2 wh_1_6, _x_3_8 = windowvalidate.getCancelId atts_3_2 (select _x_3_7::_Tuple2 1), _x_3_9 = windowvalidate.validateWindowInitActive atts_3_2 (select _x_3_8::_Tuple2 1), _x_3_10 = controllayout.layoutControls wMetrics_0 (select _x_3_3::_Tuple2 0) (select _x_3_3::_Tuple2 1) (windowaccess.getWindowItemSpaces windowhandle.IsDialog wMetrics_0 atts_3_2) reqSize_3_5 (StdIOBasic._Size (select _x_3_6::_Tuple2 0) (select _x_3_6::_Tuple2 1)) (_predefined._Cons (_Tuple2 (commondef.sizeToRectangle reqSize_3_5) StdIOBasic.zero_21) _predefined._Nil) (select _x_3_9::_Tuple2 1) tb_4, derSize_3_11 = windowvalidate.determineRequestedSize (select _x_3_10::_Tuple3 0) sizeAtt_3_4, okSize_3_12 = windowvalidate.exactWindowSize wMetrics_0 (commondef.sizeToRectangle derSize_3_11) derSize_3_11 False False windowhandle.IsDialog, _x_3_13 = windowvalidate.exactWindowPos wMetrics_0 osd_1 okSize_3_12 (select _x_3_1::_Tuple3 0) windowhandle.IsDialog mode_1_0 (select _x_3_1::_Tuple3 2) (select _x_3_10::_Tuple3 2), _x_3_14 = windowaccess.genWElementItemNrs wh_1_3 (select _x_3_10::_Tuple3 1), _x_3_15 = windowaccess.getWElementKeyFocusIds True (select _x_3_14::_Tuple2 1) in <{_Tuple7!127}> (select _x_3_0::_Tuple3 0) (select _x_3_13::_Tuple3 0) okSize_3_12 StdIOBasic.zero_11 (update wH_2::windowhandle._WindowHandle [3:select _x_3_14::_Tuple2 0,4:keyfocus.newFocusItems (select _x_3_15::_Tuple2 0),6:select _x_3_15::_Tuple2 1,8:True,9:select _x_3_9::_Tuple2 0,10:select _x_3_7::_Tuple2 0,11:select _x_3_8::_Tuple2 0,12:okSize_3_12]) (select _x_3_13::_Tuple3 1) (select _x_3_13::_Tuple3 2)) (windowhandle.IsWindow -> let mode_3_0 = windowhandle.Modeless, _x_3_1 = windowvalidate.validateWindowDomain (StdList.filter StdWindowAttribute.isValidWindowAttribute whAtts_1_9), domain_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = windowvalidate.validateWindowHScroll (select _x_3_1::_Tuple2 1), maybe_hScroll_3_4 = select _x_3_3::_Tuple2 0, _x_3_5 = windowvalidate.validateWindowVScroll (select _x_3_3::_Tuple2 1), maybe_vScroll_3_6 = select _x_3_5::_Tuple2 0, _x_3_7 = windowvalidate.validateWindowLook (select _x_3_5::_Tuple2 1), _x_3_8 = windowvalidate.validateWindowSize wMetrics_0 domain_3_2 (<{StdIOCommon.==_39}> (osdocumentinterface.getOSDInfoDocumentInterface osd_1) StdIOCommon.MDI) True (_Tuple2 (Data.Maybe.isJust maybe_hScroll_3_4) (Data.Maybe.isJust maybe_vScroll_3_6)) (select _x_3_7::_Tuple3 2) tb_4, _x_3_9 = windowvalidate.validateWindowIndex mode_3_0 (select _x_3_8::_Tuple3 1) windows_3, _x_3_10 = windowvalidate.validateWindowPos mode_3_0 (select _x_3_9::_Tuple3 1) (select _x_3_9::_Tuple3 2), _x_3_11 = windowvalidate.attrPen (select _x_3_10::_Tuple3 1), atts_3_12 = select _x_3_11::_Tuple2 1, _x_3_13 = windowvalidate.attrMargins windowhandle.IsWindow wMetrics_0 atts_3_12, _x_3_14 = windowvalidate.getOkId atts_3_12 wh_1_6, _x_3_15 = windowvalidate.getCancelId atts_3_12 (select _x_3_14::_Tuple2 1), _x_3_16 = windowvalidate.validateWindowInitActive atts_3_12 (select _x_3_15::_Tuple2 1), _x_3_17 = controllayout.layoutControls wMetrics_0 (select _x_3_13::_Tuple2 0) (select _x_3_13::_Tuple2 1) (windowaccess.getWindowItemSpaces windowhandle.IsWindow wMetrics_0 atts_3_12) (select _x_3_8::_Tuple3 0) (commondef.fromTuple_73 oswindow.osMinWindowSize) (_predefined._Cons (_Tuple2 domain_3_2 (select domain_3_2::StdIOBasic._Rectangle 0)) _predefined._Nil) (select _x_3_16::_Tuple2 1) (select _x_3_8::_Tuple3 2), derSize_3_18 = select _x_3_17::_Tuple3 0, okSize_3_19 = windowvalidate.exactWindowSize wMetrics_0 domain_3_2 derSize_3_18 (Data.Maybe.isJust maybe_hScroll_3_4) (Data.Maybe.isJust maybe_vScroll_3_6) windowhandle.IsWindow, _x_3_20 = windowvalidate.exactWindowPos wMetrics_0 osd_1 okSize_3_19 (select _x_3_10::_Tuple3 0) windowhandle.IsWindow mode_3_0 (select _x_3_10::_Tuple3 2) (select _x_3_17::_Tuple3 2), _x_3_21 = windowvalidate.validateOrigin derSize_3_18 domain_3_2 (select _x_3_16::_Tuple2 0), _x_3_22 = windowaccess.genWElementItemNrs wh_1_3 (select _x_3_17::_Tuple3 1), _x_3_23 = windowaccess.getWElementKeyFocusIds True (select _x_3_22::_Tuple2 1), _x_3_24 = windowvalidate.validScrollInfos_31 wMetrics_0 okSize_3_19 maybe_hScroll_3_4 maybe_vScroll_3_6 in <{_Tuple7!127}> (select _x_3_9::_Tuple3 0) (select _x_3_20::_Tuple3 0) okSize_3_19 (StdIOBasic.toVector_23 (<{StdIOBasic.-_20}> (select _x_3_21::_Tuple2 0) (select domain_3_2::StdIOBasic._Rectangle 0))) (update wH_2::windowhandle._WindowHandle [3:select _x_3_22::_Tuple2 0,4:keyfocus.newFocusItems (select _x_3_23::_Tuple2 0),5:windowhandle.WindowInfo (windowhandle._WindowData (commondef.rectangleToRect domain_3_2) (select domain_3_2::StdIOBasic._Rectangle 0) (select _x_3_24::_Tuple2 0) (select _x_3_24::_Tuple2 1) (windowhandle._LookInfo (select _x_3_7::_Tuple3 1) (commondef.stateMap2 ospicture.setPenAttribute (StdList.reverse (select _x_3_11::_Tuple2 0)) ospicture.defaultPen) (select _x_3_7::_Tuple3 0)) (windowhandle._ClipState 0 False)),6:select _x_3_23::_Tuple2 1,8:windowvalidate.attrSelectState atts_3_12,9:select _x_3_21::_Tuple2 1,10:select _x_3_14::_Tuple2 0,11:select _x_3_15::_Tuple2 0,12:okSize_3_19]) (select _x_3_20::_Tuple3 1) (select _x_3_20::_Tuple3 2)) (windowhandle.IsGameWindow -> let okSize_3_0 = select (windowaccess.getWindowInfoGameWindowData whWindow_1_5)::windowhandle._GameWindowData 1 in <{_Tuple7!127}> 0 StdIOBasic.zero_21 okSize_3_0 StdIOBasic.zero_11 (update wH_2::windowhandle._WindowHandle [12:okSize_3_0]) windows_3 tb_4) ) 


|| Converted Records
:: <{windowvalidate.gEq_s;}> = {!windowvalidate.gEq_s}

:: <{windowvalidate.gEq_ss;}> = {!windowvalidate.gEq_ss}

:: <{windowvalidate.gEq_sss;}> = {!windowvalidate.gEq_sss}

:: <{windowvalidate.gEq_ssss;}> = {!windowvalidate.gEq_ssss}

:: <{windowvalidate.gEq_sssss;}> = {!windowvalidate.gEq_sssss}

:: <{windowvalidate.gEq_ssssss;}> = {!windowvalidate.gEq_ssssss}

:: <{windowvalidate.gEq_sssssss;}> = {!windowvalidate.gEq_sssssss}

:: <{windowvalidate.gEq_ssssssss;}> = {!windowvalidate.gEq_ssssssss}

:: <{windowvalidate.gEq_sssssssss;}> = {!windowvalidate.gEq_sssssssss}

:: <{windowvalidate.bimap_s;}> = {windowvalidate.bimap_s}

:: <{windowvalidate.bimap_ss;}> = {windowvalidate.bimap_ss}

:: <{windowvalidate.bimap_sss;}> = {windowvalidate.bimap_sss}

