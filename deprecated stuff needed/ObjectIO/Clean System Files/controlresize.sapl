|| ?module? controlresize


controlresize.anon_5 oldWSize_0 newWSize_1 !resizeF_2 oldCSize_3 = resizeF_2 oldCSize_3 oldWSize_0 newWSize_1
controlresize.calcNewOrigin_6 !_x_0 !_x_1 !_x_2 = case _x_0 (StdIOBasic._Point2 x_1_0 y_1_1 -> case _x_1 (ostypes._OSRect rleft_2_0 rtop_2_1 rright_2_2 rbottom_2_3 -> case _x_2 (StdIOBasic._Size w_3_0 h_3_1 -> StdIOBasic._Point2 (<{controlresize._if;147;35_55}> (<{StdInt.<_17}> rright_2_2 (<{StdInt.+_6}> x_1_0 w_3_0)) rright_2_2 w_3_0 rleft_2_0 x_1_0) (<{controlresize._if;148;35_56}> (<{StdInt.<_17}> rbottom_2_3 (<{StdInt.+_6}> y_1_1 h_3_1)) rbottom_2_3 h_3_1 rtop_2_1 y_1_1)) ) ) 
<{controlresize._if;148;35_56}>::I !_x_0::B rbottom_1::I h_2::I rtop_3::I y_4::I = case _x_0 (True -> let x_2_0::I = <{StdInt.-_7}> rbottom_1 h_2 in case (<{StdInt.<_17}> x_2_0 rtop_3) (True -> rtop_3) (False -> x_2_0) ) (_ -> y_4)
<{controlresize._if;147;35_55}>::I !_x_0::B rright_1::I w_2::I rleft_3::I x_4::I = case _x_0 (True -> let x_2_0::I = <{StdInt.-_7}> rright_1 w_2 in case (<{StdInt.<_17}> x_2_0 rleft_3) (True -> rleft_3) (False -> x_2_0) ) (_ -> x_4)
controlresize.replaceSizeAtt !size_0 !atts_1 = let sizeAtt_1_0 = StdControlDef.ControlViewSize size_0, _x_1_1 = commondef.creplace StdControlAttribute.isControlViewSize sizeAtt_1_0 atts_1 in case (select _x_1_1::_Tuple2 0) (True -> select _x_1_1::_Tuple2 1) (False -> <{StdList.++}> (select _x_1_1::_Tuple2 1) (_predefined._Cons sizeAtt_1_0 _predefined._Nil)) 
controlresize.calcNewWItemSize_7 !wMetrics_0 !originShifted_1::B !resizeF_2 !itemH_3 = case itemH_3 (windowhandle._WItemHandle w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case w_1_2 (windowhandle.IsCompoundControl -> let info_3_0 = windowaccess.getWItemCompoundInfo (select itemH_3::windowhandle._WItemHandle 5), domainRect_3_1 = select info_3_0::windowhandle._CompoundInfo 0, _x_3_2 = oswindow.osMinCompoundSize, defMinW_3_3 = select _x_3_2::_Tuple2 0, defMinH_3_4 = select _x_3_2::_Tuple2 1, atts_3_5 = select itemH_3::windowhandle._WItemHandle 6, minSize_3_6::I = StdControlAttribute.getControlMinimumSizeAtt (select (commondef.cselect StdControlAttribute.isControlMinimumSize (StdControlDef.ControlMinimumSize (StdIOBasic._Size defMinW_3_3 defMinH_3_4)) atts_3_5)::_Tuple2 1), x_3_7::I = select minSize_3_6::StdIOBasic._Size 0, oldSize_3_8::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_9 = resizeF_2 oldSize_3_8, y_3_10 = select newSize_3_9::StdIOBasic._Size 0, x_3_11::I = select minSize_3_6::StdIOBasic._Size 1, y_3_12 = select newSize_3_9::StdIOBasic._Size 1, newSize_3_13 = StdIOBasic._Size (<{controlresize._c;51;16_68}> (<{StdInt.<_17}> x_3_7 y_3_10) y_3_10 x_3_7) (<{controlresize._c;51;16_69}> (<{StdInt.<_17}> x_3_11 y_3_12) y_3_12 x_3_11), hasScrolls_3_14::I = _Tuple2 (Data.Maybe.isJust (select info_3_0::windowhandle._CompoundInfo 2)) (Data.Maybe.isJust (select info_3_0::windowhandle._CompoundInfo 3)), visScrolls_3_15::I = oswindow.osScrollbarsAreVisible wMetrics_0 domainRect_3_1 (commondef.toTuple_72 newSize_3_13) hasScrolls_3_14, newFrameSize_3_16 = commondef.rectSize (oswindow.osGetCompoundContentRect wMetrics_0 visScrolls_3_15 (commondef.sizeToRect newSize_3_13)), visScrolls_3_17 = oswindow.osScrollbarsAreVisible wMetrics_0 domainRect_3_1 (commondef.toTuple_72 oldSize_3_8) hasScrolls_3_14, oldFrameSize_3_18 = commondef.rectSize (oswindow.osGetCompoundContentRect wMetrics_0 visScrolls_3_17 (commondef.sizeToRect oldSize_3_8)) in case (<{StdIOBasic.==_14}> newFrameSize_3_16 oldFrameSize_3_18) (True -> <{_Tuple2!3}> False itemH_3) (False -> let origin_5_0 = select info_3_0::windowhandle._CompoundInfo 1, newOrigin_5_1 = controlresize.calcNewOrigin_6 origin_5_0 domainRect_3_1 newFrameSize_3_16 in <{_Tuple2!3}> True (windowclipstate.invalidateCompoundClipState (update itemH_3::windowhandle._WItemHandle [5:windowhandle.CompoundInfo (update info_3_0::windowhandle._CompoundInfo [1:newOrigin_5_1]),6:controlresize.replaceSizeAtt newFrameSize_3_16 atts_3_5,7:select (controlresize.calcNewControlsSize wMetrics_0 (controlresize._f70_70 originShifted_1 newOrigin_5_1 origin_5_0) oldFrameSize_3_18 newFrameSize_3_16 (select itemH_3::windowhandle._WItemHandle 7))::_Tuple2 1,10:newSize_3_13]))) ) (windowhandle.IsButtonControl -> let x_3_0 = oswindow.osGetButtonControlMinWidth wMetrics_0, oldSize_3_1::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_2::I = resizeF_2 oldSize_3_1, y_3_3::I = select newSize_3_2::StdIOBasic._Size 0, x_3_4 = 0, y_3_5 = select newSize_3_2::StdIOBasic._Size 1, newSize1_3_6::I = StdIOBasic._Size (<{controlresize._c;51;16_71}> (<{StdInt.<_17}> x_3_0 y_3_3) y_3_3 x_3_0) (<{controlresize._c;51;16_72}> (<{StdInt.<_17}> x_3_4 y_3_5) y_3_5 x_3_4) in <{_Tuple2!3}> (StdBool.not (<{StdIOBasic.==_14}> newSize1_3_6 oldSize_3_1)) (update itemH_3::windowhandle._WItemHandle [6:controlresize.replaceSizeAtt newSize1_3_6 (select itemH_3::windowhandle._WItemHandle 6),10:newSize1_3_6])) (windowhandle.IsCustomControl -> let x_3_0 = 0, oldSize_3_1::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_2::I = resizeF_2 oldSize_3_1, y_3_3::I = select newSize_3_2::StdIOBasic._Size 0, x_3_4 = 0, y_3_5 = select newSize_3_2::StdIOBasic._Size 1, newSize1_3_6::I = StdIOBasic._Size (<{controlresize._c;51;16_73}> (<{StdInt.<_17}> x_3_0 y_3_3) y_3_3 x_3_0) (<{controlresize._c;51;16_74}> (<{StdInt.<_17}> x_3_4 y_3_5) y_3_5 x_3_4) in <{_Tuple2!3}> (StdBool.not (<{StdIOBasic.==_14}> newSize1_3_6 oldSize_3_1)) (update itemH_3::windowhandle._WItemHandle [6:controlresize.replaceSizeAtt newSize1_3_6 (select itemH_3::windowhandle._WItemHandle 6),10:newSize1_3_6])) (windowhandle.IsCustomButtonControl -> let x_3_0 = 0, oldSize_3_1::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_2::I = resizeF_2 oldSize_3_1, y_3_3::I = select newSize_3_2::StdIOBasic._Size 0, x_3_4 = 0, y_3_5 = select newSize_3_2::StdIOBasic._Size 1, newSize1_3_6::I = StdIOBasic._Size (<{controlresize._c;51;16_75}> (<{StdInt.<_17}> x_3_0 y_3_3) y_3_3 x_3_0) (<{controlresize._c;51;16_76}> (<{StdInt.<_17}> x_3_4 y_3_5) y_3_5 x_3_4) in <{_Tuple2!3}> (StdBool.not (<{StdIOBasic.==_14}> newSize1_3_6 oldSize_3_1)) (update itemH_3::windowhandle._WItemHandle [6:controlresize.replaceSizeAtt newSize1_3_6 (select itemH_3::windowhandle._WItemHandle 6),10:newSize1_3_6])) (windowhandle.IsEditControl -> let x_3_0 = 0, oldSize_3_1::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_2::I = resizeF_2 oldSize_3_1, y_3_3::I = select newSize_3_2::StdIOBasic._Size 0, x_3_4::I = 1, lineHeight_3_5::I = select wMetrics_0::ossystem._OSWindowMetrics 2, y_3_6 = <{StdInt./_10}> (select newSize_3_2::StdIOBasic._Size 1) lineHeight_3_5, nrLines1_3_7 = <{controlresize._c;51;16_78}> (<{StdInt.<_17}> x_3_4 y_3_6) y_3_6 x_3_4, newSize1_3_8::I = StdIOBasic._Size (<{controlresize._c;51;16_77}> (<{StdInt.<_17}> x_3_0 y_3_3) y_3_3 x_3_0) (<{StdInt.*_9}> nrLines1_3_7 lineHeight_3_5) in <{_Tuple2!3}> (StdBool.not (<{StdIOBasic.==_14}> newSize1_3_8 oldSize_3_1)) (update itemH_3::windowhandle._WItemHandle [5:windowhandle.EditInfo (update (windowaccess.getWItemEditInfo (select itemH_3::windowhandle._WItemHandle 5))::windowhandle._EditInfo [1:select newSize1_3_8::StdIOBasic._Size 0,2:nrLines1_3_7]),6:controlresize.replaceSizeAtt newSize1_3_8 (select itemH_3::windowhandle._WItemHandle 6),10:newSize1_3_8])) (windowhandle.IsLayoutControl -> let atts_3_0 = select itemH_3::windowhandle._WItemHandle 6, minSize_3_1::I = StdControlAttribute.getControlMinimumSizeAtt (select (commondef.cselect StdControlAttribute.isControlMinimumSize (StdControlDef.ControlMinimumSize StdIOBasic.zero_15) atts_3_0)::_Tuple2 1), x_3_2::I = select minSize_3_1::StdIOBasic._Size 0, oldSize_3_3::I = select itemH_3::windowhandle._WItemHandle 10, newSize_3_4 = resizeF_2 oldSize_3_3, y_3_5 = select newSize_3_4::StdIOBasic._Size 0, x_3_6::I = select minSize_3_1::StdIOBasic._Size 1, y_3_7 = select newSize_3_4::StdIOBasic._Size 1, newSize_3_8 = StdIOBasic._Size (<{controlresize._c;51;16_79}> (<{StdInt.<_17}> x_3_2 y_3_5) y_3_5 x_3_2) (<{controlresize._c;51;16_80}> (<{StdInt.<_17}> x_3_6 y_3_7) y_3_7 x_3_6) in case (<{StdIOBasic.==_14}> newSize_3_8 oldSize_3_3) (True -> <{_Tuple2!3}> False itemH_3) (False -> <{_Tuple2!3}> True (update itemH_3::windowhandle._WItemHandle [6:controlresize.replaceSizeAtt newSize_3_8 atts_3_0,7:select (controlresize.calcNewControlsSize wMetrics_0 originShifted_1 oldSize_3_3 newSize_3_8 (select itemH_3::windowhandle._WItemHandle 7))::_Tuple2 1,10:newSize_3_8])) ) (windowhandle.IsSliderControl -> let info_3_0 = windowaccess.getWItemSliderInfo (select itemH_3::windowhandle._WItemHandle 5), horizontal_3_1 = <{StdIOCommon.==_35}> (select info_3_0::windowhandle._SliderInfo 0) StdIOCommon.Horizontal, newSize1_3_2 = <{controlresize._if;208;35_83}> horizontal_3_1 newSize_3_4 wMetrics_0, oldSize_3_3::B = select itemH_3::windowhandle._WItemHandle 10, newSize_3_4 = resizeF_2 oldSize_3_3 in <{_Tuple2!3}> (StdBool.not (<{StdIOBasic.==_14}> newSize1_3_2 oldSize_3_3)) (update itemH_3::windowhandle._WItemHandle [5:windowhandle.SliderInfo (update info_3_0::windowhandle._SliderInfo [1:<{controlresize._if;209;35_84}> horizontal_3_1 newSize1_3_2]),6:controlresize.replaceSizeAtt newSize1_3_2 (select itemH_3::windowhandle._WItemHandle 6),10:newSize1_3_2])) ) (_ -> <{_Tuple2!3}> False itemH_3)
controlresize.calcNewControlSize_8 !wMetrics_0 !originShifted_1::B !oldWSize_2 !newWSize_3 !_x_4 = case _x_4 (windowhandle.WItemHandle itemH_1_0 -> case itemH_1_0 (windowhandle._WItemHandle w_2_0 w_2_1 w_2_2 w_2_3 w_2_4 w_2_5 w_2_6 w_2_7 w_2_8 w_2_9 w_2_10 w_2_11 w_2_12 -> let _x_3_0 = commondef.cselect StdControlAttribute.isControlResize StdMisc.undef w_2_6 in case (StdBool.not (select _x_3_0::_Tuple2 0)) (True -> let _x_5_0 = commondef.cselect StdControlAttribute.isControlPos StdMisc.undef w_2_6, hasPos_5_1 = select _x_5_0::_Tuple2 0, posAtt_5_2::B = select _x_5_0::_Tuple2 1, itemPos_5_3 = StdControlAttribute.getControlPosAtt posAtt_5_2 in <{_Tuple2!3}> (controlresize._f62_62 (<{controlresize._if;95;35_59}> hasPos_5_1 itemPos_5_3 originShifted_1) hasPos_5_1 itemPos_5_3) (windowhandle.WItemHandle itemH_1_0)) (False -> let _x_5_0 = commondef.cselect StdControlAttribute.isControlPos StdMisc.undef w_2_6, hasPos_5_1 = select _x_5_0::_Tuple2 0, resizeAtt_5_2 = select _x_3_0::_Tuple2 1, resizeF_5_3 = StdControlAttribute.getControlResizeFun resizeAtt_5_2, _x_5_4 = controlresize.calcNewWItemSize_7 wMetrics_0 originShifted_1 (controlresize.anon_5 oldWSize_2 newWSize_3 resizeF_5_3) itemH_1_0, posAtt_5_5::B = select _x_5_0::_Tuple2 1, itemPos_5_6 = StdControlAttribute.getControlPosAtt posAtt_5_5 in <{_Tuple2!3}> (controlresize._f67_67 (<{controlresize._if;95;35_64}> hasPos_5_1 itemPos_5_6 originShifted_1) hasPos_5_1 itemPos_5_6 _x_5_4) (windowhandle.WItemHandle (select _x_5_4::_Tuple2 1))) ) ) (windowhandle.WListLSHandle itemHs_1_0 -> let _x_2_0 = controlresize.calcNewControlsSize wMetrics_0 originShifted_1 oldWSize_2 newWSize_3 itemHs_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (windowhandle.WListLSHandle (select _x_2_0::_Tuple2 1))) (windowhandle.WExtendLSHandle wExH_1_0 -> case wExH_1_0 (windowhandle._WExtendLSHandle wExtendLS_2_0 itemHs_2_1 -> let _x_3_0 = controlresize.calcNewControlsSize wMetrics_0 originShifted_1 oldWSize_2 newWSize_3 itemHs_2_1 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (windowhandle.WExtendLSHandle (update wExH_1_0::windowhandle._WExtendLSHandle [1:select _x_3_0::_Tuple2 1]))) ) (windowhandle.WChangeLSHandle wChH_1_0 -> case wChH_1_0 (windowhandle._WChangeLSHandle wChangeLS_2_0 itemHs_2_1 -> let _x_3_0 = controlresize.calcNewControlsSize wMetrics_0 originShifted_1 oldWSize_2 newWSize_3 itemHs_2_1 in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (windowhandle.WChangeLSHandle (update wChH_1_0::windowhandle._WChangeLSHandle [1:select _x_3_0::_Tuple2 1]))) ) 
controlresize.calcNewControlsSize !wMetrics_0 !originShifted_1::B !oldWSize_2 !newWSize_3 !_x_4 = case _x_4 (_predefined._Nil -> <{_Tuple2!3}> False _predefined._Nil) (_predefined._Cons itemH_1_0 itemHs_1_1 -> let _x_2_0 = controlresize.calcNewControlSize_8 wMetrics_0 originShifted_1 oldWSize_2 newWSize_3 itemH_1_0, _x_2_1 = controlresize.calcNewControlsSize wMetrics_0 originShifted_1 oldWSize_2 newWSize_3 itemHs_1_1 in <{_Tuple2!3}> (controlresize._f57_57 (select _x_2_0::_Tuple2 0) _x_2_1) (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) 
<{controlresize._if;209;35_84}>::I !horizontal_0::B !newSize1_1 = case horizontal_0 (True -> select newSize1_1::StdIOBasic._Size 0) (_ -> select newSize1_1::StdIOBasic._Size 1)
<{controlresize._if;208;35_83}> !horizontal_0::B !newSize_1 !wMetrics_2 = case horizontal_0 (True -> let x_2_0::I = select newSize_1::StdIOBasic._Size 0, y_2_1::I = 0 in StdIOBasic._Size (<{controlresize._c;51;16_81}> (<{StdInt.<_17}> x_2_0 y_2_1) y_2_1 x_2_0) (select wMetrics_2::ossystem._OSWindowMetrics 7)) (_ -> let x_1_0::I = select newSize_1::StdIOBasic._Size 1, y_1_1::I = 0 in StdIOBasic._Size (select wMetrics_2::ossystem._OSWindowMetrics 8) (<{controlresize._c;51;16_82}> (<{StdInt.<_17}> x_1_0 y_1_1) y_1_1 x_1_0))
<{controlresize._c;51;16_82}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_81}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_80}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_79}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_78}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_77}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_76}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_75}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_74}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_73}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_72}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_71}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
controlresize._f70_70::B !originShifted_0::B newOrigin_1 origin_2 = case originShifted_0 (True -> True) (_ -> StdBool.not (<{StdIOBasic.==_18}> newOrigin_1 origin_2))
<{controlresize._c;51;16_69}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
<{controlresize._c;51;16_68}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
controlresize._f67_67::B !_x_0::B hasPos_1::B itemPos_2 _x_3 = case _x_0 (True -> True) (_ -> case (<{controlresize._if;106;35_66}> hasPos_1 itemPos_2) (True -> True) (False -> select _x_3::_Tuple2 0) )
<{controlresize._if;106;35_66}>::B !hasPos_0::B itemPos_1 = case hasPos_0 (True -> <{controlresize._c;107;38_65}> (select itemPos_1::_Tuple2 1)) (_ -> False)
<{controlresize._c;107;38_65}>::B !_x_0 = case _x_0 (StdIOCommon.OffsetFun _x_1_0 _x_1_1 -> True) (_ -> False)
<{controlresize._if;95;35_64}>::B !hasPos_0::B itemPos_1 originShifted_2::B = case hasPos_0 (True -> <{controlresize._c;96;38_63}> (select itemPos_1::_Tuple2 0) originShifted_2) (_ -> False)
<{controlresize._c;96;38_63}>::B !_x_0 originShifted_1::B = case _x_0 (StdIOCommon.LeftBottom -> True) (StdIOCommon.RightTop -> True) (StdIOCommon.RightBottom -> True) (StdIOCommon.Center -> True) (StdIOCommon.Right -> True) (StdIOCommon.Fix -> originShifted_1) (_ -> False)
controlresize._f62_62::B !_x_0::B hasPos_1::B itemPos_2 = case _x_0 (True -> True) (_ -> <{controlresize._if;106;35_61}> hasPos_1 itemPos_2)
<{controlresize._if;106;35_61}>::B !hasPos_0::B itemPos_1 = case hasPos_0 (True -> <{controlresize._c;107;38_60}> (select itemPos_1::_Tuple2 1)) (_ -> False)
<{controlresize._c;107;38_60}>::B !_x_0 = case _x_0 (StdIOCommon.OffsetFun _x_1_0 _x_1_1 -> True) (_ -> False)
<{controlresize._if;95;35_59}>::B !hasPos_0::B itemPos_1 originShifted_2::B = case hasPos_0 (True -> <{controlresize._c;96;38_58}> (select itemPos_1::_Tuple2 0) originShifted_2) (_ -> False)
<{controlresize._c;96;38_58}>::B !_x_0 originShifted_1::B = case _x_0 (StdIOCommon.LeftBottom -> True) (StdIOCommon.RightTop -> True) (StdIOCommon.RightBottom -> True) (StdIOCommon.Center -> True) (StdIOCommon.Right -> True) (StdIOCommon.Fix -> originShifted_1) (_ -> False)
controlresize._f57_57::B !_x_0::B _x_1 = case _x_0 (True -> True) (_ -> select _x_1::_Tuple2 0)
controlresize.resizeControls !wMetrics_0 !isActive_1::B !updateAll_2::B !wids_3 !oldOrigin_4 !oldWSize_5 !newWSize_6 !wH_7 !tb_8::I = case wids_3 (windowhandle._WIDS w_1_0 wPtr_1_1 wActive_1_2 -> case wH_7 (windowhandle._WindowHandle whMode_2_0 whKind_2_1 whTitle_2_2 wh_2_3 whKeyFocus_2_4 whWindow_2_5 old_2_6 whShow_2_7 whSelect_2_8 whAtts_2_9 whDefault_2_10 whCancel_2_11 whSize_2_12 whClosing_2_13 -> let window_3_0 = windowaccess.getWindowInfoWindowData whWindow_2_5, _x_3_1 = _Tuple3 (select window_3_0::windowhandle._WindowData 1) (select window_3_0::windowhandle._WindowData 0) (select window_3_0::windowhandle._WindowData 4), newOrigin_3_2 = select _x_3_1::_Tuple3 0, originShifted_3_3::B = StdBool.not (<{StdIOBasic.==_18}> oldOrigin_4 newOrigin_3_2), _x_3_4 = <{wstate.getWElementHandles`}> wPtr_1_1 old_2_6 tb_8, old_3_5 = select _x_3_4::_Tuple3 1, _x_3_6 = controlresize.calcNewControlsSize wMetrics_0 originShifted_3_3 oldWSize_5 newWSize_6 old_3_5 in case (case (StdBool.not (select _x_3_6::_Tuple2 0)) (True -> case (StdBool.not (<{StdInt.<_17}> (select oldWSize_5::StdIOBasic._Size 0) (select newWSize_6::StdIOBasic._Size 0))) (True -> StdBool.not (<{StdInt.<_17}> (select oldWSize_5::StdIOBasic._Size 1) (select newWSize_6::StdIOBasic._Size 1))) (False -> False) ) (False -> False) ) (True -> case (case (select (select _x_3_1::_Tuple3 2)::windowhandle._LookInfo 2) (True -> StdBool.not updateAll_2) (False -> False) ) (True -> let _x_6_0 = windowclipstate.forceValidWindowClipState wMetrics_0 True wPtr_1_1 (update wH_7::windowhandle._WindowHandle [6:select _x_3_6::_Tuple2 1]) (select _x_3_4::_Tuple3 2) in <{_Tuple2!3}> (select _x_6_0::_Tuple2 0) (select _x_6_0::_Tuple2 1)) (False -> let newFrame_6_0 = commondef.posSizeToRectangle newOrigin_3_2 newWSize_6, _x_6_1 = windowclipstate.forceValidWindowClipState wMetrics_0 True wPtr_1_1 (update wH_7::windowhandle._WindowHandle [6:select _x_3_6::_Tuple2 1]) (select _x_3_4::_Tuple3 2) in windowdraw.drawwindowlook wMetrics_0 wPtr_1_1 StdFunc.id (StdIOCommon._UpdateState (commondef.posSizeToRectangle oldOrigin_4 oldWSize_5) newFrame_6_0 (_predefined._Cons newFrame_6_0 _predefined._Nil)) (select _x_6_1::_Tuple2 0) (select _x_6_1::_Tuple2 1)) ) (False -> let newFrame_5_0::I = commondef.posSizeToRectangle newOrigin_3_2 newWSize_6, wKind_5_1::I = select wH_7::windowhandle._WindowHandle 1, _x_5_2 = oswindow.osMinWindowSize, _x_5_3::I = controllayout.layoutControls wMetrics_0 (windowaccess.getWindowHMargins wKind_5_1 wMetrics_0 whAtts_2_9) (windowaccess.getWindowVMargins wKind_5_1 wMetrics_0 whAtts_2_9) (windowaccess.getWindowItemSpaces wKind_5_1 wMetrics_0 whAtts_2_9) newWSize_6 (StdIOBasic._Size (select _x_5_2::_Tuple2 0) (select _x_5_2::_Tuple2 1)) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle (select _x_3_1::_Tuple3 1)) newOrigin_3_2) _predefined._Nil) (select _x_3_6::_Tuple2 1) (select _x_3_4::_Tuple3 2), _x_5_4::I = windowclipstate.forceValidWindowClipState wMetrics_0 True wPtr_1_1 (update wH_7::windowhandle._WindowHandle [6:select _x_5_3::_Tuple3 1]) (select _x_5_3::_Tuple3 2), wH_5_5 = select _x_5_4::_Tuple2 0, _x_5_6 = controlrelayout.relayoutControls wMetrics_0 wPtr_1_1 whDefault_2_10 False whSelect_2_8 whShow_2_7 (_Tuple4 (commondef.sizeToRect oldWSize_5) StdIOBasic.zero_21 StdIOBasic.zero_11 (select _x_3_4::_Tuple3 0)) (_Tuple4 (commondef.sizeToRect newWSize_6) StdIOBasic.zero_21 StdIOBasic.zero_11 (select wH_5_5::windowhandle._WindowHandle 6)) (select _x_5_4::_Tuple2 1), _x_5_7 = windowupdate.updatewindowbackgrounds wMetrics_0 (select _x_5_6::_Tuple3 0) wids_3 (update wH_5_5::windowhandle._WindowHandle [6:select _x_5_6::_Tuple3 1]) (select _x_5_6::_Tuple3 2), _x_5_8 = commondef.toTuple_72 newWSize_6, newh_5_9 = select _x_5_8::_Tuple2 1, neww_5_10 = select _x_5_8::_Tuple2 0, _x_5_11 = commondef.toTuple_72 oldWSize_5, oldh_5_12 = select _x_5_11::_Tuple2 1, oldw_5_13 = select _x_5_11::_Tuple2 0 in windowdraw.drawwindowlook wMetrics_0 wPtr_1_1 StdFunc.id (StdIOCommon._UpdateState (commondef.posSizeToRectangle oldOrigin_4 oldWSize_5) newFrame_5_0 (<{controlresize._if;48;35_89}> (controlresize._f85_85 (select (select _x_3_1::_Tuple3 2)::windowhandle._LookInfo 2) originShifted_3_3 oldw_5_13 neww_5_10 oldh_5_12 newh_5_9 isActive_1 updateAll_2) oldOrigin_4 oldw_5_13 neww_5_10 oldh_5_12 newh_5_9 newFrame_5_0)) (select _x_5_7::_Tuple2 0) (select _x_5_7::_Tuple2 1)) ) ) 
<{controlresize._if;48;35_89}> !_x_0::B oldOrigin_1 oldw_2::I neww_3::I oldh_4::I newh_5::I newFrame_6 = case _x_0 (True -> let y_2_0::I = select oldOrigin_1::StdIOBasic._Point2 1, x_2_1::I = select oldOrigin_1::StdIOBasic._Point2 0 in <{StdList.++}> (<{controlresize._if;49;42_87}> (<{StdInt.<_17}> oldw_2 neww_3) oldOrigin_1 x_2_1 oldw_2 neww_3 y_2_0 oldh_4 newh_5) (<{controlresize._if;50;42_88}> (<{StdInt.<_17}> oldh_4 newh_5) oldOrigin_1 y_2_0 oldh_4 x_2_1 neww_3 newh_5)) (_ -> _predefined._Cons newFrame_6 _predefined._Nil)
<{controlresize._if;50;42_88}> !_x_0::B oldOrigin_1 y_2::I oldh_3::I x_4::I neww_5::I newh_6::I = case _x_0 (True -> _predefined._Cons (StdIOBasic._Rectangle (update oldOrigin_1::StdIOBasic._Point2 [1:<{StdInt.+_6}> y_2 oldh_3]) (StdIOBasic._Point2 (<{StdInt.+_6}> x_4 neww_5) (<{StdInt.+_6}> y_2 newh_6))) _predefined._Nil) (_ -> _predefined._Nil)
<{controlresize._if;49;42_87}> !_x_0::B oldOrigin_1 x_2::I oldw_3::I neww_4::I y_5::I oldh_6::I newh_7::I = case _x_0 (True -> _predefined._Cons (StdIOBasic._Rectangle (update oldOrigin_1::StdIOBasic._Point2 [0:<{StdInt.+_6}> x_2 oldw_3]) (StdIOBasic._Point2 (<{StdInt.+_6}> x_2 neww_4) (<{StdInt.+_6}> y_5 (<{controlresize._c;48;16_86}> (<{StdInt.<_17}> oldh_6 newh_7) oldh_6 newh_7)))) _predefined._Nil) (_ -> _predefined._Nil)
<{controlresize._c;48;16_86}>::I !_x_0::B oldh_1::I newh_2::I = case _x_0 (True -> oldh_1) (_ -> newh_2)
controlresize._f85_85::B !_x_0::B originShifted_1::B oldw_2::I neww_3::I oldh_4::I newh_5::I isActive_6::B updateAll_7::B = case _x_0 (True -> case (StdBool.not originShifted_1) (True -> case (case (<{StdInt.<_17}> oldw_2 neww_3) (True -> True) (False -> <{StdInt.<_17}> oldh_4 newh_5) ) (True -> case isActive_6 (True -> StdBool.not updateAll_7) (False -> False) ) (False -> False) ) (False -> False) ) (_ -> False)
controlresize.anon_9::B !<{cAtt`_0}> = <{controlresize._c;238;47_90}> <{cAtt`_0}>
<{controlresize._c;238;47_90}>::B !<{cAtt`_0}> = case <{cAtt`_0}> (<{wstate.ControlViewSize`}> _x_1_0 -> True) (_ -> False)
<{controlresize.replaceSizeAtt`}> !size_0 !atts_1 = let sizeAtt_1_0 = <{wstate.ControlViewSize`}> size_0, _x_1_1 = commondef.creplace controlresize.anon_9 sizeAtt_1_0 atts_1 in case (select _x_1_1::_Tuple2 0) (True -> select _x_1_1::_Tuple2 1) (False -> <{StdList.++}> (select _x_1_1::_Tuple2 1) (_predefined._Cons sizeAtt_1_0 _predefined._Nil)) 
<{controlresize.replaceControlSize`_10}> !wMetrics_0 !control_1 !newCSize_2 !_x_3 = case _x_3 (<{wstate.WItemHandle`}> itemH_1_0 -> case itemH_1_0 (<{wstate._WItemHandle`}> w_2_0 w_2_1 w_2_2 w_2_3 w_2_4 w_2_5 w_2_6 w_2_7 w_2_8 w_2_9 w_2_10 w_2_11 w_2_12 -> case (case (StdBool.not (windowaccess.identifyMaybeId control_1 w_2_0)) (True -> True) (False -> StdBool.not (<{controlresize._c;302;31_91}> w_2_2)) ) (True -> case (StdBool.not (windowhandle.isRecursiveControl w_2_2)) (True -> <{_Tuple2!3}> False (<{wstate.WItemHandle`}> itemH_1_0)) (False -> let _x_5_0 = controlresize.replaceControlSize_11 wMetrics_0 control_1 newCSize_2 (select itemH_1_0::<{wstate._WItemHandle`}> 7) in <{_Tuple2!3}> (select _x_5_0::_Tuple2 0) (<{wstate.WItemHandle`}> (update itemH_1_0::<{wstate._WItemHandle`}> [7:select _x_5_0::_Tuple2 1]))) ) (False -> <{_Tuple2!3}> True (<{wstate.WItemHandle`}> (update itemH_1_0::<{wstate._WItemHandle`}> [6:<{controlresize.replaceSizeAtt`}> newCSize_2 w_2_6,10:newCSize_2]))) ) ) (<{wstate.WRecursiveHandle`}> itemHs_1_0 wKind_1_1 -> let _x_2_0 = controlresize.replaceControlSize_11 wMetrics_0 control_1 newCSize_2 itemHs_1_0 in <{_Tuple2!3}> (select _x_2_0::_Tuple2 0) (<{wstate.WRecursiveHandle`}> (select _x_2_0::_Tuple2 1) wKind_1_1)) 
controlresize.replaceControlSize_11 !wMetrics_0 !control_1 !newCSize_2 !_x_3 = case _x_3 (_predefined._Nil -> <{_Tuple2!3}> False _predefined._Nil) (_predefined._Cons itemH_1_0 itemHs_1_1 -> let _x_2_0::B = <{controlresize.replaceControlSize`_10}> wMetrics_0 control_1 newCSize_2 itemH_1_0, done_2_1 = select _x_2_0::_Tuple2 0 in case done_2_1 (True -> <{_Tuple2!3}> done_2_1 (_predefined._Cons (select _x_2_0::_Tuple2 1) itemHs_1_1)) (False -> let _x_4_0 = controlresize.replaceControlSize_11 wMetrics_0 control_1 newCSize_2 itemHs_1_1 in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_4_0::_Tuple2 1))) ) 
<{controlresize._c;302;31_91}>::B !w_0 = case w_0 (windowhandle.IsCompoundControl -> True) (windowhandle.IsCustomButtonControl -> True) (windowhandle.IsCustomControl -> True) (windowhandle.IsLayoutControl -> True) (_ -> False)
controlresize.resizeControl !wMetrics_0 !updateAll_1::B !wids_2 !control_3 !newCSize_4 !wH_5 !tb_6::I = case wids_2 (windowhandle._WIDS w_1_0 wPtr_1_1 wActive_1_2 -> case wH_5 (<{wstate._WindowHandle`}> whMode`_2_0 whKind`_2_1 whTitle`_2_2 wh_2_3 whKeyFocus`_2_4 whWindow_2_5 old_2_6 whShow`_2_7 whSelect`_2_8 whAtts`_2_9 whDefault_2_10 whCancel_2_11 whSize`_2_12 whClosing`_2_13 -> let _x_3_0 = controlresize.replaceControlSize_11 wMetrics_0 control_3 newCSize_4 old_2_6 in case (StdBool.not (select _x_3_0::_Tuple2 0)) (True -> <{_Tuple2!3}> (update wH_5::<{wstate._WindowHandle`}> [6:select _x_3_0::_Tuple2 1]) tb_6) (False -> let window_5_0 = windowaccess.getWindowInfoWindowData whWindow_2_5, _x_5_1 = _Tuple5 (select window_5_0::windowhandle._WindowData 1) (select window_5_0::windowhandle._WindowData 0) (select window_5_0::windowhandle._WindowData 4) (Data.Maybe.isJust (select window_5_0::windowhandle._WindowData 2)) (Data.Maybe.isJust (select window_5_0::windowhandle._WindowData 3)), origin_5_2 = select _x_5_1::_Tuple5 0, wSize_5_3 = select wH_5::<{wstate._WindowHandle`}> 12, wFrame_5_4 = commondef.posSizeToRectangle origin_5_2 wSize_5_3, wKind_5_5 = select wH_5::<{wstate._WindowHandle`}> 1, _x_5_6 = oswindow.osMinWindowSize, _x_5_7 = <{controllayout.layoutControls`}> wMetrics_0 (<{wstateaccess.getWindowHMargins`}> wKind_5_5 wMetrics_0 <{whAtts`_2_9}>) (<{wstateaccess.getWindowVMargins`}> wKind_5_5 wMetrics_0 <{whAtts`_2_9}>) (<{wstateaccess.getWindowItemSpaces`}> wKind_5_5 wMetrics_0 <{whAtts`_2_9}>) wSize_5_3 (StdIOBasic._Size (select _x_5_6::_Tuple2 0) (select _x_5_6::_Tuple2 1)) (_predefined._Cons (_Tuple2 (commondef.rectToRectangle (select _x_5_1::_Tuple5 1)) origin_5_2) _predefined._Nil) (select _x_3_0::_Tuple2 1) tb_6, _x_5_8 = <{windowclipstate.forceValidWindowClipState`}> wMetrics_0 True wPtr_1_1 (update wH_5::<{wstate._WindowHandle`}> [6:select _x_5_7::_Tuple3 1]) (select _x_5_7::_Tuple3 2), wH_5_9 = select _x_5_8::_Tuple2 0, _x_5_10 = <{controlrelayout.relayoutControls`}> wMetrics_0 wPtr_1_1 whDefault_2_10 False <{whSelect`_2_8}> <{whShow`_2_7}> (_Tuple4 (commondef.sizeToRect wSize_5_3) StdIOBasic.zero_21 StdIOBasic.zero_11 old_2_6) (_Tuple4 (commondef.sizeToRect wSize_5_3) StdIOBasic.zero_21 StdIOBasic.zero_11 (select wH_5_9::<{wstate._WindowHandle`}> 6)) (select _x_5_8::_Tuple2 1), _x_5_11 = <{windowupdate.updatewindowbackgrounds`}> wMetrics_0 (select _x_5_10::_Tuple2 0) wids_2 wH_5_9 (select _x_5_10::_Tuple2 1) in <{windowdraw.drawwindow`look}> wMetrics_0 wPtr_1_1 StdFunc.id (StdIOCommon._UpdateState wFrame_5_4 wFrame_5_4 (_predefined._Cons wFrame_5_4 _predefined._Nil)) (select _x_5_11::_Tuple2 0) (select _x_5_11::_Tuple2 1)) ) ) 


|| Converted Records
:: <{controlresize.gEq_s;}> = {!controlresize.gEq_s}

:: <{controlresize.gEq_ss;}> = {!controlresize.gEq_ss}

:: <{controlresize.gEq_sss;}> = {!controlresize.gEq_sss}

:: <{controlresize.gEq_ssss;}> = {!controlresize.gEq_ssss}

:: <{controlresize.gEq_sssss;}> = {!controlresize.gEq_sssss}

:: <{controlresize.gEq_ssssss;}> = {!controlresize.gEq_ssssss}

:: <{controlresize.gEq_sssssss;}> = {!controlresize.gEq_sssssss}

:: <{controlresize.gEq_ssssssss;}> = {!controlresize.gEq_ssssssss}

:: <{controlresize.gEq_sssssssss;}> = {!controlresize.gEq_sssssssss}

:: <{controlresize.bimap_s;}> = {controlresize.bimap_s}

:: <{controlresize.bimap_ss;}> = {controlresize.bimap_ss}

:: <{controlresize.bimap_sss;}> = {controlresize.bimap_sss}

