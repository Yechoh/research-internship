|| ?module? wstate


wstate.fst_67 !tuple_0 = select tuple_0::_Tuple2 0
<{wstate.getRadioInfo`_31}> !_x_0 = case _x_0 (windowhandle._RadioItemInfo _x_1_0 radio_1_1 radio_1_2 radio_1_3 -> case _x_1_0 (_Tuple3 text_2_0 width_2_1 _x_2_2 -> <{wstate._RadioItemInfo`}> (_Tuple2 text_2_0 width_2_1) radio_1_1 radio_1_2 radio_1_3) ) 
<{wstate.getCheckInfo`_32}> !_x_0 = case _x_0 (windowhandle._CheckItemInfo _x_1_0 check_1_1 check_1_2 check_1_3 -> case _x_1_0 (_Tuple4 text_2_0 width_2_1 mark_2_2 _x_2_3 -> <{wstate._CheckItemInfo`}> (_Tuple3 text_2_0 width_2_1 mark_2_2) check_1_1 check_1_2 check_1_3) ) 
<{wstate.getPopUpInfoEdit`_33}> wPtr_0::I !_x_1 !tb_2::I = case _x_1 (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing tb_2) (Data.Maybe.Just info_1_0 -> case info_1_0 (windowhandle._PopUpEditInfo popUpEditText_2_0 popUpEditPtr_2_1 -> let _x_3_0 = oswindow.osGetPopUpControlText wPtr_0 popUpEditPtr_2_1 tb_2 in <{_Tuple2!3}> (Data.Maybe.Just (update info_1_0::windowhandle._PopUpEditInfo [0:select _x_3_0::_Tuple2 0])) (select _x_3_0::_Tuple2 1)) ) 
<{wstate.getWItemInfo`_35}> !wPtr_0::I !itemPtr_1::I !info_2 !tb_3::I = case info_2 (windowhandle.RadioInfo _x_1_0 -> case _x_1_0 (windowhandle._RadioInfo radio_2_0 radioLayout_2_1 radio_2_2 -> <{_Tuple3!7}> (<{wstate.RadioInfo`}> (<{wstate._RadioInfo`}> (StdList.map <{wstate.getRadioInfo`_31}> radio_2_0) radioLayout_2_1 radio_2_2)) info_2 tb_3) ) (windowhandle.CheckInfo _x_1_0 -> case _x_1_0 (windowhandle._CheckInfo check_2_0 checkLayout_2_1 -> <{_Tuple3!7}> (<{wstate.CheckInfo`}> (<{wstate._CheckInfo`}> (StdList.map <{wstate.getCheckInfo`_32}> check_2_0) checkLayout_2_1)) info_2 tb_3) ) (windowhandle.PopUpInfo _x_1_0 -> case _x_1_0 (windowhandle._PopUpInfo popUp_2_0 popUp_2_1 popUp_2_2 -> let _x_3_0 = <{wstate.getPopUpInfoEdit`_33}> wPtr_0 popUp_2_2 tb_3 in <{_Tuple3!7}> (<{wstate.PopUpInfo`}> (<{wstate._PopUpInfo`}> (StdList.map wstate.fst_67 popUp_2_0) popUp_2_1 (select _x_3_0::_Tuple2 0))) info_2 (select _x_3_0::_Tuple2 1)) ) (windowhandle.SliderInfo _x_1_0 -> case _x_1_0 (windowhandle._SliderInfo slider_2_0 slider_2_1 slider_2_2 slider_2_3 -> <{_Tuple3!7}> (<{wstate.SliderInfo`}> (<{wstate._SliderInfo`}> slider_2_0 slider_2_1 slider_2_2)) info_2 tb_3) ) (windowhandle.TextInfo text_1_0 -> <{_Tuple3!7}> (<{wstate.TextInfo`}> text_1_0) info_2 tb_3) (windowhandle.EditInfo edit_1_0 -> let !edit_2_0 = update edit_1_0::windowhandle._EditInfo [0:select _x_2_1::_Tuple2 0], _x_2_1 = oswindow.osGetEditControlText wPtr_0 itemPtr_1 tb_3 in <{_Tuple3!7}> (<{wstate.EditInfo`}> edit_2_0) info_2 (select _x_2_1::_Tuple2 1)) (windowhandle.ButtonInfo button_1_0 -> <{_Tuple3!7}> (<{wstate.ButtonInfo`}> button_1_0) info_2 tb_3) (windowhandle.CustomButtonInfo customButton_1_0 -> <{_Tuple3!7}> (<{wstate.CustomButtonInfo`}> customButton_1_0) info_2 tb_3) (windowhandle.CustomInfo custom_1_0 -> <{_Tuple3!7}> (<{wstate.CustomInfo`}> custom_1_0) info_2 tb_3) (windowhandle.CompoundInfo compound_1_0 -> <{_Tuple3!7}> (<{wstate.CompoundInfo`}> compound_1_0) info_2 tb_3) (windowhandle.ReceiverInfo _x_1_0 -> <{_Tuple3!7}> <{wstate.NoWItemInfo`}> info_2 tb_3) (windowhandle.NoWItemInfo -> <{_Tuple3!7}> <{wstate.NoWItemInfo`}> info_2 tb_3) 
<{wstate.getWItemAtt`_34}> !_x_0 = case _x_0 (StdControlDef.ControlActivate _x_1_0 -> <{wstate.ControlActivate`}>) (StdControlDef.ControlDeactivate _x_1_0 -> <{wstate.ControlDeactivate`}>) (StdControlDef.ControlFunction _x_1_0 -> <{wstate.ControlFunction`}>) (StdControlDef.ControlHide -> <{wstate.ControlHide`}>) (StdControlDef.ControlHMargin l_1_0 r_1_1 -> <{wstate.ControlHMargin`}> l_1_0 r_1_1) (StdControlDef.ControlHScroll f_1_0 -> <{wstate.ControlHScroll`}> f_1_0) (StdControlDef.ControlId id_1_0 -> <{wstate.ControlId`}> id_1_0) (StdControlDef.ControlItemSpace h_1_0 v_1_1 -> <{wstate.ControlItemSpace`}> h_1_0 v_1_1) (StdControlDef.ControlKeyboard _x_1_0 select_1_1 _x_1_2 -> <{wstate.ControlKeyboard`}> select_1_1) (StdControlDef.ControlLook sysLook_1_0 look_1_1 -> <{wstate.ControlLook`}> sysLook_1_0 look_1_1) (StdControlDef.ControlMinimumSize size_1_0 -> <{wstate.ControlMinimumSize`}> size_1_0) (StdControlDef.ControlModsFunction _x_1_0 -> <{wstate.ControlModsFunction`}>) (StdControlDef.ControlMouse _x_1_0 select_1_1 _x_1_2 -> <{wstate.ControlMouse`}> select_1_1) (StdControlDef.ControlOrigin origin_1_0 -> <{wstate.ControlOrigin`}> origin_1_0) (StdControlDef.ControlOuterSize size_1_0 -> <{wstate.ControlOuterSize`}> size_1_0) (StdControlDef.ControlPen pen_1_0 -> <{wstate.ControlPen`}> pen_1_0) (StdControlDef.ControlPos pos_1_0 -> <{wstate.ControlPos`}> pos_1_0) (StdControlDef.ControlResize f_1_0 -> <{wstate.ControlResize`}> f_1_0) (StdControlDef.ControlSelectState select_1_0 -> <{wstate.ControlSelectState`}> select_1_0) (StdControlDef.ControlTip tip_1_0 -> <{wstate.ControlTip`}> tip_1_0) (StdControlDef.ControlViewDomain domain_1_0 -> <{wstate.ControlViewDomain`}> domain_1_0) (StdControlDef.ControlViewSize size_1_0 -> <{wstate.ControlViewSize`}> size_1_0) (StdControlDef.ControlVMargin t_1_0 b_1_1 -> <{wstate.ControlVMargin`}> t_1_0 b_1_1) (StdControlDef.ControlVScroll f_1_0 -> <{wstate.ControlVScroll`}> f_1_0) (StdControlDef.ControlWidth width_1_0 -> <{wstate.ControlWidth`}> width_1_0) 
<{wstate.getWItemHandle`}> !wPtr_0::I !itemH_1 !tb_2::I = case itemH_1 (windowhandle._WItemHandle w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> let !_x_2_0 = <{wstate.getWElementHandles`}> wPtr_0 w_1_7 tb_2, !_x_2_1 = <{wstate.getWItemInfo`_35}> wPtr_0 w_1_11 w_1_5 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 (select _x_2_1::_Tuple3 0) (StdList.map <{wstate.getWItemAtt`_34}> w_1_6) (select _x_2_0::_Tuple3 0) w_1_8 w_1_9 w_1_10 w_1_11 w_1_12) (update itemH_1::windowhandle._WItemHandle [5:select _x_2_1::_Tuple3 1,7:select _x_2_0::_Tuple3 1]) (select _x_2_1::_Tuple3 2)) 
<{wstate.getWElementHandle`_30}> !wPtr_0::I !_x_1 !tb_2::I = case _x_1 (windowhandle.WItemHandle itemH_1_0 -> let !_x_2_0 = <{wstate.getWItemHandle`}> wPtr_0 itemH_1_0 tb_2 in <{_Tuple3!7}> (<{wstate.WItemHandle`}> (select _x_2_0::_Tuple3 0)) (windowhandle.WItemHandle (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (windowhandle.WListLSHandle itemHs_1_0 -> let !_x_2_0 = <{wstate.getWElementHandles`}> wPtr_0 itemHs_1_0 tb_2 in <{_Tuple3!7}> (<{wstate.WRecursiveHandle`}> (select _x_2_0::_Tuple3 0) wstate.IsWListLSHandle) (windowhandle.WListLSHandle (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (windowhandle.WExtendLSHandle exH_1_0 -> case exH_1_0 (windowhandle._WExtendLSHandle wExtendLS_2_0 itemHs_2_1 -> let !_x_3_0 = <{wstate.getWElementHandles`}> wPtr_0 itemHs_2_1 tb_2 in <{_Tuple3!7}> (<{wstate.WRecursiveHandle`}> (select _x_3_0::_Tuple3 0) wstate.IsWExtendLSHandle) (windowhandle.WExtendLSHandle (update exH_1_0::windowhandle._WExtendLSHandle [1:select _x_3_0::_Tuple3 1])) (select _x_3_0::_Tuple3 2)) ) (windowhandle.WChangeLSHandle chH_1_0 -> case chH_1_0 (windowhandle._WChangeLSHandle wChangeLS_2_0 itemHs_2_1 -> let !_x_3_0 = <{wstate.getWElementHandles`}> wPtr_0 itemHs_2_1 tb_2 in <{_Tuple3!7}> (<{wstate.WRecursiveHandle`}> (select _x_3_0::_Tuple3 0) wstate.IsWChangeLSHandle) (windowhandle.WChangeLSHandle (update chH_1_0::windowhandle._WChangeLSHandle [1:select _x_3_0::_Tuple3 1])) (select _x_3_0::_Tuple3 2)) ) 
<{wstate.getWElementHandles`}> !wPtr_0::I !_x_1 !tb_2::I = case _x_1 (_predefined._Cons itemH_1_0 itemHs_1_1 -> let !_x_2_0 = <{wstate.getWElementHandle`_30}> wPtr_0 itemH_1_0 tb_2, !_x_2_1 = <{wstate.getWElementHandles`}> wPtr_0 itemHs_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (_predefined._Cons (select _x_2_0::_Tuple3 0) (select _x_2_1::_Tuple3 0)) (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) (_ -> <{_Tuple3!7}> _predefined._Nil _predefined._Nil tb_2)
wstate.getWAtt_29 !_x_0 = case _x_0 (StdWindowDef.WindowActivate _x_1_0 -> <{wstate.WindowActivate`}>) (StdWindowDef.WindowCancel id_1_0 -> <{wstate.WindowCancel`}> id_1_0) (StdWindowDef.WindowClose _x_1_0 -> <{wstate.WindowClose`}>) (StdWindowDef.WindowCursor shape_1_0 -> <{wstate.WindowCursor`}> shape_1_0) (StdWindowDef.WindowDeactivate _x_1_0 -> <{wstate.WindowDeactivate`}>) (StdWindowDef.WindowHMargin l_1_0 r_1_1 -> <{wstate.WindowHMargin`}> l_1_0 r_1_1) (StdWindowDef.WindowHScroll f_1_0 -> <{wstate.WindowHScroll`}> f_1_0) (StdWindowDef.WindowId id_1_0 -> <{wstate.WindowId`}> id_1_0) (StdWindowDef.WindowIndex index_1_0 -> <{wstate.WindowIndex`}> index_1_0) (StdWindowDef.WindowInit _x_1_0 -> <{wstate.WindowInit`}>) (StdWindowDef.WindowInitActive id_1_0 -> <{wstate.WindowInitActive`}> id_1_0) (StdWindowDef.WindowItemSpace h_1_0 v_1_1 -> <{wstate.WindowItemSpace`}> h_1_0 v_1_1) (StdWindowDef.WindowKeyboard _x_1_0 select_1_1 _x_1_2 -> <{wstate.WindowKeyboard`}> select_1_1) (StdWindowDef.WindowLook sysLook_1_0 look_1_1 -> <{wstate.WindowLook`}> sysLook_1_0 look_1_1) (StdWindowDef.WindowMouse _x_1_0 select_1_1 _x_1_2 -> <{wstate.WindowMouse`}> select_1_1) (StdWindowDef.WindowOk id_1_0 -> <{wstate.WindowOk`}> id_1_0) (StdWindowDef.WindowOrigin origin_1_0 -> <{wstate.WindowOrigin`}> origin_1_0) (StdWindowDef.WindowOuterSize size_1_0 -> <{wstate.WindowOuterSize`}> size_1_0) (StdWindowDef.WindowPen pen_1_0 -> <{wstate.WindowPen`}> pen_1_0) (StdWindowDef.WindowPos pos_1_0 -> <{wstate.WindowPos`}> pos_1_0) (StdWindowDef.WindowSelectState select_1_0 -> <{wstate.WindowSelectState`}> select_1_0) (StdWindowDef.WindowViewDomain domain_1_0 -> <{wstate.WindowViewDomain`}> domain_1_0) (StdWindowDef.WindowViewSize size_1_0 -> <{wstate.WindowViewSize`}> size_1_0) (StdWindowDef.WindowVMargin t_1_0 b_1_1 -> <{wstate.WindowVMargin`}> t_1_0 b_1_1) (StdWindowDef.WindowVScroll f_1_0 -> <{wstate.WindowVScroll`}> f_1_0) 
<{wstate.getWindowHandle`}> !wPtr_0::I !wH_1 !tb_2::I = case wH_1 (windowhandle._WindowHandle whMode_1_0 whKind_1_1 whTitle_1_2 wh_1_3 kf_1_4 whWindow_1_5 items_1_6 whShow_1_7 whSelect_1_8 whAtts_1_9 whDefault_1_10 whCancel_1_11 whSize_1_12 whClosing_1_13 -> let !_x_2_0 = <{wstate.getWElementHandles`}> wPtr_0 items_1_6 tb_2, !_x_2_1 = keyfocus.copyKeyFocus kf_1_4 in <{_Tuple3!7}> (<{wstate._WindowHandle`}> whMode_1_0 whKind_1_1 whTitle_1_2 wh_1_3 (select _x_2_1::_Tuple2 0) whWindow_1_5 (select _x_2_0::_Tuple3 0) whShow_1_7 whSelect_1_8 (StdList.map wstate.getWAtt_29 whAtts_1_9) whDefault_1_10 whCancel_1_11 whSize_1_12 whClosing_1_13) (update wH_1::windowhandle._WindowHandle [4:select _x_2_1::_Tuple2 1,6:select _x_2_0::_Tuple3 1]) (select _x_2_0::_Tuple3 2)) 
wstate.wstateFatalError !rule_0 !error_1 = commondef.fatalError rule_0 "wstate" error_1
<{wstate.retrieveWindowHandle`}> !wsH_0 !tb_1::I = case wsH_0 (windowhandle._WindowStateHandle wsh_1_0 wshHandle_1_1 -> case wsh_1_0 (windowhandle._WIDS w_2_0 wPtr_2_1 wActive_2_2 -> case wshHandle_1_1 (Data.Maybe.Just wlsH_3_0 -> case wlsH_3_0 (windowhandle._WindowLSHandle wlsState_4_0 wH_4_1 -> let _x_5_0 = <{wstate.getWindowHandle`}> wPtr_2_1 wH_4_1 tb_1 in <{_Tuple3!7}> (select _x_5_0::_Tuple3 0) (update wsH_0::windowhandle._WindowStateHandle [1:Data.Maybe.Just (update wlsH_3_0::windowhandle._WindowLSHandle [1:select _x_5_0::_Tuple3 1])]) (select _x_5_0::_Tuple3 2)) ) ) ) (_ -> wstate.wstateFatalError "retrieveWindowHandle`" "unexpected window placeholder argument")
wstate.fst_68 !tuple_0 = select tuple_0::_Tuple2 0
<{wstate.getRadioInfo`_50}> !_x_0 = case _x_0 (windowhandle._RadioItemInfo _x_1_0 radio_1_1 radio_1_2 radio_1_3 -> case _x_1_0 (_Tuple3 text_2_0 width_2_1 _x_2_2 -> <{wstate._RadioItemInfo`}> (_Tuple2 text_2_0 width_2_1) radio_1_1 radio_1_2 radio_1_3) ) 
<{wstate.getCheckInfo`_51}> !_x_0 = case _x_0 (windowhandle._CheckItemInfo _x_1_0 check_1_1 check_1_2 check_1_3 -> case _x_1_0 (_Tuple4 text_2_0 width_2_1 mark_2_2 _x_2_3 -> <{wstate._CheckItemInfo`}> (_Tuple3 text_2_0 width_2_1 mark_2_2) check_1_1 check_1_2 check_1_3) ) 
<{wstate.getPopUpInfoEdit`_52}> wPtr_0::I !_x_1 !tb_2::I = case _x_1 (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing tb_2) (Data.Maybe.Just info_1_0 -> case info_1_0 (windowhandle._PopUpEditInfo popUpEditText_2_0 popUpEditPtr_2_1 -> let _x_3_0 = oswindow.osGetPopUpControlText wPtr_0 popUpEditPtr_2_1 tb_2 in <{_Tuple2!3}> (Data.Maybe.Just (update info_1_0::windowhandle._PopUpEditInfo [0:select _x_3_0::_Tuple2 0])) (select _x_3_0::_Tuple2 1)) ) 
<{wstate.getWItemInfo`_53}> !wPtr_0::I !itemPtr_1::I !info_2 !tb_3::I = case info_2 (windowhandle.RadioInfo _x_1_0 -> case _x_1_0 (windowhandle._RadioInfo radio_2_0 radioLayout_2_1 radio_2_2 -> <{_Tuple3!7}> (<{wstate.RadioInfo`}> (<{wstate._RadioInfo`}> (StdList.map <{wstate.getRadioInfo`_50}> radio_2_0) radioLayout_2_1 radio_2_2)) info_2 tb_3) ) (windowhandle.CheckInfo _x_1_0 -> case _x_1_0 (windowhandle._CheckInfo check_2_0 checkLayout_2_1 -> <{_Tuple3!7}> (<{wstate.CheckInfo`}> (<{wstate._CheckInfo`}> (StdList.map <{wstate.getCheckInfo`_51}> check_2_0) checkLayout_2_1)) info_2 tb_3) ) (windowhandle.PopUpInfo _x_1_0 -> case _x_1_0 (windowhandle._PopUpInfo popUp_2_0 popUp_2_1 popUp_2_2 -> let _x_3_0 = <{wstate.getPopUpInfoEdit`_52}> wPtr_0 popUp_2_2 tb_3 in <{_Tuple3!7}> (<{wstate.PopUpInfo`}> (<{wstate._PopUpInfo`}> (StdList.map wstate.fst_68 popUp_2_0) popUp_2_1 (select _x_3_0::_Tuple2 0))) info_2 (select _x_3_0::_Tuple2 1)) ) (windowhandle.SliderInfo _x_1_0 -> case _x_1_0 (windowhandle._SliderInfo slider_2_0 slider_2_1 slider_2_2 slider_2_3 -> <{_Tuple3!7}> (<{wstate.SliderInfo`}> (<{wstate._SliderInfo`}> slider_2_0 slider_2_1 slider_2_2)) info_2 tb_3) ) (windowhandle.TextInfo text_1_0 -> <{_Tuple3!7}> (<{wstate.TextInfo`}> text_1_0) info_2 tb_3) (windowhandle.EditInfo edit_1_0 -> <{_Tuple3!7}> (<{wstate.EditInfo`}> edit_1_0) info_2 tb_3) (windowhandle.ButtonInfo button_1_0 -> <{_Tuple3!7}> (<{wstate.ButtonInfo`}> button_1_0) info_2 tb_3) (windowhandle.CustomButtonInfo customButton_1_0 -> <{_Tuple3!7}> (<{wstate.CustomButtonInfo`}> customButton_1_0) info_2 tb_3) (windowhandle.CustomInfo custom_1_0 -> <{_Tuple3!7}> (<{wstate.CustomInfo`}> custom_1_0) info_2 tb_3) (windowhandle.CompoundInfo compound_1_0 -> <{_Tuple3!7}> (<{wstate.CompoundInfo`}> compound_1_0) info_2 tb_3) (windowhandle.ReceiverInfo _x_1_0 -> <{_Tuple3!7}> <{wstate.NoWItemInfo`}> info_2 tb_3) (windowhandle.NoWItemInfo -> <{_Tuple3!7}> <{wstate.NoWItemInfo`}> info_2 tb_3) 
wstate.getWItemHandle2_55 !wPtr_0::I !itemH_1 !tb_2::I = case itemH_1 (windowhandle._WItemHandle w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> let !_x_2_0 = wstate.getWElementHandles2_54 wPtr_0 w_1_7 tb_2, !_x_2_1 = <{wstate.getWItemInfo`_53}> wPtr_0 w_1_11 w_1_5 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (wstate._WItemHandle2 w_1_0 w_1_2 w_1_3 (select _x_2_1::_Tuple3 0) (select _x_2_0::_Tuple3 0) w_1_9 w_1_10 w_1_11) (update itemH_1::windowhandle._WItemHandle [5:select _x_2_1::_Tuple3 1,7:select _x_2_0::_Tuple3 1]) (select _x_2_1::_Tuple3 2)) 
wstate.getWElementHandle2_49 !wPtr_0::I !_x_1 !tb_2::I = case _x_1 (windowhandle.WItemHandle itemH_1_0 -> let !_x_2_0 = wstate.getWItemHandle2_55 wPtr_0 itemH_1_0 tb_2 in <{_Tuple3!7}> (wstate.WItemHandle2 (select _x_2_0::_Tuple3 0)) (windowhandle.WItemHandle (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (windowhandle.WListLSHandle itemHs_1_0 -> let !_x_2_0 = wstate.getWElementHandles2_54 wPtr_0 itemHs_1_0 tb_2 in <{_Tuple3!7}> (wstate.WRecursiveHandle2 (select _x_2_0::_Tuple3 0) wstate.IsWListLSHandle) (windowhandle.WListLSHandle (select _x_2_0::_Tuple3 1)) (select _x_2_0::_Tuple3 2)) (windowhandle.WExtendLSHandle exH_1_0 -> case exH_1_0 (windowhandle._WExtendLSHandle wExtendLS_2_0 itemHs_2_1 -> let !_x_3_0 = wstate.getWElementHandles2_54 wPtr_0 itemHs_2_1 tb_2 in <{_Tuple3!7}> (wstate.WRecursiveHandle2 (select _x_3_0::_Tuple3 0) wstate.IsWExtendLSHandle) (windowhandle.WExtendLSHandle (update exH_1_0::windowhandle._WExtendLSHandle [1:select _x_3_0::_Tuple3 1])) (select _x_3_0::_Tuple3 2)) ) (windowhandle.WChangeLSHandle chH_1_0 -> case chH_1_0 (windowhandle._WChangeLSHandle wChangeLS_2_0 itemHs_2_1 -> let !_x_3_0 = wstate.getWElementHandles2_54 wPtr_0 itemHs_2_1 tb_2 in <{_Tuple3!7}> (wstate.WRecursiveHandle2 (select _x_3_0::_Tuple3 0) wstate.IsWChangeLSHandle) (windowhandle.WChangeLSHandle (update chH_1_0::windowhandle._WChangeLSHandle [1:select _x_3_0::_Tuple3 1])) (select _x_3_0::_Tuple3 2)) ) 
wstate.getWElementHandles2_54 !wPtr_0::I !_x_1 !tb_2::I = case _x_1 (_predefined._Cons itemH_1_0 itemHs_1_1 -> let !_x_2_0 = wstate.getWElementHandle2_49 wPtr_0 itemH_1_0 tb_2, !_x_2_1 = wstate.getWElementHandles2_54 wPtr_0 itemHs_1_1 (select _x_2_0::_Tuple3 2) in <{_Tuple3!7}> (_predefined._Cons (select _x_2_0::_Tuple3 0) (select _x_2_1::_Tuple3 0)) (_predefined._Cons (select _x_2_0::_Tuple3 1) (select _x_2_1::_Tuple3 1)) (select _x_2_1::_Tuple3 2)) (_ -> <{_Tuple3!7}> _predefined._Nil _predefined._Nil tb_2)
wstate.getWindowHandle2 !wPtr_0::I !wH_1 !tb_2::I = case wH_1 (windowhandle._WindowHandle whMode_1_0 whKind_1_1 whTitle_1_2 wh_1_3 whKeyFocus_1_4 whWindow_1_5 items_1_6 whShow_1_7 whSelect_1_8 whAtts_1_9 whDefault_1_10 whCancel_1_11 whSize_1_12 whClosing_1_13 -> let !_x_2_0 = wstate.getWElementHandles2_54 wPtr_0 items_1_6 tb_2 in <{_Tuple3!7}> (wstate._WindowHandle2 whWindow_1_5 (select _x_2_0::_Tuple3 0) whSize_1_12) (update wH_1::windowhandle._WindowHandle [6:select _x_2_0::_Tuple3 1]) (select _x_2_0::_Tuple3 2)) 
wstate.retrieveWindowHandle2 !wsH_0 !tb_1::I = case wsH_0 (windowhandle._WindowStateHandle wsh_1_0 wshHandle_1_1 -> case wsh_1_0 (windowhandle._WIDS w_2_0 wPtr_2_1 wActive_2_2 -> case wshHandle_1_1 (Data.Maybe.Just wlsH_3_0 -> case wlsH_3_0 (windowhandle._WindowLSHandle wlsState_4_0 wH_4_1 -> let _x_5_0 = wstate.getWindowHandle2 wPtr_2_1 wH_4_1 tb_1 in <{_Tuple3!7}> (select _x_5_0::_Tuple3 0) (update wsH_0::windowhandle._WindowStateHandle [1:Data.Maybe.Just (update wlsH_3_0::windowhandle._WindowLSHandle [1:select _x_5_0::_Tuple3 1])]) (select _x_5_0::_Tuple3 2)) ) ) ) (_ -> wstate.wstateFatalError "retrieveWindowHandle2" "unexpected window placeholder argument")
wstate.setRadioInfo_41 !_x_0 !info_1 = case _x_0 (<{wstate._RadioItemInfo`}> _x_1_0 radio_1_1 radio_1_2 radio_1_3 -> case _x_1_0 (_Tuple2 item`_2_0 s`_2_1 -> case info_1 (windowhandle._RadioItemInfo radio_3_0 radio_3_1 radio_3_2 radio_3_3 -> case radio_3_0 (_Tuple3 _x_4_0 _x_4_1 f_4_2 -> update info_1::windowhandle._RadioItemInfo [0:_Tuple3 <{item`_2_0}> <{s`_2_1}> f_4_2,1:radio_1_1,2:radio_1_2]) ) ) ) 
wstate.setRadioInfos_42 !_x_0 !_x_1 = case _x_0 (_predefined._Cons info`_1_0 infos`_1_1 -> case _x_1 (_predefined._Cons info_2_0 infos_2_1 -> let !info_3_0 = wstate.setRadioInfo_41 <{info`_1_0}> info_2_0, !infos_3_1 = wstate.setRadioInfos_42 <{infos`_1_1}> infos_2_1 in _predefined._Cons info_3_0 infos_3_1) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle`" "incompatible RadioInfo")
wstate.setCheckInfo_43 !_x_0 !info_1 = case _x_0 (<{wstate._CheckItemInfo`}> _x_1_0 check_1_1 check_1_2 check_1_3 -> case _x_1_0 (_Tuple3 text`_2_0 s`_2_1 mark`_2_2 -> case info_1 (windowhandle._CheckItemInfo check_3_0 check_3_1 check_3_2 check_3_3 -> case check_3_0 (_Tuple4 _x_4_0 _x_4_1 _x_4_2 f_4_3 -> update info_1::windowhandle._CheckItemInfo [0:_Tuple4 <{text`_2_0}> <{s`_2_1}> <{mark`_2_2}> f_4_3,1:check_1_1,2:check_1_2]) ) ) ) 
wstate.setCheckInfos_44 !_x_0 !_x_1 = case _x_0 (_predefined._Cons info`_1_0 infos`_1_1 -> case _x_1 (_predefined._Cons info_2_0 infos_2_1 -> _predefined._Cons (wstate.setCheckInfo_43 <{info`_1_0}> info_2_0) (wstate.setCheckInfos_44 <{infos`_1_1}> infos_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle`" "incompatible CheckInfo")
wstate.setpopuptexts_45 !_x_0 !_x_1 = case _x_0 (_predefined._Cons text_1_0 texts_1_1 -> case _x_1 (_predefined._Cons _x_2_0 items_2_1 -> case _x_2_0 (_Tuple2 _x_3_0 f_3_1 -> _predefined._Cons (_Tuple2 text_1_0 f_3_1) (wstate.setpopuptexts_45 texts_1_1 items_2_1)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle`" "incompatible PopUpInfo")
<{wstate.setWItemInfo`_48}> !_x_0 !_x_1 = case _x_0 (<{wstate.RadioInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._RadioInfo`}> radio_2_0 radioLayout`_2_1 radio_2_2 -> case _x_1 (windowhandle.RadioInfo radio_3_0 -> case radio_3_0 (windowhandle._RadioInfo radio_4_0 radioLayout_4_1 radio_4_2 -> let !radio_5_0 = wstate.setRadioInfos_42 radio_2_0 radio_4_0 in windowhandle.RadioInfo (update radio_3_0::windowhandle._RadioInfo [0:radio_5_0,2:radio_2_2])) ) ) ) (<{wstate.CheckInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._CheckInfo`}> check_2_0 checkLayout`_2_1 -> case _x_1 (windowhandle.CheckInfo check_3_0 -> case check_3_0 (windowhandle._CheckInfo check_4_0 checkLayout_4_1 -> windowhandle.CheckInfo (update check_3_0::windowhandle._CheckInfo [0:wstate.setCheckInfos_44 check_2_0 check_4_0])) ) ) ) (<{wstate.PopUpInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._PopUpInfo`}> texts`_2_0 i_2_1 popUp_2_2 -> case _x_1 (windowhandle.PopUpInfo popup_3_0 -> case popup_3_0 (windowhandle._PopUpInfo items_4_0 popUp_4_1 popUp_4_2 -> windowhandle.PopUpInfo (update popup_3_0::windowhandle._PopUpInfo [0:wstate.setpopuptexts_45 <{texts`_2_0}> items_4_0,1:i_2_1,2:popUp_2_2])) ) ) ) (<{wstate.SliderInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._SliderInfo`}> dir_2_0 length_2_1 state_2_2 -> case _x_1 (windowhandle.SliderInfo slider_3_0 -> windowhandle.SliderInfo (update slider_3_0::windowhandle._SliderInfo [0:dir_2_0,1:length_2_1,2:state_2_2])) ) ) (<{wstate.TextInfo`}> info_1_0 -> case _x_1 (windowhandle.TextInfo _x_2_0 -> windowhandle.TextInfo info_1_0) ) (<{wstate.EditInfo`}> info_1_0 -> case _x_1 (windowhandle.EditInfo _x_2_0 -> windowhandle.EditInfo info_1_0) ) (<{wstate.ButtonInfo`}> info_1_0 -> case _x_1 (windowhandle.ButtonInfo _x_2_0 -> windowhandle.ButtonInfo info_1_0) ) (<{wstate.CustomButtonInfo`}> info_1_0 -> case _x_1 (windowhandle.CustomButtonInfo _x_2_0 -> windowhandle.CustomButtonInfo info_1_0) ) (<{wstate.CustomInfo`}> info_1_0 -> case _x_1 (windowhandle.CustomInfo _x_2_0 -> windowhandle.CustomInfo info_1_0) ) (<{wstate.CompoundInfo`}> info_1_0 -> case _x_1 (windowhandle.CompoundInfo _x_2_0 -> windowhandle.CompoundInfo info_1_0) ) (<{wstate.NoWItemInfo`}> -> _x_1) (_ -> wstate.wstateFatalError "setWindowHandle`" "incompatible WItemInfo")
wstate.toString_65 !_x_0 = case _x_0 (<{wstate.ControlActivate`}> -> "ControlActivate`") (<{wstate.ControlDeactivate`}> -> "ControlDeactivate`") (<{wstate.ControlFunction`}> -> "ControlFunction`") (<{wstate.ControlHide`}> -> "ControlHide`") (<{wstate.ControlHMargin`}> _x_1_0 _x_1_1 -> "ControlHMargin`") (<{wstate.ControlHScroll`}> _x_1_0 -> "ControlHScroll`") (<{wstate.ControlId`}> _x_1_0 -> "ControlId`") (<{wstate.ControlItemSpace`}> _x_1_0 _x_1_1 -> "ControlItemSpace`") (<{wstate.ControlKeyboard`}> _x_1_0 -> "ControlKeyboard`") (<{wstate.ControlLook`}> _x_1_0 _x_1_1 -> "ControlLook`") (<{wstate.ControlMinimumSize`}> _x_1_0 -> "ControlMinimumSize`") (<{wstate.ControlModsFunction`}> -> "ControlModsFunction`") (<{wstate.ControlMouse`}> _x_1_0 -> "ControlMouse`") (<{wstate.ControlOrigin`}> _x_1_0 -> "ControlOrigin`") (<{wstate.ControlOuterSize`}> _x_1_0 -> "ControlOuterSize`") (<{wstate.ControlPen`}> _x_1_0 -> "ControlPen`") (<{wstate.ControlPos`}> _x_1_0 -> "ControlPos`") (<{wstate.ControlResize`}> _x_1_0 -> "ControlResize`") (<{wstate.ControlSelectState`}> _x_1_0 -> "ControlSelectState`") (<{wstate.ControlTip`}> _x_1_0 -> "ControlTip`") (<{wstate.ControlViewDomain`}> _x_1_0 -> "ControlViewDomain`") (<{wstate.ControlViewSize`}> _x_1_0 -> "ControlViewSize`") (<{wstate.ControlVMargin`}> _x_1_0 _x_1_1 -> "ControlVMargin`") (<{wstate.ControlVScroll`}> _x_1_0 -> "ControlVScroll`") (<{wstate.ControlWidth`}> _x_1_0 -> "ControlWidth`") 
wstate.toString_66 !_x_0 = case _x_0 (StdControlDef.ControlActivate _x_1_0 -> "ControlActivate") (StdControlDef.ControlDeactivate _x_1_0 -> "ControlDeactivate") (StdControlDef.ControlFunction _x_1_0 -> "ControlFunction") (StdControlDef.ControlHide -> "ControlHide") (StdControlDef.ControlHMargin _x_1_0 _x_1_1 -> "ControlHMargin") (StdControlDef.ControlHScroll _x_1_0 -> "ControlHScroll") (StdControlDef.ControlId _x_1_0 -> "ControlId") (StdControlDef.ControlItemSpace _x_1_0 _x_1_1 -> "ControlItemSpace") (StdControlDef.ControlKeyboard _x_1_0 _x_1_1 _x_1_2 -> "ControlKeyboard") (StdControlDef.ControlLook _x_1_0 _x_1_1 -> "ControlLook") (StdControlDef.ControlMinimumSize _x_1_0 -> "ControlMinimumSize") (StdControlDef.ControlModsFunction _x_1_0 -> "ControlModsFunction") (StdControlDef.ControlMouse _x_1_0 _x_1_1 _x_1_2 -> "ControlMouse") (StdControlDef.ControlOrigin _x_1_0 -> "ControlOrigin") (StdControlDef.ControlOuterSize _x_1_0 -> "ControlOuterSize") (StdControlDef.ControlPen _x_1_0 -> "ControlPen") (StdControlDef.ControlPos _x_1_0 -> "ControlPos") (StdControlDef.ControlResize _x_1_0 -> "ControlResize") (StdControlDef.ControlSelectState _x_1_0 -> "ControlSelectState") (StdControlDef.ControlTip _x_1_0 -> "ControlTip") (StdControlDef.ControlViewDomain _x_1_0 -> "ControlViewDomain") (StdControlDef.ControlViewSize _x_1_0 -> "ControlViewSize") (StdControlDef.ControlVMargin _x_1_0 _x_1_1 -> "ControlVMargin") (StdControlDef.ControlVScroll _x_1_0 -> "ControlVScroll") (StdControlDef.ControlWidth _x_1_0 -> "ControlWidth") 
<{wstate.setWItemAtt`_47}> !_vtoString_0 w_1 !_x_2 !att_3 = case _x_2 (<{wstate.ControlActivate`}> -> case att_3 (StdControlDef.ControlActivate _x_2_0 -> att_3) ) (<{wstate.ControlDeactivate`}> -> case att_3 (StdControlDef.ControlDeactivate _x_2_0 -> att_3) ) (<{wstate.ControlFunction`}> -> case att_3 (StdControlDef.ControlFunction _x_2_0 -> att_3) ) (<{wstate.ControlHide`}> -> case att_3 (StdControlDef.ControlHide -> att_3) ) (<{wstate.ControlHMargin`}> _x_1_0 _x_1_1 -> case att_3 (StdControlDef.ControlHMargin _x_2_0 _x_2_1 -> att_3) ) (<{wstate.ControlHScroll`}> scroll_1_0 -> case att_3 (StdControlDef.ControlHScroll _x_2_0 -> StdControlDef.ControlHScroll scroll_1_0) ) (<{wstate.ControlId`}> _x_1_0 -> case att_3 (StdControlDef.ControlId _x_2_0 -> att_3) ) (<{wstate.ControlItemSpace`}> _x_1_0 _x_1_1 -> case att_3 (StdControlDef.ControlItemSpace _x_2_0 _x_2_1 -> att_3) ) (<{wstate.ControlKeyboard`}> select_1_0 -> case att_3 (StdControlDef.ControlKeyboard s_2_0 _x_2_1 f_2_2 -> StdControlDef.ControlKeyboard s_2_0 select_1_0 f_2_2) ) (<{wstate.ControlLook`}> sysLook_1_0 look_1_1 -> case att_3 (StdControlDef.ControlLook _x_2_0 _x_2_1 -> StdControlDef.ControlLook sysLook_1_0 look_1_1) ) (<{wstate.ControlMinimumSize`}> _x_1_0 -> case att_3 (StdControlDef.ControlMinimumSize _x_2_0 -> att_3) ) (<{wstate.ControlModsFunction`}> -> case att_3 (StdControlDef.ControlModsFunction _x_2_0 -> att_3) ) (<{wstate.ControlMouse`}> select_1_0 -> case att_3 (StdControlDef.ControlMouse s_2_0 _x_2_1 f_2_2 -> StdControlDef.ControlMouse s_2_0 select_1_0 f_2_2) ) (<{wstate.ControlOrigin`}> origin_1_0 -> case att_3 (StdControlDef.ControlOrigin _x_2_0 -> StdControlDef.ControlOrigin origin_1_0) ) (<{wstate.ControlOuterSize`}> size_1_0 -> case att_3 (StdControlDef.ControlOuterSize _x_2_0 -> StdControlDef.ControlOuterSize size_1_0) ) (<{wstate.ControlPen`}> pen_1_0 -> case att_3 (StdControlDef.ControlPen _x_2_0 -> StdControlDef.ControlPen pen_1_0) ) (<{wstate.ControlPos`}> pos_1_0 -> case att_3 (StdControlDef.ControlPos _x_2_0 -> StdControlDef.ControlPos pos_1_0) ) (<{wstate.ControlResize`}> f_1_0 -> case att_3 (StdControlDef.ControlResize _x_2_0 -> StdControlDef.ControlResize f_1_0) ) (<{wstate.ControlSelectState`}> select_1_0 -> case att_3 (StdControlDef.ControlSelectState _x_2_0 -> StdControlDef.ControlSelectState select_1_0) ) (<{wstate.ControlTip`}> tip_1_0 -> case att_3 (StdControlDef.ControlTip _x_2_0 -> StdControlDef.ControlTip tip_1_0) ) (<{wstate.ControlViewDomain`}> domain_1_0 -> case att_3 (StdControlDef.ControlViewDomain _x_2_0 -> StdControlDef.ControlViewDomain domain_1_0) ) (<{wstate.ControlViewSize`}> size_1_0 -> case att_3 (StdControlDef.ControlViewSize _x_2_0 -> StdControlDef.ControlViewSize size_1_0) ) (<{wstate.ControlVMargin`}> _x_1_0 _x_1_1 -> case att_3 (StdControlDef.ControlVMargin _x_2_0 _x_2_1 -> att_3) ) (<{wstate.ControlVScroll`}> scroll_1_0 -> case att_3 (StdControlDef.ControlVScroll _x_2_0 -> StdControlDef.ControlVScroll scroll_1_0) ) (<{wstate.ControlWidth`}> width_1_0 -> case att_3 (StdControlDef.ControlWidth _x_2_0 -> StdControlDef.ControlWidth width_1_0) ) (_ -> wstate.wstateFatalError "setWItemHandle`" (<{StdString.+++_11}> "ControlAttributes of " (<{StdString.+++_11}> (select _vtoString_0::<{StdOverloaded.toString;}> 0 w_1) (<{StdString.+++_11}> " do not match pairwise (" (<{StdString.+++_11}> (wstate.toString_65 _x_2) (<{StdString.+++_11}> " vs. " (<{StdString.+++_11}> (wstate.toString_66 att_3) ")")))))))
<{wstate.setWItemAtts`_46}> !_vtoString_0 w_1 !_x_2 !_x_3 = case _x_2 (_predefined._Cons att`_1_0 atts`_1_1 -> case _x_3 (_predefined._Cons att_2_0 atts_2_1 -> let !att_3_0 = <{wstate.setWItemAtt`_47}> _vtoString_0 w_1 <{att`_1_0}> att_2_0, !atts_3_1 = <{wstate.setWItemAtts`_46}> _vtoString_0 w_1 <{atts`_1_1}> atts_2_1 in _predefined._Cons att_3_0 atts_3_1) ) (_predefined._Nil -> case _x_3 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWItemHandle`" "incompatible number of ControlAttributes")
<{wstate.setWItemAtt`_113}> w_0 !_x_1 !att_2 = case _x_1 (<{wstate.ControlActivate`}> -> case att_2 (StdControlDef.ControlActivate _x_2_0 -> att_2) ) (<{wstate.ControlDeactivate`}> -> case att_2 (StdControlDef.ControlDeactivate _x_2_0 -> att_2) ) (<{wstate.ControlFunction`}> -> case att_2 (StdControlDef.ControlFunction _x_2_0 -> att_2) ) (<{wstate.ControlHide`}> -> case att_2 (StdControlDef.ControlHide -> att_2) ) (<{wstate.ControlHMargin`}> _x_1_0 _x_1_1 -> case att_2 (StdControlDef.ControlHMargin _x_2_0 _x_2_1 -> att_2) ) (<{wstate.ControlHScroll`}> scroll_1_0 -> case att_2 (StdControlDef.ControlHScroll _x_2_0 -> StdControlDef.ControlHScroll scroll_1_0) ) (<{wstate.ControlId`}> _x_1_0 -> case att_2 (StdControlDef.ControlId _x_2_0 -> att_2) ) (<{wstate.ControlItemSpace`}> _x_1_0 _x_1_1 -> case att_2 (StdControlDef.ControlItemSpace _x_2_0 _x_2_1 -> att_2) ) (<{wstate.ControlKeyboard`}> select_1_0 -> case att_2 (StdControlDef.ControlKeyboard s_2_0 _x_2_1 f_2_2 -> StdControlDef.ControlKeyboard s_2_0 select_1_0 f_2_2) ) (<{wstate.ControlLook`}> sysLook_1_0 look_1_1 -> case att_2 (StdControlDef.ControlLook _x_2_0 _x_2_1 -> StdControlDef.ControlLook sysLook_1_0 look_1_1) ) (<{wstate.ControlMinimumSize`}> _x_1_0 -> case att_2 (StdControlDef.ControlMinimumSize _x_2_0 -> att_2) ) (<{wstate.ControlModsFunction`}> -> case att_2 (StdControlDef.ControlModsFunction _x_2_0 -> att_2) ) (<{wstate.ControlMouse`}> select_1_0 -> case att_2 (StdControlDef.ControlMouse s_2_0 _x_2_1 f_2_2 -> StdControlDef.ControlMouse s_2_0 select_1_0 f_2_2) ) (<{wstate.ControlOrigin`}> origin_1_0 -> case att_2 (StdControlDef.ControlOrigin _x_2_0 -> StdControlDef.ControlOrigin origin_1_0) ) (<{wstate.ControlOuterSize`}> size_1_0 -> case att_2 (StdControlDef.ControlOuterSize _x_2_0 -> StdControlDef.ControlOuterSize size_1_0) ) (<{wstate.ControlPen`}> pen_1_0 -> case att_2 (StdControlDef.ControlPen _x_2_0 -> StdControlDef.ControlPen pen_1_0) ) (<{wstate.ControlPos`}> pos_1_0 -> case att_2 (StdControlDef.ControlPos _x_2_0 -> StdControlDef.ControlPos pos_1_0) ) (<{wstate.ControlResize`}> f_1_0 -> case att_2 (StdControlDef.ControlResize _x_2_0 -> StdControlDef.ControlResize f_1_0) ) (<{wstate.ControlSelectState`}> select_1_0 -> case att_2 (StdControlDef.ControlSelectState _x_2_0 -> StdControlDef.ControlSelectState select_1_0) ) (<{wstate.ControlTip`}> tip_1_0 -> case att_2 (StdControlDef.ControlTip _x_2_0 -> StdControlDef.ControlTip tip_1_0) ) (<{wstate.ControlViewDomain`}> domain_1_0 -> case att_2 (StdControlDef.ControlViewDomain _x_2_0 -> StdControlDef.ControlViewDomain domain_1_0) ) (<{wstate.ControlViewSize`}> size_1_0 -> case att_2 (StdControlDef.ControlViewSize _x_2_0 -> StdControlDef.ControlViewSize size_1_0) ) (<{wstate.ControlVMargin`}> _x_1_0 _x_1_1 -> case att_2 (StdControlDef.ControlVMargin _x_2_0 _x_2_1 -> att_2) ) (<{wstate.ControlVScroll`}> scroll_1_0 -> case att_2 (StdControlDef.ControlVScroll _x_2_0 -> StdControlDef.ControlVScroll scroll_1_0) ) (<{wstate.ControlWidth`}> width_1_0 -> case att_2 (StdControlDef.ControlWidth _x_2_0 -> StdControlDef.ControlWidth width_1_0) ) (_ -> wstate.wstateFatalError "setWItemHandle`" (<{StdString.+++_11}> "ControlAttributes of " (<{StdString.+++_11}> (windowhandle.toString_9 w_0) (<{StdString.+++_11}> " do not match pairwise (" (<{StdString.+++_11}> (wstate.toString_65 _x_1) (<{StdString.+++_11}> " vs. " (<{StdString.+++_11}> (wstate.toString_66 att_2) ")")))))))
<{wstate.setWItemAtts`_112}> w_0 !_x_1 !_x_2 = case _x_1 (_predefined._Cons att`_1_0 atts`_1_1 -> case _x_2 (_predefined._Cons att_2_0 atts_2_1 -> let !att_3_0 = <{wstate.setWItemAtt`_113}> w_0 <{att`_1_0}> att_2_0, !atts_3_1 = <{wstate.setWItemAtts`_112}> w_0 <{atts`_1_1}> atts_2_1 in _predefined._Cons att_3_0 atts_3_1) ) (_predefined._Nil -> case _x_2 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWItemHandle`" "incompatible number of ControlAttributes")
<{wstate.setWItemHandle`}> !<{itemH`_0}> !itemH_1 = case <{itemH`_0}> (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 atts`_1_6 itemHs`_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case itemH_1 (windowhandle._WItemHandle w_2_0 w_2_1 w_2_2 w_2_3 w_2_4 info_2_5 atts_2_6 itemHs_2_7 w_2_8 w_2_9 w_2_10 w_2_11 w_2_12 -> let !info1_3_0 = <{wstate.setWItemInfo`_48}> w_1_5 info_2_5, !atts1_3_1 = <{wstate.setWItemAtts`_112}> w_1_2 <{atts`_1_6}> atts_2_6, !itemHs1_3_2 = <{wstate.setWElementHandles`}> <{itemHs`_1_7}> itemHs_2_7 in update itemH_1::windowhandle._WItemHandle [1:w_1_1,3:w_1_3,4:w_1_4,5:info1_3_0,6:atts1_3_1,7:itemHs1_3_2,8:w_1_8,9:w_1_9,10:w_1_10,12:w_1_12]) ) 
<{wstate.setWElement`_40}> !_x_0 !_x_1 = case _x_0 (<{wstate.WItemHandle`}> itemH`_1_0 -> case _x_1 (windowhandle.WItemHandle itemH_2_0 -> let !itemH_3_0 = <{wstate.setWItemHandle`}> <{itemH`_1_0}> itemH_2_0 in windowhandle.WItemHandle itemH_3_0) ) (<{wstate.WRecursiveHandle`}> itemHs`_1_0 _x_1_1 -> case _x_1_1 (wstate.IsWListLSHandle -> case _x_1 (windowhandle.WListLSHandle itemHs_3_0 -> let !itemHs_4_0 = <{wstate.setWElementHandles`}> <{itemHs`_1_0}> itemHs_3_0 in windowhandle.WListLSHandle itemHs_4_0) ) (wstate.IsWExtendLSHandle -> case _x_1 (windowhandle.WExtendLSHandle exH_3_0 -> case exH_3_0 (windowhandle._WExtendLSHandle wExtendLS_4_0 itemHs_4_1 -> let !itemHs_5_0 = <{wstate.setWElementHandles`}> <{itemHs`_1_0}> itemHs_4_1 in windowhandle.WExtendLSHandle (update exH_3_0::windowhandle._WExtendLSHandle [1:itemHs_5_0])) ) ) (wstate.IsWChangeLSHandle -> case _x_1 (windowhandle.WChangeLSHandle chH_3_0 -> case chH_3_0 (windowhandle._WChangeLSHandle wChangeLS_4_0 itemHs_4_1 -> let !itemHs_5_0 = <{wstate.setWElementHandles`}> <{itemHs`_1_0}> itemHs_4_1 in windowhandle.WChangeLSHandle (update chH_3_0::windowhandle._WChangeLSHandle [1:itemHs_5_0])) ) ) ) (_ -> wstate.wstateFatalError "setWElementHandles`" "WElementHandles do not match pairwise")
<{wstate.setWElementHandles`}> !_x_0 !_x_1 = case _x_0 (_predefined._Cons itemH`_1_0 itemHs`_1_1 -> case _x_1 (_predefined._Cons itemH_2_0 itemHs_2_1 -> let !itemH_3_0 = <{wstate.setWElement`_40}> <{itemH`_1_0}> itemH_2_0, !itemHs_3_1 = <{wstate.setWElementHandles`}> <{itemHs`_1_1}> itemHs_2_1 in _predefined._Cons itemH_3_0 itemHs_3_1) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWElementHandles`" "incompatible number of WElementHandles")
wstate.setWAtt_39 !_x_0 !att_1 = case _x_0 (<{wstate.WindowActivate`}> -> case att_1 (StdWindowDef.WindowActivate _x_2_0 -> att_1) ) (<{wstate.WindowCancel`}> cancel_1_0 -> case att_1 (StdWindowDef.WindowCancel _x_2_0 -> StdWindowDef.WindowCancel cancel_1_0) ) (<{wstate.WindowClose`}> -> case att_1 (StdWindowDef.WindowClose _x_2_0 -> att_1) ) (<{wstate.WindowCursor`}> cursor_1_0 -> case att_1 (StdWindowDef.WindowCursor _x_2_0 -> StdWindowDef.WindowCursor cursor_1_0) ) (<{wstate.WindowDeactivate`}> -> case att_1 (StdWindowDef.WindowDeactivate _x_2_0 -> att_1) ) (<{wstate.WindowHMargin`}> _x_1_0 _x_1_1 -> case att_1 (StdWindowDef.WindowHMargin _x_2_0 _x_2_1 -> att_1) ) (<{wstate.WindowHScroll`}> scroll_1_0 -> case att_1 (StdWindowDef.WindowHScroll _x_2_0 -> StdWindowDef.WindowHScroll scroll_1_0) ) (<{wstate.WindowId`}> _x_1_0 -> case att_1 (StdWindowDef.WindowId _x_2_0 -> att_1) ) (<{wstate.WindowIndex`}> index_1_0 -> case att_1 (StdWindowDef.WindowIndex _x_2_0 -> StdWindowDef.WindowIndex index_1_0) ) (<{wstate.WindowInit`}> -> case att_1 (StdWindowDef.WindowInit _x_2_0 -> att_1) ) (<{wstate.WindowInitActive`}> id_1_0 -> case att_1 (StdWindowDef.WindowInitActive _x_2_0 -> StdWindowDef.WindowInitActive id_1_0) ) (<{wstate.WindowItemSpace`}> _x_1_0 _x_1_1 -> case att_1 (StdWindowDef.WindowItemSpace _x_2_0 _x_2_1 -> att_1) ) (<{wstate.WindowKeyboard`}> select_1_0 -> case att_1 (StdWindowDef.WindowKeyboard s_2_0 _x_2_1 f_2_2 -> StdWindowDef.WindowKeyboard s_2_0 select_1_0 f_2_2) ) (<{wstate.WindowLook`}> sysLook_1_0 look_1_1 -> case att_1 (StdWindowDef.WindowLook _x_2_0 _x_2_1 -> StdWindowDef.WindowLook sysLook_1_0 look_1_1) ) (<{wstate.WindowMouse`}> select_1_0 -> case att_1 (StdWindowDef.WindowMouse s_2_0 _x_2_1 f_2_2 -> StdWindowDef.WindowMouse s_2_0 select_1_0 f_2_2) ) (<{wstate.WindowOk`}> ok_1_0 -> case att_1 (StdWindowDef.WindowOk _x_2_0 -> StdWindowDef.WindowOk ok_1_0) ) (<{wstate.WindowOrigin`}> origin_1_0 -> case att_1 (StdWindowDef.WindowOrigin _x_2_0 -> StdWindowDef.WindowOrigin origin_1_0) ) (<{wstate.WindowOuterSize`}> size_1_0 -> case att_1 (StdWindowDef.WindowOuterSize _x_2_0 -> StdWindowDef.WindowOuterSize size_1_0) ) (<{wstate.WindowPen`}> pen_1_0 -> case att_1 (StdWindowDef.WindowPen _x_2_0 -> StdWindowDef.WindowPen pen_1_0) ) (<{wstate.WindowPos`}> pos_1_0 -> case att_1 (StdWindowDef.WindowPos _x_2_0 -> StdWindowDef.WindowPos pos_1_0) ) (<{wstate.WindowSelectState`}> select_1_0 -> case att_1 (StdWindowDef.WindowSelectState _x_2_0 -> StdWindowDef.WindowSelectState select_1_0) ) (<{wstate.WindowViewDomain`}> domain_1_0 -> case att_1 (StdWindowDef.WindowViewDomain _x_2_0 -> StdWindowDef.WindowViewDomain domain_1_0) ) (<{wstate.WindowViewSize`}> size_1_0 -> case att_1 (StdWindowDef.WindowViewSize _x_2_0 -> StdWindowDef.WindowViewSize size_1_0) ) (<{wstate.WindowVMargin`}> _x_1_0 _x_1_1 -> case att_1 (StdWindowDef.WindowVMargin _x_2_0 _x_2_1 -> att_1) ) (<{wstate.WindowVScroll`}> scroll_1_0 -> case att_1 (StdWindowDef.WindowVScroll _x_2_0 -> StdWindowDef.WindowVScroll scroll_1_0) ) (_ -> wstate.wstateFatalError "setWindowHandle`" "WindowAttributes do not match pairwise")
wstate.setWAtts_38 !_x_0 !_x_1 = case _x_0 (_predefined._Cons att`_1_0 atts`_1_1 -> case _x_1 (_predefined._Cons att_2_0 atts_2_1 -> let !att_3_0 = wstate.setWAtt_39 <{att`_1_0}> att_2_0, !atts_3_1 = wstate.setWAtts_38 <{atts`_1_1}> atts_2_1 in _predefined._Cons att_3_0 atts_3_1) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle`" "incompatible number of WindowAttributes")
wstate.setFocusItems_37 !_x_0 = case _x_0 (_predefined._Cons item_1_0 items_1_1 -> _predefined._Cons item_1_0 (wstate.setFocusItems_37 items_1_1)) (_ -> _predefined._Nil)
wstate.kfEval_36 !_x_0 = case _x_0 (keyfocus._KeyFocus kf_1_0 kf_1_1 -> case (StdBool.not (<{StdInt.==_16}> (StdList.length_47 kf_1_1) 0)) (True -> keyfocus._KeyFocus kf_1_0 kf_1_1) (False -> keyfocus._KeyFocus kf_1_0 _predefined._Nil) ) 
<{wstate.setWindowHandle`}> !<{wH`_0}> !wH_1 = case <{wH`_0}> (<{wstate._WindowHandle`}> whMode`_1_0 whKind`_1_1 whTitle`_1_2 wh_1_3 whKeyFocus`_1_4 whWindow_1_5 wh_1_6 whShow`_1_7 whSelect`_1_8 whAtts`_1_9 whDefault_1_10 whCancel_1_11 whSize`_1_12 whClosing`_1_13 -> case wH_1 (windowhandle._WindowHandle whMode_2_0 whKind_2_1 whTitle_2_2 wh_2_3 whKeyFocus_2_4 whWindow_2_5 wh_2_6 whShow_2_7 whSelect_2_8 whAtts_2_9 whDefault_2_10 whCancel_2_11 whSize_2_12 whClosing_2_13 -> let !itemHs_3_0 = <{wstate.setWElementHandles`}> wh_1_6 wh_2_6, !atts_3_1 = wstate.setWAtts_38 <{whAtts`_1_9}> whAtts_2_9 in update wH_1::windowhandle._WindowHandle [2:<{whTitle`_1_2}>,3:wh_1_3,4:<{wstate._c;398;31_114}> (select <{whKeyFocus`_1_4}>::keyfocus._KeyFocus 0) <{whKeyFocus`_1_4}>,5:whWindow_1_5,6:itemHs_3_0,7:<{whShow`_1_7}>,8:<{whSelect`_1_8}>,9:atts_3_1,12:<{whSize`_1_12}>,13:<{whClosing`_1_13}>]) ) 
<{wstate._c;398;31_114}> !_x_0 !<{whKeyFocus`_1}> = case _x_0 (Data.Maybe.Just f_1_0 -> wstate.kfEval_36 (keyfocus.setNewFocusItem f_1_0 (keyfocus.newFocusItems (wstate.setFocusItems_37 (select <{whKeyFocus`_1}>::keyfocus._KeyFocus 1))))) (Data.Maybe.Nothing -> wstate.kfEval_36 (keyfocus.setNoFocusItem (keyfocus.newFocusItems (wstate.setFocusItems_37 (select <{whKeyFocus`_1}>::keyfocus._KeyFocus 1))))) 
<{wstate.insertWindowHandle`}> !<{wH`_0}> !wsH_1 = case wsH_1 (windowhandle._WindowStateHandle wsh_1_0 wshHandle_1_1 -> case wshHandle_1_1 (Data.Maybe.Just wlsH_2_0 -> case wlsH_2_0 (windowhandle._WindowLSHandle wlsState_3_0 wH_3_1 -> let !wH_4_0 = <{wstate.setWindowHandle`}> <{wH`_0}> wH_3_1 in update wsH_1::windowhandle._WindowStateHandle [1:Data.Maybe.Just (update wlsH_2_0::windowhandle._WindowLSHandle [1:wH_4_0])]) ) ) (_ -> wstate.wstateFatalError "insertWindowHandle`" "unexpected window placeholder argument")
wstate.setRadioInfo_57 !_x_0 !info_1 = case _x_0 (<{wstate._RadioItemInfo`}> _x_1_0 radio_1_1 radio_1_2 radio_1_3 -> case _x_1_0 (_Tuple2 item`_2_0 s`_2_1 -> case info_1 (windowhandle._RadioItemInfo radio_3_0 radio_3_1 radio_3_2 radio_3_3 -> case radio_3_0 (_Tuple3 _x_4_0 _x_4_1 f_4_2 -> update info_1::windowhandle._RadioItemInfo [0:_Tuple3 <{item`_2_0}> <{s`_2_1}> f_4_2,1:radio_1_1,2:radio_1_2]) ) ) ) 
wstate.setRadioInfos_58 !_x_0 !_x_1 = case _x_0 (_predefined._Cons info`_1_0 infos`_1_1 -> case _x_1 (_predefined._Cons info_2_0 infos_2_1 -> let !info_3_0 = wstate.setRadioInfo_57 <{info`_1_0}> info_2_0, !infos_3_1 = wstate.setRadioInfos_58 <{infos`_1_1}> infos_2_1 in _predefined._Cons info_3_0 infos_3_1) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle2" "incompatible RadioInfo")
wstate.setCheckInfo_59 !_x_0 !info_1 = case _x_0 (<{wstate._CheckItemInfo`}> _x_1_0 check_1_1 check_1_2 check_1_3 -> case _x_1_0 (_Tuple3 text`_2_0 s`_2_1 mark`_2_2 -> case info_1 (windowhandle._CheckItemInfo check_3_0 check_3_1 check_3_2 check_3_3 -> case check_3_0 (_Tuple4 _x_4_0 _x_4_1 _x_4_2 f_4_3 -> update info_1::windowhandle._CheckItemInfo [0:_Tuple4 <{text`_2_0}> <{s`_2_1}> <{mark`_2_2}> f_4_3,1:check_1_1,2:check_1_2]) ) ) ) 
wstate.setCheckInfos_60 !_x_0 !_x_1 = case _x_0 (_predefined._Cons info`_1_0 infos`_1_1 -> case _x_1 (_predefined._Cons info_2_0 infos_2_1 -> _predefined._Cons (wstate.setCheckInfo_59 <{info`_1_0}> info_2_0) (wstate.setCheckInfos_60 <{infos`_1_1}> infos_2_1)) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle2" "incompatible CheckInfo")
wstate.setpopuptexts_61 !_x_0 !_x_1 = case _x_0 (_predefined._Cons text_1_0 texts_1_1 -> case _x_1 (_predefined._Cons _x_2_0 items_2_1 -> case _x_2_0 (_Tuple2 _x_3_0 f_3_1 -> _predefined._Cons (_Tuple2 text_1_0 f_3_1) (wstate.setpopuptexts_61 texts_1_1 items_2_1)) ) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWindowHandle2" "incompatible PopUpInfo")
<{wstate.setWItemInfo`_62}> !_x_0 !_x_1 = case _x_0 (<{wstate.RadioInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._RadioInfo`}> radio_2_0 radioLayout`_2_1 radio_2_2 -> case _x_1 (windowhandle.RadioInfo radio_3_0 -> case radio_3_0 (windowhandle._RadioInfo radio_4_0 radioLayout_4_1 radio_4_2 -> let !radio_5_0 = wstate.setRadioInfos_58 radio_2_0 radio_4_0 in windowhandle.RadioInfo (update radio_3_0::windowhandle._RadioInfo [0:radio_5_0,2:radio_2_2])) ) ) ) (<{wstate.CheckInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._CheckInfo`}> check_2_0 checkLayout`_2_1 -> case _x_1 (windowhandle.CheckInfo check_3_0 -> case check_3_0 (windowhandle._CheckInfo check_4_0 checkLayout_4_1 -> windowhandle.CheckInfo (update check_3_0::windowhandle._CheckInfo [0:wstate.setCheckInfos_60 check_2_0 check_4_0])) ) ) ) (<{wstate.PopUpInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._PopUpInfo`}> texts`_2_0 i_2_1 popUp_2_2 -> case _x_1 (windowhandle.PopUpInfo popup_3_0 -> case popup_3_0 (windowhandle._PopUpInfo items_4_0 popUp_4_1 popUp_4_2 -> windowhandle.PopUpInfo (update popup_3_0::windowhandle._PopUpInfo [0:wstate.setpopuptexts_61 <{texts`_2_0}> items_4_0,1:i_2_1,2:popUp_2_2])) ) ) ) (<{wstate.SliderInfo`}> _x_1_0 -> case _x_1_0 (<{wstate._SliderInfo`}> dir_2_0 length_2_1 state_2_2 -> case _x_1 (windowhandle.SliderInfo slider_3_0 -> windowhandle.SliderInfo (update slider_3_0::windowhandle._SliderInfo [0:dir_2_0,1:length_2_1,2:state_2_2])) ) ) (<{wstate.TextInfo`}> info_1_0 -> case _x_1 (windowhandle.TextInfo _x_2_0 -> windowhandle.TextInfo info_1_0) ) (<{wstate.EditInfo`}> info_1_0 -> case _x_1 (windowhandle.EditInfo _x_2_0 -> windowhandle.EditInfo info_1_0) ) (<{wstate.ButtonInfo`}> info_1_0 -> case _x_1 (windowhandle.ButtonInfo _x_2_0 -> windowhandle.ButtonInfo info_1_0) ) (<{wstate.CustomButtonInfo`}> info_1_0 -> case _x_1 (windowhandle.CustomButtonInfo _x_2_0 -> windowhandle.CustomButtonInfo info_1_0) ) (<{wstate.CustomInfo`}> info_1_0 -> case _x_1 (windowhandle.CustomInfo _x_2_0 -> windowhandle.CustomInfo info_1_0) ) (<{wstate.CompoundInfo`}> info_1_0 -> case _x_1 (windowhandle.CompoundInfo _x_2_0 -> windowhandle.CompoundInfo info_1_0) ) (<{wstate.NoWItemInfo`}> -> _x_1) (_ -> wstate.wstateFatalError "setWindowHandle2" "incompatible WItemInfo")
wstate.setWItemHandle2_64 !<{itemH`_0}> !itemH_1 = case <{itemH`_0}> (wstate._WItemHandle2 w_1_0 w_1_1 w_1_2 w_1_3 itemHs`_1_4 w_1_5 w_1_6 w_1_7 -> case itemH_1 (windowhandle._WItemHandle w_2_0 w_2_1 w_2_2 w_2_3 w_2_4 info_2_5 atts_2_6 itemHs_2_7 w_2_8 w_2_9 w_2_10 w_2_11 w_2_12 -> let !info1_3_0 = <{wstate.setWItemInfo`_62}> w_1_3 info_2_5, !itemHs1_3_1 = wstate.setWElementHandles2_63 <{itemHs`_1_4}> itemHs_2_7 in update itemH_1::windowhandle._WItemHandle [3:w_1_2,5:info1_3_0,7:itemHs1_3_1,9:w_1_5,10:w_1_6]) ) 
wstate.setWElement2_56 !_x_0 !_x_1 = case _x_0 (wstate.WItemHandle2 itemH`_1_0 -> case _x_1 (windowhandle.WItemHandle itemH_2_0 -> let !itemH_3_0 = wstate.setWItemHandle2_64 <{itemH`_1_0}> itemH_2_0 in windowhandle.WItemHandle itemH_3_0) ) (wstate.WRecursiveHandle2 itemHs`_1_0 _x_1_1 -> case _x_1_1 (wstate.IsWListLSHandle -> case _x_1 (windowhandle.WListLSHandle itemHs_3_0 -> let !itemHs_4_0 = wstate.setWElementHandles2_63 <{itemHs`_1_0}> itemHs_3_0 in windowhandle.WListLSHandle itemHs_4_0) ) (wstate.IsWExtendLSHandle -> case _x_1 (windowhandle.WExtendLSHandle exH_3_0 -> case exH_3_0 (windowhandle._WExtendLSHandle wExtendLS_4_0 itemHs_4_1 -> let !itemHs_5_0 = wstate.setWElementHandles2_63 <{itemHs`_1_0}> itemHs_4_1 in windowhandle.WExtendLSHandle (update exH_3_0::windowhandle._WExtendLSHandle [1:itemHs_5_0])) ) ) (wstate.IsWChangeLSHandle -> case _x_1 (windowhandle.WChangeLSHandle chH_3_0 -> case chH_3_0 (windowhandle._WChangeLSHandle wChangeLS_4_0 itemHs_4_1 -> let !itemHs_5_0 = wstate.setWElementHandles2_63 <{itemHs`_1_0}> itemHs_4_1 in windowhandle.WChangeLSHandle (update chH_3_0::windowhandle._WChangeLSHandle [1:itemHs_5_0])) ) ) ) (_ -> wstate.wstateFatalError "setWElementHandles2" "WElementHandles do not match pairwise")
wstate.setWElementHandles2_63 !_x_0 !_x_1 = case _x_0 (_predefined._Cons itemH`_1_0 itemHs`_1_1 -> case _x_1 (_predefined._Cons itemH_2_0 itemHs_2_1 -> let !itemH_3_0 = wstate.setWElement2_56 <{itemH`_1_0}> itemH_2_0, !itemHs_3_1 = wstate.setWElementHandles2_63 <{itemHs`_1_1}> itemHs_2_1 in _predefined._Cons itemH_3_0 itemHs_3_1) ) (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) ) (_ -> wstate.wstateFatalError "setWElementHandles2" "incompatible number of WElementHandles")
wstate.setWindowHandle2 !<{wH`_0}> !wH_1 = case <{wH`_0}> (wstate._WindowHandle2 whWindow_1_0 wh_1_1 whSize2_1_2 -> case wH_1 (windowhandle._WindowHandle whMode_2_0 whKind_2_1 whTitle_2_2 wh_2_3 whKeyFocus_2_4 whWindow_2_5 wh_2_6 whShow_2_7 whSelect_2_8 whAtts_2_9 whDefault_2_10 whCancel_2_11 whSize_2_12 whClosing_2_13 -> let !itemHs_3_0 = wstate.setWElementHandles2_63 wh_1_1 wh_2_6 in update wH_1::windowhandle._WindowHandle [5:whWindow_1_0,6:itemHs_3_0,12:whSize2_1_2]) ) 
wstate.insertWindowHandle2 !<{wH`_0}> !wsH_1 = case wsH_1 (windowhandle._WindowStateHandle wsh_1_0 wshHandle_1_1 -> case wshHandle_1_1 (Data.Maybe.Just wlsH_2_0 -> case wlsH_2_0 (windowhandle._WindowLSHandle wlsState_3_0 wH_3_1 -> let !wH_4_0 = wstate.setWindowHandle2 <{wH`_0}> wH_3_1 in update wsH_1::windowhandle._WindowStateHandle [1:Data.Maybe.Just (update wlsH_2_0::windowhandle._WindowLSHandle [1:wH_4_0])]) ) ) (_ -> wstate.wstateFatalError "insertWindowHandle2" "unexpected window placeholder argument")
<{wstate.TD;WindowHandle`}> _x_0::B = _predefined._Nil
<{wstate.TD;WElementHandle`}> _x_0::B = _predefined._Nil
<{wstate.TD;WRecursiveKind}> _x_0::B = _predefined._Nil
<{wstate.TD;WItemHandle`}> _x_0::B = _predefined._Nil
<{wstate.TD;WItemInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;RadioInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;RadioItemInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;CheckInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;CheckItemInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;PopUpInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;SliderInfo`}> _x_0::B = _predefined._Nil
<{wstate.TD;WindowAttribute`}> _x_0::B = _predefined._Nil
<{wstate.TD;ControlAttribute`}> _x_0::B = _predefined._Nil
<{wstate.TD;WindowHandle2}> _x_0::B = _predefined._Nil
<{wstate.TD;WElementHandle2}> _x_0::B = _predefined._Nil
<{wstate.TD;WItemHandle2}> _x_0::B = _predefined._Nil

:: wstate.WElementHandle` = <{wstate.WItemHandle`}> a1 | <{wstate.WRecursiveHandle`}> a1 a2
:: wstate.WRecursiveKind = wstate.IsWListLSHandle | wstate.IsWExtendLSHandle | wstate.IsWChangeLSHandle
:: wstate.WItemInfo` = <{wstate.ButtonInfo`}> a1 | <{wstate.CheckInfo`}> a1 | <{wstate.CompoundInfo`}> a1 | <{wstate.CustomButtonInfo`}> a1 | <{wstate.CustomInfo`}> a1 | <{wstate.EditInfo`}> a1 | <{wstate.PopUpInfo`}> a1 | <{wstate.RadioInfo`}> a1 | <{wstate.SliderInfo`}> a1 | <{wstate.TextInfo`}> a1 | <{wstate.NoWItemInfo`}>
:: wstate.WindowAttribute` = <{wstate.WindowActivate`}> | <{wstate.WindowCancel`}> a1 | <{wstate.WindowClose`}> | <{wstate.WindowCursor`}> a1 | <{wstate.WindowDeactivate`}> | <{wstate.WindowHMargin`}> a1::I a2::I | <{wstate.WindowHScroll`}> a1 | <{wstate.WindowId`}> a1 | <{wstate.WindowIndex`}> a1::I | <{wstate.WindowInit`}> | <{wstate.WindowInitActive`}> a1 | <{wstate.WindowItemSpace`}> a1::I a2::I | <{wstate.WindowKeyboard`}> a1 | <{wstate.WindowLook`}> a1::B a2 | <{wstate.WindowMouse`}> a1 | <{wstate.WindowOk`}> a1 | <{wstate.WindowOrigin`}> a1 | <{wstate.WindowOuterSize`}> a1 | <{wstate.WindowPen`}> a1 | <{wstate.WindowPos`}> a1 | <{wstate.WindowSelectState`}> a1 | <{wstate.WindowViewDomain`}> a1 | <{wstate.WindowViewSize`}> a1 | <{wstate.WindowVMargin`}> a1::I a2::I | <{wstate.WindowVScroll`}> a1
:: wstate.ControlAttribute` = <{wstate.ControlActivate`}> | <{wstate.ControlDeactivate`}> | <{wstate.ControlFunction`}> | <{wstate.ControlHide`}> | <{wstate.ControlHMargin`}> a1::I a2::I | <{wstate.ControlHScroll`}> a1 | <{wstate.ControlId`}> a1 | <{wstate.ControlItemSpace`}> a1::I a2::I | <{wstate.ControlKeyboard`}> a1 | <{wstate.ControlLook`}> a1::B a2 | <{wstate.ControlMinimumSize`}> a1 | <{wstate.ControlModsFunction`}> | <{wstate.ControlMouse`}> a1 | <{wstate.ControlOrigin`}> a1 | <{wstate.ControlOuterSize`}> a1 | <{wstate.ControlPen`}> a1 | <{wstate.ControlPos`}> a1 | <{wstate.ControlResize`}> a1 | <{wstate.ControlSelectState`}> a1 | <{wstate.ControlTip`}> a1 | <{wstate.ControlViewDomain`}> a1 | <{wstate.ControlViewSize`}> a1 | <{wstate.ControlVMargin`}> a1::I a2::I | <{wstate.ControlVScroll`}> a1 | <{wstate.ControlWidth`}> a1
:: wstate.WElementHandle2 = wstate.WItemHandle2 a1 | wstate.WRecursiveHandle2 a1 a2

|| Converted Records
:: <{wstate._WindowHandle`}> = {<{wstate.whMode`}>, <{wstate.whKind`}>, <{wstate.whTitle`}>, <{wstate.whItemNrs`}>, <{wstate.whKeyFocus`}>, <{wstate.whWindowInfo`}>, <{wstate.whItems`}>, <{wstate.whShow`}>::B, <{wstate.whSelect`}>::B, <{wstate.whAtts`}>, <{wstate.whDefaultId`}>, <{wstate.whCancelId`}>, <{wstate.whSize`}>, <{wstate.whClosing`}>::B}

:: <{wstate._WItemHandle`}> = {<{wstate.wItemId`}>, <{wstate.wItemNr`}>::I, <{wstate.wItemKind`}>, <{wstate.wItemShow`}>::B, <{wstate.wItemSelect`}>::B, <{wstate.wItemInfo`}>, <{wstate.wItemAtts`}>, <{wstate.wItems`}>, <{wstate.wItemVirtual`}>::B, !<{wstate.wItemPos`}>, <{wstate.wItemSize`}>, <{wstate.wItemPtr`}>, <{wstate.wItemLayoutInfo`}>}

:: <{wstate._RadioInfo`}> = {<{wstate.radioItems`}>, <{wstate.radioLayout`}>, <{wstate.radioIndex`}>::I}

:: <{wstate._RadioItemInfo`}> = {<{wstate.radioItem`}>, !<{wstate.radioItemPos`}>, <{wstate.radioItemSize`}>, <{wstate.radioItemPtr`}>}

:: <{wstate._CheckInfo`}> = {<{wstate.checkItems`}>, <{wstate.checkLayout`}>}

:: <{wstate._CheckItemInfo`}> = {<{wstate.checkItem`}>, !<{wstate.checkItemPos`}>, <{wstate.checkItemSize`}>, <{wstate.checkItemPtr`}>}

:: <{wstate._PopUpInfo`}> = {<{wstate.popUpInfoItems`}>, <{wstate.popUpInfoIndex`}>, <{wstate.popUpInfoEdit`}>}

:: <{wstate._SliderInfo`}> = {<{wstate.sliderInfoDir`}>, <{wstate.sliderInfoLength`}>::I, <{wstate.sliderInfoState`}>}

:: wstate._WindowHandle2 = {wstate.whWindowInfo2, wstate.whItems2, wstate.whSize2}

:: wstate._WItemHandle2 = {wstate.wItemId2, wstate.wItemKind2, wstate.wItemShow2::B, wstate.wItemInfo2, wstate.wItems2, !wstate.wItemPos2, wstate.wItemSize2, wstate.wItemPtr2}

:: <{wstate.gEq_s;}> = {!wstate.gEq_s}

:: <{wstate.gEq_ss;}> = {!wstate.gEq_ss}

:: <{wstate.gEq_sss;}> = {!wstate.gEq_sss}

:: <{wstate.gEq_ssss;}> = {!wstate.gEq_ssss}

:: <{wstate.gEq_sssss;}> = {!wstate.gEq_sssss}

:: <{wstate.gEq_ssssss;}> = {!wstate.gEq_ssssss}

:: <{wstate.gEq_sssssss;}> = {!wstate.gEq_sssssss}

:: <{wstate.gEq_ssssssss;}> = {!wstate.gEq_ssssssss}

:: <{wstate.gEq_sssssssss;}> = {!wstate.gEq_sssssssss}

:: <{wstate.bimap_s;}> = {wstate.bimap_s}

:: <{wstate.bimap_ss;}> = {wstate.bimap_ss}

:: <{wstate.bimap_sss;}> = {wstate.bimap_sss}

