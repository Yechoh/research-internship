|| ?module? StdId


StdId.getParentId !id_0 !ioState_1 = let _x_1_0 = iostate.ioStGetIdTable ioState_1, idTable_1_1 = select _x_1_0::_Tuple2 0, _x_1_2 = id.getIdParent id_0 idTable_1_1, maybeParent_1_3 = select _x_1_2::_Tuple2 0 in case (Data.Maybe.isNothing maybeParent_1_3) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (iostate.ioStSetIdTable (select _x_1_2::_Tuple2 1) (select _x_1_0::_Tuple2 1))) (False -> <{_Tuple2!3}> (Data.Maybe.Just (select (Data.Maybe.fromJust maybeParent_1_3)::id._IdParent 2)) (iostate.ioStSetIdTable (select _x_1_2::_Tuple2 1) (select _x_1_0::_Tuple2 1))) 
StdId.openId_1 !world_0 = let w_1_0::I = world.loadWorld world_0 in <{_Tuple2!3}> (id.toId w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 1) world_0)
<{StdId.c;27;21_20}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toId nr_0) (<{StdId.c;27;21_20}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openIds_2 !n_0::I !world_1 = let w_1_0::I = world.loadWorld world_1 in <{_Tuple2!3}> (<{StdId.c;27;21_20}> (<{StdInt.+_6}> (<{StdInt.-_7}> w_1_0 n_0) 1) w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 n_0) world_1)
StdId.openR2Id_3 !world_0 = let w_1_0::I = world.loadWorld world_0 in <{_Tuple2!3}> (id.toR2Id w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 1) world_0)
<{StdId.c;49;23_22}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toR2Id nr_0) (<{StdId.c;49;23_22}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openR2Ids_4 !n_0::I !world_1 = let w_1_0::I = world.loadWorld world_1 in <{_Tuple2!3}> (<{StdId.c;49;23_22}> (<{StdInt.+_6}> (<{StdInt.-_7}> w_1_0 n_0) 1) w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 n_0) world_1)
StdId.openRId_5 !world_0 = let w_1_0::I = world.loadWorld world_0 in <{_Tuple2!3}> (id.toRId w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 1) world_0)
<{StdId.c;38;22_21}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toRId nr_0) (<{StdId.c;38;22_21}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openRIds_6 !n_0::I !world_1 = let w_1_0::I = world.loadWorld world_1 in <{_Tuple2!3}> (<{StdId.c;38;22_21}> (<{StdInt.+_6}> (<{StdInt.-_7}> w_1_0 n_0) 1) w_1_0) (world.storeWorld (<{StdInt.-_7}> w_1_0 n_0) world_1)
StdId.openId_7 !ioState_0 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_0, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (id.toId idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 1) (select _x_1_0::_Tuple2 1))
<{StdId.c;60;21_23}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toId nr_0) (<{StdId.c;60;21_23}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openIds_8 !n_0::I !ioState_1 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_1, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (<{StdId.c;60;21_23}> (<{StdInt.+_6}> (<{StdInt.-_7}> idseed_1_1 n_0) 1) idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 n_0) (select _x_1_0::_Tuple2 1))
StdId.openR2Id_9 !ioState_0 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_0, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (id.toR2Id idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 1) (select _x_1_0::_Tuple2 1))
<{StdId.c;82;23_25}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toR2Id nr_0) (<{StdId.c;82;23_25}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openR2Ids_10 !n_0::I !ioState_1 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_1, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (<{StdId.c;82;23_25}> (<{StdInt.+_6}> (<{StdInt.-_7}> idseed_1_1 n_0) 1) idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 n_0) (select _x_1_0::_Tuple2 1))
StdId.openRId_11 !ioState_0 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_0, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (id.toRId idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 1) (select _x_1_0::_Tuple2 1))
<{StdId.c;71;22_24}> !nr_0::I !g_s_1::I = case (StdBool.not (<{StdInt.<_17}> g_s_1 nr_0)) (True -> _predefined._Cons (id.toRId nr_0) (<{StdId.c;71;22_24}> (<{StdInt.+_6}> nr_0 StdInt.one_11) g_s_1)) (False -> _predefined._Nil) 
StdId.openRIds_12 !n_0::I !ioState_1 = let _x_1_0::I = iostate.ioStGetIdSeed ioState_1, idseed_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (<{StdId.c;71;22_24}> (<{StdInt.+_6}> (<{StdInt.-_7}> idseed_1_1 n_0) 1) idseed_1_1) (iostate.ioStSetIdSeed (<{StdInt.-_7}> idseed_1_1 n_0) (select _x_1_0::_Tuple2 1))
StdId.openId_13 !pSt_0 = StdPSt.accPIO StdId.openId_7 pSt_0
StdId.openIds_14 !i_0::I !pSt_1 = case pSt_1 (iostate._PSt ls_1_0 io_1_1 -> StdPSt.accPIO (StdId.openIds_8 i_0) pSt_1) 
StdId.openR2Id_15 !pSt_0 = StdPSt.accPIO StdId.openR2Id_9 pSt_0
StdId.openR2Ids_16 !i_0::I !pSt_1 = StdPSt.accPIO (StdId.openR2Ids_10 i_0) pSt_1
StdId.openRId_17 !pSt_0 = StdPSt.accPIO StdId.openRId_11 pSt_0
StdId.openRIds_18 !i_0::I !pSt_1 = StdPSt.accPIO (StdId.openRIds_12 i_0) pSt_1
<{StdId.TD;Ids;}> _x_0::B = _predefined._Nil


|| Converted Records
:: <{StdId.Ids;}> = {!StdId.openId, !StdId.openIds, !StdId.openR2Id, !StdId.openR2Ids, !StdId.openRId, !StdId.openRIds}

:: <{StdId.gEq_s;}> = {!StdId.gEq_s}

:: <{StdId.gEq_ss;}> = {!StdId.gEq_ss}

:: <{StdId.gEq_sss;}> = {!StdId.gEq_sss}

:: <{StdId.gEq_ssss;}> = {!StdId.gEq_ssss}

:: <{StdId.gEq_sssss;}> = {!StdId.gEq_sssss}

:: <{StdId.gEq_ssssss;}> = {!StdId.gEq_ssssss}

:: <{StdId.gEq_sssssss;}> = {!StdId.gEq_sssssss}

:: <{StdId.gEq_ssssssss;}> = {!StdId.gEq_ssssssss}

:: <{StdId.gEq_sssssssss;}> = {!StdId.gEq_sssssssss}

:: <{StdId.bimap_s;}> = {StdId.bimap_s}

:: <{StdId.bimap_ss;}> = {StdId.bimap_ss}

:: <{StdId.bimap_sss;}> = {StdId.bimap_sss}

