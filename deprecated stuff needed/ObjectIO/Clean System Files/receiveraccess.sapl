|| ?module? receiveraccess


receiveraccess.onewaytotriple !f_0 m_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 pst_1_1 -> let _x_2_0 = f_0 m_1 (_Tuple2 ls_1_0 pst_1_1) in _Tuple3 (select _x_2_0::_Tuple2 0) _predefined._Nil (select _x_2_0::_Tuple2 1)) 
receiveraccess.newReceiverHandle !id_0 !select_1 !connected_2 !f_3 = receiverhandle._ReceiverHandle id_0 _predefined._Nil select_1 True (receiveraccess.onewaytotriple f_3) Data.Maybe.Nothing connected_2
receiveraccess.newReceiverStateHandle !id_0 localState_1 !select_2 !connected_3 !f_4 = receiverhandle._ReceiverStateHandle localState_1 (receiveraccess.newReceiverHandle id_0 select_2 connected_3 f_4)
receiveraccess.twowaytotriple !f_0 m_1 !_x_2 = case _x_2 (_Tuple2 ls_1_0 pst_1_1 -> let _x_2_0 = f_0 m_1 (_Tuple2 ls_1_0 pst_1_1), _x_2_1 = select _x_2_0::_Tuple2 1 in _Tuple3 (select _x_2_1::_Tuple2 0) (_predefined._Cons (select _x_2_0::_Tuple2 0) _predefined._Nil) (select _x_2_1::_Tuple2 1)) 
receiveraccess.newReceiverHandle2 !id_0 !select_1 !connected_2 !f_3 = receiverhandle._ReceiverHandle id_0 _predefined._Nil select_1 False (receiveraccess.twowaytotriple f_3) Data.Maybe.Nothing connected_2
receiveraccess.newReceiverStateHandle2 !id_0 localState_1 !select_2 !connected_3 !f_4 = receiverhandle._ReceiverStateHandle localState_1 (receiveraccess.newReceiverHandle2 id_0 select_2 connected_3 f_4)
receiveraccess.receiverIdentified::B !id_0 !_x_1 = case _x_1 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 r_1_5 rConnected_1_6 -> <{id.==_27}> id_0 r_1_0) 
receiveraccess.inetReceiverIdentified::B !_x_0 !_x_1 = case _x_1 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 _x_1_5 rConnected_1_6 -> case _x_1_5 (Data.Maybe.Nothing -> False) (Data.Maybe.Just _x_2_0 -> case _x_0 (_Tuple2 epR1_3_0 type1_3_1 -> case _x_2_0 (_Tuple4 epR2_4_0 type2_4_1 _x_4_2 _x_4_3 -> case (<{StdInt.==_16}> epR1_3_0 epR2_4_0) (True -> <{StdInt.==_16}> type1_3_1 type2_4_1) (False -> False) ) ) ) ) 
receiveraccess.inetReceiverIdentifiedWithId::B !_x_0 !_x_1 = case _x_1 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 _x_1_5 rConnected_1_6 -> case _x_1_5 (Data.Maybe.Nothing -> False) (Data.Maybe.Just _x_2_0 -> case _x_0 (_Tuple2 id_3_0 category_3_1 -> case _x_2_0 (_Tuple4 _x_4_0 rCategory_4_1 _x_4_2 _x_4_3 -> case (<{id.==_27}> id_3_0 r_1_0) (True -> <{StdInt.==_16}> category_3_1 rCategory_4_1) (False -> False) ) ) ) ) 
receiveraccess.receiverSetSelectState !select_0 !rsH_1 = case rsH_1 (receiverhandle._ReceiverStateHandle rState_1_0 rH_1_1 -> update rsH_1::receiverhandle._ReceiverStateHandle [1:update rH_1_1::receiverhandle._ReceiverHandle [2:select_0]]) 
receiveraccess.receiverHandleSyncMessage !_x_0 !rH_1 !_x_2 = case _x_0 (receivermessage._SyncMessage _x_1_0 smMsg_1_1 smResp_1_2 smError_1_3 -> case _x_1_0 (receivertable._RecLoc rl_2_0 rlDevice_2_1 rlParent_2_2 rlReceiver_2_3 -> case rH_1 (receiverhandle._ReceiverHandle r_3_0 rASMQ_3_1 rSelect_3_2 rOneWay_3_3 rFun_3_4 r_3_5 rConnected_3_6 -> case _x_2 (_Tuple2 ls_4_0 pst_4_1 -> case (StdBool.not (receiveraccess.receiverIdentified rlReceiver_2_3 rH_1)) (True -> _Tuple3 _predefined._Nil rH_1 (_Tuple2 ls_4_0 pst_4_1)) (False -> let maybe_content_6_0 = semidynamic.getDynamic rlReceiver_2_3 smMsg_1_1 in case (Data.Maybe.isNothing maybe_content_6_0) (True -> _Tuple3 _predefined._Nil rH_1 (_Tuple2 ls_4_0 pst_4_1)) (False -> let _x_8_0 = rFun_3_4 (cast.cast (Data.Maybe.fromJust maybe_content_6_0)) (_Tuple2 ls_4_0 pst_4_1), resp_8_1 = select _x_8_0::_Tuple3 1 in case (StdList.isEmpty resp_8_1) (True -> _Tuple3 _predefined._Nil rH_1 (_Tuple2 (select _x_8_0::_Tuple3 0) (select _x_8_0::_Tuple3 2))) (False -> _Tuple3 (_predefined._Cons (semidynamic.setDynamic rlReceiver_2_3 (StdList.hd resp_8_1) smMsg_1_1) _predefined._Nil) rH_1 (_Tuple2 (select _x_8_0::_Tuple3 0) (select _x_8_0::_Tuple3 2))) ) ) ) ) ) ) 
receiveraccess.receiverAddASyncMessage !id_0 !sd_1 !rH_2 = case rH_2 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 r_1_5 rConnected_1_6 -> case (receiveraccess.receiverIdentified id_0 rH_2) (True -> let maybe_content_3_0 = semidynamic.getDynamic id_0 sd_1 in case (Data.Maybe.isNothing maybe_content_3_0) (True -> rH_2) (False -> update rH_2::receiverhandle._ReceiverHandle [1:<{StdList.++}> rASMQ_1_1 (_predefined._Cons (cast.cast (Data.Maybe.fromJust maybe_content_3_0)) _predefined._Nil)]) ) (False -> rH_2) ) 
receiveraccess.receiverApplyInetEvent !event_0 !rH_1 !_x_2 = case rH_1 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 r_1_5 rConnected_1_6 -> case r_1_5 (Data.Maybe.Just _x_2_0 -> case _x_2 (_Tuple2 ls_3_0 pst_3_1 -> let _x_4_0 = rFun_1_4 (cast.cast event_0) (_Tuple2 ls_3_0 pst_3_1) in _Tuple2 (select _x_4_0::_Tuple3 0) (select _x_4_0::_Tuple3 2)) ) ) 
receiveraccess.getInetReceiverRId !_x_0 = case _x_0 (receiverhandle._ReceiverHandle r_1_0 rASMQ_1_1 rSelect_1_2 rOneWay_1_3 rFun_1_4 r_1_5 rConnected_1_6 -> id.toRId (id.fromId r_1_0)) 


|| Converted Records
:: <{receiveraccess.gEq_s;}> = {!receiveraccess.gEq_s}

:: <{receiveraccess.gEq_ss;}> = {!receiveraccess.gEq_ss}

:: <{receiveraccess.gEq_sss;}> = {!receiveraccess.gEq_sss}

:: <{receiveraccess.gEq_ssss;}> = {!receiveraccess.gEq_ssss}

:: <{receiveraccess.gEq_sssss;}> = {!receiveraccess.gEq_sssss}

:: <{receiveraccess.gEq_ssssss;}> = {!receiveraccess.gEq_ssssss}

:: <{receiveraccess.gEq_sssssss;}> = {!receiveraccess.gEq_sssssss}

:: <{receiveraccess.gEq_ssssssss;}> = {!receiveraccess.gEq_ssssssss}

:: <{receiveraccess.gEq_sssssssss;}> = {!receiveraccess.gEq_sssssssss}

:: <{receiveraccess.bimap_s;}> = {receiveraccess.bimap_s}

:: <{receiveraccess.bimap_ss;}> = {receiveraccess.bimap_ss}

:: <{receiveraccess.bimap_sss;}> = {receiveraccess.bimap_sss}

