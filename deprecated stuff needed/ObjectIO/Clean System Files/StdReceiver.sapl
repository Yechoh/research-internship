|| ?module? StdReceiver


StdReceiver.receiverStateIdentified_20 !id_0 !rsH_1 = case rsH_1 (receiverhandle._ReceiverStateHandle rState_1_0 rHandle_1_1 -> <{_Tuple2!3}> (receiveraccess.receiverIdentified id_0 rHandle_1_1) rsH_1) 
StdReceiver.closeReceiver !id_0 !ioState_1 = let !_x_1_0 = iostate.ioStClosed ioState_1 in case (select _x_1_0::_Tuple2 0) (True -> select _x_1_0::_Tuple2 1) (False -> case (StdBool.not (StdReceiver._f77_77 (id.isCustomRId id_0) id_0)) (True -> select _x_1_0::_Tuple2 1) (False -> let ioState_4_0 = select _x_1_0::_Tuple2 1, _x_4_1 = iostate.ioStGetDevice device.ReceiverDevice ioState_4_0 in case (StdBool.not (select _x_4_1::_Tuple3 0)) (True -> select _x_4_1::_Tuple3 2) (False -> let rDevice_6_0 = select _x_4_1::_Tuple3 1, rsHs_6_1 = select (devicesystemstate.receiverSystemStateGetReceiverHandles rDevice_6_0)::receiverhandle._ReceiverHandles 0, _x_6_2 = commondef.uremove (StdReceiver.receiverStateIdentified_20 id_0) (commondef.dummy "closeReceiver") rsHs_6_1 in case (StdBool.not (select _x_6_2::_Tuple3 0)) (True -> iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_6_2::_Tuple3 2))) (select _x_4_1::_Tuple3 2)) (False -> let rsH_8_0 = select _x_6_2::_Tuple3 1, inet_8_1 = select (select rsH_8_0::receiverhandle._ReceiverStateHandle 1)::receiverhandle._ReceiverHandle 5 in case (Data.Maybe.isNothing inet_8_1) (True -> let _x_10_0 = iostate.ioStGetIdTable (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_6_2::_Tuple3 2))) (select _x_4_1::_Tuple3 2)) in StdFunc.seq (StdList.map StdReceiver.closeReceiver (select (select rsH_8_0::receiverhandle._ReceiverStateHandle 1)::receiverhandle._ReceiverHandle 6)) (iostate.ioStSetRcvDisabled True (receiverid.unbindRId id_0 (iostate.ioStSetIdTable (select (id.removeIdFromIdTable id_0 (select _x_10_0::_Tuple2 0))::_Tuple2 1) (select _x_10_0::_Tuple2 1))))) (False -> let _x_10_0 = iostate.ioStGetIdTable (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_6_2::_Tuple3 2))) (select _x_4_1::_Tuple3 2)) in iostate.appIOToolbox (select (Data.Maybe.fromJust inet_8_1)::_Tuple4 3) (StdFunc.seq (StdList.map StdReceiver.closeReceiver (select (select rsH_8_0::receiverhandle._ReceiverStateHandle 1)::receiverhandle._ReceiverHandle 6)) (iostate.ioStSetRcvDisabled True (receiverid.unbindRId id_0 (iostate.ioStSetIdTable (select (id.removeIdFromIdTable id_0 (select _x_10_0::_Tuple2 0))::_Tuple2 1) (select _x_10_0::_Tuple2 1)))))) ) ) ) ) 
StdReceiver._f77_77::B !_x_0::B id_1 = case _x_0 (True -> True) (_ -> case (id.isCustomR2Id id_1) (True -> True) (False -> id.isCustomId id_1) )
StdReceiver.getreceiver_21 !rsH_0 = case rsH_0 (receiverhandle._ReceiverStateHandle rState_1_0 rHandle_1_1 -> case rHandle_1_1 (receiverhandle._ReceiverHandle r_2_0 rASMQ_2_1 rSelect_2_2 rOneWay_2_3 rFun_2_4 r_2_5 rConnected_2_6 -> <{_Tuple2!2}> (_Tuple2 r_2_0 (<{StdReceiver._if;162;23_78}> rOneWay_2_3)) rsH_0) ) 
<{StdReceiver._if;162;23_78}> !rOneWay_0::B = case rOneWay_0 (True -> "Receiver") (_ -> "Receiver2")
StdReceiver.getreceivers_22 !_x_0 = case _x_0 (_predefined._Cons rsH_1_0 rsHs_1_1 -> let _x_2_0 = StdReceiver.getreceiver_21 rsH_1_0, _x_2_1 = StdReceiver.getreceivers_22 rsHs_1_1 in <{_Tuple2!2}> (_predefined._Cons (select _x_2_0::_Tuple2 0) (select _x_2_1::_Tuple2 0)) (_predefined._Cons (select _x_2_0::_Tuple2 1) (select _x_2_1::_Tuple2 1))) (_ -> <{_Tuple2!2}> _predefined._Nil _predefined._Nil)
StdReceiver.getReceivers !ioState_0 = let _x_1_0 = iostate.ioStGetDevice device.ReceiverDevice ioState_0 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> <{_Tuple2!3}> _predefined._Nil (select _x_1_0::_Tuple3 2)) (False -> let _x_3_0 = StdReceiver.getreceivers_22 (select (devicesystemstate.receiverSystemStateGetReceiverHandles (select _x_1_0::_Tuple3 1))::receiverhandle._ReceiverHandles 0) in <{_Tuple2!3}> (select _x_3_0::_Tuple2 0) (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_3_0::_Tuple2 1))) (select _x_1_0::_Tuple3 2))) 
StdReceiver.receiverEntrySetSelectState !select_0 !rte_1 = update rte_1::receivertable._ReceiverTableEntry [1:select_0]
StdReceiver.getReceiverIds_24 !rsH_0 = case rsH_0 (receiverhandle._ReceiverStateHandle rState_1_0 rHandle_1_1 -> case rHandle_1_1 (receiverhandle._ReceiverHandle r_2_0 rASMQ_2_1 rSelect_2_2 rOneWay_2_3 rFun_2_4 r_2_5 rConnected_2_6 -> <{_Tuple2!2}> (_Tuple2 r_2_0 rConnected_2_6) rsH_0) ) 
<{StdReceiver.getConnectedIds`_25}> !ids_0 !_x_1 !_x_2 !_x_3 = case _x_2 (_predefined._Nil -> ids_0) (_predefined._Cons _x_1_0 rsHs_1_1 -> case _x_1_0 (_Tuple2 r_2_0 rConnected_2_1 -> case (case (StdBool.not (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) r_2_0 ids_0)) (True -> True) (False -> case (StdList.isEmpty rConnected_2_1) (True -> True) (False -> StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) r_2_0 _x_1) ) ) (True -> <{StdReceiver.getConnectedIds`_25}> ids_0 _x_1 rsHs_1_1 _x_3) (False -> <{StdReceiver.getConnectedIds`_25}> (StdList.removeDup (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) (<{StdList.++}> rConnected_2_1 ids_0)) (_predefined._Cons r_2_0 _x_1) _x_3 _x_3) ) ) 
StdReceiver.getConnectedIds_26 !ids_0 !rsHs_1 = let _x_1_0 = commondef.accessList StdReceiver.getReceiverIds_24 rsHs_1, rsh_1_1 = select _x_1_0::_Tuple2 0 in <{_Tuple2!3}> (<{StdReceiver.getConnectedIds`_25}> ids_0 _predefined._Nil rsh_1_1 rsh_1_1) (select _x_1_0::_Tuple2 1)
StdReceiver.changereceiverstates_27 !_x_0 !_x_1 !rsHs_2 = case _x_1 (_predefined._Nil -> <{_Tuple2!3}> _predefined._Nil rsHs_2) (_ -> case rsHs_2 (_predefined._Nil -> <{_Tuple2!3}> _predefined._Nil _predefined._Nil) (_predefined._Cons rsH_1_0 rsHs_1_1 -> case rsH_1_0 (receiverhandle._ReceiverStateHandle rState_2_0 rHandle_2_1 -> case rHandle_2_1 (receiverhandle._ReceiverHandle r_3_0 rASMQ_3_1 rSelect_3_2 rOneWay_3_3 rFun_3_4 r_3_5 rConnected_3_6 -> let _x_4_0 = commondef.remove (<{id.==_27}> r_3_0) (commondef.dummy "changereceiverstates") _x_1 in case (select _x_4_0::_Tuple3 0) (True -> let _x_6_0 = StdReceiver.changereceiverstates_27 _x_0 (select _x_4_0::_Tuple3 2) rsHs_1_1 in <{_Tuple2!3}> (_predefined._Cons r_3_0 (select _x_6_0::_Tuple2 0)) (_predefined._Cons (_x_0 rsH_1_0) (select _x_6_0::_Tuple2 1))) (False -> let _x_6_0 = StdReceiver.changereceiverstates_27 _x_0 (select _x_4_0::_Tuple3 2) rsHs_1_1 in <{_Tuple2!3}> (select _x_6_0::_Tuple2 0) (_predefined._Cons rsH_1_0 (select _x_6_0::_Tuple2 1))) ) ) ) )
StdReceiver.changereceiverentries_28 !f_0 !_x_1 !rt_2 = case _x_1 (_predefined._Cons id_1_0 ids_1_1 -> let _x_2_0 = receivertable.getReceiverTableEntry id_1_0 rt_2, maybe_rte_2_1 = select _x_2_0::_Tuple2 0 in case (Data.Maybe.isNothing maybe_rte_2_1) (True -> StdReceiver.changereceiverentries_28 f_0 ids_1_1 (select _x_2_0::_Tuple2 1)) (False -> StdReceiver.changereceiverentries_28 f_0 ids_1_1 (receivertable.setReceiverTableEntry (f_0 (Data.Maybe.fromJust maybe_rte_2_1)) (select _x_2_0::_Tuple2 1))) ) (_ -> rt_2)
StdReceiver.anon_23::B !id_0 = case (id.isCustomRId id_0) (True -> True) (False -> case (id.isCustomR2Id id_0) (True -> True) (False -> id.isCustomId id_0) ) 
StdReceiver.changeReceivers changeReceiverState_0 changeReceiverEntry_1 !ids_2 !ioState_3 = let okids_1_0 = StdList.filter StdReceiver.anon_23 ids_2 in case (StdList.isEmpty okids_1_0) (True -> ioState_3) (False -> let _x_3_0 = iostate.ioStGetDevice device.ReceiverDevice ioState_3 in case (StdBool.not (select _x_3_0::_Tuple3 0)) (True -> select _x_3_0::_Tuple3 2) (False -> let rDevice_5_0 = select _x_3_0::_Tuple3 1, rsHs_5_1 = select (devicesystemstate.receiverSystemStateGetReceiverHandles rDevice_5_0)::receiverhandle._ReceiverHandles 0, _x_5_2 = StdReceiver.getConnectedIds_26 okids_1_0 rsHs_5_1, all_5_3 = select _x_5_2::_Tuple2 0, rsHs_5_4 = select _x_5_2::_Tuple2 1, _x_5_5 = StdReceiver.changereceiverstates_27 changeReceiverState_0 all_5_3 rsHs_5_4, myids_5_6 = select _x_5_5::_Tuple2 0 in case (StdList.isEmpty myids_5_6) (True -> iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_5_5::_Tuple2 1))) (select _x_3_0::_Tuple3 2)) (False -> let _x_7_0 = iostate.ioStGetReceiverTable (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_5_5::_Tuple2 1))) (select _x_3_0::_Tuple3 2)) in iostate.ioStSetReceiverTable (StdReceiver.changereceiverentries_28 changeReceiverEntry_1 myids_5_6 (select _x_7_0::_Tuple2 0)) (select _x_7_0::_Tuple2 1)) ) ) 
StdReceiver.enableReceivers !ids_0 !ioState_1 = StdReceiver.changeReceivers (receiveraccess.receiverSetSelectState StdIOCommon.Able) (StdReceiver.receiverEntrySetSelectState StdIOCommon.Able) ids_0 ioState_1
StdReceiver.disableReceivers !ids_0 !ioState_1 = StdReceiver.changeReceivers (receiveraccess.receiverSetSelectState StdIOCommon.Unable) (StdReceiver.receiverEntrySetSelectState StdIOCommon.Unable) ids_0 (iostate.ioStSetRcvDisabled True ioState_1)
StdReceiver.getselectstate_29 !id_0 !_x_1 = case _x_1 (_predefined._Cons rsH_1_0 rsHs_1_1 -> case rsH_1_0 (receiverhandle._ReceiverStateHandle rState_2_0 rH_2_1 -> case rH_2_1 (receiverhandle._ReceiverHandle r_3_0 rASMQ_3_1 rSelect_3_2 rOneWay_3_3 rFun_3_4 r_3_5 rConnected_3_6 -> case (receiveraccess.receiverIdentified id_0 rH_2_1) (True -> <{_Tuple2!3}> (Data.Maybe.Just rSelect_3_2) (_predefined._Cons rsH_1_0 rsHs_1_1)) (False -> let _x_5_0 = StdReceiver.getselectstate_29 id_0 rsHs_1_1 in <{_Tuple2!3}> (select _x_5_0::_Tuple2 0) (_predefined._Cons rsH_1_0 (select _x_5_0::_Tuple2 1))) ) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing _predefined._Nil)
StdReceiver.getReceiverSelectState !id_0 !ioState_1 = case (StdBool.not (StdReceiver._f79_79 (id.isCustomRId id_0) id_0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing ioState_1) (False -> let _x_2_0 = iostate.ioStGetDevice device.ReceiverDevice ioState_1 in case (StdBool.not (select _x_2_0::_Tuple3 0)) (True -> <{_Tuple2!3}> Data.Maybe.Nothing (select _x_2_0::_Tuple3 2)) (False -> let _x_4_0 = StdReceiver.getselectstate_29 id_0 (select (devicesystemstate.receiverSystemStateGetReceiverHandles (select _x_2_0::_Tuple3 1))::receiverhandle._ReceiverHandles 0) in <{_Tuple2!3}> (select _x_4_0::_Tuple2 0) (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (select _x_4_0::_Tuple2 1))) (select _x_2_0::_Tuple3 2))) ) 
StdReceiver._f79_79::B !_x_0::B id_1 = case _x_0 (True -> True) (_ -> case (id.isCustomR2Id id_1) (True -> True) (False -> id.isCustomId id_1) )
StdReceiver.toSendError !_x_0 = case _x_0 (scheduler.SwitchToYourself -> StdReceiver.SendUnknownReceiver) (scheduler.SwitchToDoesNotExist -> StdReceiver.SendUnknownReceiver) (scheduler.SwitchToReceiverDoesNotExist -> StdReceiver.SendUnknownReceiver) (scheduler.SwitchReceiverUnable -> StdReceiver.SendUnableReceiver) (scheduler.SwitchEndsUpInDeadlock -> StdReceiver.SendDeadlock) 
StdReceiver.asyncSend !rid_0 msg_1 !pState_2 = let id_1_0 = id.rIdtoId rid_0, _x_1_1 = iostate.ioStGetReceiverTable (select pState_2::iostate._PSt 1), rt_1_2 = select _x_1_1::_Tuple2 0, _x_1_3 = receivertable.getReceiverTableEntry id_1_0 rt_1_2, maybe_rte_1_4 = select _x_1_3::_Tuple2 0 in case (Data.Maybe.isNothing maybe_rte_1_4) (True -> <{_Tuple2!3}> StdReceiver.SendUnknownReceiver (update pState_2::iostate._PSt [1:iostate.ioStSetReceiverTable (select _x_1_3::_Tuple2 1) (select _x_1_1::_Tuple2 1)])) (False -> let rte_3_0 = Data.Maybe.fromJust maybe_rte_1_4, rteLoc_3_1 = select rte_3_0::receivertable._ReceiverTableEntry 0, pid_3_2 = select rteLoc_3_1::receivertable._RecLoc 0, ioState_3_3 = select _x_1_1::_Tuple2 1, _x_3_4 = iostate.ioStGetIOId ioState_3_3 in case (<{systemid.==_5}> pid_3_2 (select _x_3_4::_Tuple2 0)) (True -> <{_Tuple2!3}> StdReceiver.SendOk (select (scheduler.handleOneEventForDevices (deviceevents.ScheduleMsgEvent (deviceevents.QASyncMessage (receivermessage._QASyncMessage rteLoc_3_1 (semidynamic.openDynamic (semidynamic.rIdtoDId rid_0) msg_1)))) (update pState_2::iostate._PSt [1:iostate.ioStSetReceiverTable (receivertable.setReceiverTableEntry (update rte_3_0::receivertable._ReceiverTableEntry [2:<{StdInt.+_6}> (select rte_3_0::receivertable._ReceiverTableEntry 2) 1]) (select _x_1_3::_Tuple2 1)) (select _x_3_4::_Tuple2 1)]))::_Tuple3 2)) (False -> let qEvent_5_0 = receivermessage._QASyncMessage rteLoc_3_1 (semidynamic.openDynamic (semidynamic.rIdtoDId rid_0) msg_1), rte_5_1 = update rte_3_0::receivertable._ReceiverTableEntry [2:<{StdInt.+_6}> (select rte_3_0::receivertable._ReceiverTableEntry 2) 1], rt_5_2 = select _x_1_3::_Tuple2 1, rt_5_3 = receivertable.setReceiverTableEntry rte_5_1 rt_5_2, ioState_5_4 = select _x_3_4::_Tuple2 1, ioState_5_5 = iostate.ioStSetReceiverTable rt_5_3 ioState_5_4, pState_5_6 = update pState_2::iostate._PSt [1:ioState_5_5], _x_5_7 = scheduler.cswitchProcess pid_3_2 (deviceevents.ScheduleMsgEvent (deviceevents.QASyncMessage qEvent_5_0)) pState_5_6, maybe_error_5_8 = select _x_5_7::_Tuple3 0 in case (Data.Maybe.isJust maybe_error_5_8) (True -> <{_Tuple2!3}> (StdReceiver.toSendError (Data.Maybe.fromJust maybe_error_5_8)) (select _x_5_7::_Tuple3 2)) (False -> <{_Tuple2!3}> StdReceiver.SendOk (select _x_5_7::_Tuple3 2)) ) ) 
StdReceiver.stdReceiverFatalError !rule_0 !error_1 = commondef.fatalError rule_0 "StdReceiver" error_1
StdReceiver.PStHandleSyncMessage_30 !sm_0 !pState_1 = let _x_1_0 = scheduler.handleOneEventForDevices (deviceevents.ScheduleMsgEvent (deviceevents.SyncMessage sm_0)) pState_1, schedulerEvent_1_1 = select _x_1_0::_Tuple3 1, sm_1_2 = <{StdReceiver._c;398;35_80}> schedulerEvent_1_1, errors_1_3 = select sm_1_2::receivermessage._SyncMessage 3 in <{_Tuple2!3}> (<{StdReceiver._if;402;35_82}> (StdList.isEmpty errors_1_3) errors_1_3) (select _x_1_0::_Tuple3 2)
<{StdReceiver._if;402;35_82}> !_x_0::B errors_1 = case _x_0 (True -> StdReceiver.SendOk) (_ -> <{StdReceiver._c;404;38_81}> (StdList.hd errors_1))
<{StdReceiver._c;404;38_81}> !_x_0 = case _x_0 (receivermessage.ReceiverUnable -> StdReceiver.SendUnableReceiver) (receivermessage.ReceiverUnknown -> StdReceiver.SendUnknownReceiver) 
<{StdReceiver._c;398;35_80}> !schedulerEvent_0 = case schedulerEvent_0 (deviceevents.ScheduleMsgEvent _x_1_0 -> case _x_1_0 (deviceevents.SyncMessage sm_2_0 -> sm_2_0) ) (_ -> StdReceiver.stdReceiverFatalError "syncSend" "unexpected scheduler event")
StdReceiver.syncSend !rid_0 msg_1 !pState_2 = let id_1_0 = id.rIdtoId rid_0, _x_1_1 = iostate.ioStGetReceiverTable (select pState_2::iostate._PSt 1), rt_1_2 = select _x_1_1::_Tuple2 0, _x_1_3 = receivertable.getReceiverTableEntry id_1_0 rt_1_2, maybe_parent_1_4 = select _x_1_3::_Tuple2 0 in case (Data.Maybe.isNothing maybe_parent_1_4) (True -> <{_Tuple2!3}> StdReceiver.SendUnknownReceiver (update pState_2::iostate._PSt [1:iostate.ioStSetReceiverTable (select _x_1_3::_Tuple2 1) (select _x_1_1::_Tuple2 1)])) (False -> let parent_3_0 = Data.Maybe.fromJust maybe_parent_1_4, rteLoc_3_1 = select parent_3_0::receivertable._ReceiverTableEntry 0, pid_3_2 = select rteLoc_3_1::receivertable._RecLoc 0, rt_3_3 = select _x_1_3::_Tuple2 1, ioState_3_4 = select _x_1_1::_Tuple2 1, ioState_3_5 = iostate.ioStSetReceiverTable rt_3_3 ioState_3_4, _x_3_6 = iostate.ioStGetIOId ioState_3_5 in case (<{systemid.==_5}> pid_3_2 (select _x_3_6::_Tuple2 0)) (True -> StdReceiver.PStHandleSyncMessage_30 (receivermessage._SyncMessage rteLoc_3_1 (semidynamic.openDynamic (semidynamic.rIdtoDId rid_0) msg_1) _predefined._Nil _predefined._Nil) (update pState_2::iostate._PSt [1:select _x_3_6::_Tuple2 1])) (False -> let sEvent_5_0 = receivermessage._SyncMessage rteLoc_3_1 (semidynamic.openDynamic (semidynamic.rIdtoDId rid_0) msg_1) _predefined._Nil _predefined._Nil, ioState_5_1 = select _x_3_6::_Tuple2 1, pState_5_2 = update pState_2::iostate._PSt [1:ioState_5_1], _x_5_3 = scheduler.cswitchProcess pid_3_2 (deviceevents.ScheduleMsgEvent (deviceevents.SyncMessage sEvent_5_0)) pState_5_2, opt_error_5_4 = select _x_5_3::_Tuple3 0 in <{_Tuple2!3}> (<{StdReceiver._if;391;35_83}> (Data.Maybe.isJust opt_error_5_4) opt_error_5_4) (select _x_5_3::_Tuple3 2)) ) 
<{StdReceiver._if;391;35_83}> !_x_0::B opt_error_1 = case _x_0 (True -> StdReceiver.toSendError (Data.Maybe.fromJust opt_error_1)) (_ -> StdReceiver.SendOk)
StdReceiver.pstHandleSync2Message_31 !did_0 !sm_1 !pState_2 = let _x_1_0 = scheduler.handleOneEventForDevices (deviceevents.ScheduleMsgEvent (deviceevents.SyncMessage sm_1)) pState_2 in case (StdBool.not (select _x_1_0::_Tuple3 0)) (True -> StdReceiver.stdReceiverFatalError "syncSend2" "receiver event not handled") (False -> let schedulerEvent_3_0 = select _x_1_0::_Tuple3 1, sm_3_1 = <{StdReceiver._c;452;35_84}> schedulerEvent_3_0, errors_3_2 = select sm_3_1::receivermessage._SyncMessage 3 in case (StdBool.not (StdList.isEmpty errors_3_2)) (True -> <{_Tuple2!3}> (_Tuple2 (<{StdReceiver._c;460;35_85}> (StdList.hd errors_3_2)) Data.Maybe.Nothing) (select _x_1_0::_Tuple3 2)) (False -> let resps_5_0 = select sm_3_1::receivermessage._SyncMessage 2 in case (StdList.isEmpty resps_5_0) (True -> StdReceiver.stdReceiverFatalError "syncSend2" "no response received from bi-directional receiver") (False -> let maybe_response_7_0 = semidynamic.readDynamic did_0 (StdList.hd resps_5_0) in case (Data.Maybe.isNothing maybe_response_7_0) (True -> <{_Tuple2!3}> (_Tuple2 (StdReceiver.OtherSendReport "incorrect response received from bi-directional receiver") Data.Maybe.Nothing) (select _x_1_0::_Tuple3 2)) (False -> <{_Tuple2!3}> (_Tuple2 StdReceiver.SendOk maybe_response_7_0) (select _x_1_0::_Tuple3 2)) ) ) ) 
<{StdReceiver._c;460;35_85}> !_x_0 = case _x_0 (receivermessage.ReceiverUnable -> StdReceiver.SendUnableReceiver) (receivermessage.ReceiverUnknown -> StdReceiver.SendUnknownReceiver) 
<{StdReceiver._c;452;35_84}> !schedulerEvent_0 = case schedulerEvent_0 (deviceevents.ScheduleMsgEvent _x_1_0 -> case _x_1_0 (deviceevents.SyncMessage sm_2_0 -> sm_2_0) ) (_ -> StdReceiver.stdReceiverFatalError "syncSend2" "unexpected scheduler event")
StdReceiver.syncSend2 !r2id_0 msg_1 !pState_2 = case pState_2 (iostate._PSt ls_1_0 ioState_1_1 -> let id_2_0 = id.r2IdtoId r2id_0, _x_2_1 = iostate.ioStGetReceiverTable ioState_1_1, rt_2_2 = select _x_2_1::_Tuple2 0, _x_2_3 = receivertable.getReceiverTableEntry id_2_0 rt_2_2, maybe_parent_2_4 = select _x_2_3::_Tuple2 0 in case (Data.Maybe.isNothing maybe_parent_2_4) (True -> <{_Tuple2!3}> (_Tuple2 StdReceiver.SendUnknownReceiver Data.Maybe.Nothing) (update pState_2::iostate._PSt [1:iostate.ioStSetReceiverTable (select _x_2_3::_Tuple2 1) (select _x_2_1::_Tuple2 1)])) (False -> let parent_4_0 = Data.Maybe.fromJust maybe_parent_2_4, rteLoc_4_1 = select parent_4_0::receivertable._ReceiverTableEntry 0, pid_4_2 = select rteLoc_4_1::receivertable._RecLoc 0, rt_4_3 = select _x_2_3::_Tuple2 1, ioState_4_4 = select _x_2_1::_Tuple2 1, ioState_4_5 = iostate.ioStSetReceiverTable rt_4_3 ioState_4_4, _x_4_6 = iostate.ioStGetIOId ioState_4_5 in case (<{systemid.==_5}> pid_4_2 (select _x_4_6::_Tuple2 0)) (True -> StdReceiver.pstHandleSync2Message_31 (<{semidynamic.r2IdtoDId`}> r2id_0) (receivermessage._SyncMessage rteLoc_4_1 (semidynamic.openDynamic (semidynamic.r2IdtoDId r2id_0) msg_1) _predefined._Nil _predefined._Nil) (update pState_2::iostate._PSt [1:select _x_4_6::_Tuple2 1])) (False -> let sEvent_6_0 = receivermessage._SyncMessage rteLoc_4_1 (semidynamic.openDynamic (semidynamic.r2IdtoDId r2id_0) msg_1) _predefined._Nil _predefined._Nil, ioState_6_1 = select _x_4_6::_Tuple2 1, pState_6_2 = update pState_2::iostate._PSt [1:ioState_6_1], _x_6_3 = scheduler.cswitchProcess pid_4_2 (deviceevents.ScheduleMsgEvent (deviceevents.SyncMessage sEvent_6_0)) pState_6_2, opt_error_6_4 = select _x_6_3::_Tuple3 0 in case (Data.Maybe.isJust opt_error_6_4) (True -> <{_Tuple2!3}> (_Tuple2 (StdReceiver.toSendError (Data.Maybe.fromJust opt_error_6_4)) Data.Maybe.Nothing) (select _x_6_3::_Tuple3 2)) (False -> let resp_8_0 = select _x_6_3::_Tuple3 1 in case (StdList.isEmpty resp_8_0) (True -> StdReceiver.stdReceiverFatalError "syncSend2" "no response received from bi-directional receiver") (False -> let maybe_response_10_0 = semidynamic.readDynamic (<{semidynamic.r2IdtoDId`}> r2id_0) (StdList.hd resp_8_0) in case (Data.Maybe.isNothing maybe_response_10_0) (True -> <{_Tuple2!3}> (_Tuple2 (StdReceiver.OtherSendReport "incorrect response received from bi-directional receiver") Data.Maybe.Nothing) (select _x_6_3::_Tuple3 2)) (False -> <{_Tuple2!3}> (_Tuple2 StdReceiver.SendOk maybe_response_10_0) (select _x_6_3::_Tuple3 2)) ) ) ) ) ) 
StdReceiver.getReceiverType_8 _x_0 = "Receiver"
StdReceiver.anon_32 !x_0 = x_0
StdReceiver.openReceiver_9 ls_0 !rDef_1 !pState_2 = let rid_1_0 = receiverdefaccess.receiverDefRId rDef_1, id_1_1 = id.rIdtoId rid_1_0, pState_1_2 = select receiverdevice.receiverFunctions::devicefunctions._DeviceFunctions 5 pState_2, _x_1_3 = iostate.ioStGetIdTable (select pState_1_2::iostate._PSt 1), idtable_1_4 = select _x_1_3::_Tuple2 0, _x_1_5 = id.memberIdTable id_1_1 idtable_1_4 in case (select _x_1_5::_Tuple2 0) (True -> <{_Tuple2!3}> StdIOCommon.ErrorIdsInUse (update pState_1_2::iostate._PSt [1:iostate.ioStSetIdTable (select _x_1_5::_Tuple2 1) (select _x_1_3::_Tuple2 1)])) (False -> let ioState_3_0 = select _x_1_3::_Tuple2 1, _x_3_1 = iostate.ioStGetReceiverTable ioState_3_0, rt_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = receivertable.getReceiverTableEntry id_1_1 rt_3_2 in case (Data.Maybe.isJust (select _x_3_3::_Tuple2 0)) (True -> StdReceiver.stdReceiverFatalError "openReceiver (Receiver)" "inconsistency detected between IdTable and ReceiverTable") (False -> let rt_5_0 = select _x_3_3::_Tuple2 1, ioState_5_1 = select _x_3_1::_Tuple2 1, ioState_5_2 = iostate.ioStSetReceiverTable rt_5_0 ioState_5_1, _x_5_3 = iostate.ioStGetDevice device.ReceiverDevice ioState_5_2 in case (StdBool.not (select _x_5_3::_Tuple3 0)) (True -> StdReceiver.stdReceiverFatalError "openReceiver (Receiver)" "could not retrieve ReceiverSystemState from IOSt") (False -> let rDefAttributes_7_0 = receiverdefaccess.receiverDefAttributes rDef_1, select_7_1 = receiverdefaccess.receiverDefSelectState rDef_1, _x_7_2 = iostate.ioStGetIOId (receiverid.bindRId id_1_1 select_7_1 id_1_1 device.ReceiverDevice (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (_predefined._Cons (receiveraccess.newReceiverStateHandle id_1_1 (select _x_7_3::_Tuple2 0) select_7_1 (StdReceiverAttribute.getReceiverConnectedReceivers (select (commondef.cselect StdReceiverAttribute.isReceiverConnectedReceivers (StdReceiverDef.ReceiverConnectedReceivers _predefined._Nil) rDefAttributes_7_0)::_Tuple2 1)) (receiverdefaccess.receiverDefFunction rDef_1)) (select (devicesystemstate.receiverSystemStateGetReceiverHandles (select _x_5_3::_Tuple3 1))::receiverhandle._ReceiverHandles 0)))) (select _x_5_3::_Tuple3 2))), _x_7_3 = StdReceiverAttribute.getReceiverInitFun (select (commondef.cselect StdReceiverAttribute.isReceiverInit (StdReceiverDef.ReceiverInit StdReceiver.anon_32) rDefAttributes_7_0)::_Tuple2 1) (_Tuple2 ls_0 (update pState_1_2::iostate._PSt [1:iostate.ioStSetIdTable (select (id.addIdToIdTable id_1_1 (id._IdParent (select _x_7_2::_Tuple2 0) device.ReceiverDevice id_1_1) (select _x_1_5::_Tuple2 1))::_Tuple2 1) (select _x_7_2::_Tuple2 1)])) in <{_Tuple2!3}> StdIOCommon.NoError (select _x_7_3::_Tuple2 1)) ) ) 
StdReceiver.getReceiverType_10 _x_0 = "Receiver2"
StdReceiver.anon_33 !x_0 = x_0
StdReceiver.openReceiver_11 ls_0 !rDef_1 !pState_2 = let r2id_1_0 = receiverdefaccess.receiver2DefR2Id rDef_1, id_1_1 = id.r2IdtoId r2id_1_0, pState_1_2 = select receiverdevice.receiverFunctions::devicefunctions._DeviceFunctions 5 pState_2, _x_1_3 = iostate.ioStGetIdTable (select pState_1_2::iostate._PSt 1), idtable_1_4 = select _x_1_3::_Tuple2 0, _x_1_5 = id.memberIdTable id_1_1 idtable_1_4 in case (select _x_1_5::_Tuple2 0) (True -> <{_Tuple2!3}> StdIOCommon.ErrorIdsInUse (update pState_1_2::iostate._PSt [1:iostate.ioStSetIdTable (select _x_1_5::_Tuple2 1) (select _x_1_3::_Tuple2 1)])) (False -> let ioState_3_0 = select _x_1_3::_Tuple2 1, _x_3_1 = iostate.ioStGetReceiverTable ioState_3_0, rt_3_2 = select _x_3_1::_Tuple2 0, _x_3_3 = receivertable.getReceiverTableEntry id_1_1 rt_3_2 in case (Data.Maybe.isJust (select _x_3_3::_Tuple2 0)) (True -> StdReceiver.stdReceiverFatalError "openReceiver (Receiver2)" "inconsistency detected between IdTable and ReceiverTable") (False -> let rt_5_0 = select _x_3_3::_Tuple2 1, ioState_5_1 = select _x_3_1::_Tuple2 1, ioState_5_2 = iostate.ioStSetReceiverTable rt_5_0 ioState_5_1, _x_5_3 = iostate.ioStGetDevice device.ReceiverDevice ioState_5_2 in case (StdBool.not (select _x_5_3::_Tuple3 0)) (True -> StdReceiver.stdReceiverFatalError "openReceiver (Receiver2)" "could not retrieve ReceiverSystemState from IOSt") (False -> let rDefAttributes_7_0 = receiverdefaccess.receiver2DefAttributes rDef_1, select_7_1 = receiverdefaccess.receiver2DefSelectState rDef_1, _x_7_2 = iostate.ioStGetIOId (receiverid.bindRId id_1_1 select_7_1 id_1_1 device.ReceiverDevice (iostate.ioStSetDevice (devicesystemstate.ReceiverSystemState (receiverhandle._ReceiverHandles (_predefined._Cons (receiveraccess.newReceiverStateHandle2 id_1_1 (select _x_7_3::_Tuple2 0) select_7_1 (StdReceiverAttribute.getReceiverConnectedReceivers (select (commondef.cselect StdReceiverAttribute.isReceiverConnectedReceivers (StdReceiverDef.ReceiverConnectedReceivers _predefined._Nil) rDefAttributes_7_0)::_Tuple2 1)) (receiverdefaccess.receiver2DefFunction rDef_1)) (select (devicesystemstate.receiverSystemStateGetReceiverHandles (select _x_5_3::_Tuple3 1))::receiverhandle._ReceiverHandles 0)))) (select _x_5_3::_Tuple3 2))), _x_7_3 = StdReceiverAttribute.getReceiverInitFun (select (commondef.cselect StdReceiverAttribute.isReceiverInit (StdReceiverDef.ReceiverInit StdReceiver.anon_33) rDefAttributes_7_0)::_Tuple2 1) (_Tuple2 ls_0 (update pState_1_2::iostate._PSt [1:iostate.ioStSetIdTable (select (id.addIdToIdTable id_1_1 (id._IdParent (select _x_7_2::_Tuple2 0) device.ReceiverDevice id_1_1) (select _x_1_5::_Tuple2 1))::_Tuple2 1) (select _x_7_2::_Tuple2 1)])) in <{_Tuple2!3}> StdIOCommon.NoError (select _x_7_3::_Tuple2 1)) ) ) 
<{StdReceiver.==_12}>::B !_x_0 !report_1 = case _x_0 (StdReceiver.SendOk -> <{StdReceiver._c;301;43_86}> report_1) (StdReceiver.SendUnknownReceiver -> <{StdReceiver._c;304;43_87}> report_1) (StdReceiver.SendUnableReceiver -> <{StdReceiver._c;307;43_88}> report_1) (StdReceiver.SendDeadlock -> <{StdReceiver._c;310;43_89}> report_1) (StdReceiver.OtherSendReport s1_1_0 -> <{StdReceiver._c;313;43_90}> report_1 s1_1_0) 
<{StdReceiver._c;313;43_90}>::B !report_0 s1_1 = case report_0 (StdReceiver.OtherSendReport s2_1_0 -> <{StdString.==_2}> s1_1 s2_1_0) (_ -> False)
<{StdReceiver._c;310;43_89}>::B !report_0 = case report_0 (StdReceiver.SendDeadlock -> True) (_ -> False)
<{StdReceiver._c;307;43_88}>::B !report_0 = case report_0 (StdReceiver.SendUnableReceiver -> True) (_ -> False)
<{StdReceiver._c;304;43_87}>::B !report_0 = case report_0 (StdReceiver.SendUnknownReceiver -> True) (_ -> False)
<{StdReceiver._c;301;43_86}>::B !report_0 = case report_0 (StdReceiver.SendOk -> True) (_ -> False)
StdReceiver.toString_13 !_x_0 = case _x_0 (StdReceiver.SendOk -> "SendOk") (StdReceiver.SendUnknownReceiver -> "SendUnknownReceiver") (StdReceiver.SendUnableReceiver -> "SendUnableReceiver") (StdReceiver.SendDeadlock -> "SendDeadlock") (StdReceiver.OtherSendReport s_1_0 -> <{StdString.+++_11}> "(OtherSendReport " (<{StdString.+++_11}> s_1_0 ")")) 
<{StdReceiver.TD;SendReport}> _x_0::B = _predefined._Nil
<{StdReceiver.TD;Receivers;}> _x_0::B = _predefined._Nil

:: StdReceiver.SendReport = StdReceiver.SendOk | StdReceiver.SendUnknownReceiver | StdReceiver.SendUnableReceiver | StdReceiver.SendDeadlock | StdReceiver.OtherSendReport !a1

|| Converted Records
:: <{StdReceiver.Receivers;}> = {!StdReceiver.getReceiverType, !StdReceiver.openReceiver}

:: <{StdReceiver.gEq_s;}> = {!StdReceiver.gEq_s}

:: <{StdReceiver.gEq_ss;}> = {!StdReceiver.gEq_ss}

:: <{StdReceiver.gEq_sss;}> = {!StdReceiver.gEq_sss}

:: <{StdReceiver.gEq_ssss;}> = {!StdReceiver.gEq_ssss}

:: <{StdReceiver.gEq_sssss;}> = {!StdReceiver.gEq_sssss}

:: <{StdReceiver.gEq_ssssss;}> = {!StdReceiver.gEq_ssssss}

:: <{StdReceiver.gEq_sssssss;}> = {!StdReceiver.gEq_sssssss}

:: <{StdReceiver.gEq_ssssssss;}> = {!StdReceiver.gEq_ssssssss}

:: <{StdReceiver.gEq_sssssssss;}> = {!StdReceiver.gEq_sssssssss}

:: <{StdReceiver.bimap_s;}> = {StdReceiver.bimap_s}

:: <{StdReceiver.bimap_ss;}> = {StdReceiver.bimap_ss}

:: <{StdReceiver.bimap_sss;}> = {StdReceiver.bimap_sss}

