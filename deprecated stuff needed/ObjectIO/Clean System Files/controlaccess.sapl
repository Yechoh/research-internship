|| ?module? controlaccess


controlaccess.getcontroltype_32 !_x_0 = case _x_0 (windowhandle.IsButtonControl -> "ButtonControl") (windowhandle.IsCheckControl -> "CheckControl") (windowhandle.IsCompoundControl -> "CompoundControl") (windowhandle.IsCustomButtonControl -> "CustomButtonControl") (windowhandle.IsCustomControl -> "CustomControl") (windowhandle.IsEditControl -> "EditControl") (windowhandle.IsLayoutControl -> "LayoutControl") (windowhandle.IsPopUpControl -> "PopUpControl") (windowhandle.IsRadioControl -> "RadioControl") (windowhandle.IsSliderControl -> "SliderControl") (windowhandle.IsTextControl -> "TextControl") (windowhandle.IsOtherControl type_1_0 -> type_1_0) 
controlaccess.gettype_33 !_x_0 = case _x_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> _predefined._Cons (_Tuple2 (controlaccess.getcontroltype_32 w_1_2) w_1_0) _predefined._Nil) 
<{controlaccess.mapWElementHandle`_29}> f_0 !_x_1 = case _x_1 (<{wstate.WRecursiveHandle`}> itemHs_1_0 _x_1_1 -> <{controlaccess.mapWElementHandles`}> f_0 itemHs_1_0) (<{wstate.WItemHandle`}> itemH_1_0 -> f_0 itemH_1_0) 
<{controlaccess.mapWElementHandles`}> f_0 !itemHs_1 = case (StdList.isEmpty itemHs_1) (True -> _predefined._Nil) (False -> let _x_2_0 = commondef.hdtl itemHs_1 in <{StdList.++}> (<{controlaccess.mapWElementHandle`_29}> f_0 (select _x_2_0::_Tuple2 0)) (<{controlaccess.mapWElementHandles`}> f_0 (select _x_2_0::_Tuple2 1))) 
controlaccess.getcontrolstypes !itemHs_0 = <{controlaccess.mapWElementHandles`}> controlaccess.gettype_33 itemHs_0
<{controlaccess.seekmapWItemHandle`_30}> f_0 x_1 !_x_2 = case _x_2 (<{wstate.WRecursiveHandle`}> itemHs_1_0 _x_1_1 -> <{controlaccess.seekmapWElementHandle`}> f_0 x_1 itemHs_1_0) (<{wstate.WItemHandle`}> itemH_1_0 -> f_0 itemH_1_0) 
<{controlaccess.seekmapWElementHandle`}> f_0 x_1 !itemHs_2 = case (StdList.isEmpty itemHs_2) (True -> <{_Tuple2!1}> False x_1) (False -> let _x_2_0::B = commondef.hdtl itemHs_2, itemH_2_1 = select _x_2_0::_Tuple2 0, _x_2_2 = <{controlaccess.seekmapWItemHandle`_30}> f_0 x_1 itemH_2_1, found_2_3 = select _x_2_2::_Tuple2 0 in case found_2_3 (True -> <{_Tuple2!1}> found_2_3 (select _x_2_2::_Tuple2 1)) (False -> <{controlaccess.seekmapWElementHandle`}> f_0 (select _x_2_2::_Tuple2 1) (select _x_2_0::_Tuple2 1)) ) 
controlaccess.getcompoundtypes_34 !id_0 !_x_1 = case _x_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> <{_Tuple2!1}> False _predefined._Nil) (False -> case (Data.Maybe.isNothing w_1_0) (True -> <{controlaccess.getcompoundstypes`_35}> id_0 w_1_7) (False -> case (StdBool.not (<{id.==_27}> id_0 (Data.Maybe.fromJust w_1_0))) (True -> <{controlaccess.getcompoundstypes`_35}> id_0 w_1_7) (False -> <{_Tuple2!1}> True (controlaccess.getcontrolstypes w_1_7)) ) ) ) 
<{controlaccess.getcompoundstypes`_35}> !id_0 !itemHs_1 = <{controlaccess.seekmapWElementHandle`}> (controlaccess.getcompoundtypes_34 id_0) _predefined._Nil itemHs_1
controlaccess.getcompoundstypes !id_0 !itemHs_1 = select (<{controlaccess.getcompoundstypes`_35}> id_0 itemHs_1)::_Tuple2 1
controlaccess.anon_66 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_65 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.eqfst3id::B !id1_0 !_x_1 = case _x_1 (_Tuple3 id2_1_0 _x_1_1 _x_1_2 -> <{id.==_27}> id1_0 id2_1_0) 
<{controlaccess.statemapWElementHandle`_31}> cond_0 f_1 s_2 !_x_3 = case _x_3 (<{wstate.WRecursiveHandle`}> itemHs_1_0 _x_1_1 -> <{controlaccess.statemapWElementHandles`}> cond_0 f_1 s_2 itemHs_1_0) (<{wstate.WItemHandle`}> itemH_1_0 -> f_1 itemH_1_0 s_2) 
<{controlaccess.statemapWElementHandles`}> !cond_0 f_1 !s_2 !itemHs_3 = case (cond_0 s_2) (True -> s_2) (False -> case (StdList.isEmpty itemHs_3) (True -> s_2) (False -> let _x_3_0 = commondef.hdtl itemHs_3 in <{controlaccess.statemapWElementHandles`}> cond_0 f_1 (<{controlaccess.statemapWElementHandle`_31}> cond_0 f_1 s_2 (select _x_3_0::_Tuple2 0)) (select _x_3_0::_Tuple2 1)) ) 
controlaccess.anon_154::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_155::B !x_0 = StdList.isEmpty (controlaccess.fst_65 x_0)
controlaccess.getlayouts_36 !parentPos_0 !itemH_1 !ids_layouts_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_layouts_2 (_Tuple2 ids_2_0 layouts_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolslayouts (StdIOBasic.movePoint w_1_9 parentPos_0) w_1_7 ids_layouts_2) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolslayouts (StdIOBasic.movePoint w_1_9 parentPos_0) w_1_7 ids_layouts_2) (False -> let absolutePos_6_0 = StdIOBasic.movePoint w_1_9 parentPos_0, _x_6_1 = commondef.cselect <{wstateaccess.iscontrolpos`}> (<{wstate.ControlPos`}> (_Tuple2 StdIOCommon.Left StdIOCommon.NoOffset)) w_1_6, posAtt_6_2 = select _x_6_1::_Tuple2 1 in controlaccess.getcontrolslayouts absolutePos_6_0 w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (_Tuple2 (<{controlaccess._if;115;31_200}> (select _x_6_1::_Tuple2 0) posAtt_6_2) (StdIOBasic.toVector_23 absolutePos_6_0))) layouts_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolslayouts !parentPos_0 !itemHs_1 !ids_layouts_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_155 (controlaccess.getlayouts_36 parentPos_0) ids_layouts_2 itemHs_1
<{controlaccess._if;115;31_200}> !_x_0::B posAtt_1 = case _x_0 (True -> Data.Maybe.Just (<{wstateaccess.getcontrolpos`}> posAtt_1)) (_ -> Data.Maybe.Nothing)
controlaccess.anon_68 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_67 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_156::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_157::B !x_0 = StdList.isEmpty (controlaccess.fst_67 x_0)
controlaccess.getsizes_37 !wMetrics_0 !itemH_1 !ids_sizes_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_sizes_2 (_Tuple2 ids_2_0 sizes_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsviewsizes wMetrics_0 w_1_7 ids_sizes_2) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsviewsizes wMetrics_0 w_1_7 ids_sizes_2) (False -> controlaccess.getcontrolsviewsizes wMetrics_0 w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (<{controlaccess._if;139;31_201}> (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) itemH_1 wMetrics_0)) sizes_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolsviewsizes !wMetrics_0 !itemHs_1 !ids_sizes_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_157 (controlaccess.getsizes_37 wMetrics_0) ids_sizes_2 itemHs_1
<{controlaccess._if;139;31_201}> !_x_0::B !itemH_1 wMetrics_2 = case _x_0 (True -> select itemH_1::<{wstate._WItemHandle`}> 10) (_ -> let info_1_0 = <{wstateaccess.getWItemCompoundInfo`}> (select itemH_1::<{wstate._WItemHandle`}> 5), _x_1_1 = _Tuple2 (select info_1_0::windowhandle._CompoundInfo 0) (_Tuple2 (Data.Maybe.isJust (select info_1_0::windowhandle._CompoundInfo 2)) (Data.Maybe.isJust (select info_1_0::windowhandle._CompoundInfo 3))), itemSize_1_2 = select itemH_1::<{wstate._WItemHandle`}> 10 in commondef.rectSize (oswindow.osGetCompoundContentRect wMetrics_2 (oswindow.osScrollbarsAreVisible wMetrics_2 (select _x_1_1::_Tuple2 0) (commondef.toTuple_72 itemSize_1_2) (select _x_1_1::_Tuple2 1)) (commondef.sizeToRect itemSize_1_2)))
controlaccess.anon_70 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_69 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_158::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_159::B !x_0 = StdList.isEmpty (controlaccess.fst_69 x_0)
controlaccess.getsizes_38 !wMetrics_0 !itemH_1 !ids_sizes_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_sizes_2 (_Tuple2 ids_2_0 sizes_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsoutersizes wMetrics_0 w_1_7 ids_sizes_2) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsoutersizes wMetrics_0 w_1_7 ids_sizes_2) (False -> controlaccess.getcontrolsoutersizes wMetrics_0 w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (select itemH_1::<{wstate._WItemHandle`}> 10)) sizes_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolsoutersizes !wMetrics_0 !itemHs_1 !ids_sizes_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_159 (controlaccess.getsizes_38 wMetrics_0) ids_sizes_2 itemHs_1
controlaccess.anon_72 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_71 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_160::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_161::B !x_0 = StdList.isEmpty (controlaccess.fst_71 x_0)
controlaccess.getselects_39 !itemH_0 !ids_selects_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_selects_1 (_Tuple2 ids_2_0 selects_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsselects w_1_7 ids_selects_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsselects w_1_7 ids_selects_1) (False -> controlaccess.getcontrolsselects w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (<{controlaccess._if;173;51_202}> w_1_4)) selects_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolsselects !itemHs_0 !ids_selects_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_161 controlaccess.getselects_39 ids_selects_1 itemHs_0
<{controlaccess._if;173;51_202}> !w_0::B = case w_0 (True -> StdIOCommon.Able) (_ -> StdIOCommon.Unable)
controlaccess.anon_74 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_73 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_162::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_163::B !x_0 = StdList.isEmpty (controlaccess.fst_73 x_0)
controlaccess.getshowstates_40 !itemH_0 !ids_shows_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_shows_1 (_Tuple2 ids_2_0 shows_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsshowstates w_1_7 ids_shows_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsshowstates w_1_7 ids_shows_1) (False -> controlaccess.getcontrolsshowstates w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True w_1_3) shows_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolsshowstates !itemHs_0 !ids_shows_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_163 controlaccess.getshowstates_40 ids_shows_1 itemHs_0
controlaccess.anon_76 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_75 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.getPopUpText_41 !popUp_0 = case popUp_0 (<{wstate._PopUpInfo`}> popUp_1_0 popUp_1_1 popUp_1_2 -> case (Data.Maybe.isNothing popUp_1_2) (True -> case (StdList.isEmpty popUp_1_0) (True -> "") (False -> let x_4_0::I = 0, y_4_1::I = <{StdInt.-_7}> (select popUp_0::<{wstate._PopUpInfo`}> 1) 1 in <{StdList.!!}> popUp_1_0 (<{controlaccess._c;51;16_203}> (<{StdInt.<_17}> x_4_0 y_4_1) y_4_1 x_4_0)) ) (False -> select (Data.Maybe.fromJust popUp_1_2)::windowhandle._PopUpEditInfo 0) ) 
<{controlaccess._c;51;16_203}>::I !_x_0::B y_1::I x_2::I = case _x_0 (True -> y_1) (_ -> x_2)
controlaccess.anon_164::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_165::B !x_0 = StdList.isEmpty (controlaccess.fst_75 x_0)
controlaccess.gettext_42 !itemH_0 !ids_texts_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_texts_1 (_Tuple2 ids_2_0 texts_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolstexts w_1_7 ids_texts_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolstexts w_1_7 ids_texts_1) (False -> let _x_6_0 = <{controlaccess._c;211;35_204}> w_1_2 w_1_5 in case (StdBool.not (select _x_6_0::_Tuple2 0)) (True -> controlaccess.getcontrolstexts w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) texts_2_1)) (False -> controlaccess.getcontrolstexts w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select _x_6_0::_Tuple2 1))) texts_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolstexts !itemHs_0 !ids_texts_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_165 controlaccess.gettext_42 ids_texts_1 itemHs_0
<{controlaccess._c;211;35_204}> !w_0 w_1 = case w_0 (windowhandle.IsPopUpControl -> _Tuple2 True (controlaccess.getPopUpText_41 (<{wstateaccess.getWItemPopUpInfo`}> w_1))) (windowhandle.IsTextControl -> _Tuple2 True (select (<{wstateaccess.getWItemTextInfo`}> w_1)::windowhandle._TextInfo 0)) (windowhandle.IsEditControl -> _Tuple2 True (select (<{wstateaccess.getWItemEditInfo`}> w_1)::windowhandle._EditInfo 0)) (windowhandle.IsButtonControl -> _Tuple2 True (select (<{wstateaccess.getWItemButtonInfo`}> w_1)::windowhandle._ButtonInfo 0)) (_ -> _Tuple2 False StdMisc.undef)
controlaccess.anon_78 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_77 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_166::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_167::B !x_0 = StdList.isEmpty (controlaccess.fst_77 x_0)
controlaccess.getnrlines_43 !itemH_0 !ids_nrlines_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_nrlines_1 (_Tuple2 ids_2_0 nrlines_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsnrlines w_1_7 ids_nrlines_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsnrlines w_1_7 ids_nrlines_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsEditControl)) (True -> controlaccess.getcontrolsnrlines w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) nrlines_2_1)) (False -> controlaccess.getcontrolsnrlines w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemEditInfo`}> (select itemH_0::<{wstate._WItemHandle`}> 5))::windowhandle._EditInfo 2))) nrlines_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolsnrlines !itemHs_0 !ids_nrlines_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_167 controlaccess.getnrlines_43 ids_nrlines_1 itemHs_0
controlaccess.anon_80 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_79 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.getlook_44 !_x_0 !info_1 = case _x_0 (windowhandle.IsCustomButtonControl -> let look_2_0 = select (<{wstateaccess.getWItemCustomButtonInfo`}> info_1)::windowhandle._CustomButtonInfo 0 in <{_Tuple2!1}> True (Data.Maybe.Just (_Tuple2 (select look_2_0::windowhandle._LookInfo 2) (select look_2_0::windowhandle._LookInfo 0)))) (windowhandle.IsCustomControl -> let look_2_0 = select (<{wstateaccess.getWItemCustomInfo`}> info_1)::windowhandle._CustomInfo 0 in <{_Tuple2!1}> True (Data.Maybe.Just (_Tuple2 (select look_2_0::windowhandle._LookInfo 2) (select look_2_0::windowhandle._LookInfo 0)))) (windowhandle.IsCompoundControl -> let look_2_0 = select (select (<{wstateaccess.getWItemCompoundInfo`}> info_1)::windowhandle._CompoundInfo 4)::windowhandle._CompoundLookInfo 0 in <{_Tuple2!1}> True (Data.Maybe.Just (_Tuple2 (select look_2_0::windowhandle._LookInfo 2) (select look_2_0::windowhandle._LookInfo 0)))) (_ -> <{_Tuple2!1}> False StdMisc.undef)
controlaccess.anon_168::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_169::B !x_0 = StdList.isEmpty (controlaccess.fst_79 x_0)
controlaccess.getlooks_45 !itemH_0 !ids_looks_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_looks_1 (_Tuple2 ids_2_0 looks_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolslooks w_1_7 ids_looks_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolslooks w_1_7 ids_looks_1) (False -> let _x_6_0 = controlaccess.getlook_44 w_1_2 w_1_5 in case (StdBool.not (select _x_6_0::_Tuple2 0)) (True -> controlaccess.getcontrolslooks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) looks_2_1)) (False -> controlaccess.getcontrolslooks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (select _x_6_0::_Tuple2 1)) looks_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolslooks !itemHs_0 !ids_looks_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_169 controlaccess.getlooks_45 ids_looks_1 itemHs_0
controlaccess.anon_82 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_81 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_170::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_171::B !x_0 = StdList.isEmpty (controlaccess.fst_81 x_0)
controlaccess.getsizes_46 !itemH_0 !ids_sizes_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_sizes_1 (_Tuple2 ids_2_0 sizes_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsminsizes w_1_7 ids_sizes_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsminsizes w_1_7 ids_sizes_1) (False -> let _x_6_0 = commondef.cselect <{wstateaccess.iscontrolminimumsize`}> (commondef.dummy "getcontrolsminsizes") w_1_6, minatt_6_1 = select _x_6_0::_Tuple2 1 in controlaccess.getcontrolsminsizes w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (<{controlaccess._if;290;72_205}> (select _x_6_0::_Tuple2 0) minatt_6_1)) sizes_2_1)::_Tuple2 1))) ) ) ) 
controlaccess.getcontrolsminsizes !itemHs_0 !ids_sizes_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_171 controlaccess.getsizes_46 ids_sizes_1 itemHs_0
<{controlaccess._if;290;72_205}> !_x_0::B minatt_1 = case _x_0 (True -> Data.Maybe.Just (<{wstateaccess.getcontrolminimumsize`}> minatt_1)) (_ -> Data.Maybe.Nothing)
controlaccess.anon_84 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_83 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_172::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_173::B !x_0 = StdList.isEmpty (controlaccess.fst_83 x_0)
controlaccess.getresizes_47 !itemH_0 !ids_resizes_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_resizes_1 (_Tuple2 ids_2_0 resizes_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsresizes w_1_7 ids_resizes_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsresizes w_1_7 ids_resizes_1) (False -> let _x_6_0 = commondef.cselect <{wstateaccess.iscontrolresize`}> (commondef.dummy "getresizes") w_1_6 in case (StdBool.not (select _x_6_0::_Tuple2 0)) (True -> controlaccess.getcontrolsresizes w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) resizes_2_1)) (False -> let resizes1_8_0 = select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (<{wstateaccess.getcontrolresize`}> (select _x_6_0::_Tuple2 1)))) resizes1_8_0)::_Tuple2 1 in controlaccess.getcontrolsresizes w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) resizes1_8_0)) ) ) ) ) 
controlaccess.getcontrolsresizes !itemHs_0 !ids_resizes_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_173 controlaccess.getresizes_47 ids_resizes_1 itemHs_0
controlaccess.anon_86 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_85 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_174::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_175::B !x_0 = StdList.isEmpty (controlaccess.fst_85 x_0)
controlaccess.getpopuptitle_48 !itemH_0 !ids_titles_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_titles_1 (_Tuple2 ids_2_0 titles_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getpopupitems w_1_7 ids_titles_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getpopupitems w_1_7 ids_titles_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsPopUpControl)) (True -> controlaccess.getpopupitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) titles_2_1)) (False -> controlaccess.getpopupitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemPopUpInfo`}> w_1_5)::<{wstate._PopUpInfo`}> 0))) titles_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getpopupitems !itemHs_0 !ids_titles_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_175 controlaccess.getpopuptitle_48 ids_titles_1 itemHs_0
controlaccess.anon_88 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_87 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_176::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_177::B !x_0 = StdList.isEmpty (controlaccess.fst_87 x_0)
controlaccess.getselectedpopup_49 !itemH_0 !ids_indices_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_indices_1 (_Tuple2 ids_2_0 indices_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getselectedpopupitems w_1_7 ids_indices_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getselectedpopupitems w_1_7 ids_indices_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsPopUpControl)) (True -> controlaccess.getselectedpopupitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) indices_2_1)) (False -> controlaccess.getselectedpopupitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemPopUpInfo`}> w_1_5)::<{wstate._PopUpInfo`}> 1))) indices_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getselectedpopupitems !itemHs_0 !ids_indices_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_177 controlaccess.getselectedpopup_49 ids_indices_1 itemHs_0
controlaccess.anon_90 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_89 !tuple_0 = select tuple_0::_Tuple2 0
<{controlaccess.c;364;98_50}> !g_l_0 = <{controlaccess.g_c1;364;105_206}> g_l_0
<{controlaccess.g_c1;364;105_206}> !g_l_0 = case g_l_0 (_predefined._Cons item_1_0 g_t_1_1 -> _predefined._Cons (select (select item_1_0::<{wstate._RadioItemInfo`}> 0)::_Tuple2 0) (<{controlaccess.c;364;98_50}> g_t_1_1)) (_ -> _predefined._Nil)
controlaccess.anon_178::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_179::B !x_0 = StdList.isEmpty (controlaccess.fst_89 x_0)
controlaccess.getradiotitle_51 !itemH_0 !ids_titles_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_titles_1 (_Tuple2 ids_2_0 titles_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getradioitems w_1_7 ids_titles_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getradioitems w_1_7 ids_titles_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsRadioControl)) (True -> controlaccess.getradioitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) titles_2_1)) (False -> controlaccess.getradioitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (<{controlaccess.c;364;98_50}> (select (<{wstateaccess.getWItemRadioInfo`}> w_1_5)::<{wstate._RadioInfo`}> 0)))) titles_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getradioitems !itemHs_0 !ids_titles_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_179 controlaccess.getradiotitle_51 ids_titles_1 itemHs_0
controlaccess.anon_92 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_91 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_180::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_181::B !x_0 = StdList.isEmpty (controlaccess.fst_91 x_0)
controlaccess.getmarks_52 !itemH_0 !ids_marks_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_marks_1 (_Tuple2 ids_2_0 marks_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getradiocontrolsmarks w_1_7 ids_marks_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getradiocontrolsmarks w_1_7 ids_marks_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsRadioControl)) (True -> controlaccess.getradiocontrolsmarks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) marks_2_1)) (False -> controlaccess.getradiocontrolsmarks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemRadioInfo`}> w_1_5)::<{wstate._RadioInfo`}> 2))) marks_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getradiocontrolsmarks !itemHs_0 !ids_marks_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_181 controlaccess.getmarks_52 ids_marks_1 itemHs_0
controlaccess.anon_94 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_93 !tuple_0 = select tuple_0::_Tuple2 0
<{controlaccess.c;400;99_53}> !g_l_0 = <{controlaccess.g_c1;400;106_207}> g_l_0
<{controlaccess.g_c1;400;106_207}> !g_l_0 = case g_l_0 (_predefined._Cons item_1_0 g_t_1_1 -> _predefined._Cons (select (select item_1_0::<{wstate._CheckItemInfo`}> 0)::_Tuple3 0) (<{controlaccess.c;400;99_53}> g_t_1_1)) (_ -> _predefined._Nil)
controlaccess.anon_182::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_183::B !x_0 = StdList.isEmpty (controlaccess.fst_93 x_0)
controlaccess.getchecktitle_54 !itemH_0 !ids_titles_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_titles_1 (_Tuple2 ids_2_0 titles_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcheckitems w_1_7 ids_titles_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcheckitems w_1_7 ids_titles_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCheckControl)) (True -> controlaccess.getcheckitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) titles_2_1)) (False -> controlaccess.getcheckitems w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (<{controlaccess.c;400;99_53}> (select (<{wstateaccess.getWItemCheckInfo`}> w_1_5)::<{wstate._CheckInfo`}> 0)))) titles_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcheckitems !itemHs_0 !ids_titles_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_183 controlaccess.getchecktitle_54 ids_titles_1 itemHs_0
controlaccess.anon_96 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_95 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.getMarkIndices_55 !index_0::I !_x_1 = case _x_1 (_predefined._Cons _x_1_0 items_1_1 -> case _x_1_0 (<{wstate._CheckItemInfo`}> _x_2_0 check_2_1 check_2_2 check_2_3 -> case _x_2_0 (_Tuple3 _x_3_0 _x_3_1 mark_3_2 -> case (StdIOCommon.marked mark_3_2) (True -> _predefined._Cons index_0 (controlaccess.getMarkIndices_55 (<{StdInt.+_6}> index_0 1) items_1_1)) (False -> controlaccess.getMarkIndices_55 (<{StdInt.+_6}> index_0 1) items_1_1) ) ) ) (_ -> _predefined._Nil)
controlaccess.anon_184::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_185::B !x_0 = StdList.isEmpty (controlaccess.fst_95 x_0)
controlaccess.getmarks_56 !itemH_0 !ids_marks_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_marks_1 (_Tuple2 ids_2_0 marks_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcheckcontrolsmarks w_1_7 ids_marks_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcheckcontrolsmarks w_1_7 ids_marks_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCheckControl)) (True -> controlaccess.getcheckcontrolsmarks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) marks_2_1)) (False -> controlaccess.getcheckcontrolsmarks w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (controlaccess.getMarkIndices_55 1 (select (<{wstateaccess.getWItemCheckInfo`}> w_1_5)::<{wstate._CheckInfo`}> 0)))) marks_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcheckcontrolsmarks !itemHs_0 !ids_marks_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_185 controlaccess.getmarks_56 ids_marks_1 itemHs_0
controlaccess.anon_98 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_97 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_186::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_187::B !x_0 = StdList.isEmpty (controlaccess.fst_97 x_0)
controlaccess.getdirections_57 !itemH_0 !ids_sliders_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_sliders_1 (_Tuple2 ids_2_0 sliders_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getslidersdirections w_1_7 ids_sliders_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getslidersdirections w_1_7 ids_sliders_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsSliderControl)) (True -> controlaccess.getslidersdirections w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) sliders_2_1)) (False -> controlaccess.getslidersdirections w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemSliderInfo`}> w_1_5)::<{wstate._SliderInfo`}> 0))) sliders_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getslidersdirections !itemHs_0 !ids_sliders_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_187 controlaccess.getdirections_57 ids_sliders_1 itemHs_0
controlaccess.anon_100 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_99 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_188::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_189::B !x_0 = StdList.isEmpty (controlaccess.fst_99 x_0)
controlaccess.getstates_58 !itemH_0 !ids_states_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_states_1 (_Tuple2 ids_2_0 states_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getslidersstates w_1_7 ids_states_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getslidersstates w_1_7 ids_states_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsSliderControl)) (True -> controlaccess.getslidersstates w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) states_2_1)) (False -> controlaccess.getslidersstates w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (select (<{wstateaccess.getWItemSliderInfo`}> w_1_5)::<{wstate._SliderInfo`}> 2))) states_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getslidersstates !itemHs_0 !ids_states_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_189 controlaccess.getstates_58 ids_states_1 itemHs_0
controlaccess.anon_102 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_101 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_190::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_191::B !x_0 = StdList.isEmpty (controlaccess.fst_101 x_0)
controlaccess.getframes_59 !wMetrics_0 !itemH_1 !ids_frames_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_frames_2 (_Tuple2 ids_2_0 frames_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsframes wMetrics_0 w_1_7 ids_frames_2) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsframes wMetrics_0 w_1_7 ids_frames_2) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> controlaccess.getcontrolsframes wMetrics_0 w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) frames_2_1)) (False -> let info_7_0 = <{wstateaccess.getWItemCompoundInfo`}> w_1_5, _x_7_1 = _Tuple3 (select info_7_0::windowhandle._CompoundInfo 1) (select info_7_0::windowhandle._CompoundInfo 0) (_Tuple2 (Data.Maybe.isJust (select info_7_0::windowhandle._CompoundInfo 2)) (Data.Maybe.isJust (select info_7_0::windowhandle._CompoundInfo 3))) in controlaccess.getcontrolsframes wMetrics_0 w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (commondef.rectToRectangle (oswindow.osGetCompoundContentRect wMetrics_0 (oswindow.osScrollbarsAreVisible wMetrics_0 (select _x_7_1::_Tuple3 1) (commondef.toTuple_72 w_1_10) (select _x_7_1::_Tuple3 2)) (commondef.posSizeToRect (select _x_7_1::_Tuple3 0) w_1_10))))) frames_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolsframes !wMetrics_0 !itemHs_1 !ids_frames_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_191 (controlaccess.getframes_59 wMetrics_0) ids_frames_2 itemHs_1
controlaccess.anon_104 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_103 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_192::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_193::B !x_0 = StdList.isEmpty (controlaccess.fst_103 x_0)
controlaccess.getdomains_60 !itemH_0 !ids_domains_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_domains_1 (_Tuple2 ids_2_0 domains_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsdomains w_1_7 ids_domains_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getcontrolsdomains w_1_7 ids_domains_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> controlaccess.getcontrolsdomains w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) domains_2_1)) (False -> controlaccess.getcontrolsdomains w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (commondef.rectToRectangle (select (<{wstateaccess.getWItemCompoundInfo`}> w_1_5)::windowhandle._CompoundInfo 0)))) domains_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolsdomains !itemHs_0 !ids_domains_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_193 controlaccess.getdomains_60 ids_domains_1 itemHs_0
controlaccess.anon_106 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_105 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.getscrollfunction_61 !_x_0 = case _x_0 (windowhandle._ScrollInfo scrollFunction_1_0 scroll_1_1 scroll_1_2 scroll_1_3 -> scrollFunction_1_0) 
controlaccess.anon_194::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_195::B !x_0 = StdList.isEmpty (controlaccess.fst_105 x_0)
controlaccess.getfuncs_62 !itemH_0 !ids_funcs_1 = case itemH_0 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_funcs_1 (_Tuple2 ids_2_0 funcs_2_1 -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getscrollfunctions w_1_7 ids_funcs_1) (False -> let item_4_0 = Data.Maybe.fromJust w_1_0, _x_4_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_4_0 ids_2_0 in case (StdBool.not (select _x_4_1::_Tuple2 0)) (True -> controlaccess.getscrollfunctions w_1_7 ids_funcs_1) (False -> case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> controlaccess.getscrollfunctions w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) funcs_2_1)) (False -> let info_7_0 = <{wstateaccess.getWItemCompoundInfo`}> w_1_5 in controlaccess.getscrollfunctions w_1_7 (_Tuple2 (select _x_4_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_4_0) (_Tuple3 item_4_0 True (Data.Maybe.Just (_Tuple2 (_Tuple2 StdIOCommon.Horizontal (StdMaybe.mapMaybe controlaccess.getscrollfunction_61 (select info_7_0::windowhandle._CompoundInfo 2))) (_Tuple2 StdIOCommon.Vertical (StdMaybe.mapMaybe controlaccess.getscrollfunction_61 (select info_7_0::windowhandle._CompoundInfo 3)))))) funcs_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getscrollfunctions !itemHs_0 !ids_funcs_1 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_195 controlaccess.getfuncs_62 ids_funcs_1 itemHs_0
controlaccess.anon_108 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_107 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_196::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_197::B !x_0 = StdList.isEmpty (controlaccess.fst_107 x_0)
controlaccess.getspaces_63 curspaces_0 !itemH_1 !ids_spaces_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_spaces_2 (_Tuple2 ids_2_0 spaces_2_1 -> case (case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsLayoutControl)) (False -> False) ) (True -> <{_Tuple2!3}> ids_2_0 spaces_2_1) (False -> case (Data.Maybe.isNothing w_1_0) (True -> controlaccess.getcontrolsspaces (<{wstateaccess.getcontrolitemspace`}> (select (commondef.cselect <{wstateaccess.iscontrolitemspace`}> (<{wstate.ControlItemSpace`}> (select curspaces_0::_Tuple2 0) (select curspaces_0::_Tuple2 1)) w_1_6)::_Tuple2 1)) (select itemH_1::<{wstate._WItemHandle`}> 7) ids_spaces_2) (False -> let item_5_0 = Data.Maybe.fromJust w_1_0, _x_5_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_5_0 ids_2_0 in case (StdBool.not (select _x_5_1::_Tuple2 0)) (True -> controlaccess.getcontrolsspaces (<{wstateaccess.getcontrolitemspace`}> (select (commondef.cselect <{wstateaccess.iscontrolitemspace`}> (<{wstate.ControlItemSpace`}> (select curspaces_0::_Tuple2 0) (select curspaces_0::_Tuple2 1)) w_1_6)::_Tuple2 1)) (select itemH_1::<{wstate._WItemHandle`}> 7) (_Tuple2 (select _x_5_1::_Tuple2 1) spaces_2_1)) (False -> let newspaces_7_0 = <{wstateaccess.getcontrolitemspace`}> (select (commondef.cselect <{wstateaccess.iscontrolitemspace`}> (<{wstate.ControlItemSpace`}> (select curspaces_0::_Tuple2 0) (select curspaces_0::_Tuple2 1)) w_1_6)::_Tuple2 1) in controlaccess.getcontrolsspaces newspaces_7_0 (select itemH_1::<{wstate._WItemHandle`}> 7) (_Tuple2 (select _x_5_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_5_0) (_Tuple3 item_5_0 True (Data.Maybe.Just newspaces_7_0)) spaces_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolsspaces initspaces_0 !itemHs_1 !ids_spaces_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_197 (controlaccess.getspaces_63 initspaces_0) ids_spaces_2 itemHs_1
controlaccess.anon_110 !f_0 g_1 x_2 = f_0 (g_1 x_2)
controlaccess.fst_109 !tuple_0 = select tuple_0::_Tuple2 0
controlaccess.anon_198::B !g_0 x_1 = StdList.isEmpty (g_0 x_1)
controlaccess.anon_199::B !x_0 = StdList.isEmpty (controlaccess.fst_109 x_0)
controlaccess.getmargins_64 curmargins_0 !itemH_1 !ids_margins_2 = case itemH_1 (<{wstate._WItemHandle`}> w_1_0 w_1_1 w_1_2 w_1_3 w_1_4 w_1_5 w_1_6 w_1_7 w_1_8 w_1_9 w_1_10 w_1_11 w_1_12 -> case ids_margins_2 (_Tuple2 ids_2_0 margins_2_1 -> case (case (StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsCompoundControl)) (True -> True) (False -> StdBool.not (<{windowhandle.==_8}> w_1_2 windowhandle.IsLayoutControl)) ) (True -> <{_Tuple2!3}> ids_2_0 margins_2_1) (False -> case (Data.Maybe.isNothing w_1_0) (True -> let _x_5_0 = select curmargins_0::_Tuple2 0, _x_5_1 = select curmargins_0::_Tuple2 1 in controlaccess.getcontrolsmargins (_Tuple2 (<{wstateaccess.getcontrolhmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolhmargin`}> (<{wstate.ControlHMargin`}> (select _x_5_0::_Tuple2 0) (select _x_5_0::_Tuple2 1)) w_1_6)::_Tuple2 1)) (<{wstateaccess.getcontrolvmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolvmargin`}> (<{wstate.ControlVMargin`}> (select _x_5_1::_Tuple2 0) (select _x_5_1::_Tuple2 1)) w_1_6)::_Tuple2 1))) (select itemH_1::<{wstate._WItemHandle`}> 7) ids_margins_2) (False -> let item_5_0 = Data.Maybe.fromJust w_1_0, _x_5_1 = commondef.removeCheck (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) item_5_0 ids_2_0 in case (StdBool.not (select _x_5_1::_Tuple2 0)) (True -> let _x_7_0 = select curmargins_0::_Tuple2 0, _x_7_1 = select curmargins_0::_Tuple2 1 in controlaccess.getcontrolsmargins (_Tuple2 (<{wstateaccess.getcontrolhmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolhmargin`}> (<{wstate.ControlHMargin`}> (select _x_7_0::_Tuple2 0) (select _x_7_0::_Tuple2 1)) w_1_6)::_Tuple2 1)) (<{wstateaccess.getcontrolvmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolvmargin`}> (<{wstate.ControlVMargin`}> (select _x_7_1::_Tuple2 0) (select _x_7_1::_Tuple2 1)) w_1_6)::_Tuple2 1))) (select itemH_1::<{wstate._WItemHandle`}> 7) (_Tuple2 (select _x_5_1::_Tuple2 1) margins_2_1)) (False -> let _x_7_0 = select curmargins_0::_Tuple2 0, _x_7_1 = select curmargins_0::_Tuple2 1, newmargins_7_2 = _Tuple2 (<{wstateaccess.getcontrolhmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolhmargin`}> (<{wstate.ControlHMargin`}> (select _x_7_0::_Tuple2 0) (select _x_7_0::_Tuple2 1)) w_1_6)::_Tuple2 1)) (<{wstateaccess.getcontrolvmargin`}> (select (commondef.cselect <{wstateaccess.iscontrolvmargin`}> (<{wstate.ControlVMargin`}> (select _x_7_1::_Tuple2 0) (select _x_7_1::_Tuple2 1)) w_1_6)::_Tuple2 1)) in controlaccess.getcontrolsmargins newmargins_7_2 (select itemH_1::<{wstate._WItemHandle`}> 7) (_Tuple2 (select _x_5_1::_Tuple2 1) (select (commondef.creplace (controlaccess.eqfst3id item_5_0) (_Tuple3 item_5_0 True (Data.Maybe.Just newmargins_7_2)) margins_2_1)::_Tuple2 1))) ) ) ) ) 
controlaccess.getcontrolsmargins initmargins_0 !itemHs_1 !ids_margins_2 = <{controlaccess.statemapWElementHandles`}> controlaccess.anon_199 (controlaccess.getmargins_64 initmargins_0) ids_margins_2 itemHs_1


|| Converted Records
:: <{controlaccess.gEq_s;}> = {!controlaccess.gEq_s}

:: <{controlaccess.gEq_ss;}> = {!controlaccess.gEq_ss}

:: <{controlaccess.gEq_sss;}> = {!controlaccess.gEq_sss}

:: <{controlaccess.gEq_ssss;}> = {!controlaccess.gEq_ssss}

:: <{controlaccess.gEq_sssss;}> = {!controlaccess.gEq_sssss}

:: <{controlaccess.gEq_ssssss;}> = {!controlaccess.gEq_ssssss}

:: <{controlaccess.gEq_sssssss;}> = {!controlaccess.gEq_sssssss}

:: <{controlaccess.gEq_ssssssss;}> = {!controlaccess.gEq_ssssssss}

:: <{controlaccess.gEq_sssssssss;}> = {!controlaccess.gEq_sssssssss}

:: <{controlaccess.bimap_s;}> = {controlaccess.bimap_s}

:: <{controlaccess.bimap_ss;}> = {controlaccess.bimap_ss}

:: <{controlaccess.bimap_sss;}> = {controlaccess.bimap_sss}

