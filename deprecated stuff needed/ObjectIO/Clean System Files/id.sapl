|| ?module? id


id.windowMenuId = id.SpecialId 1
id.windowMenuRadioId = id.SpecialId 2
id.windowMenuCascadeId = id.SpecialId 3
id.windowMenuTileHId = id.SpecialId 4
id.windowMenuTileVId = id.SpecialId 5
id.windowMenuSeparatorId = id.SpecialId 6
id.toId !i_0::I = id.CustomId i_0
id.toRId !i_0::I = id.RId i_0
id.toR2Id !i_0::I = id.R2Id i_0
id.sysId !i_0::I = id.SysId i_0
id.fromId::I !_x_0 = case _x_0 (id.CustomId id_1_0 -> id_1_0) (id.CustomRId id_1_0 -> id_1_0) (id.CustomR2Id id_1_0 -> id_1_0) (id.SysId id_1_0 -> id_1_0) (id.SpecialId id_1_0 -> id_1_0) 
id.isSysId::B !_x_0 = case _x_0 (id.SysId _x_1_0 -> True) (_ -> False)
id.isCustomId::B !_x_0 = case _x_0 (id.CustomId _x_1_0 -> True) (_ -> False)
id.isCustomRId::B !_x_0 = case _x_0 (id.CustomRId _x_1_0 -> True) (_ -> False)
id.isCustomR2Id::B !_x_0 = case _x_0 (id.CustomR2Id _x_1_0 -> True) (_ -> False)
id.isSpecialId::B !_x_0 = case _x_0 (id.SpecialId _x_1_0 -> True) (_ -> False)
id.rIdtoId !_x_0 = case _x_0 (id.RId i_1_0 -> id.CustomRId i_1_0) 
id.r2IdtoId !_x_0 = case _x_0 (id.R2Id i_1_0 -> id.CustomR2Id i_1_0) 
id.initialIdTable = id._IdTable _predefined._Nil _predefined._Nil _predefined._Nil _predefined._Nil _predefined._Nil
id.membersortlist::B !x_0::I !_x_1 = case _x_1 (_predefined._Cons _x_1_0 ys_1_1 -> case _x_1_0 (_Tuple2 y_2_0 _x_2_1 -> case (<{StdInt.==_16}> x_0 y_2_0) (True -> True) (False -> case (<{StdInt.<_17}> y_2_0 x_0) (True -> False) (False -> id.membersortlist x_0 ys_1_1) ) ) ) (_ -> False)
id.memberIdTable !_x_0 !it_1 = case _x_0 (id.CustomId nr_1_0 -> case it_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.membersortlist nr_1_0 custom_2_0) it_1) ) (id.CustomRId nr_1_0 -> case it_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.membersortlist nr_1_0 customR_2_1) it_1) ) (id.CustomR2Id nr_1_0 -> case it_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.membersortlist nr_1_0 customR2_2_2) it_1) ) (id.SysId nr_1_0 -> case it_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.membersortlist nr_1_0 sys_2_3) it_1) ) (id.SpecialId nr_1_0 -> case it_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.membersortlist nr_1_0 special_2_4) it_1) ) 
id.noMember_42 !id_0 !table_1 = let _x_1_0 = id.memberIdTable id_0 table_1 in <{_Tuple2!3}> (StdBool.not (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1)
<{id.==_27}>::B !_x_0 !id_1 = case _x_0 (id.CustomId id1_1_0 -> <{id._c;102;35_93}> id_1 id1_1_0) (id.CustomRId id1_1_0 -> <{id._c;107;35_94}> id_1 id1_1_0) (id.CustomR2Id id1_1_0 -> <{id._c;112;35_95}> id_1 id1_1_0) (id.SysId id1_1_0 -> <{id._c;117;35_96}> id_1 id1_1_0) (id.SpecialId id1_1_0 -> <{id._c;120;35_97}> id_1 id1_1_0) (_ -> False)
<{id._c;120;35_97}>::B !id_0 id1_1::I = case id_0 (id.SpecialId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (_ -> False)
<{id._c;117;35_96}>::B !id_0 id1_1::I = case id_0 (id.SysId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (_ -> False)
<{id._c;112;35_95}>::B !id_0 id1_1::I = case id_0 (id.CustomId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomRId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomR2Id id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (_ -> False)
<{id._c;107;35_94}>::B !id_0 id1_1::I = case id_0 (id.CustomId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomRId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomR2Id id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (_ -> False)
<{id._c;102;35_93}>::B !id_0 id1_1::I = case id_0 (id.CustomId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomRId id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (id.CustomR2Id id2_1_0 -> <{StdInt.==_16}> id1_1 id2_1_0) (_ -> False)
id.okMembersIdTable !ids_0 !idTable_1 = case (StdBool.not (commondef.noDuplicates (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{id.==_27}>)) ids_0)) (True -> <{_Tuple2!3}> False idTable_1) (False -> commondef.allList id.noMember_42 ids_0 idTable_1) 
id.getparentsortlist !x_0::I !_x_1 = case _x_1 (_predefined._Cons _x_1_0 ys_1_1 -> case _x_1_0 (_Tuple2 y_2_0 py_2_1 -> case (<{StdInt.==_16}> x_0 y_2_0) (True -> Data.Maybe.Just py_2_1) (False -> case (<{StdInt.<_17}> y_2_0 x_0) (True -> Data.Maybe.Nothing) (False -> id.getparentsortlist x_0 ys_1_1) ) ) ) (_ -> Data.Maybe.Nothing)
id.getIdParent !_x_0 !idTable_1 = case _x_0 (id.CustomId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.getparentsortlist nr_1_0 custom_2_0) idTable_1) ) (id.CustomRId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.getparentsortlist nr_1_0 customR_2_1) idTable_1) ) (id.CustomR2Id nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.getparentsortlist nr_1_0 customR2_2_2) idTable_1) ) (id.SysId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.getparentsortlist nr_1_0 sys_2_3) idTable_1) ) (id.SpecialId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> <{_Tuple2!3}> (id.getparentsortlist nr_1_0 special_2_4) idTable_1) ) 
id.getIdParents !ids_0 !idTable_1 = StdFunc.seqList (StdList.map id.getIdParent ids_0) idTable_1
id.addtosortlist !x_0::I !px_1 !list_2 = case list_2 (_predefined._Cons entry_1_0 ys_1_1 -> case entry_1_0 (_Tuple2 y_2_0 py_2_1 -> case (<{StdInt.==_16}> x_0 y_2_0) (True -> <{_Tuple2!3}> True list_2) (False -> case (<{StdInt.<_17}> y_2_0 x_0) (True -> <{_Tuple2!3}> False (_predefined._Cons (_Tuple2 x_0 px_1) list_2)) (False -> let _x_5_0 = id.addtosortlist x_0 px_1 ys_1_1 in <{_Tuple2!3}> (select _x_5_0::_Tuple2 0) (_predefined._Cons entry_1_0 (select _x_5_0::_Tuple2 1))) ) ) ) (_ -> <{_Tuple2!3}> False (_predefined._Cons (_Tuple2 x_0 px_1) _predefined._Nil))
id.addIdToIdTable !_x_0 !idParent_1 !idTable_2 = case _x_0 (id.CustomId nr_1_0 -> case idTable_2 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.addtosortlist nr_1_0 idParent_1 custom_2_0 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_2::id._IdTable [0:select _x_3_0::_Tuple2 1])) ) (id.CustomRId nr_1_0 -> case idTable_2 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.addtosortlist nr_1_0 idParent_1 customR_2_1 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_2::id._IdTable [1:select _x_3_0::_Tuple2 1])) ) (id.CustomR2Id nr_1_0 -> case idTable_2 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.addtosortlist nr_1_0 idParent_1 customR2_2_2 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_2::id._IdTable [2:select _x_3_0::_Tuple2 1])) ) (id.SysId nr_1_0 -> case idTable_2 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.addtosortlist nr_1_0 idParent_1 sys_2_3 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_2::id._IdTable [3:select _x_3_0::_Tuple2 1])) ) (id.SpecialId nr_1_0 -> case idTable_2 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.addtosortlist nr_1_0 idParent_1 special_2_4 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_2::id._IdTable [4:select _x_3_0::_Tuple2 1])) ) 
id.add_43 !_x_0 !idTable_1 = case _x_0 (_Tuple2 id_1_0 parent_1_1 -> id.addIdToIdTable id_1_0 parent_1_1 idTable_1) 
id.addIdsToIdTable !idparents_0 !idTable_1 = let _x_1_0 = commondef.strictSeqList (StdList.map id.add_43 idparents_0) idTable_1 in <{_Tuple2!3}> (StdList.and (select _x_1_0::_Tuple2 0)) (select _x_1_0::_Tuple2 1)
id.removefromsortlist !x_0::I !_x_1 = case _x_1 (_predefined._Cons _x_1_0 ys_1_1 -> case _x_1_0 (_Tuple2 y_2_0 py_2_1 -> case (<{StdInt.==_16}> x_0 y_2_0) (True -> <{_Tuple2!3}> True ys_1_1) (False -> case (<{StdInt.<_17}> y_2_0 x_0) (True -> <{_Tuple2!3}> False (_predefined._Cons (_Tuple2 y_2_0 py_2_1) ys_1_1)) (False -> let _x_5_0 = id.removefromsortlist x_0 ys_1_1 in <{_Tuple2!3}> (select _x_5_0::_Tuple2 0) (_predefined._Cons (_Tuple2 y_2_0 py_2_1) (select _x_5_0::_Tuple2 1))) ) ) ) (_ -> <{_Tuple2!3}> False _predefined._Nil)
id.removeIdFromIdTable !_x_0 !idTable_1 = case _x_0 (id.CustomId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.removefromsortlist nr_1_0 custom_2_0 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_1::id._IdTable [0:select _x_3_0::_Tuple2 1])) ) (id.CustomRId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.removefromsortlist nr_1_0 customR_2_1 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_1::id._IdTable [1:select _x_3_0::_Tuple2 1])) ) (id.CustomR2Id nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.removefromsortlist nr_1_0 customR2_2_2 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_1::id._IdTable [2:select _x_3_0::_Tuple2 1])) ) (id.SysId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.removefromsortlist nr_1_0 sys_2_3 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_1::id._IdTable [3:select _x_3_0::_Tuple2 1])) ) (id.SpecialId nr_1_0 -> case idTable_1 (id._IdTable custom_2_0 customR_2_1 customR2_2_2 sys_2_3 special_2_4 -> let _x_3_0 = id.removefromsortlist nr_1_0 special_2_4 in <{_Tuple2!3}> (StdBool.not (select _x_3_0::_Tuple2 0)) (update idTable_1::id._IdTable [4:select _x_3_0::_Tuple2 1])) ) 
id.removeIdsFromIdTable !_x_0 !idTable_1 = case _x_0 (_predefined._Cons id_1_0 ids_1_1 -> let _x_2_0 = id.removeIdFromIdTable id_1_0 idTable_1, idTable_2_1 = select _x_2_0::_Tuple2 1, _x_2_2 = id.removeIdsFromIdTable ids_1_1 idTable_2_1 in <{_Tuple2!3}> (id._f98_98 (select _x_2_0::_Tuple2 0) _x_2_2) (select _x_2_2::_Tuple2 1)) (_ -> <{_Tuple2!3}> True idTable_1)
id._f98_98::B !_x_0::B _x_1 = case _x_0 (True -> select _x_1::_Tuple2 0) (_ -> False)
id.idFatalError !rule_0 !error_1 = commondef.fatalError rule_0 "id" error_1
id.specialIdName !_x_0::I = case _x_0 (1 -> "WindowMenuId") (2 -> "WindowMenuRadioId") (3 -> "SpecialWindowMenuCascadeId") (4 -> "SpecialWindowMenuTileHId") (5 -> "SpecialWindowMenuTileVId") (6 -> "WindowMenuSeparatorId") (_ -> id.idFatalError "toString (Id)" "undefined special Id.")
<{id.==_28}>::B !_x_0 !_x_1 = case _x_0 (id.RId i_1_0 -> case _x_1 (id.RId j_2_0 -> <{StdInt.==_16}> i_1_0 j_2_0) ) 
<{id.==_29}>::B !_x_0 !_x_1 = case _x_0 (id.R2Id i_1_0 -> case _x_1 (id.R2Id j_2_0 -> <{StdInt.==_16}> i_1_0 j_2_0) ) 
id.toString_30 !_x_0 = case _x_0 (id.CustomId id_1_0 -> <{StdString.+++_11}> "toId " (StdString.toString_5 id_1_0)) (id.CustomRId _x_1_0 -> "RId") (id.CustomR2Id _x_1_0 -> "R2Id") (id.SysId _x_1_0 -> "Id") (id.SpecialId id_1_0 -> id.specialIdName id_1_0) 
<{id.TD;Id}> _x_0::B = _predefined._Nil
<{id.TD;RId}> _x_0::B = _predefined._Nil
<{id.TD;R2Id}> _x_0::B = _predefined._Nil
<{id.TD;IdTable}> _x_0::B = _predefined._Nil
<{id.TD;IdParent}> _x_0::B = _predefined._Nil

:: id.Id = id.CustomId !a1::I | id.CustomRId !a1::I | id.CustomR2Id !a1::I | id.SysId !a1::I | id.SpecialId !a1::I
:: id.RId = id.RId !a1::I
:: id.R2Id = id.R2Id !a1::I

|| Converted Records
:: id._IdTable = {!id.customIds, !id.customRIds, !id.customR2Ids, !id.sysIds, !id.specialIds}

:: id._IdParent = {!id.idpIOId, !id.idpDevice, !id.idpId}

:: <{id.gEq_s;}> = {!id.gEq_s}

:: <{id.gEq_ss;}> = {!id.gEq_ss}

:: <{id.gEq_sss;}> = {!id.gEq_sss}

:: <{id.gEq_ssss;}> = {!id.gEq_ssss}

:: <{id.gEq_sssss;}> = {!id.gEq_sssss}

:: <{id.gEq_ssssss;}> = {!id.gEq_ssssss}

:: <{id.gEq_sssssss;}> = {!id.gEq_sssssss}

:: <{id.gEq_ssssssss;}> = {!id.gEq_ssssssss}

:: <{id.gEq_sssssssss;}> = {!id.gEq_sssssssss}

:: <{id.bimap_s;}> = {id.bimap_s}

:: <{id.bimap_ss;}> = {id.bimap_ss}

:: <{id.bimap_sss;}> = {id.bimap_sss}

