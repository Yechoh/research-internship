|| ?module? Sapl.Target.Flavour


Sapl.Target.Flavour.anon_13::B !f_0 = Data.Maybe.isJust (select f_0::Sapl.Target.Flavour._BIFRep 3)
Sapl.Target.Flavour.anon_14 f_0 = _Tuple2 (select f_0::Sapl.Target.Flavour._BIFRep 0) (_Tuple2 (Data.Maybe.fromJust (select f_0::Sapl.Target.Flavour._BIFRep 3)) (select f_0::Sapl.Target.Flavour._BIFRep 1))
Sapl.Target.Flavour.anon_15::B !f_0 = Data.Maybe.isJust (select f_0::Sapl.Target.Flavour._BIFRep 4)
Sapl.Target.Flavour.collectStrictnessInfo_18 !_vArray_0 arr_1 !_x_2 = case _x_2 (_predefined._Nil -> arr_1) (_predefined._Cons _x_1_0 bs_1_1 -> case _x_1_0 (Sapl.Target.Flavour.ForceBinding i_2_0 -> Sapl.Target.Flavour.collectStrictnessInfo_18 _vArray_0 (<{Sapl.Target.Flavour._if;70;25_243}> (StdBool.not (<{StdInt.<_17}> (select _vArray_0::<{_SystemArray.Array;}> 4 arr_1) i_2_0)) _vArray_0 arr_1 i_2_0) bs_1_1) (_ -> Sapl.Target.Flavour.collectStrictnessInfo_18 _vArray_0 arr_1 bs_1_1)) 
<{Sapl.Target.Flavour._if;70;25_243}> !_x_0::B _vArray_1 arr_2 i_3::I = case _x_0 (True -> select _vArray_1::<{_SystemArray.Array;}> 5 arr_2 (<{StdInt.-_7}> i_3 1) '1') (_ -> arr_2)
Sapl.Target.Flavour.foldl_25 op_0 r_1 !_x_2 = case _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.Flavour.foldl_25 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.Flavour.app_16 feval_0 eval_1 args_2 a_3 !_x_4 = case _x_4 (Sapl.Target.Flavour.StringPart str_1_0 -> <{Text.StringAppender.<++_5}> a_3 str_1_0) (Sapl.Target.Flavour.Binding x_1_0 -> eval_1 (<{StdList.!!}> args_2 (<{StdInt.-_7}> x_1_0 1)) a_3) (Sapl.Target.Flavour.ForceBinding x_1_0 -> feval_0 (<{StdList.!!}> args_2 (<{StdInt.-_7}> x_1_0 1)) a_3) 
Sapl.Target.Flavour.foldl_191 feval_0 eval_1 args_2 r_3 !_x_4 = case _x_4 (_predefined._Nil -> r_3) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.Flavour.foldl_191 feval_0 eval_1 args_2 (Sapl.Target.Flavour.app_16 feval_0 eval_1 args_2 r_3 a_1_0) x_1_1) 
Sapl.Target.Flavour.inst_17 !bindings_0 eval_1 feval_2 args_3 a_4 = Sapl.Target.Flavour.foldl_191 feval_2 eval_1 args_3 a_4 bindings_0
Sapl.Target.Flavour.revstr_12 !_vtoChar_0 !ss_1 = StdList.toString_49 _vtoChar_0 (StdList.reverse ss_1)
Sapl.Target.Flavour.revstr_192 !ss_0 = StdList.toString_79 (StdList.reverse ss_0)
<{Sapl.Target.Flavour.extractBindings`_11}> !_x_0 _x_1 = case _x_0 (_predefined._Nil -> case _x_1 (_predefined._Nil -> _predefined._Nil) (_ -> _predefined._Cons (Sapl.Target.Flavour.StringPart (Sapl.Target.Flavour.revstr_192 _x_1)) _predefined._Nil)) (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (':' -> case _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> case _x_3_0 ('!' -> case _x_3_1 (_predefined._Cons x_5_0 _x_5_1 -> case _x_5_1 (_predefined._Cons _x_6_0 xs_6_1 -> case _x_6_0 (':' -> case (StdChar.isDigit x_5_0) (True -> <{Sapl.Target.Flavour._c;21;23_244}> _x_1 x_5_0 xs_6_1) ) ) ) ) (_ -> case _x_3_1 (_predefined._Cons _x_4_0 xs_4_1 -> case _x_4_0 (':' -> case (StdChar.isDigit _x_3_0) (True -> <{Sapl.Target.Flavour._c;25;23_245}> _x_1 _x_3_0 xs_4_1) ) ) )) ) (_ -> <{Sapl.Target.Flavour.extractBindings`_11}> _x_1_1 (_predefined._Cons _x_1_0 _x_1))) 
<{Sapl.Target.Flavour._c;25;23_245}> !_x_0 _x_1::C xs_2 = case _x_0 (_predefined._Nil -> _predefined._Cons (Sapl.Target.Flavour.Binding (StdChar.digitToInt _x_1)) (<{Sapl.Target.Flavour.extractBindings`_11}> xs_2 _predefined._Nil)) (_ -> _predefined._Cons (Sapl.Target.Flavour.StringPart (Sapl.Target.Flavour.revstr_192 _x_0)) (_predefined._Cons (Sapl.Target.Flavour.Binding (StdChar.digitToInt _x_1)) (<{Sapl.Target.Flavour.extractBindings`_11}> xs_2 _predefined._Nil)))
<{Sapl.Target.Flavour._c;21;23_244}> !_x_0 x_1::C xs_2 = case _x_0 (_predefined._Nil -> _predefined._Cons (Sapl.Target.Flavour.ForceBinding (StdChar.digitToInt x_1)) (<{Sapl.Target.Flavour.extractBindings`_11}> xs_2 _predefined._Nil)) (_ -> _predefined._Cons (Sapl.Target.Flavour.StringPart (Sapl.Target.Flavour.revstr_192 _x_0)) (_predefined._Cons (Sapl.Target.Flavour.ForceBinding (StdChar.digitToInt x_1)) (<{Sapl.Target.Flavour.extractBindings`_11}> xs_2 _predefined._Nil)))
Sapl.Target.Flavour.extractBindings !str_0 = <{Sapl.Target.Flavour.extractBindings`_11}> (StdList.fromString_78 str_0) _predefined._Nil
Sapl.Target.Flavour.collectStrictnessInfo_193 !arr_0 !_x_1 = case _x_1 (_predefined._Nil -> arr_0) (_predefined._Cons _x_1_0 bs_1_1 -> case _x_1_0 (Sapl.Target.Flavour.ForceBinding i_2_0 -> Sapl.Target.Flavour.collectStrictnessInfo_193 (<{Sapl.Target.Flavour._if;70;25_246}> (StdBool.not (<{StdInt.<_17}> (_SystemArray.size_20 arr_0) i_2_0)) arr_0 i_2_0) bs_1_1) (_ -> Sapl.Target.Flavour.collectStrictnessInfo_193 arr_0 bs_1_1)) 
<{Sapl.Target.Flavour._if;70;25_246}> !_x_0::B !arr_1 i_2::I = case _x_0 (True -> _SystemArray.update_21 arr_1 (<{StdInt.-_7}> i_2 1) '1') (_ -> arr_1)
Sapl.Target.Flavour.toInlineFunDef_19 f_0 = let bindings_1_0 = Sapl.Target.Flavour.extractBindings (Data.Maybe.fromJust (select f_0::Sapl.Target.Flavour._BIFRep 4)) in _Tuple2 (select f_0::Sapl.Target.Flavour._BIFRep 0) (Sapl.Target.Flavour._InlineFunDef (Sapl.Target.Flavour.inst_17 bindings_1_0) (select f_0::Sapl.Target.Flavour._BIFRep 1) (Sapl.Target.Flavour.collectStrictnessInfo_193 (_SystemArray.createArray_17 (select f_0::Sapl.Target.Flavour._BIFRep 1) '0') bindings_1_0) (Data.Maybe.maybe False StdFunc.id (select f_0::Sapl.Target.Flavour._BIFRep 2)))
Sapl.Target.Flavour.fromFlavourRep !rep_0 = Sapl.Target.Flavour._Flavour (select rep_0::Sapl.Target.Flavour._FlavourRep 0) (Data.Set.fromList (<{StdOverloaded.<;}> <{StdString.<_3}>) (<{StdOverloaded.==;}> <{StdString.==_2}>) (select rep_0::Sapl.Target.Flavour._FlavourRep 1)) (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) (<{StdOverloaded.<;}> <{StdString.<_3}>) (StdList.map Sapl.Target.Flavour.anon_14 (StdList.filter Sapl.Target.Flavour.anon_13 (select rep_0::Sapl.Target.Flavour._FlavourRep 2)))) (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) (<{StdOverloaded.<;}> <{StdString.<_3}>) (StdList.map Sapl.Target.Flavour.toInlineFunDef_19 (StdList.filter Sapl.Target.Flavour.anon_15 (select rep_0::Sapl.Target.Flavour._FlavourRep 2))))
Sapl.Target.Flavour.findField_59 !match_0 !_x_1 = case _x_1 (_predefined._Cons _x_1_0 xs_1_1 -> case _x_1_0 (_Tuple2 l_2_0 x_2_1 -> case (<{StdString.==_2}> l_2_0 match_0) (True -> _predefined._Cons x_2_1 _predefined._Nil) (False -> Sapl.Target.Flavour.findField_59 match_0 xs_1_1) ) ) (_predefined._Nil -> _predefined._Nil) 
Sapl.Target.Flavour.JSONDecode_FIELD_58 gfd_name_0 _x_1::I fx_2 !_x_3::B !l_4 = case l_4 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Sapl.Target.Flavour.findField_59 gfd_name_0 fields_2_0 in <{Sapl.Target.Flavour._c;139;5_247}> (fx_2 True field_4_0) l_4) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Sapl.Target.Flavour._c;150;5_248}> (fx_2 True (_predefined._Cons field_4_0 _predefined._Nil)) l_4) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Sapl.Target.Flavour._c;150;5_248}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Sapl.Target.Flavour._c;139;5_247}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
Sapl.Target.Flavour.d2_57 !x_0 !_x_1 !l_2 = case _x_1 (_Tuple2 _x_1_0 ys_1_1 -> case _x_1_0 (Data.Maybe.Just y_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.PAIR x_0 y_2_0)) ys_1_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Sapl.Target.Flavour.d1_56 !fy_0 !_x_1 !l_2 = case _x_1 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (fy_0 False xs_1_1) l_2) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_55 !fx_0 !fy_1 !_x_2::B !l_3 = Sapl.Target.Flavour.d1_56 fy_1 (fx_0 False l_3) l_3
Sapl.Target.Flavour.d_53 !_x_0 !xs_1 !l_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.RECORD x_2_0)) xs_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Sapl.Target.Flavour.d_54 !_x_0 !xs_1 !l_2 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.RECORD x_2_0)) xs_1) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_2) ) 
Sapl.Target.Flavour.JSONDecode_RECORD_52 fx_0 !_x_1::B !l_2 = case l_2 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (fx_0 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_2) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (fx_0 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_2) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_2)
Sapl.Target.Flavour.fromGenericFlavourRep_32 !c_0 = case c_0 (StdGeneric.RECORD c_1_0 -> case c_1_0 (StdGeneric.PAIR c_2_0 c_2_1 -> case c_2_0 (StdGeneric.FIELD x1_3_0 -> case c_2_1 (StdGeneric.PAIR c_4_0 c_4_1 -> case c_4_0 (StdGeneric.FIELD x2_5_0 -> case c_4_1 (StdGeneric.FIELD x3_6_0 -> Sapl.Target.Flavour._FlavourRep x1_3_0 x2_5_0 x3_6_0) ) ) ) ) ) 
Sapl.Target.Flavour.bimapFromGeneric_60 !x_0 = Sapl.Target.Flavour._f249_249 x_0
Sapl.Target.Flavour._f249_249 !x_0 = case x_0 (Data.Maybe.Nothing -> Data.Maybe.Nothing) (Data.Maybe.Just x1_1_0 -> Data.Maybe.Just (Sapl.Target.Flavour.fromGenericFlavourRep_32 x1_1_0)) 
Sapl.Target.Flavour.bimapFromGeneric_61 !x_0 = Sapl.Target.Flavour._f250_250 x_0
Sapl.Target.Flavour._f250_250 !x_0 = case x_0 (_Tuple2 x1_1_0 x2_1_1 -> _Tuple2 (Sapl.Target.Flavour.bimapFromGeneric_60 x1_1_0) x2_1_1) 
Sapl.Target.Flavour.fromGenericBIFRep_43 !c_0 = case c_0 (StdGeneric.RECORD c_1_0 -> case c_1_0 (StdGeneric.PAIR c_2_0 c_2_1 -> case c_2_0 (StdGeneric.PAIR c_3_0 c_3_1 -> case c_3_0 (StdGeneric.FIELD x1_4_0 -> case c_3_1 (StdGeneric.FIELD x2_5_0 -> case c_2_1 (StdGeneric.PAIR c_6_0 c_6_1 -> case c_6_0 (StdGeneric.FIELD x3_7_0 -> case c_6_1 (StdGeneric.PAIR c_8_0 c_8_1 -> case c_8_0 (StdGeneric.FIELD x4_9_0 -> case c_8_1 (StdGeneric.FIELD x5_10_0 -> Sapl.Target.Flavour._BIFRep x1_4_0 x2_5_0 x3_7_0 x4_9_0 x5_10_0) ) ) ) ) ) ) ) ) ) 
Sapl.Target.Flavour.bimapFromGeneric_62 !x_0 = Sapl.Target.Flavour._f251_251 x_0
Sapl.Target.Flavour._f251_251 !x_0 = case x_0 (Data.Maybe.Nothing -> Data.Maybe.Nothing) (Data.Maybe.Just x1_1_0 -> Data.Maybe.Just (Sapl.Target.Flavour.fromGenericBIFRep_43 x1_1_0)) 
Sapl.Target.Flavour.bimapFromGeneric_63 !x_0 = Sapl.Target.Flavour._f252_252 x_0
Sapl.Target.Flavour._f252_252 !x_0 = case x_0 (_Tuple2 x1_1_0 x2_1_1 -> _Tuple2 (Sapl.Target.Flavour.bimapFromGeneric_62 x1_1_0) x2_1_1) 
Sapl.Target.Flavour.JSONDecode_FIELD_197 gfd_name_0 _x_1::I _x_2 !_x_3::B !l_4 = case l_4 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Sapl.Target.Flavour.findField_59 gfd_name_0 fields_2_0 in <{Sapl.Target.Flavour._c;139;5_253}> (Text.JSON.JSONDecode_Maybe_54 _x_2 True field_4_0) l_4) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Sapl.Target.Flavour._c;150;5_254}> (Text.JSON.JSONDecode_Maybe_54 _x_2 True (_predefined._Cons field_4_0 _predefined._Nil)) l_4) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Sapl.Target.Flavour._c;150;5_254}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Sapl.Target.Flavour._c;139;5_253}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
Sapl.Target.Flavour.JSONDecode_PAIR_198 gfd_name_0 _x_1::I _x_2 !fy_3 !_x_4::B !l_5 = Sapl.Target.Flavour.d1_56 fy_3 (Sapl.Target.Flavour.JSONDecode_FIELD_197 gfd_name_0 _x_1 _x_2 False l_5) l_5
Sapl.Target.Flavour.JSONDecode_FIELD_195 gfd_name_0 _x_1::I !_x_2::B !l_3 = case l_3 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Sapl.Target.Flavour.findField_59 gfd_name_0 fields_2_0 in <{Sapl.Target.Flavour._c;139;5_255}> (Text.JSON.JSONDecode_Int_35 True field_4_0) l_3) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Sapl.Target.Flavour._c;150;5_256}> (Text.JSON.JSONDecode_Int_35 True (_predefined._Cons field_4_0 _predefined._Nil)) l_3) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_3)
<{Sapl.Target.Flavour._c;150;5_256}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Sapl.Target.Flavour._c;139;5_255}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
Sapl.Target.Flavour.JSONDecode_FIELD_194 gfd_name_0 _x_1::I !_x_2::B !l_3 = case l_3 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Sapl.Target.Flavour.findField_59 gfd_name_0 fields_2_0 in <{Sapl.Target.Flavour._c;139;5_257}> (Text.JSON.JSONDecode__String_39 True field_4_0) l_3) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Sapl.Target.Flavour._c;150;5_258}> (Text.JSON.JSONDecode__String_39 True (_predefined._Cons field_4_0 _predefined._Nil)) l_3) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_3)
<{Sapl.Target.Flavour._c;150;5_258}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Sapl.Target.Flavour._c;139;5_257}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
Sapl.Target.Flavour.JSONDecode_PAIR_196 gfd_name_0 _x_1::I !fy_2 !_x_3::B !l_4 = Sapl.Target.Flavour.d1_56 fy_2 (Sapl.Target.Flavour.JSONDecode_FIELD_194 gfd_name_0 _x_1 False l_4) l_4
Sapl.Target.Flavour.JSONDecode_PAIR_199 gfd_name_0 _x_1::I !fy_2 !fy_3 !_x_4::B !l_5 = Sapl.Target.Flavour.d1_56 fy_3 (Sapl.Target.Flavour.JSONDecode_PAIR_196 gfd_name_0 _x_1 fy_2 False l_5) l_5
Sapl.Target.Flavour.JSONDecode_RECORD_200 gfd_name_0 _x_1::I fy_2 fy_3 !_x_4::B !l_5 = case l_5 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (Sapl.Target.Flavour.JSONDecode_PAIR_199 gfd_name_0 _x_1 fy_2 fy_3 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_5) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (Sapl.Target.Flavour.JSONDecode_PAIR_199 gfd_name_0 _x_1 fy_2 fy_3 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_5) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_5)
Sapl.Target.Flavour.d1_202 gfd_name_0 _x_1::I _x_2 !_x_3 !l_4 = case _x_3 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_FIELD_197 gfd_name_0 _x_1 _x_2 False xs_1_1) l_4) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_4) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_201 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 !_x_6::B !l_7 = Sapl.Target.Flavour.d1_202 gfd_name_3 _x_4 _x_5 (Sapl.Target.Flavour.JSONDecode_FIELD_197 gfd_name_0 _x_1 _x_2 False l_7) l_7
Sapl.Target.Flavour.d1_204 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 !_x_6 !l_7 = case _x_6 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_PAIR_201 gfd_name_0 _x_1 _x_2 gfd_name_3 _x_4 _x_5 False xs_1_1) l_7) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_7) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_203 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 gfd_name_6 _x_7::I _x_8 !_x_9::B !l_10 = Sapl.Target.Flavour.d1_204 gfd_name_3 _x_4 _x_5 gfd_name_6 _x_7 _x_8 (Sapl.Target.Flavour.JSONDecode_FIELD_197 gfd_name_0 _x_1 _x_2 False l_10) l_10
Sapl.Target.Flavour.d1_208 gfd_name_0 _x_1::I !_x_2 !l_3 = case _x_2 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_FIELD_195 gfd_name_0 _x_1 False xs_1_1) l_3) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_3) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_207 gfd_name_0 _x_1::I gfd_name_2 _x_3::I !_x_4::B !l_5 = Sapl.Target.Flavour.d1_208 gfd_name_2 _x_3 (Sapl.Target.Flavour.JSONDecode_FIELD_194 gfd_name_0 _x_1 False l_5) l_5
Sapl.Target.Flavour.JSONDecode_PAIR_206 gfd_name_0 _x_1::I gfd_name_2 _x_3::I !fy_4 !_x_5::B !l_6 = Sapl.Target.Flavour.d1_56 fy_4 (Sapl.Target.Flavour.JSONDecode_PAIR_207 gfd_name_0 _x_1 gfd_name_2 _x_3 False l_6) l_6
Sapl.Target.Flavour.JSONDecode_RECORD_205 gfd_name_0 _x_1::I gfd_name_2 _x_3::I fy_4 !_x_5::B !l_6 = case l_6 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (Sapl.Target.Flavour.JSONDecode_PAIR_206 gfd_name_0 _x_1 gfd_name_2 _x_3 fy_4 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_6) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (Sapl.Target.Flavour.JSONDecode_PAIR_206 gfd_name_0 _x_1 gfd_name_2 _x_3 fy_4 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_6) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_6)
Sapl.Target.Flavour.d1_211 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 gfd_name_6 _x_7::I _x_8 !_x_9 !l_10 = case _x_9 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_PAIR_203 gfd_name_0 _x_1 _x_2 gfd_name_3 _x_4 _x_5 gfd_name_6 _x_7 _x_8 False xs_1_1) l_10) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_10) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_210 gfd_name_0 _x_1::I gfd_name_2 _x_3::I gfd_name_4 _x_5::I _x_6 gfd_name_7 _x_8::I _x_9 gfd_name_10 _x_11::I _x_12 !_x_13::B !l_14 = Sapl.Target.Flavour.d1_211 gfd_name_4 _x_5 _x_6 gfd_name_7 _x_8 _x_9 gfd_name_10 _x_11 _x_12 (Sapl.Target.Flavour.JSONDecode_PAIR_207 gfd_name_0 _x_1 gfd_name_2 _x_3 False l_14) l_14
Sapl.Target.Flavour.JSONDecode_RECORD_209 gfd_name_0 _x_1::I gfd_name_2 _x_3::I gfd_name_4 _x_5::I _x_6 gfd_name_7 _x_8::I _x_9 gfd_name_10 _x_11::I _x_12 !_x_13::B !l_14 = case l_14 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (Sapl.Target.Flavour.JSONDecode_PAIR_210 gfd_name_0 _x_1 gfd_name_2 _x_3 gfd_name_4 _x_5 _x_6 gfd_name_7 _x_8 _x_9 gfd_name_10 _x_11 _x_12 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_14) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (Sapl.Target.Flavour.JSONDecode_PAIR_210 gfd_name_0 _x_1 gfd_name_2 _x_3 gfd_name_4 _x_5 _x_6 gfd_name_7 _x_8 _x_9 gfd_name_10 _x_11 _x_12 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_14) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_14)
Sapl.Target.Flavour.JSONDecode_BIFRep_23 !x1_0::B !x2_1 = Sapl.Target.Flavour.bimapFromGeneric_63 (Sapl.Target.Flavour.JSONDecode_RECORD_209 "sapl_fun" 0 "arity" 1 "data_cons" 2 Text.JSON.JSONDecode_Bool_38 "ext_fun" 3 Text.JSON.JSONDecode__String_39 "inline_exp" 4 Text.JSON.JSONDecode__String_39 x1_0 x2_1)
Sapl.Target.Flavour.JSONDecode_FIELD_212 gfd_name_0 _x_1::I _x_2 !_x_3::B !l_4 = case l_4 (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (Text.JSON.JSONObject fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = Sapl.Target.Flavour.findField_59 gfd_name_0 fields_2_0 in <{Sapl.Target.Flavour._c;139;5_259}> (Text.JSON.JSONDecode__List_44 _x_2 True field_4_0) l_4) ) (Text.JSON.JSONArray fields_2_0 -> case _x_1_1 (_predefined._Nil -> let !field_4_0 = <{StdList.!!}> fields_2_0 _x_1 in <{Sapl.Target.Flavour._c;150;5_260}> (Text.JSON.JSONDecode__List_44 _x_2 True (_predefined._Cons field_4_0 _predefined._Nil)) l_4) ) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_4)
<{Sapl.Target.Flavour._c;150;5_260}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
<{Sapl.Target.Flavour._c;139;5_259}> !_x_0 !l_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> <{_Tuple2!3}> (Data.Maybe.Just (StdGeneric.FIELD x_2_0)) l_1) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_1)) 
Sapl.Target.Flavour.JSONDecode_PAIR_213 gfd_name_0 _x_1::I _x_2 !fy_3 !_x_4::B !l_5 = Sapl.Target.Flavour.d1_56 fy_3 (Sapl.Target.Flavour.JSONDecode_FIELD_212 gfd_name_0 _x_1 _x_2 False l_5) l_5
Sapl.Target.Flavour.d1_215 gfd_name_0 _x_1::I _x_2 fy_3 !_x_4 !l_5 = case _x_4 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_PAIR_213 gfd_name_0 _x_1 _x_2 fy_3 False xs_1_1) l_5) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_5) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_214 gfd_name_0 _x_1::I gfd_name_2 _x_3::I _x_4 fy_5 !_x_6::B !l_7 = Sapl.Target.Flavour.d1_215 gfd_name_2 _x_3 _x_4 fy_5 (Sapl.Target.Flavour.JSONDecode_FIELD_194 gfd_name_0 _x_1 False l_7) l_7
Sapl.Target.Flavour.JSONDecode_RECORD_216 gfd_name_0 _x_1::I gfd_name_2 _x_3::I _x_4 fy_5 !_x_6::B !l_7 = case l_7 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (Sapl.Target.Flavour.JSONDecode_PAIR_214 gfd_name_0 _x_1 gfd_name_2 _x_3 _x_4 fy_5 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_7) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (Sapl.Target.Flavour.JSONDecode_PAIR_214 gfd_name_0 _x_1 gfd_name_2 _x_3 _x_4 fy_5 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_7) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_7)
Sapl.Target.Flavour.d1_221 gfd_name_0 _x_1::I _x_2 !_x_3 !l_4 = case _x_3 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_FIELD_212 gfd_name_0 _x_1 _x_2 False xs_1_1) l_4) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_4) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_220 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 !_x_6::B !l_7 = Sapl.Target.Flavour.d1_221 gfd_name_3 _x_4 _x_5 (Sapl.Target.Flavour.JSONDecode_FIELD_212 gfd_name_0 _x_1 _x_2 False l_7) l_7
Sapl.Target.Flavour.d1_219 gfd_name_0 _x_1::I _x_2 gfd_name_3 _x_4::I _x_5 !_x_6 !l_7 = case _x_6 (_Tuple2 _x_1_0 xs_1_1 -> case _x_1_0 (Data.Maybe.Just x_2_0 -> Sapl.Target.Flavour.d2_57 x_2_0 (Sapl.Target.Flavour.JSONDecode_PAIR_220 gfd_name_0 _x_1 _x_2 gfd_name_3 _x_4 _x_5 False xs_1_1) l_7) (Data.Maybe.Nothing -> <{_Tuple2!3}> Data.Maybe.Nothing l_7) ) 
Sapl.Target.Flavour.JSONDecode_PAIR_218 gfd_name_0 _x_1::I gfd_name_2 _x_3::I _x_4 gfd_name_5 _x_6::I _x_7 !_x_8::B !l_9 = Sapl.Target.Flavour.d1_219 gfd_name_2 _x_3 _x_4 gfd_name_5 _x_6 _x_7 (Sapl.Target.Flavour.JSONDecode_FIELD_194 gfd_name_0 _x_1 False l_9) l_9
Sapl.Target.Flavour.JSONDecode_RECORD_217 gfd_name_0 _x_1::I gfd_name_2 _x_3::I _x_4 gfd_name_5 _x_6::I _x_7 !_x_8::B !l_9 = case l_9 (_predefined._Cons obj_1_0 xs_1_1 -> case obj_1_0 (Text.JSON.JSONObject fields_2_0 -> Sapl.Target.Flavour.d_53 (Sapl.Target.Flavour.JSONDecode_PAIR_218 gfd_name_0 _x_1 gfd_name_2 _x_3 _x_4 gfd_name_5 _x_6 _x_7 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_9) (Text.JSON.JSONArray fields_2_0 -> Sapl.Target.Flavour.d_54 (Sapl.Target.Flavour.JSONDecode_PAIR_218 gfd_name_0 _x_1 gfd_name_2 _x_3 _x_4 gfd_name_5 _x_6 _x_7 False (_predefined._Cons obj_1_0 _predefined._Nil)) xs_1_1 l_9) ) (_ -> <{_Tuple2!3}> Data.Maybe.Nothing l_9)
Sapl.Target.Flavour.JSONDecode_FlavourRep_22 !x1_0::B !x2_1 = Sapl.Target.Flavour.bimapFromGeneric_61 (Sapl.Target.Flavour.JSONDecode_RECORD_217 "fun_prefix" 0 "options" 1 Text.JSON.JSONDecode__String_39 "bifs" 2 Sapl.Target.Flavour.JSONDecode_BIFRep_23 x1_0 x2_1)
Sapl.Target.Flavour.toFlavour !str_0 = Data.Maybe.fmap_12 Sapl.Target.Flavour.fromFlavourRep (Text.JSON.fromJSON (<{Sapl.Target.Flavour.JSONDecode_s;}> Sapl.Target.Flavour.JSONDecode_FlavourRep_22) (Text.JSON.fromString_8 str_0))
Sapl.Target.Flavour.isSet::B !f_0 !opt_1 = Data.Set.member (<{StdOverloaded.<;}> <{StdString.<_3}>) (<{StdOverloaded.==;}> <{StdString.==_2}>) opt_1 (select f_0::Sapl.Target.Flavour._Flavour 1)
Sapl.Target.Flavour.toGenericFlavourRep_33 !x_0 = case x_0 (Sapl.Target.Flavour._FlavourRep x11_1_0 x12_1_1 x13_1_2 -> StdGeneric.RECORD (StdGeneric.PAIR (StdGeneric.FIELD x11_1_0) (StdGeneric.PAIR (StdGeneric.FIELD x12_1_1) (StdGeneric.FIELD x13_1_2)))) 
Sapl.Target.Flavour.JSONEncode_FIELD_51 !fx_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.FIELD x_1_0 -> fx_0 True x_1_0) 
<{Sapl.Target.Flavour.++_50}> !_x_0 !list_1 = case _x_0 (_predefined._Cons hd_1_0 tl_1_1 -> _predefined._Cons hd_1_0 (<{Sapl.Target.Flavour.++_50}> tl_1_1 list_1)) (_ -> list_1)
Sapl.Target.Flavour.JSONEncode_PAIR_49 !fx_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (fx_0 False x_1_0) (fy_1 False y_1_1)) 
Sapl.Target.Flavour.fli__FlavourRep_27 = _predefined._Cons "fun_prefix" (_predefined._Cons "options" (_predefined._Cons "bifs" _predefined._Nil))
Sapl.Target.Flavour.isNotNull_48::B !_x_0 = case _x_0 (Text.JSON.JSONNull -> False) (_ -> True)
<{Sapl.Target.Flavour.c;92;47_47}> !g_l_0 g_l_1 = <{Sapl.Target.Flavour.g_c1;92;33_262}> g_l_0 g_l_1
<{Sapl.Target.Flavour.g_c1;92;33_262}> !g_l_0 g_l_1 = case g_l_0 (_predefined._Cons o_1_0 g_t_1_1 -> <{Sapl.Target.Flavour.g_c1;92;54_261}> g_l_1 o_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Sapl.Target.Flavour.g_c1;92;54_261}> !g_l_0 o_1 g_t_2 = case g_l_0 (_predefined._Cons name_1_0 g_t_1_1 -> case (Sapl.Target.Flavour.isNotNull_48 o_1) (True -> _predefined._Cons (_Tuple2 name_1_0 o_1) (<{Sapl.Target.Flavour.c;92;47_47}> g_t_2 g_t_1_1)) (False -> <{Sapl.Target.Flavour.c;92;47_47}> g_t_2 g_t_1_1) ) (_ -> _predefined._Nil)
Sapl.Target.Flavour.JSONEncode_RECORD_46 grd_fields_0 fx_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (fx_1 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.toGenericBIFRep_44 !x_0 = case x_0 (Sapl.Target.Flavour._BIFRep x11_1_0 x12_1_1 x13_1_2 x14_1_3 x15_1_4 -> StdGeneric.RECORD (StdGeneric.PAIR (StdGeneric.PAIR (StdGeneric.FIELD x11_1_0) (StdGeneric.FIELD x12_1_1)) (StdGeneric.PAIR (StdGeneric.FIELD x13_1_2) (StdGeneric.PAIR (StdGeneric.FIELD x14_1_3) (StdGeneric.FIELD x15_1_4))))) 
Sapl.Target.Flavour.fli__BIFRep_36 = _predefined._Cons "sapl_fun" (_predefined._Cons "arity" (_predefined._Cons "data_cons" (_predefined._Cons "ext_fun" (_predefined._Cons "inline_exp" _predefined._Nil))))
Sapl.Target.Flavour.JSONEncode_FIELD_225 _x_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.FIELD x_1_0 -> Text.JSON.JSONEncode_Maybe_27 _x_0 True x_1_0) 
Sapl.Target.Flavour.JSONEncode_PAIR_226 _x_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_225 _x_0 False x_1_0) (fy_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_FIELD_223 !_x_0::B !_x_1 = case _x_1 (StdGeneric.FIELD x_1_0 -> Text.JSON.JSONEncode_Int_11 True x_1_0) 
Sapl.Target.Flavour.JSONEncode_FIELD_222 !_x_0::B !_x_1 = case _x_1 (StdGeneric.FIELD x_1_0 -> Text.JSON.JSONEncode__String_15 True x_1_0) 
Sapl.Target.Flavour.JSONEncode_PAIR_224 !fy_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_222 False x_1_0) (fy_0 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_227 !fy_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_PAIR_224 fy_0 False x_1_0) (fy_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_RECORD_228 grd_fields_0 fy_1 fy_2 !_x_3::B !_x_4 = case _x_4 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (Sapl.Target.Flavour.JSONEncode_PAIR_227 fy_1 fy_2 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.JSONEncode_PAIR_229 _x_0 _x_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_225 _x_0 False x_1_0) (Sapl.Target.Flavour.JSONEncode_FIELD_225 _x_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_230 _x_0 _x_1 _x_2 !_x_3::B !_x_4 = case _x_4 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_225 _x_0 False x_1_0) (Sapl.Target.Flavour.JSONEncode_PAIR_229 _x_1 _x_2 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_233 !_x_0::B !_x_1 = case _x_1 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_222 False x_1_0) (Sapl.Target.Flavour.JSONEncode_FIELD_223 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_232 !fy_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_PAIR_233 False x_1_0) (fy_0 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_RECORD_231 grd_fields_0 fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (Sapl.Target.Flavour.JSONEncode_PAIR_232 fy_1 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.JSONEncode_PAIR_235 _x_0 _x_1 _x_2 !_x_3::B !_x_4 = case _x_4 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_PAIR_233 False x_1_0) (Sapl.Target.Flavour.JSONEncode_PAIR_230 _x_0 _x_1 _x_2 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_RECORD_234 grd_fields_0 _x_1 _x_2 _x_3 !_x_4::B !_x_5 = case _x_5 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (Sapl.Target.Flavour.JSONEncode_PAIR_235 _x_1 _x_2 _x_3 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.JSONEncode_BIFRep_21 !x1_0::B !x2_1 = Sapl.Target.Flavour.JSONEncode_RECORD_234 Sapl.Target.Flavour.fli__BIFRep_36 Text.JSON.JSONEncode_Bool_14 Text.JSON.JSONEncode__String_15 Text.JSON.JSONEncode__String_15 x1_0 (Sapl.Target.Flavour.toGenericBIFRep_44 x2_1)
Sapl.Target.Flavour.JSONEncode_FIELD_236 _x_0 !_x_1::B !_x_2 = case _x_2 (StdGeneric.FIELD x_1_0 -> Text.JSON.JSONEncode__List_17 _x_0 True x_1_0) 
Sapl.Target.Flavour.JSONEncode_PAIR_237 _x_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_236 _x_0 False x_1_0) (fy_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_238 _x_0 !fy_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_222 False x_1_0) (Sapl.Target.Flavour.JSONEncode_PAIR_237 _x_0 fy_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_RECORD_239 grd_fields_0 _x_1 fy_2 !_x_3::B !_x_4 = case _x_4 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (Sapl.Target.Flavour.JSONEncode_PAIR_238 _x_1 fy_2 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.JSONEncode_PAIR_242 _x_0 _x_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_236 _x_0 False x_1_0) (Sapl.Target.Flavour.JSONEncode_FIELD_236 _x_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_PAIR_241 _x_0 _x_1 !_x_2::B !_x_3 = case _x_3 (StdGeneric.PAIR x_1_0 y_1_1 -> <{Sapl.Target.Flavour.++_50}> (Sapl.Target.Flavour.JSONEncode_FIELD_222 False x_1_0) (Sapl.Target.Flavour.JSONEncode_PAIR_242 _x_0 _x_1 False y_1_1)) 
Sapl.Target.Flavour.JSONEncode_RECORD_240 grd_fields_0 _x_1 _x_2 !_x_3::B !_x_4 = case _x_4 (StdGeneric.RECORD x_1_0 -> _predefined._Cons (Text.JSON.JSONObject (<{Sapl.Target.Flavour.c;92;47_47}> (Sapl.Target.Flavour.JSONEncode_PAIR_241 _x_1 _x_2 False x_1_0) grd_fields_0)) _predefined._Nil) 
Sapl.Target.Flavour.JSONEncode_FlavourRep_20 !x1_0::B !x2_1 = Sapl.Target.Flavour.JSONEncode_RECORD_240 Sapl.Target.Flavour.fli__FlavourRep_27 Text.JSON.JSONEncode__String_15 Sapl.Target.Flavour.JSONEncode_BIFRep_21 x1_0 (Sapl.Target.Flavour.toGenericFlavourRep_33 x2_1)
<{Sapl.Target.Flavour.TD;Arity}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;TermCoderFun}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;InlineCoderFun}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;InlineFunDef}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;Flavour}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;FlavourRep}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;BIFRep}> _x_0::B = _predefined._Nil
<{Sapl.Target.Flavour.TD;X}> _x_0::B = _predefined._Nil

:: Sapl.Target.Flavour.X = Sapl.Target.Flavour.StringPart !a1 | Sapl.Target.Flavour.Binding !a1::I | Sapl.Target.Flavour.ForceBinding !a1::I

|| Converted Records
:: Sapl.Target.Flavour._InlineFunDef = {!Sapl.Target.Flavour.fun, !Sapl.Target.Flavour.arity, !Sapl.Target.Flavour.strictness, !Sapl.Target.Flavour.data_cons::B}

:: Sapl.Target.Flavour._Flavour = {Sapl.Target.Flavour.fun_prefix, Sapl.Target.Flavour.options, Sapl.Target.Flavour.builtInFunctions, Sapl.Target.Flavour.inlineFunctions}

:: Sapl.Target.Flavour._FlavourRep = {Sapl.Target.Flavour.fun_prefix, Sapl.Target.Flavour.options, Sapl.Target.Flavour.bifs}

:: Sapl.Target.Flavour._BIFRep = {Sapl.Target.Flavour.sapl_fun, Sapl.Target.Flavour.arity::I, Sapl.Target.Flavour.data_cons, Sapl.Target.Flavour.ext_fun, Sapl.Target.Flavour.inline_exp}

:: <{Sapl.Target.Flavour.gEq_s;}> = {!Sapl.Target.Flavour.gEq_s}

:: <{Sapl.Target.Flavour.gEq_ss;}> = {!Sapl.Target.Flavour.gEq_ss}

:: <{Sapl.Target.Flavour.gEq_sss;}> = {!Sapl.Target.Flavour.gEq_sss}

:: <{Sapl.Target.Flavour.gEq_ssss;}> = {!Sapl.Target.Flavour.gEq_ssss}

:: <{Sapl.Target.Flavour.gEq_sssss;}> = {!Sapl.Target.Flavour.gEq_sssss}

:: <{Sapl.Target.Flavour.gEq_ssssss;}> = {!Sapl.Target.Flavour.gEq_ssssss}

:: <{Sapl.Target.Flavour.gEq_sssssss;}> = {!Sapl.Target.Flavour.gEq_sssssss}

:: <{Sapl.Target.Flavour.gEq_ssssssss;}> = {!Sapl.Target.Flavour.gEq_ssssssss}

:: <{Sapl.Target.Flavour.gEq_sssssssss;}> = {!Sapl.Target.Flavour.gEq_sssssssss}

:: <{Sapl.Target.Flavour.bimap_s;}> = {Sapl.Target.Flavour.bimap_s}

:: <{Sapl.Target.Flavour.bimap_ss;}> = {Sapl.Target.Flavour.bimap_ss}

:: <{Sapl.Target.Flavour.bimap_sss;}> = {Sapl.Target.Flavour.bimap_sss}

:: <{Sapl.Target.Flavour.JSONEncode_s;}> = {!Sapl.Target.Flavour.JSONEncode_s}

:: <{Sapl.Target.Flavour.JSONEncode_ss;}> = {!Sapl.Target.Flavour.JSONEncode_ss}

:: <{Sapl.Target.Flavour.JSONEncode_sss;}> = {!Sapl.Target.Flavour.JSONEncode_sss}

:: <{Sapl.Target.Flavour.JSONEncode_ssss;}> = {!Sapl.Target.Flavour.JSONEncode_ssss}

:: <{Sapl.Target.Flavour.JSONEncode_sssss;}> = {!Sapl.Target.Flavour.JSONEncode_sssss}

:: <{Sapl.Target.Flavour.JSONEncode_ssssss;}> = {!Sapl.Target.Flavour.JSONEncode_ssssss}

:: <{Sapl.Target.Flavour.JSONEncode_sssssss;}> = {!Sapl.Target.Flavour.JSONEncode_sssssss}

:: <{Sapl.Target.Flavour.JSONEncode_ssssssss;}> = {!Sapl.Target.Flavour.JSONEncode_ssssssss}

:: <{Sapl.Target.Flavour.JSONEncode_sssssssss;}> = {!Sapl.Target.Flavour.JSONEncode_sssssssss}

:: <{Sapl.Target.Flavour.JSONDecode_s;}> = {!Sapl.Target.Flavour.JSONDecode_s}

:: <{Sapl.Target.Flavour.JSONDecode_ss;}> = {!Sapl.Target.Flavour.JSONDecode_ss}

:: <{Sapl.Target.Flavour.JSONDecode_sss;}> = {!Sapl.Target.Flavour.JSONDecode_sss}

:: <{Sapl.Target.Flavour.JSONDecode_ssss;}> = {!Sapl.Target.Flavour.JSONDecode_ssss}

:: <{Sapl.Target.Flavour.JSONDecode_sssss;}> = {!Sapl.Target.Flavour.JSONDecode_sssss}

:: <{Sapl.Target.Flavour.JSONDecode_ssssss;}> = {!Sapl.Target.Flavour.JSONDecode_ssssss}

:: <{Sapl.Target.Flavour.JSONDecode_sssssss;}> = {!Sapl.Target.Flavour.JSONDecode_sssssss}

:: <{Sapl.Target.Flavour.JSONDecode_ssssssss;}> = {!Sapl.Target.Flavour.JSONDecode_ssssssss}

:: <{Sapl.Target.Flavour.JSONDecode_sssssssss;}> = {!Sapl.Target.Flavour.JSONDecode_sssssssss}

