|| ?module? UtilOptions


UtilOptions.writeValue_43 !_x_0 !file_1 = case _x_0 (UtilOptions.Nothing -> file_1) (UtilOptions.Just _x_1_0 -> case _x_1_0 (UtilOptions._Value value_2_0 -> StdFile.fwrites value_2_0 (StdFile.fwrites ":\t" file_1)) ) 
<{UtilOptions.cu;234;31_40}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> <{UtilOptions.cu;234;31_40}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 '\t') (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3) (False -> c_a_1) 
<{UtilOptions.cu;234;31_71}> !c_a_0 !c_i_1::I !g_s_2::I = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> <{UtilOptions.cu;234;31_71}> (_SystemArray.update_21 c_a_0 c_i_1 '\t') (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2) (False -> c_a_0) 
UtilOptions.writeOption_42 !indentation_0::I !_x_1 !file_2 = case _x_1 (UtilOptions.Option _x_1_0 _x_1_1 value_1_2 subOptions_1_3 -> case _x_1_1 (UtilOptions._Label label_2_0 -> let g_s_3_0::I = <{StdInt.-_7}> indentation_0 1 in UtilOptions.writeOptions_41 (<{StdInt.+_6}> indentation_0 1) subOptions_1_3 (StdFile.fwritec '\n' (UtilOptions.writeValue_43 value_1_2 (StdFile.fwrites label_2_0 (StdFile.fwrites (<{UtilOptions.cu;234;31_71}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s_3_0 StdInt.one_11)) 0 g_s_3_0) file_2))))) ) 
UtilOptions.writeOptions_41 _x_0::I !_x_1 !file_2 = case _x_1 (_predefined._Nil -> file_2) (_predefined._Cons h_1_0 t_1_1 -> UtilOptions.writeOptions_41 _x_0 t_1_1 (UtilOptions.writeOption_42 _x_0 h_1_0 file_2)) 
UtilOptions.WriteOptionsFile !version_0 !options_1 !file_2 = UtilOptions.writeOptions_41 0 options_1 (StdFile.fwrites (<{StdString.+++_11}> "Version: " (<{StdString.+++_11}> version_0 "\n")) file_2)
UtilOptions.LookAHead !file_0 = let _x_1_0 = UtilNewlinesFile.readAnyLine file_0, _x_1_1 = _Tuple2 (select _x_1_0::_Tuple3 1) (select _x_1_0::_Tuple3 2) in UtilOptions._Input 1 (select _x_1_1::_Tuple2 0) (select _x_1_1::_Tuple2 1)
UtilOptions.indentation_45 !stringSize_0::I !offset_1::I !indent_2::I string_3 = case (case (StdBool.not (<{StdInt.<_17}> offset_1 stringSize_0)) (True -> True) (False -> <{StdChar.==_18}> (_SystemArray.select_19 string_3 offset_1) '#') ) (True -> <{_Tuple2!3}> -1 offset_1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_3 offset_1) ' ') (True -> UtilOptions.indentation_45 stringSize_0 (<{StdInt.+_6}> offset_1 1) (<{StdInt.+_6}> indent_2 1) string_3) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_3 offset_1) '\t') (True -> UtilOptions.indentation_45 stringSize_0 (<{StdInt.+_6}> offset_1 1) (<{StdInt.+_6}> indent_2 (<{StdInt.-_7}> 4 (StdInt.rem_28 indent_2 4))) string_3) (False -> <{_Tuple2!3}> indent_2 offset_1) ) ) 
UtilOptions.indentation_49 !string_0 = UtilOptions.indentation_45 (<{StdInt.-_7}> (_SystemArray.size_20 string_0) 1) 0 0 string_0
UtilOptions.NextLine !input_0 = case input_0 (UtilOptions._Input lineNumber_1_0 lookAHead_1_1 file_1_2 -> let _x_2_0 = UtilNewlinesFile.readAnyLine file_1_2, _x_2_1 = _Tuple2 (select _x_2_0::_Tuple3 1) (select _x_2_0::_Tuple3 2) in update input_0::UtilOptions._Input [0:<{StdInt.+_6}> lineNumber_1_0 1,1:select _x_2_1::_Tuple2 0,2:select _x_2_1::_Tuple2 1]) 
UtilOptions.parseIndentation_50 !input_0 = case input_0 (UtilOptions._Input lineNumber_1_0 lookAHead_1_1 file_1_2 -> case (<{StdString.==_2}> lookAHead_1_1 "") (True -> <{_Tuple3!3}> 0 0 input_0) (False -> let _x_3_0::I = UtilOptions.indentation_49 lookAHead_1_1, indentation_3_1 = select _x_3_0::_Tuple2 0 in case (<{StdInt.==_16}> indentation_3_1 -1) (True -> UtilOptions.parseIndentation_50 (UtilOptions.NextLine input_0)) (False -> <{_Tuple3!3}> indentation_3_1 (select _x_3_0::_Tuple2 1) input_0) ) ) 
UtilOptions.EndOfInput !input_0 = case input_0 (UtilOptions._Input lineNumber_1_0 lookAHead_1_1 file_1_2 -> <{_Tuple2!3}> (<{StdString.==_2}> lookAHead_1_1 "") input_0) 
<{UtilOptions.cu;171;15_70}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3 in <{UtilOptions.cu;171;15_70}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
UtilOptions.shiftChars_39 !stringSize_0::I !toPos_1::I !fromPos_2::I !string_3 = case (StdBool.not (<{StdInt.<_17}> fromPos_2 stringSize_0)) (True -> <{StdString.%_10}> string_3 (_Tuple2 0 (<{StdInt.-_7}> toPos_1 1))) (False -> let !char_2_0::C = _SystemArray.select_19 string_3 fromPos_2 in case (case (<{StdChar.==_18}> char_2_0 ' ') (True -> True) (False -> <{StdChar.==_18}> char_2_0 '\t') ) (True -> UtilOptions.shiftChars_39 stringSize_0 fromPos_2 (<{StdInt.+_6}> toPos_1 1) string_3) (False -> UtilOptions.shiftChars_39 stringSize_0 (<{StdInt.+_6}> toPos_1 1) (<{StdInt.+_6}> fromPos_2 1) (_SystemArray.update_21 string_3 toPos_1 char_2_0)) ) 
UtilOptions.findChar_38::I !_vArray_0 string_1 !stringSize_2::I !i_3::I = case (case (StdBool.not (<{StdInt.<_17}> i_3 stringSize_2)) (True -> True) (False -> case (<{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 string_1 i_3) ' ') (True -> True) (False -> <{StdChar.==_18}> (select _vArray_0::<{_SystemArray.Array;}> 3 string_1 i_3) '\t') ) ) (True -> i_3) (False -> UtilOptions.findChar_38 _vArray_0 string_1 stringSize_2 (<{StdInt.+_6}> i_3 1)) 
UtilOptions.findChar_72::I string_0 !stringSize_1::I !i_2::I = case (case (StdBool.not (<{StdInt.<_17}> i_2 stringSize_1)) (True -> True) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_0 i_2) ' ') (True -> True) (False -> <{StdChar.==_18}> (_SystemArray.select_19 string_0 i_2) '\t') ) ) (True -> i_2) (False -> UtilOptions.findChar_72 string_0 stringSize_1 (<{StdInt.+_6}> i_2 1)) 
<{UtilOptions.cu;171;15_73}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_4 c_i_2 in <{UtilOptions.cu;171;15_73}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{UtilOptions.cu;171;15_74}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1 = _SystemArray.uselect_22 g_a_3 c_i_1 in <{UtilOptions.cu;171;15_74}> (_SystemArray.update_21 c_a_0 c_i_1 (select _x_2_1::_Tuple2 0)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
UtilOptions.RemoveWhiteSpace !string_0 = let stringSize_1_0::I = _SystemArray.size_20 string_0, firstFound_1_1::I = UtilOptions.findChar_72 string_0 stringSize_1_0 0 in case (StdBool.not (<{StdInt.<_17}> firstFound_1_1 stringSize_1_0)) (True -> string_0) (False -> let _x_3_0::I = _SystemArray.usize_23 string_0, g_s2_3_1 = <{StdInt.-_7}> (select _x_3_0::_Tuple2 0) 1 in UtilOptions.shiftChars_39 stringSize_1_0 firstFound_1_1 (<{StdInt.+_6}> firstFound_1_1 1) (<{UtilOptions.cu;171;15_74}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s2_3_1 StdInt.one_11)) 0 g_s2_3_1 (select _x_3_0::_Tuple2 1))) 
UtilOptions.skipSpaces_44 string_0 !size_1::I !position_2::I = case (StdBool.not (<{StdInt.<_17}> position_2 size_1)) (True -> "") (False -> case (case (<{StdChar.==_18}> (_SystemArray.select_19 string_0 position_2) ' ') (True -> True) (False -> <{StdChar.==_18}> (_SystemArray.select_19 string_0 position_2) '\t') ) (True -> UtilOptions.skipSpaces_44 string_0 size_1 (<{StdInt.+_6}> position_2 1)) (False -> <{StdString.%_10}> string_0 (_Tuple2 position_2 (<{StdInt.-_7}> size_1 1))) ) 
UtilOptions.parseLabelAndOption_46 !begin_0::I !end_1::I !size_2::I !string_3 = case (StdBool.not (<{StdInt.<_17}> end_1 size_2)) (True -> _Tuple2 (UtilOptions._Label (UtilOptions.RemoveWhiteSpace (<{StdString.%_10}> string_3 (_Tuple2 begin_0 (<{StdInt.-_7}> end_1 1))))) UtilOptions.Nothing) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_3 end_1) ':') (True -> _Tuple2 (UtilOptions._Label (UtilOptions.RemoveWhiteSpace (<{StdString.%_10}> string_3 (_Tuple2 begin_0 (<{StdInt.-_7}> end_1 1))))) (UtilOptions.Just (UtilOptions._Value (UtilOptions.skipSpaces_44 string_3 size_2 (<{StdInt.+_6}> end_1 1))))) (False -> UtilOptions.parseLabelAndOption_46 begin_0 (<{StdInt.+_6}> end_1 1) size_2 string_3) ) 
UtilOptions.RemoveNewLine !string_0 = case (<{StdChar.==_18}> (_SystemArray.select_19 string_0 (<{StdInt.-_7}> (_SystemArray.size_20 string_0) 1)) '\n') (True -> <{StdString.%_10}> string_0 (_Tuple2 0 (<{StdInt.-_7}> (_SystemArray.size_20 string_0) 2))) (False -> string_0) 
UtilOptions.parseOption_47 !indentation_0::I !current_1::I !offset_2::I !input_3 = case input_3 (UtilOptions._Input lineNumber_1_0 lookAHead_1_1 file_1_2 -> case (<{StdInt.<_17}> indentation_0 current_1) (True -> let _x_3_0 = UtilOptions.parseOptions_48 current_1 input_3 in <{_Tuple2!3}> (UtilOptions.Option lineNumber_1_0 (UtilOptions._Label "") UtilOptions.Nothing (select _x_3_0::_Tuple2 0)) (select _x_3_0::_Tuple2 1)) (False -> let strippedLookAHead_3_0 = UtilOptions.RemoveNewLine lookAHead_1_1, _x_3_1 = UtilOptions.parseLabelAndOption_46 offset_2 offset_2 (_SystemArray.size_20 strippedLookAHead_3_0) strippedLookAHead_3_0, _x_3_2 = UtilOptions.parseOptions_48 (<{StdInt.+_6}> indentation_0 4) (UtilOptions.NextLine input_3) in <{_Tuple2!3}> (UtilOptions.Option lineNumber_1_0 (select _x_3_1::_Tuple2 0) (select _x_3_1::_Tuple2 1) (select _x_3_2::_Tuple2 0)) (select _x_3_2::_Tuple2 1)) ) 
UtilOptions.parseOptions_48 !indentation_0::I !input_1 = let _x_1_0::I = UtilOptions.parseIndentation_50 input_1, input_1_1 = select _x_1_0::_Tuple3 2, _x_1_2 = UtilOptions.EndOfInput input_1_1, current_1_3 = select _x_1_0::_Tuple3 0 in case (case (select _x_1_2::_Tuple2 0) (True -> True) (False -> <{StdInt.<_17}> current_1_3 indentation_0) ) (True -> <{_Tuple2!2}> _predefined._Nil (select _x_1_2::_Tuple2 1)) (False -> let _x_3_0 = UtilOptions.parseOption_47 indentation_0 current_1_3 (select _x_1_0::_Tuple3 1) (select _x_1_2::_Tuple2 1), _x_3_1 = UtilOptions.parseOptions_48 indentation_0 (select _x_3_0::_Tuple2 1) in <{_Tuple2!2}> (_predefined._Cons (select _x_3_0::_Tuple2 0) (select _x_3_1::_Tuple2 0)) (select _x_3_1::_Tuple2 1)) 
UtilOptions.ReadOptionsFile file_0 = let _x_1_0 = UtilOptions.parseOptions_48 0 (UtilOptions.LookAHead file_0) in _Tuple2 (select _x_1_0::_Tuple2 0) (select (select _x_1_0::_Tuple2 1)::UtilOptions._Input 2)
UtilOptions.EqualPrefix_51::B !prefix_0 !string_1 = <{StdString.==_2}> prefix_0 (<{StdString.%_10}> string_1 (_Tuple2 0 (<{StdInt.-_7}> (_SystemArray.size_20 prefix_0) 1)))
UtilOptions.SkipSpaces_36::I !i_0::I !len_1::I !str_2 = case (case (StdBool.not (<{StdInt.<_17}> i_0 len_1)) (True -> True) (False -> StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 str_2 i_0) ' ')) ) (True -> i_0) (False -> UtilOptions.SkipSpaces_36 (<{StdInt.+_6}> i_0 StdInt.one_11) len_1 str_2) 
UtilOptions.FindColon_35::I !i_0::I !len_1::I !str_2 = case (StdBool.not (<{StdInt.<_17}> i_0 len_1)) (True -> i_0) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 str_2 i_0) ':') (True -> UtilOptions.SkipSpaces_36 (<{StdInt.+_6}> i_0 StdInt.one_11) len_1 str_2) (False -> UtilOptions.FindColon_35 (<{StdInt.+_6}> i_0 StdInt.one_11) len_1 str_2) ) 
UtilOptions.StripNewline_37 !fro_0::I !string_1 = let lmin1_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 string_1) StdInt.one_11 in case (<{StdInt.<_17}> (<{StdInt.-_7}> lmin1_1_0 fro_0) 0) (True -> "") (False -> <{StdString.%_10}> string_1 (_Tuple2 fro_0 (<{StdInt.-_7}> lmin1_1_0 StdInt.one_11))) 
UtilOptions.ConvertToString !str_0 = UtilOptions.StripNewline_37 (UtilOptions.FindColon_35 0 (_SystemArray.size_20 str_0) str_0) str_0
UtilOptions.ReadVersion !file_0 = let _x_1_0 = UtilNewlinesFile.readAnyLine file_0, _x_1_1 = _Tuple2 (select _x_1_0::_Tuple3 1) (select _x_1_0::_Tuple3 2), string_1_2 = select _x_1_1::_Tuple2 0 in case (UtilOptions.EqualPrefix_51 "Version:" string_1_2) (True -> <{_Tuple2!3}> (UtilOptions.ConvertToString string_1_2) (select _x_1_1::_Tuple2 1)) (False -> <{_Tuple2!3}> "" (select _x_1_1::_Tuple2 1)) 
UtilOptions.PutOption value_0 !_x_1 = case _x_1 (UtilOptions._OptionsTableEntry labelName_1_0 _x_1_1 get_1_2 put_1_3 -> case _x_1_1 (UtilOptions._Conversions toValue_2_0 fromValue_2_1 -> <{UtilOptions._c;375;10_77}> (toValue_2_0 (get_1_2 value_0)) labelName_1_0) ) 
<{UtilOptions._c;375;10_77}> !_x_0 labelName_1 = case _x_0 (_Tuple2 _x_1_0 _x_1_1 -> case _x_1_0 (UtilOptions.Nothing -> case _x_1_1 (_predefined._Nil -> UtilOptions.Nothing) ) (_ -> UtilOptions.Just (UtilOptions.Option 0 (UtilOptions._Label labelName_1) _x_1_0 _x_1_1))) 
UtilOptions.putOptions_53 !_vArray_0 a_1 table_2 !tableSize_3::I !i_4::I = case (StdBool.not (<{StdInt.<_17}> i_4 tableSize_3)) (True -> _predefined._Nil) (False -> <{UtilOptions._c;367;17_78}> (UtilOptions.PutOption a_1 (select _vArray_0::<{_SystemArray.Array;}> 3 table_2 i_4)) _vArray_0 a_1 table_2 tableSize_3 i_4) 
<{UtilOptions._c;367;17_78}> !_x_0 _vArray_1 a_2 table_3 tableSize_4::I i_5::I = case _x_0 (UtilOptions.Nothing -> UtilOptions.putOptions_53 _vArray_1 a_2 table_3 tableSize_4 (<{StdInt.+_6}> i_5 1)) (UtilOptions.Just option_1_0 -> _predefined._Cons option_1_0 (UtilOptions.putOptions_53 _vArray_1 a_2 table_3 tableSize_4 (<{StdInt.+_6}> i_5 1))) 
UtilOptions.putOptions_75 a_0 table_1 !tableSize_2::I !i_3::I = case (StdBool.not (<{StdInt.<_17}> i_3 tableSize_2)) (True -> _predefined._Nil) (False -> <{UtilOptions._c;367;17_79}> (UtilOptions.PutOption a_0 (_SystemArray.select_3 table_1 i_3)) a_0 table_1 tableSize_2 i_3) 
<{UtilOptions._c;367;17_79}> !_x_0 a_1 table_2 tableSize_3::I i_4::I = case _x_0 (UtilOptions.Nothing -> UtilOptions.putOptions_75 a_1 table_2 tableSize_3 (<{StdInt.+_6}> i_4 1)) (UtilOptions.Just option_1_0 -> _predefined._Cons option_1_0 (UtilOptions.putOptions_75 a_1 table_2 tableSize_3 (<{StdInt.+_6}> i_4 1))) 
UtilOptions.PutOptions !table_0 a_1 = UtilOptions.putOptions_75 a_1 table_0 (_SystemArray.size_4 table_0) 0
<{UtilOptions.c;351;27_52}> !_vArray_0 labelName_1 !g_i_2::I !g_s_3::I g_a_4 = <{UtilOptions.g_c1;351;42_81}> (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) g_a_4 g_i_2 _vArray_0 labelName_1 g_s_3
<{UtilOptions.g_c1;351;42_81}> !_x_0::B g_a_1 g_i_2::I _vArray_3 labelName_4 g_s_5::I = case _x_0 (True -> <{UtilOptions.g_c2;351;42_80}> (select _vArray_3::<{_SystemArray.Array;}> 6 g_a_1 g_i_2) labelName_4 _vArray_3 g_i_2 g_s_5 g_a_1) (_ -> _predefined._Nil)
<{UtilOptions.g_c2;351;42_80}> !_x_0 !labelName_1 _vArray_2 g_i_3::I g_s_4::I g_a_5 = case _x_0 (_Tuple2 optionEntry_1_0 g_a_1_1 -> case (<{StdString.==_2}> (select optionEntry_1_0::UtilOptions._OptionsTableEntry 0) labelName_1) (True -> _predefined._Cons optionEntry_1_0 (<{UtilOptions.c;351;27_52}> _vArray_2 labelName_1 (<{StdInt.+_6}> g_i_3 StdInt.one_11) g_s_4 g_a_1_1)) ) (_ -> <{UtilOptions.c;351;27_52}> _vArray_2 labelName_1 (<{StdInt.+_6}> g_i_3 StdInt.one_11) g_s_4 g_a_5)
<{UtilOptions.c;351;27_76}> labelName_0 !g_i_1::I !g_s_2::I g_a_3 = <{UtilOptions.g_c1;351;42_83}> (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) g_a_3 g_i_1 labelName_0 g_s_2
<{UtilOptions.g_c1;351;42_83}> !_x_0::B g_a_1 g_i_2::I labelName_3 g_s_4::I = case _x_0 (True -> <{UtilOptions.g_c2;351;42_82}> (_SystemArray.uselect_6 g_a_1 g_i_2) labelName_3 g_i_2 g_s_4 g_a_1) (_ -> _predefined._Nil)
<{UtilOptions.g_c2;351;42_82}> !_x_0 !labelName_1 g_i_2::I g_s_3::I g_a_4 = case _x_0 (_Tuple2 optionEntry_1_0 g_a_1_1 -> case (<{StdString.==_2}> (select optionEntry_1_0::UtilOptions._OptionsTableEntry 0) labelName_1) (True -> _predefined._Cons optionEntry_1_0 (<{UtilOptions.c;351;27_76}> labelName_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_1_1)) ) (_ -> <{UtilOptions.c;351;27_76}> labelName_1 (<{StdInt.+_6}> g_i_2 StdInt.one_11) g_s_3 g_a_4)
UtilOptions.GetOption !table_0 !_x_1 !currentValue_2 = case _x_1 (UtilOptions.Option _x_1_0 _x_1_1 value_1_2 subOptions_1_3 -> case _x_1_1 (UtilOptions._Label labelName_2_0 -> let _x_3_0 = _SystemArray.usize_7 table_0 in <{UtilOptions._c;351;9_84}> (<{UtilOptions.c;351;27_76}> labelName_2_0 0 (<{StdInt.-_7}> (select _x_3_0::_Tuple2 0) 1) (select _x_3_0::_Tuple2 1)) currentValue_2 value_1_2 subOptions_1_3) ) 
<{UtilOptions._c;351;9_84}> !_x_0 currentValue_1 value_2 subOptions_3 = case _x_0 (_predefined._Nil -> currentValue_1) (_predefined._Cons _x_1_0 _x_1_1 -> case _x_1_0 (UtilOptions._OptionsTableEntry labelName_2_0 _x_2_1 get_2_2 put_2_3 -> case _x_2_1 (UtilOptions._Conversions toValue_3_0 fromValue_3_1 -> put_2_3 (fromValue_3_1 value_2 subOptions_3 (get_2_2 currentValue_1)) currentValue_1) ) ) 
UtilOptions.GetOptions !table_0 !_x_1 !value_2 = case _x_1 (_predefined._Nil -> value_2) (_predefined._Cons option_1_0 options_1_1 -> UtilOptions.GetOptions table_0 options_1_1 (UtilOptions.GetOption table_0 option_1_0 value_2)) 
UtilOptions.anon_22 !_vtoString_0 value_1 = _Tuple2 (UtilOptions.Just (UtilOptions._Value (select _vtoString_0::<{StdOverloaded.toString;}> 0 value_1))) _predefined._Nil
UtilOptions.fromValue_23 !_vfromString_0 !_x_1 _x_2 value_3 = case _x_1 (UtilOptions.Nothing -> value_3) (UtilOptions.Just _x_1_0 -> case _x_1_0 (UtilOptions._Value value_2_0 -> select _vfromString_0::<{StdOverloaded.fromString;}> 0 value_2_0) ) 
UtilOptions.Simple !_vtoString_0 !_vfromString_1 = UtilOptions._Conversions (UtilOptions.anon_22 _vtoString_0) (UtilOptions.fromValue_23 _vfromString_1)
UtilOptions.anon_24 !_vtoString_0 value_1 = _Tuple2 (UtilOptions.Just (UtilOptions._Value (select _vtoString_0::<{StdOverloaded.toString;}> 0 value_1))) _predefined._Nil
UtilOptions.fromValue_25 !_vfromString_0 convert_string_1 !_x_2 _x_3 value_4 = case _x_2 (UtilOptions.Nothing -> value_4) (UtilOptions.Just _x_1_0 -> case _x_1_0 (UtilOptions._Value value_2_0 -> select _vfromString_0::<{StdOverloaded.fromString;}> 0 (convert_string_1 value_2_0)) ) 
UtilOptions.SimpleWithStringConversion !_vtoString_0 !_vfromString_1 convert_string_2 = UtilOptions._Conversions (UtilOptions.anon_24 _vtoString_0) (UtilOptions.fromValue_25 _vfromString_1 convert_string_2)
UtilOptions.putList_32 optionsTableEntry_0 !_x_1 = case _x_1 (<{_predefined._!Nil!}> -> _predefined._Nil) (<{_predefined._!Cons!}> h_1_0 t_1_1 -> <{UtilOptions._c;105;17_85}> (UtilOptions.PutOption h_1_0 optionsTableEntry_0) optionsTableEntry_0 t_1_1) 
<{UtilOptions._c;105;17_85}> !_x_0 optionsTableEntry_1 t_2 = case _x_0 (UtilOptions.Nothing -> UtilOptions.putList_32 optionsTableEntry_1 t_2) (UtilOptions.Just option_1_0 -> _predefined._Cons option_1_0 (UtilOptions.putList_32 optionsTableEntry_1 t_2)) 
UtilOptions.anon_30 optionsTableEntry_0 list_1 = _Tuple2 UtilOptions.Nothing (UtilOptions.putList_32 optionsTableEntry_0 list_1)
UtilOptions.GO_34 !_x_0 !_x_1 currentValue_2 = case _x_0 (UtilOptions._OptionsTableEntry labelName_1_0 _x_1_1 get_1_2 put_1_3 -> case _x_1_1 (UtilOptions._Conversions toValue_2_0 fromValue_2_1 -> case _x_1 (UtilOptions.Option _x_3_0 _x_3_1 value_3_2 subOptions_3_3 -> case _x_3_1 (UtilOptions._Label label_4_0 -> case (StdBool.not (<{StdString.==_2}> label_4_0 labelName_1_0)) (True -> currentValue_2) (False -> put_1_3 (fromValue_2_1 value_3_2 subOptions_3_3 (get_1_2 currentValue_2)) currentValue_2) ) ) ) ) 
UtilOptions.getList_33 optionsTableEntry_0 defaultValue_1 !_x_2 = case _x_2 (_predefined._Nil -> <{_predefined._!Nil!}>) (_predefined._Cons h_1_0 t_1_1 -> <{_predefined._!Cons!}> (UtilOptions.GO_34 optionsTableEntry_0 h_1_0 defaultValue_1) (UtilOptions.getList_33 optionsTableEntry_0 defaultValue_1 t_1_1)) 
UtilOptions.anon_31 optionsTableEntry_0 defaultValue_1 _x_2 !table_3 list_4 = UtilOptions.getList_33 optionsTableEntry_0 defaultValue_1 table_3
UtilOptions.List optionsTableEntry_0 defaultValue_1 = UtilOptions._Conversions (UtilOptions.anon_30 optionsTableEntry_0) (UtilOptions.anon_31 optionsTableEntry_0 defaultValue_1)
UtilOptions.anon_28 subOptionTable_0 !is_empty_group_1 value_2 = case (is_empty_group_1 value_2) (True -> _Tuple2 UtilOptions.Nothing _predefined._Nil) (False -> _Tuple2 UtilOptions.Nothing (UtilOptions.PutOptions subOptionTable_0 value_2)) 
UtilOptions.anon_29 !subOptionTable_0 _x_1 !subOptions_2 !value_3 = UtilOptions.GetOptions subOptionTable_0 subOptions_2 value_3
UtilOptions.OptionalGroup subOptionTable_0 is_empty_group_1 = UtilOptions._Conversions (UtilOptions.anon_28 subOptionTable_0 is_empty_group_1) (UtilOptions.anon_29 subOptionTable_0)
UtilOptions.anon_26 subOptionTable_0 value_1 = _Tuple2 UtilOptions.Nothing (UtilOptions.PutOptions subOptionTable_0 value_1)
UtilOptions.anon_27 !subOptionTable_0 _x_1 !subOptions_2 !value_3 = UtilOptions.GetOptions subOptionTable_0 subOptions_2 value_3
UtilOptions.Group subOptionTable_0 = UtilOptions._Conversions (UtilOptions.anon_26 subOptionTable_0) (UtilOptions.anon_27 subOptionTable_0)
<{UtilOptions.TD;Option}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;Conversions}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;OptionsTableEntry}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;OptionsTable}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;Maybe}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;Label}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;Value}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;LineNumber}> _x_0::B = _predefined._Nil
<{UtilOptions.TD;Input}> _x_0::B = _predefined._Nil

:: UtilOptions.Maybe = UtilOptions.Just a1 | UtilOptions.Nothing
:: UtilOptions.Option = UtilOptions.Option a1 a2 a3 a4

|| Converted Records
:: UtilOptions._Conversions = {UtilOptions.toValue, UtilOptions.fromValue}

:: UtilOptions._OptionsTableEntry = {!UtilOptions.labelName, !UtilOptions.conversions, UtilOptions.get, UtilOptions.put}

:: UtilOptions._Label = {!UtilOptions.label}

:: UtilOptions._Value = {!UtilOptions.value}

:: UtilOptions._Input = {!UtilOptions.lineNumber::I, !UtilOptions.lookAHead, !UtilOptions.file}

