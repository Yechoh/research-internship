|| ?module? StdPathname


StdPathname.FindLastChar !c_0::C !s_1 !i_2::I = case (StdBool.not (<{StdInt.<_17}> 0 i_2)) (True -> <{_Tuple2!3}> False 0) (False -> case (<{StdChar.==_18}> c_0 (_SystemArray.select_19 s_1 i_2)) (True -> <{_Tuple2!3}> True i_2) (False -> StdPathname.FindLastChar c_0 s_1 (<{StdInt.-_7}> i_2 StdInt.one_11)) ) 
StdPathname.RemovePath !path_0 = let last_1_0 = <{StdInt.-_7}> (_SystemArray.size_20 path_0) StdInt.one_11, _x_1_1::I = StdPathname.FindLastChar System.FilePath.pathSeparator path_0 last_1_0 in case (select _x_1_1::_Tuple2 0) (True -> <{StdString.%_10}> path_0 (_Tuple2 (<{StdInt.+_6}> (select _x_1_1::_Tuple2 1) StdInt.one_11) last_1_0)) (False -> path_0) 
StdPathname.RemoveSuffix !path_0 = let last_1_0 = <{StdInt.-_7}> (_SystemArray.size_20 path_0) StdInt.one_11, _x_1_1::I = StdPathname.FindLastChar '.' path_0 last_1_0 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> path_0) (False -> let position_3_0::I = select _x_1_1::_Tuple2 1 in case (StdBool.not (StdList.isMember (<{StdClass.Eq;}> (<{StdOverloaded.==;}> <{StdString.==_2}>)) (<{StdString.%_10}> path_0 (_Tuple2 position_3_0 last_1_0)) (_predefined._Cons "." (_predefined._Cons ".dcl" (_predefined._Cons ".icl" (_predefined._Cons ".hs" (_predefined._Cons ".lhs" (_predefined._Cons ".abc" (_predefined._Cons ".o" (_predefined._Cons ".obj" (_predefined._Cons ".obj0" (_predefined._Cons ".obj1" (_predefined._Cons ".obj2" (_predefined._Cons ".xo" (_predefined._Cons ".cxo" (_predefined._Cons ".prj" _predefined._Nil)))))))))))))))) (True -> path_0) (False -> <{StdString.%_10}> path_0 (_Tuple2 0 (<{StdInt.-_7}> position_3_0 StdInt.one_11))) ) 
<{StdPathname.RemoveSuffix`}> !path_0 = let last_1_0 = <{StdInt.-_7}> (_SystemArray.size_20 path_0) StdInt.one_11, _x_1_1::I = StdPathname.FindLastChar '.' path_0 last_1_0 in case (StdBool.not (select _x_1_1::_Tuple2 0)) (True -> path_0) (False -> <{StdString.%_10}> path_0 (_Tuple2 0 (<{StdInt.-_7}> (select _x_1_1::_Tuple2 1) StdInt.one_11))) 
StdPathname.RemoveFilename !path_0 = let _x_1_0 = StdPathname.FindLastChar System.FilePath.pathSeparator path_0 (<{StdInt.-_7}> (_SystemArray.size_20 path_0) StdInt.one_11) in case (select _x_1_0::_Tuple2 0) (True -> <{StdString.%_10}> path_0 (_Tuple2 0 (<{StdInt.-_7}> (select _x_1_0::_Tuple2 1) StdInt.one_11))) (False -> path_0) 
StdPathname.equal_path_prefix::B !prefix_0 !string_1 = let lengthpre_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 prefix_0) StdInt.one_11 in case (StdBool.not (<{StdInt.<_17}> lengthpre_1_0 (<{StdInt.-_7}> (_SystemArray.size_20 string_1) StdInt.one_11))) (True -> False) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_1 (<{StdInt.+_6}> lengthpre_1_0 StdInt.one_11)) System.FilePath.pathSeparator) (True -> <{StdString.==_2}> (<{StdString.%_10}> string_1 (_Tuple2 0 lengthpre_1_0)) prefix_0) (False -> False) ) 
StdPathname.replace_prefix_path !old_prefix_path_0 !new_prefix_path_1 !path_2 = case (<{StdString.==_2}> old_prefix_path_0 path_2) (True -> new_prefix_path_1) (False -> case (StdPathname.equal_path_prefix old_prefix_path_0 path_2) (True -> <{StdString.+++_11}> new_prefix_path_1 (<{StdString.+++_11}> (StdString.toString_6 System.FilePath.pathSeparator) (<{StdString.%_10}> path_2 (_Tuple2 (<{StdInt.+_6}> (_SystemArray.size_20 old_prefix_path_0) StdInt.one_11) (<{StdInt.-_7}> (_SystemArray.size_20 path_2) StdInt.one_11))))) (False -> path_2) ) 
StdPathname.equal_suffix::B !suffix_0 !string_1 = let lengths_1_0::I = <{StdInt.-_7}> (_SystemArray.size_20 string_1) StdInt.one_11, lengthsuf_1_1::I = <{StdInt.-_7}> (_SystemArray.size_20 suffix_0) StdInt.one_11 in case (<{StdInt.<_17}> lengths_1_0 lengthsuf_1_1) (True -> False) (False -> <{StdString.==_2}> (<{StdString.%_10}> string_1 (_Tuple2 (<{StdInt.-_7}> lengths_1_0 lengthsuf_1_1) lengths_1_0)) suffix_0) 
StdPathname.LastChar::I !c_0::C !s_1 !i_2::I = case (StdBool.not (<{StdInt.<_17}> 0 i_2)) (True -> -1) (False -> case (<{StdChar.==_18}> c_0 (_SystemArray.select_19 s_1 i_2)) (True -> i_2) (False -> StdPathname.LastChar c_0 s_1 (<{StdInt.-_7}> i_2 StdInt.one_11)) ) 
StdPathname.IsFullPathname::B !name_0 = StdBool.not (<{StdInt.<_17}> (StdPathname.LastChar System.FilePath.pathSeparator name_0 (<{StdInt.-_7}> (_SystemArray.size_20 name_0) StdInt.one_11)) 0)
StdPathname.MakeFullPathname !path_0 !name_1 = <{StdString.+++_11}> path_0 (<{StdString.+++_11}> (StdString.toString_6 System.FilePath.pathSeparator) name_1)
<{StdPathname.cu;82;36_17}> !_vArray_0 !_vArray_1 c_a_2 !c_i_3::I !g_s_4::I g_a_5 = case (StdBool.not (<{StdInt.<_17}> g_s_4 c_i_3)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = select _vArray_0::<{_SystemArray.Array;}> 6 g_a_5 c_i_3, c_2_2 = select _x_2_1::_Tuple2 0 in <{StdPathname.cu;82;36_17}> _vArray_0 _vArray_1 (select _vArray_1::<{_SystemArray.Array;}> 5 c_a_2 c_i_3 (<{StdPathname._if;82;8_21}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_3 StdInt.one_11) g_s_4 g_a_2_0) (False -> c_a_2) 
<{StdPathname._if;82;8_21}>::C !_x_0::B c_1::C = case _x_0 (True -> System.FilePath.pathSeparator) (_ -> c_1)
<{StdPathname.cu;82;36_19}> !_vArray_0 c_a_1 !c_i_2::I !g_s_3::I g_a_4 = case (StdBool.not (<{StdInt.<_17}> g_s_3 c_i_2)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = _SystemArray.uselect_22 g_a_4 c_i_2, c_2_2 = select _x_2_1::_Tuple2 0 in <{StdPathname.cu;82;36_19}> _vArray_0 (select _vArray_0::<{_SystemArray.Array;}> 5 c_a_1 c_i_2 (<{StdPathname._if;82;8_22}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_2 StdInt.one_11) g_s_3 g_a_2_0) (False -> c_a_1) 
<{StdPathname._if;82;8_22}>::C !_x_0::B c_1::C = case _x_0 (True -> System.FilePath.pathSeparator) (_ -> c_1)
<{StdPathname.cu;82;36_20}> !c_a_0 !c_i_1::I !g_s_2::I g_a_3 = case (StdBool.not (<{StdInt.<_17}> g_s_2 c_i_1)) (True -> let !g_a_2_0 = _predefined._dummyForStrictAlias (select _x_2_1::_Tuple2 1), _x_2_1::C = _SystemArray.uselect_22 g_a_3 c_i_1, c_2_2 = select _x_2_1::_Tuple2 0 in <{StdPathname.cu;82;36_20}> (_SystemArray.update_21 c_a_0 c_i_1 (<{StdPathname._if;82;8_23}> (<{StdChar.==_18}> c_2_2 '.') c_2_2)) (<{StdInt.+_6}> c_i_1 StdInt.one_11) g_s_2 g_a_2_0) (False -> c_a_0) 
<{StdPathname._if;82;8_23}>::C !_x_0::B c_1::C = case _x_0 (True -> System.FilePath.pathSeparator) (_ -> c_1)
StdPathname.replace_dots_by_dir_separators !module_name_0 = let _x_1_0::I = _SystemArray.usize_23 module_name_0, g_s2_1_1 = <{StdInt.-_7}> (select _x_1_0::_Tuple2 0) 1 in <{StdPathname.cu;82;36_20}> (_SystemArray._createArray_16 (<{StdInt.+_6}> g_s2_1_1 StdInt.one_11)) 0 g_s2_1_1 (select _x_1_0::_Tuple2 1)
StdPathname.double_quotes_16 !i_0::I !string_1 = case (StdBool.not (<{StdInt.<_17}> i_0 (_SystemArray.size_20 string_1))) (True -> string_1) (False -> case (<{StdChar.==_18}> (_SystemArray.select_19 string_1 i_0) '\'') (True -> StdPathname.double_quotes_16 (<{StdInt.+_6}> i_0 2) (<{StdString.+++_11}> (<{StdString.%_10}> string_1 (_Tuple2 0 i_0)) (<{StdString.+++_11}> "\'" (<{StdString.%_10}> string_1 (_Tuple2 (<{StdInt.+_6}> i_0 1) (<{StdInt.-_7}> (_SystemArray.size_20 string_1) StdInt.one_11)))))) (False -> StdPathname.double_quotes_16 (<{StdInt.+_6}> i_0 StdInt.one_11) string_1) ) 
StdPathname.mac_quoted_string !string_0 = <{StdString.+++_11}> "\'" (<{StdString.+++_11}> (StdPathname.double_quotes_16 0 string_0) "\'")
StdPathname.win_quoted_string !string_0 = <{StdString.+++_11}> "\"" (<{StdString.+++_11}> string_0 "\"")
StdPathname.quoted_string !s_0 = StdPathname.win_quoted_string s_0
<{StdPathname.TD;Pathname}> _x_0::B = _predefined._Nil


|| Converted Records
